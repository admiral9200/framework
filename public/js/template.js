/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/perfect-scrollbar/css/perfect-scrollbar.css":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--6-1!./node_modules/postcss-loader/src??ref--6-2!./node_modules/perfect-scrollbar/css/perfect-scrollbar.css ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "/*\n * Container style\n */\n.ps {\n  overflow: hidden !important;\n  overflow-anchor: none;\n  -ms-overflow-style: none;\n  touch-action: auto;\n  -ms-touch-action: auto;\n}\n\n/*\n * Scrollbar rail styles\n */\n.ps__rail-x {\n  display: none;\n  opacity: 0;\n  transition: background-color .2s linear, opacity .2s linear;\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\n  height: 15px;\n  /* there must be 'bottom' or 'top' for ps__rail-x */\n  bottom: 0px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n\n.ps__rail-y {\n  display: none;\n  opacity: 0;\n  transition: background-color .2s linear, opacity .2s linear;\n  -webkit-transition: background-color .2s linear, opacity .2s linear;\n  width: 15px;\n  /* there must be 'right' or 'left' for ps__rail-y */\n  right: 0;\n  /* please don't change 'position' */\n  position: absolute;\n}\n\n.ps--active-x > .ps__rail-x,\n.ps--active-y > .ps__rail-y {\n  display: block;\n  background-color: transparent;\n}\n\n.ps:hover > .ps__rail-x,\n.ps:hover > .ps__rail-y,\n.ps--focus > .ps__rail-x,\n.ps--focus > .ps__rail-y,\n.ps--scrolling-x > .ps__rail-x,\n.ps--scrolling-y > .ps__rail-y {\n  opacity: 0.6;\n}\n\n.ps .ps__rail-x:hover,\n.ps .ps__rail-y:hover,\n.ps .ps__rail-x:focus,\n.ps .ps__rail-y:focus,\n.ps .ps__rail-x.ps--clicking,\n.ps .ps__rail-y.ps--clicking {\n  background-color: #eee;\n  opacity: 0.9;\n}\n\n/*\n * Scrollbar thumb styles\n */\n.ps__thumb-x {\n  background-color: #aaa;\n  border-radius: 6px;\n  transition: background-color .2s linear, height .2s ease-in-out;\n  -webkit-transition: background-color .2s linear, height .2s ease-in-out;\n  height: 6px;\n  /* there must be 'bottom' for ps__thumb-x */\n  bottom: 2px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n\n.ps__thumb-y {\n  background-color: #aaa;\n  border-radius: 6px;\n  transition: background-color .2s linear, width .2s ease-in-out;\n  -webkit-transition: background-color .2s linear, width .2s ease-in-out;\n  width: 6px;\n  /* there must be 'right' for ps__thumb-y */\n  right: 2px;\n  /* please don't change 'position' */\n  position: absolute;\n}\n\n.ps__rail-x:hover > .ps__thumb-x,\n.ps__rail-x:focus > .ps__thumb-x,\n.ps__rail-x.ps--clicking .ps__thumb-x {\n  background-color: #999;\n  height: 11px;\n}\n\n.ps__rail-y:hover > .ps__thumb-y,\n.ps__rail-y:focus > .ps__thumb-y,\n.ps__rail-y.ps--clicking .ps__thumb-y {\n  background-color: #999;\n  width: 11px;\n}\n\n/* MS supports */\n@supports (-ms-overflow-style: none) {\n  .ps {\n    overflow: auto !important;\n  }\n}\n\n@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {\n  .ps {\n    overflow: auto !important;\n  }\n}\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/js-cookie/src/js.cookie.js":
/*!*************************************************!*\
  !*** ./node_modules/js-cookie/src/js.cookie.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
;(function (factory) {
	var registeredInModuleLoader;
	if (true) {
		!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		registeredInModuleLoader = true;
	}
	if (true) {
		module.exports = factory();
		registeredInModuleLoader = true;
	}
	if (!registeredInModuleLoader) {
		var OldCookies = window.Cookies;
		var api = window.Cookies = factory();
		api.noConflict = function () {
			window.Cookies = OldCookies;
			return api;
		};
	}
}(function () {
	function extend () {
		var i = 0;
		var result = {};
		for (; i < arguments.length; i++) {
			var attributes = arguments[ i ];
			for (var key in attributes) {
				result[key] = attributes[key];
			}
		}
		return result;
	}

	function decode (s) {
		return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
	}

	function init (converter) {
		function api() {}

		function set (key, value, attributes) {
			if (typeof document === 'undefined') {
				return;
			}

			attributes = extend({
				path: '/'
			}, api.defaults, attributes);

			if (typeof attributes.expires === 'number') {
				attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
			}

			// We're using "expires" because "max-age" is not supported by IE
			attributes.expires = attributes.expires ? attributes.expires.toUTCString() : '';

			try {
				var result = JSON.stringify(value);
				if (/^[\{\[]/.test(result)) {
					value = result;
				}
			} catch (e) {}

			value = converter.write ?
				converter.write(value, key) :
				encodeURIComponent(String(value))
					.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);

			key = encodeURIComponent(String(key))
				.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
				.replace(/[\(\)]/g, escape);

			var stringifiedAttributes = '';
			for (var attributeName in attributes) {
				if (!attributes[attributeName]) {
					continue;
				}
				stringifiedAttributes += '; ' + attributeName;
				if (attributes[attributeName] === true) {
					continue;
				}

				// Considers RFC 6265 section 5.2:
				// ...
				// 3.  If the remaining unparsed-attributes contains a %x3B (";")
				//     character:
				// Consume the characters of the unparsed-attributes up to,
				// not including, the first %x3B (";") character.
				// ...
				stringifiedAttributes += '=' + attributes[attributeName].split(';')[0];
			}

			return (document.cookie = key + '=' + value + stringifiedAttributes);
		}

		function get (key, json) {
			if (typeof document === 'undefined') {
				return;
			}

			var jar = {};
			// To prevent the for loop in the first place assign an empty array
			// in case there are no cookies at all.
			var cookies = document.cookie ? document.cookie.split('; ') : [];
			var i = 0;

			for (; i < cookies.length; i++) {
				var parts = cookies[i].split('=');
				var cookie = parts.slice(1).join('=');

				if (!json && cookie.charAt(0) === '"') {
					cookie = cookie.slice(1, -1);
				}

				try {
					var name = decode(parts[0]);
					cookie = (converter.read || converter)(cookie, name) ||
						decode(cookie);

					if (json) {
						try {
							cookie = JSON.parse(cookie);
						} catch (e) {}
					}

					jar[name] = cookie;

					if (key === name) {
						break;
					}
				} catch (e) {}
			}

			return key ? jar[key] : jar;
		}

		api.set = set;
		api.get = function (key) {
			return get(key, false /* read as raw */);
		};
		api.getJSON = function (key) {
			return get(key, true /* read as json */);
		};
		api.remove = function (key, attributes) {
			set(key, '', extend(attributes, {
				expires: -1
			}));
		};

		api.defaults = {};

		api.withConverter = init;

		return api;
	}

	return init(function () {});
}));


/***/ }),

/***/ "./node_modules/notiflix-react/dist/notiflix-react-aio-1.4.0.js":
/*!**********************************************************************!*\
  !*** ./node_modules/notiflix-react/dist/notiflix-react-aio-1.4.0.js ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*!
* Notiflix React ('https://www.notiflix.com/react')
* Version: 1.4.0
* Author: Furkan MT ('https://github.com/furcan')
* Copyright 2019 Notiflix, MIT Licence ('https://opensource.org/licenses/MIT')
*/

// Internal CSS Codes on
const notiflixInternalCSSCodes = () => {

    const css = `[id^=NotiflixNotifyWrap]{position:fixed;z-index:1001;opacity:1;right:10px;top:10px;width:280px;max-width:96%;box-sizing:border-box;background:0 0}[id^=NotiflixNotifyWrap] *{box-sizing:border-box}[id^=NotiflixNotifyWrap]>div{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-family:Quicksand,sans-serif;width:100%;display:inline-block;position:relative;margin:0 0 10px;border-radius:5px;background:#1e1e1e;color:#fff;padding:10px 12px;font-size:14px;line-height:1.4}[id^=NotiflixNotifyWrap]>div:last-child{margin:0}[id^=NotiflixNotifyWrap]>div.with-callback{cursor:pointer}[id^=NotiflixNotifyWrap] ::selection{background:inherit}[id^=NotiflixNotifyWrap]>div.with-icon{padding:8px}[id^=NotiflixNotifyWrap]>div.with-close{padding:10px 30px 10px 12px}[id^=NotiflixNotifyWrap]>div.with-icon.with-close{padding:6px 30px 6px 6px}[id^=NotiflixNotifyWrap]>div>span.the-message{font-weight:500;font-family:inherit!important;word-break:break-all;word-break:break-word}[id^=NotiflixNotifyWrap]>div>span.click-to-close{cursor:pointer;transition:all .2s ease-in-out;position:absolute;right:8px;top:0;bottom:0;margin:auto;color:inherit;width:16px;height:16px}[id^=NotiflixNotifyWrap]>div>span.click-to-close:hover{transform:rotate(90deg)}[id^=NotiflixNotifyWrap]>div>span.click-to-close>svg{position:absolute;width:16px;height:16px;right:0;top:0}[id^=NotiflixNotifyWrap]>div>.nmi{position:absolute;width:40px;height:40px;font-size:30px;line-height:40px;text-align:center;left:8px;top:0;bottom:0;margin:auto;border-radius:inherit}[id^=NotiflixNotifyWrap]>div>.wfa.shadow{color:inherit;background:rgba(0,0,0,.15);box-shadow:inset 0 0 34px rgba(0,0,0,.2);text-shadow:0 0 10px rgba(0,0,0,.3)}[id^=NotiflixNotifyWrap]>div>span.with-icon{position:relative;float:left;width:calc(100% - 40px);margin:0 0 0 40px;padding:0 0 0 10px;box-sizing:border-box}[id^=NotiflixNotifyWrap]>div.rtl-on>.nmi{left:auto;right:8px}[id^=NotiflixNotifyWrap]>div.rtl-on>span.with-icon{padding:0 10px 0 0;margin:0 40px 0 0}[id^=NotiflixNotifyWrap]>div.rtl-on>span.click-to-close{right:auto;left:8px}[id^=NotiflixNotifyWrap]>div.with-icon.with-close.rtl-on{padding:6px 6px 6px 30px}[id^=NotiflixNotifyWrap]>div.with-close.rtl-on{padding:10px 12px 10px 30px}[id^=NotiflixNotifyOverlay].with-animation,[id^=NotiflixNotifyWrap]>div.with-animation.nx-fade{animation:notify-animation-fade .3s ease-in-out 0s normal;-webkit-animation:notify-animation-fade .3s ease-in-out 0s normal}@keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes notify-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-zoom{animation:notify-animation-zoom .3s ease-in-out 0s normal;-webkit-animation:notify-animation-zoom .3s ease-in-out 0s normal}@keyframes notify-animation-zoom{0%{transform:scale(0)}50%{transform:scale(1.05)}100%{transform:scale(1)}}@-webkit-keyframes notify-animation-zoom{0%{transform:scale(0)}50%{transform:scale(1.05)}100%{transform:scale(1)}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-right{animation:notify-animation-from-right .3s ease-in-out 0s normal;-webkit-animation:notify-animation-from-right .3s ease-in-out 0s normal}@keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}@-webkit-keyframes notify-animation-from-right{0%{right:-300px;opacity:0}50%{right:8px;opacity:1}100%{right:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-left{animation:notify-animation-from-left .3s ease-in-out 0s normal;-webkit-animation:notify-animation-from-left .3s ease-in-out 0s normal}@keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}@-webkit-keyframes notify-animation-from-left{0%{left:-300px;opacity:0}50%{left:8px;opacity:1}100%{left:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-top{animation:notify-animation-from-top .3s ease-in-out 0s normal;-webkit-animation:notify-animation-from-top .3s ease-in-out 0s normal}@keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}@-webkit-keyframes notify-animation-from-top{0%{top:-50px;opacity:0}50%{top:8px;opacity:1}100%{top:0;opacity:1}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-bottom{animation:notify-animation-from-bottom .3s ease-in-out 0s normal;-webkit-animation:notify-animation-from-bottom .3s ease-in-out 0s normal}@keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}@-webkit-keyframes notify-animation-from-bottom{0%{bottom:-50px;opacity:0}50%{bottom:8px;opacity:1}100%{bottom:0;opacity:1}}[id^=NotiflixNotifyOverlay].with-animation.remove,[id^=NotiflixNotifyWrap]>div.with-animation.nx-fade.remove{opacity:0;animation:notify-remove-fade .3s ease-in-out 0s normal;-webkit-animation:notify-remove-fade .3s ease-in-out 0s normal}@keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes notify-remove-fade{0%{opacity:1}100%{opacity:0}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-zoom.remove{transform:scale(0);animation:notify-remove-zoom .3s ease-in-out 0s normal;-webkit-animation:notify-remove-zoom .3s ease-in-out 0s normal}@keyframes notify-remove-zoom{0%{transform:scale(1)}50%{transform:scale(1.05)}100%{transform:scale(0)}}@-webkit-keyframes notify-remove-zoom{0%{transform:scale(1)}50%{transform:scale(1.05)}100%{transform:scale(0)}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-top.remove{opacity:0;animation:notify-remove-to-top .3s ease-in-out 0s normal;-webkit-animation:notify-remove-to-top .3s ease-in-out 0s normal}@keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}@-webkit-keyframes notify-remove-to-top{0%{top:0;opacity:1}50%{top:8px;opacity:1}100%{top:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-right.remove{opacity:0;animation:notify-remove-to-right .3s ease-in-out 0s normal;-webkit-animation:notify-remove-to-right .3s ease-in-out 0s normal}@keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}@-webkit-keyframes notify-remove-to-right{0%{right:0;opacity:1}50%{right:8px;opacity:1}100%{right:-300px;opacity:0}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-bottom.remove{opacity:0;animation:notify-remove-to-bottom .3s ease-in-out 0s normal;-webkit-animation:notify-remove-to-bottom .3s ease-in-out 0s normal}@keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}@-webkit-keyframes notify-remove-to-bottom{0%{bottom:0;opacity:1}50%{bottom:8px;opacity:1}100%{bottom:-50px;opacity:0}}[id^=NotiflixNotifyWrap]>div.with-animation.nx-from-left.remove{opacity:0;animation:notify-remove-to-left .3s ease-in-out 0s normal;-webkit-animation:notify-remove-to-left .3s ease-in-out 0s normal}@keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}@-webkit-keyframes notify-remove-to-left{0%{left:0;opacity:1}50%{left:8px;opacity:1}100%{left:-300px;opacity:0}}[id^=NotiflixReportWrap]{position:fixed;z-index:1000;width:320px;max-width:96%;box-sizing:border-box;font-family:Quicksand,sans-serif;left:0;right:0;top:20px;color:#1e1e1e;border-radius:25px;background:0 0;margin:auto}[id^=NotiflixReportWrap] *{box-sizing:border-box}[id^=NotiflixReportWrap]>div[class*="-overlay"]{width:100%;height:100%;left:0;top:0;background:rgba(255,255,255,.5);position:fixed;z-index:0}[id^=NotiflixReportWrap]>div[class*="-content"]{width:100%;float:left;border-radius:inherit;padding:10px;filter:drop-shadow(0 0 5px rgba(0,0,0,.1));border:1px solid rgba(0,0,0,.03);background:#f8f8f8;position:relative;z-index:1}[id^=NotiflixReportWrap]>div[class*="-content"]>div[class$="-icon"]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:110px;height:110px;display:block;margin:6px auto 12px}[id^=NotiflixReportWrap]>div[class*="-content"]>div[class$="-icon"] svg{min-width:100%;max-width:100%;height:auto}[id^=NotiflixReportWrap]>*>h5{word-break:break-all;word-break:break-word;font-family:inherit!important;font-size:16px;font-weight:500;line-height:1.4;margin:0 0 10px;padding:0 0 10px;border-bottom:1px solid rgba(0,0,0,.1);float:left;width:100%;text-align:center}[id^=NotiflixReportWrap]>*>p{word-break:break-all;word-break:break-word;font-family:inherit!important;font-size:13px;line-height:1.4;float:left;width:100%;padding:0 10px;margin:0 0 10px}[id^=NotiflixReportWrap] a#NXReportButton{word-break:break-all;word-break:break-word;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;font-family:inherit!important;transition:all .25s ease-in-out;cursor:pointer;float:right;padding:7px 17px;background:#00b462;font-size:14px;line-height:1.4;font-weight:500;border-radius:inherit!important;color:#fff}[id^=NotiflixReportWrap] a#NXReportButton:hover{padding:7px 20px}[id^=NotiflixReportWrap].rtl-on a#NXReportButton{float:left}[id^=NotiflixReportWrap]>div[class*="-overlay"].with-animation{animation:report-overlay-animation .3s ease-in-out 0s normal;-webkit-animation:report-overlay-animation .3s ease-in-out 0s normal}@keyframes report-overlay-animation{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes report-overlay-animation{0%{opacity:0}100%{opacity:1}}[id^=NotiflixReportWrap]>div[class*="-content"].with-animation.nx-fade{animation:report-animation-fade .3s ease-in-out 0s normal;-webkit-animation:report-animation-fade .3s ease-in-out 0s normal}@keyframes report-animation-fade{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes report-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixReportWrap]>div[class*="-content"].with-animation.nx-zoom{animation:report-animation-zoom .3s ease-in-out 0s normal;-webkit-animation:report-animation-zoom .3s ease-in-out 0s normal}@keyframes report-animation-zoom{0%{opacity:0;transform:scale(.5)}50%{opacity:1;transform:scale(1.05)}100%{opacity:1;transform:scale(1)}}@-webkit-keyframes report-animation-zoom{0%{opacity:0;transform:scale(.5)}50%{opacity:1;transform:scale(1.05)}100%{opacity:1;transform:scale(1)}}[id^=NotiflixReportWrap].remove>div[class*="-overlay"].with-animation{opacity:0;animation:report-overlay-animation-remove .3s ease-in-out 0s normal;-webkit-animation:report-overlay-animation-remove .3s ease-in-out 0s normal}@keyframes report-overlay-animation-remove{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes report-overlay-animation-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixReportWrap].remove>div[class*="-content"].with-animation.nx-fade{opacity:0;animation:report-animation-fade-remove .3s ease-in-out 0s normal;-webkit-animation:report-animation-fade-remove .3s ease-in-out 0s normal}@keyframes report-animation-fade-remove{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes report-animation-fade-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixReportWrap].remove>div[class*="-content"].with-animation.nx-zoom{opacity:0;animation:report-animation-zoom-remove .3s ease-in-out 0s normal;-webkit-animation:report-animation-zoom-remove .3s ease-in-out 0s normal}@keyframes report-animation-zoom-remove{0%{opacity:1;transform:scale(1)}50%{opacity:.5;transform:scale(1.05)}100%{opacity:0;transform:scale(0)}}@-webkit-keyframes report-animation-zoom-remove{0%{opacity:1;transform:scale(1)}50%{opacity:.5;transform:scale(1.05)}100%{opacity:0;transform:scale(0)}}[id^=NotiflixLoadingWrap]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:fixed;z-index:1004;width:100%;height:100%;left:0;top:0;right:0;bottom:0;margin:auto;text-align:center;box-sizing:border-box;background:rgba(0,0,0,.8);font-family:Quicksand,sans-serif}[id^=NotiflixLoadingWrap] *{box-sizing:border-box}[id^=NotiflixLoadingWrap].click-to-close{cursor:pointer}[id^=NotiflixLoadingWrap]>div[class*="-icon"]{width:60px;height:60px;position:fixed;transition:top .2s ease-in-out;left:0;top:0;right:0;bottom:0;margin:auto}[id^=NotiflixLoadingWrap]>div[class*="-icon"] img,[id^=NotiflixLoadingWrap]>div[class*="-icon"] svg{max-width:unset;max-height:unset;width:100%;height:100%;position:absolute;left:0;top:0}[id^=NotiflixLoadingWrap]>div[class*="-icon"].with-message{top:-42px}[id^=NotiflixLoadingWrap]>p{position:fixed;left:0;right:0;top:42px;bottom:0;margin:auto;font-family:inherit!important;font-weight:500;line-height:1.4;padding:0 10px;width:100%;font-size:15px;height:18px}[id^=NotiflixLoadingWrap].with-animation{animation:loading-animation-fade .3s ease-in-out 0s normal;-webkit-animation:loading-animation-fade .3s ease-in-out 0s normal}@keyframes loading-animation-fade{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes loading-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixLoadingWrap].with-animation.remove{opacity:0;animation:loading-animation-fade-remove .3s ease-in-out 0s normal;-webkit-animation:loading-animation-fade-remove .3s ease-in-out 0s normal}@keyframes loading-animation-fade-remove{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes loading-animation-fade-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixLoadingWrap]>p.new{animation:loading-new-message-fade .3s ease-in-out 0s normal;-webkit-animation:loading-new-message-fade .3s ease-in-out 0s normal}@keyframes loading-new-message-fade{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes loading-new-message-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixConfirmWrap]{position:fixed;z-index:1003;width:280px;max-width:98%;left:10px;right:10px;top:10px;margin:auto;text-align:center;box-sizing:border-box;background:0 0;font-family:Quicksand,sans-serif}[id^=NotiflixConfirmWrap] *{box-sizing:border-box}[id^=NotiflixConfirmWrap]>div[class*="-overlay"]{width:100%;height:100%;left:0;top:0;background:rgba(255,255,255,.5);position:fixed;z-index:0}[id^=NotiflixConfirmWrap]>div[class*="-content"]{width:100%;float:left;border-radius:25px;padding:10px;margin:0;filter:drop-shadow(0 0 5px rgba(0,0,0,.1));background:#f8f8f8;color:#1e1e1e;position:relative;z-index:1}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-head"]{float:left;width:100%}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-head"]>h5{float:left;width:100%;margin:0;padding:0 0 10px;border-bottom:1px solid rgba(0,0,0,.1);color:#00b462;font-family:inherit!important;font-size:16px;line-height:1.4;font-weight:500}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-head"]>p{font-family:inherit!important;margin:15px 0 20px;padding:0 10px;float:left;width:100%;font-size:14px;line-height:1.4;color:inherit}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border-radius:inherit;float:left;width:100%}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]>a{cursor:pointer;font-family:inherit!important;transition:all .25s ease-in-out;float:left;width:48%;padding:9px 5px;border-radius:inherit!important;font-weight:500;font-size:15px;line-height:1.4;color:#f8f8f8}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]>a.confirm-button-ok{margin:0 2% 0 0;background:#00b462}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]>a.confirm-button-cancel{margin:0 0 0 2%;background:#a9a9a9}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]>a.full{margin:0;width:100%}[id^=NotiflixConfirmWrap]>div[class*="-content"]>div[class*="-buttons"]>a:hover{box-shadow:inset 0 -60px 5px -5px rgba(0,0,0,.2)}[id^=NotiflixConfirmWrap].rtl-on>div[class*="-content"]>div[class*="-buttons"],[id^=NotiflixConfirmWrap].rtl-on>div[class*="-content"]>div[class*="-buttons"]>a{transform:rotateY(180deg)}[id^=NotiflixConfirmWrap]>div[class*="-overlay"].with-animation{animation:confirm-overlay-animation .3s ease-in-out 0s normal;-webkit-animation:confirm-overlay-animation .3s ease-in-out 0s normal}@keyframes confirm-overlay-animation{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes confirm-overlay-animation{0%{opacity:0}100%{opacity:1}}[id^=NotiflixConfirmWrap].remove>div[class*="-overlay"].with-animation{opacity:0;animation:confirm-overlay-animation-remove .3s ease-in-out 0s normal;-webkit-animation:confirm-overlay-animation-remove .3s ease-in-out 0s normal}@keyframes confirm-overlay-animation-remove{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes confirm-overlay-animation-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixConfirmWrap].with-animation.nx-fade>div[class*="-content"]{animation:confirm-animation-fade .3s ease-in-out 0s normal;-webkit-animation:confirm-animation-fade .3s ease-in-out 0s normal}@keyframes confirm-animation-fade{0%{opacity:0}100%{opacity:1}}@-webkit-keyframes confirm-animation-fade{0%{opacity:0}100%{opacity:1}}[id^=NotiflixConfirmWrap].with-animation.nx-zoom>div[class*="-content"]{animation:confirm-animation-zoom .3s ease-in-out 0s normal;-webkit-animation:confirm-animation-zoom .3s ease-in-out 0s normal}@keyframes confirm-animation-zoom{0%{opacity:0;transform:scale(.5)}50%{opacity:1;transform:scale(1.05)}100%{opacity:1;transform:scale(1)}}@-webkit-keyframes confirm-animation-zoom{0%{opacity:0;transform:scale(.5)}50%{opacity:1;transform:scale(1.05)}100%{opacity:1;transform:scale(1)}}[id^=NotiflixConfirmWrap].with-animation.nx-fade.remove>div[class*="-content"]{opacity:0;animation:confirm-animation-fade-remove .3s ease-in-out 0s normal;-webkit-animation:confirm-animation-fade-remove .3s ease-in-out 0s normal}@keyframes confirm-animation-fade-remove{0%{opacity:1}100%{opacity:0}}@-webkit-keyframes confirm-animation-fade-remove{0%{opacity:1}100%{opacity:0}}[id^=NotiflixConfirmWrap].with-animation.nx-zoom.remove>div[class*="-content"]{opacity:0;animation:confirm-animation-zoom-remove .3s ease-in-out 0s normal;-webkit-animation:confirm-animation-zoom-remove .3s ease-in-out 0s normal}@keyframes confirm-animation-zoom-remove{0%{opacity:1;transform:scale(1)}50%{opacity:.5;transform:scale(1.05)}100%{opacity:0;transform:scale(0)}}@-webkit-keyframes confirm-animation-zoom-remove{0%{opacity:1;transform:scale(1)}50%{opacity:.5;transform:scale(1.05)}100%{opacity:0;transform:scale(0)}}`;

    return css;
}
// Internal CSS Codes off

// Internal CSS Func on
const notiflixInternalCSS = () => {
    if (!document.getElementById('NotiflixInternalCSS')) {
        const internalCSS = document.createElement('style');
        internalCSS.id = 'NotiflixInternalCSS';
        // internalCSS.type = 'text/css'; // => not necessary
        internalCSS.innerHTML = notiflixInternalCSSCodes();
        document.head.appendChild(internalCSS);
    }
}
// Internal CSS Func off

// Notiflix: Extend on
const extendNotiflix = function () {
    let extended = {};
    let deep = false;
    let i = 0;
    if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {
        deep = arguments[0];
        i++;
    }
    let merge = function (obj) {
        for (let prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                // If property is an object, merge properties
                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {
                    extended[prop] = extendNotiflix(extended[prop], obj[prop]);
                } else {
                    extended[prop] = obj[prop];
                }
            }
        }
    };
    for (; i < arguments.length; i++) {
        merge(arguments[i]);
    }
    return extended;
};
// Notiflix: Extend off

// Notiflix: Plaintext on
const notiflixPlaintext = function (html) {
    const htmlPool = document.createElement('div');
    htmlPool.innerHTML = html;
    return htmlPool.textContent || htmlPool.innerText || '';
}
// Notiflix: Plaintext off

// Notiflix: GoogleFont on
const notiflixGoogleFont = function () {
    if (!document.getElementById('NotiflixQuicksand')) {
        // google fonts dns prefetch on
        const dns = '<link id="NotiflixGoogleDNS" rel="dns-prefetch" href="//fonts.googleapis.com">';
        const dnsRange = document.createRange();
        dnsRange.selectNode(document.head);
        const dnsFragment = dnsRange.createContextualFragment(dns);
        document.head.appendChild(dnsFragment);
        // google fonts dns prefetch off

        // google fonts style on
        const font = '<link id="NotiflixQuicksand" href="https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700&amp;subset=latin-ext" rel="stylesheet" />';
        const fontRange = document.createRange();
        fontRange.selectNode(document.head);
        const fontFragment = fontRange.createContextualFragment(font);
        document.head.appendChild(fontFragment);
        // google fonts style off
    }
}
// Notiflix: GoogleFont off

// Notiflix: Console Error on
const notiflixConsoleError = function (title, message) {
    return console.error('%c ' + title + ' ', 'padding:2px;border-radius:20px;color:#fff;background:#f44336', '\n' + message + '\nVisit documentation page to learn more: https://www.notiflix.com/documentation');
}
// Notiflix: Console Error off


// Notiflix: Notify Default Settings on
let notifySettings = {
    wrapID: 'NotiflixNotifyWrap', // can not customizable
    width: '280px',
    position: 'right-top', // 'right-top' - 'right-bottom' - 'left-top' - 'left-bottom'
    distance: '10px',
    opacity: 1,
    borderRadius: '5px',
    rtl: false,
    timeout: 3000,
    messageMaxLength: 110,
    backOverlay: false,
    backOverlayColor: 'rgba(0,0,0,0.5)',

    ID: 'NotiflixNotify',
    className: 'notiflix-notify',
    zindex: 4001,
    useGoogleFont: true,
    fontFamily: 'Quicksand',
    fontSize: '13px',
    cssAnimation: true,
    cssAnimationDuration: 400,
    cssAnimationStyle: 'fade', // 'fade' - 'zoom' - 'from-right' - 'from-top' - 'from-bottom' - 'from-left'
    closeButton: false,
    useIcon: true,
    useFontAwesome: false,
    fontAwesomeIconStyle: 'basic', // 'basic' - 'shadow'
    fontAwesomeIconSize: '34px',

    plainText: true,

    success: {
        background: '#00b462',
        textColor: '#fff',
        childClassName: 'success',
        notiflixIconColor: 'rgba(0, 0, 0, 0.25)',
        fontAwesomeClassName: 'fas fa-check-circle',
        fontAwesomeIconColor: 'rgba(0, 0, 0, 0.2)',
    },

    failure: {
        background: '#f44336',
        textColor: '#fff',
        childClassName: 'failure',
        notiflixIconColor: 'rgba(0, 0, 0, 0.2)',
        fontAwesomeClassName: 'fas fa-times-circle',
        fontAwesomeIconColor: 'rgba(0, 0, 0, 0.2)',
    },

    warning: {
        background: '#f2bd1d',
        textColor: '#fff',
        childClassName: 'warning',
        notiflixIconColor: 'rgba(0, 0, 0, 0.2)',
        fontAwesomeClassName: 'fas fa-exclamation-circle',
        fontAwesomeIconColor: 'rgba(0, 0, 0, 0.2)',
    },

    info: {
        background: '#00bcd4',
        textColor: '#fff',
        childClassName: 'info',
        notiflixIconColor: 'rgba(0, 0, 0, 0.2)',
        fontAwesomeClassName: 'fas fa-info-circle',
        fontAwesomeIconColor: 'rgba(0, 0, 0, 0.2)',
    },
};
// Notiflix: Notify Default Settings off

// Notiflix: Report Default Settings on
let reportSettings = {
    ID: 'NotiflixReportWrap', // can not customizable
    className: 'notiflix-report',
    width: '320px',
    backgroundColor: '#f8f8f8',
    borderRadius: '25px',
    rtl: false,
    zindex: 4002,
    backOverlay: true,
    backOverlayColor: 'rgba(0, 0, 0, 0.5)',
    useGoogleFont: true,
    fontFamily: 'Quicksand',
    svgSize: '110px',
    plainText: true,
    titleFontSize: '16px',
    titleMaxLength: 34,
    messageFontSize: '13px',
    messageMaxLength: 400,
    buttonFontSize: '14px',
    buttonMaxLength: 34,
    cssAnimation: true,
    cssAnimationDuration: 360,
    cssAnimationStyle: 'fade', // 'fade' - 'zoom'

    success: {
        svgColor: '#00b462',
        titleColor: '#1e1e1e',
        messageColor: '#242424',
        buttonBackground: '#00b462',
        buttonColor: '#fff',
    },

    failure: {
        svgColor: '#f44336',
        titleColor: '#1e1e1e',
        messageColor: '#242424',
        buttonBackground: '#f44336',
        buttonColor: '#fff',
    },

    warning: {
        svgColor: '#f2bd1d',
        titleColor: '#1e1e1e',
        messageColor: '#242424',
        buttonBackground: '#f2bd1d',
        buttonColor: '#fff',
    },

    info: {
        svgColor: '#00bcd4',
        titleColor: '#1e1e1e',
        messageColor: '#242424',
        buttonBackground: '#00bcd4',
        buttonColor: '#fff',
    },

};
// Notiflix: Report Default Settings off

// Notiflix: Confirm Default Settings on
let confirmSettings = {
    ID: 'NotiflixConfirmWrap', // can not customizable
    className: 'notiflix-confirm',
    width: '280px',
    zindex: 4003,
    position: 'center', // 'center' - 'center-top' -  'right-top' - 'right-bottom' - 'left-top' - 'left-bottom'
    distance: '10px',
    backgroundColor: '#f8f8f8',
    borderRadius: '25px',
    backOverlay: true,
    backOverlayColor: 'rgba(0,0,0,0.5)',
    rtl: false,
    useGoogleFont: true,
    fontFamily: 'Quicksand',
    cssAnimation: true,
    cssAnimationStyle: 'fade', // 'zoom' - 'fade'
    cssAnimationDuration: 300,

    titleColor: '#00b462',
    titleFontSize: '16px',
    titleMaxLength: 34,

    messageColor: '#1e1e1e',
    messageFontSize: '14px',
    messageMaxLength: 110,

    buttonsFontSize: '15px',
    buttonsMaxLength: 34,
    okButtonColor: '#f8f8f8',
    okButtonBackground: '#00b462',
    cancelButtonColor: '#f8f8f8',
    cancelButtonBackground: '#a9a9a9',

    plainText: true,
}
// Notiflix: Confirm Default Settings off

// Notiflix: Loading Default Settings on
let loadingSettings = {
    ID: 'NotiflixLoadingWrap', // can not customizable
    className: 'notiflix-loading',
    zindex: 4000,
    backgroundColor: 'rgba(0,0,0,0.8)',
    rtl: false,
    useGoogleFont: true,
    fontFamily: 'Quicksand',
    cssAnimation: true,
    cssAnimationDuration: 400,
    clickToClose: false,
    customSvgUrl: null,
    svgSize: '80px',
    svgColor: '#00b462',
    messageID: 'NotiflixLoadingMessage',
    messageFontSize: '15px',
    messageMaxLength: 34,
    messageColor: '#dcdcdc',
};
// Notiflix: Loading Default Settings off

// Notiflix: NX React on
let newNotifySettings;
let newReportSettings;
let newConfirmSettings;
let newLoadingSettings;
const Notiflix = {

    // Notify on
    Notify: {

        // Init
        Init: function (userNotifyOpt) {
            newNotifySettings = extendNotiflix(true, notifySettings, userNotifyOpt);

            // use GoogleFonts if "Quicksand" on
            if (newNotifySettings.useGoogleFont && newNotifySettings.fontFamily === 'Quicksand') {
                notiflixGoogleFont();
            }
            // use GoogleFonts if "Quicksand" off

            // add css codes on
            notiflixInternalCSS();
            // add css codes off
        },

        // Merge First Init
        Merge: function (userNotifyExtend) {

            if (newNotifySettings) { // if initialized already
                newNotifySettings = extendNotiflix(true, newNotifySettings, userNotifyExtend);
            } else { // error
                notiflixConsoleError('Notiflix Error', 'You have to initialize the Notify module before call Merge function.');
                return;
            }
        },

        // Display Notification: Success
        Success: function (message, callback) {

            // if not initialized pretend like init
            if (!newNotifySettings) {
                Notiflix.Notify.Init({});
            }

            if (!callback) {
                callback = undefined;
            }

            const theType = newNotifySettings.success;
            NotiflixNotify(message, callback, theType, 'Success');
        },

        // Display Notification: Failure
        Failure: function (message, callback) {

            // if not initialized pretend like init
            if (!newNotifySettings) {
                Notiflix.Notify.Init({});
            }

            if (!callback) {
                callback = undefined;
            }

            const theType = newNotifySettings.failure;
            NotiflixNotify(message, callback, theType, 'Failure');

        },

        // Display Notification: Warning
        Warning: function (message, callback) {

            // if not initialized pretend like init
            if (!newNotifySettings) {
                Notiflix.Notify.Init({});
            }

            if (!callback) {
                callback = undefined;
            }

            const theType = newNotifySettings.warning;
            NotiflixNotify(message, callback, theType, 'Warning');

        },

        // Display Notification: Info
        Info: function (message, callback) {

            // if not initialized pretend like init
            if (!newNotifySettings) {
                Notiflix.Notify.Init({});
            }

            if (!callback) {
                callback = undefined;
            }

            const theType = newNotifySettings.info;
            NotiflixNotify(message, callback, theType, 'Info');

        },

    },
    // Notify off

    // Report on
    Report: {

        // Init
        Init: function (userReportOpt) {
            newReportSettings = extendNotiflix(true, reportSettings, userReportOpt);

            // use GoogleFonts if "Quicksand" on
            if (newReportSettings.useGoogleFont && newReportSettings.fontFamily === 'Quicksand') {
                notiflixGoogleFont();
            }
            // use GoogleFonts if "Quicksand" off

            // add css codes on
            notiflixInternalCSS();
            // add css codes off
        },

        // Merge First Init
        Merge: function (userReportExtend) {

            if (newReportSettings) { // if initialized already
                newReportSettings = extendNotiflix(true, newReportSettings, userReportExtend);
            } else { // error
                notiflixConsoleError('Notiflix Error', 'You have to initialize the Report module before call Merge function.');
                return;
            }
        },

        // Display Report: Success
        Success: function (title, message, buttonText, buttonCallback) {

            // if not initialized pretend like init
            if (!newReportSettings) {
                Notiflix.Report.Init({});
            }

            if (arguments.length > 4) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (arguments[0] === undefined || arguments[0].length <= 0) { // title
                arguments[0] = 'Notiflix Success';
            }

            if (arguments[1] === undefined || arguments[1].length <= 0) { // message
                arguments[1] = `"Do not try to become a person of success but try to become a person of value." <br><br>- Albert Einstein`;
            }

            if (arguments[2] === undefined || arguments[2].length <= 0) { // buttonText
                arguments[2] = 'Okay';
            }

            if (arguments[3] === undefined) { // buttonCallback
                arguments[3] = undefined;
            }

            const theType = newReportSettings.success;
            NotiflixReport(arguments[0], arguments[1], arguments[2], arguments[3], theType, 'success');
        },

        // Display Report: Failure
        Failure: function (title, message, buttonText, buttonCallback) {

            // if not initialized pretend like init
            if (!newReportSettings) {
                Notiflix.Report.Init({});
            }

            if (arguments.length > 4) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (arguments[0] === undefined || arguments[0].length <= 0) { // title
                arguments[0] = 'Notiflix Failure';
            }

            if (arguments[1] === undefined || arguments[1].length <= 0) { // message
                arguments[1] = `"Failure is simply the opportunity to begin again, this time more intelligently." <br><br>- Henry Ford`;
            }

            if (arguments[2] === undefined || arguments[2].length <= 0) { // buttonText
                arguments[2] = 'Okay';
            }

            if (arguments[3] === undefined) { // buttonCallback
                arguments[3] = undefined;
            }

            const theType = newReportSettings.failure;
            NotiflixReport(arguments[0], arguments[1], arguments[2], arguments[3], theType, 'failure');

        },

        // Display Report: Warning
        Warning: function (title, message, buttonText, buttonCallback) {

            // if not initialized pretend like init
            if (!newReportSettings) {
                Notiflix.Report.Init({});
            }

            if (arguments.length > 4) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (arguments[0] === undefined || arguments[0].length <= 0) { // title
                arguments[0] = 'Notiflix Warning';
            }

            if (arguments[1] === undefined || arguments[1].length <= 0) { // message
                arguments[1] = `"The peoples who want to live comfortably without producing and fatigue; they are doomed to lose their dignity, then liberty, and then independence and destiny." <br><br>- Mustafa Kemal Ataturk`;
            }

            if (arguments[2] === undefined || arguments[2].length <= 0) { // buttonText
                arguments[2] = 'Okay';
            }

            if (arguments[3] === undefined) { // buttonCallback
                arguments[3] = undefined;
            }

            const theType = newReportSettings.warning;
            NotiflixReport(arguments[0], arguments[1], arguments[2], arguments[3], theType, 'warning');

        },

        // Display Report: Info
        Info: function (title, message, buttonText, buttonCallback) {

            // if not initialized pretend like init
            if (!newReportSettings) {
                Notiflix.Report.Init({});
            }

            if (arguments.length > 4) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (arguments[0] === undefined || arguments[0].length <= 0) { // title
                arguments[0] = 'Notiflix Info';
            }

            if (arguments[1] === undefined || arguments[1].length <= 0) { // message
                arguments[1] = `"Knowledge rests not upon truth alone, but upon error also." <br><br>- Carl Gustav Jung`;
            }

            if (arguments[2] === undefined || arguments[2].length <= 0) { // buttonText
                arguments[2] = 'Okay';
            }

            if (arguments[3] === undefined) { // buttonCallback
                arguments[3] = undefined;
            }

            const theType = newReportSettings.info;
            NotiflixReport(arguments[0], arguments[1], arguments[2], arguments[3], theType, 'info');
        },

    },
    // Report off

    // Confirm on
    Confirm: {

        // Init
        Init: function (userConfirmOpt) {
            newConfirmSettings = extendNotiflix(true, confirmSettings, userConfirmOpt);

            // use GoogleFonts if "Quicksand" on
            if (newConfirmSettings.useGoogleFont && newConfirmSettings.fontFamily === 'Quicksand') {
                notiflixGoogleFont();
            }
            // use GoogleFonts if "Quicksand" off

            // add css codes on
            notiflixInternalCSS();
            // add css codes off
        },

        // Merge First Init
        Merge: function (userConfirmExtend) {

            if (newConfirmSettings) { // if initialized already
                newConfirmSettings = extendNotiflix(true, newConfirmSettings, userConfirmExtend);
            } else { // error
                notiflixConsoleError('Notiflix Error', 'You have to initialize the Confirm module before call Merge function.');
                return;
            }
        },

        // Display Confirm: Show
        Show: function (title, message, okText, cancelText, okCallback, cancelCallback) {

            // if not initialized pretend like init
            if (!newConfirmSettings) {
                Notiflix.Confirm.Init({});
            }

            if (arguments.length > 6) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (arguments[0] === undefined || arguments[0].length <= 0) { // title
                arguments[0] = 'Notiflix Confirm';
            }

            if (arguments[1] === undefined || arguments[1].length <= 0) { // message
                arguments[1] = 'Do you agree with me?';
            }

            if (arguments[2] === undefined || arguments[2].length <= 0) { // ok buttonText
                arguments[2] = 'Yes';
            }

            if (arguments[3] === undefined || arguments[3].length <= 0) { // cancel buttonText
                arguments[3] = 'No';
            }

            if (arguments[4] === undefined) { // okCallback
                arguments[4] = undefined;
            }

            if (arguments[5] === undefined) { // cancelCallback
                arguments[5] = undefined;
            }

            NotiflixConfirm(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
        },
    },
    // Confirm off

    // Loading on
    Loading: {

        // Init
        Init: function (userLoadingOpt) {
            newLoadingSettings = extendNotiflix(true, loadingSettings, userLoadingOpt);

            // use GoogleFonts if "Quicksand" on
            if (newLoadingSettings.useGoogleFont && newLoadingSettings.fontFamily === 'Quicksand') {
                notiflixGoogleFont();
            }
            // use GoogleFonts if "Quicksand" off

            // add css codes on
            notiflixInternalCSS();
            // add css codes off
        },

        // Merge First Init
        Merge: function (userLoadingExtend) {

            if (newLoadingSettings) { // if initialized already
                newLoadingSettings = extendNotiflix(true, newLoadingSettings, userLoadingExtend);
            } else { // error
                notiflixConsoleError('Notiflix Error', 'You have to initialize the Loading module before call Merge function.');
                return;
            }
        },

        // Display Loading: Standard
        Standard: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'standard', true, 0); // true = display

        },

        // Display Loading: Hourglass
        Hourglass: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'hourglass', true, 0); // true = display

        },

        // Display Loading: Circle
        Circle: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'circle', true, 0); // true = display

        },

        // Display Loading: Arrows
        Arrows: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'arrows', true, 0); // true = display

        },

        // Display Loading: Dots
        Dots: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'dots', true, 0); // true = display

        },

        // Display Loading: Pulse
        Pulse: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'pulse', true, 0); // true = display

        },

        // Display Loading: Custom
        Custom: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'custom', true, 0); // true = display

        },

        // Display Loading: Notiflix
        Notiflix: function (message) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!message) {
                message = '';
            }

            NotiflixLoading(message, 'notiflix', true, 0); // true = display

        },

        // Remove Loading
        Remove: function (theDelay) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!theDelay) {
                theDelay = 0;
            }

            NotiflixLoading(false, false, false, theDelay); // false = Remove
        },

        // Change The Message
        Change: function (newMessage) {

            // if not initialized pretend like init
            if (!newLoadingSettings) {
                Notiflix.Loading.Init({});
            }

            if (arguments.length > 1) { // More parameters than allowed
                notiflixConsoleError('Notiflix Error', 'More parameters than allowed.');
                return;
            }

            if (!newMessage) {
                newMessage = '';
            }

            NotiflixLoadingChange(newMessage);
        },

    },
    // Loading off

}
/* harmony default export */ __webpack_exports__["default"] = (Notiflix);
// Notiflix: NX React off


// Notiflix: Notify Single on
let notiflixNotifyCount = 0;
const NotiflixNotify = function (message, callback, theType, staticType) {

    if (arguments !== undefined && arguments.length === 4) {

        // no message on
        if (!message) {
            message = `Notiflix ${staticType}`;
        }
        // no message off

        // FontAwesome if Shadow on
        if (newNotifySettings.fontAwesomeIconStyle === 'shadow') {
            theType.fontAwesomeIconColor = theType.background;
        }
        // FontAwesome if Shadow off

        // if plainText true = HTML tags not allowed on      
        if (newNotifySettings.plainText) {
            message = notiflixPlaintext(message); // message plain text
        }
        // if plainText true = HTML tags not allowed off

        // if plainText false but the message length more than messageMaxLength = HTML tags error on
        if (!newNotifySettings.plainText && message.length > newNotifySettings.messageMaxLength) {
            Notiflix.Notify.Merge({ closeButton: true, });
            message = `<b>HTML Tags Error:</b> Your content length is more than "messageMaxLength" option.`; // message html error
        }
        // if plainText false but the message length more than messageMaxLength = HTML tags error off


        if (message.length > newNotifySettings.messageMaxLength) {
            message = `${message.substring(0, newNotifySettings.messageMaxLength)}...`;
        }

        // notify counter on
        notiflixNotifyCount++;
        // notify counter off

        // if cssAnimaion false -> duration on
        if (!newNotifySettings.cssAnimation) {
            newNotifySettings.cssAnimationDuration = 0;
        }
        // if cssAnimaion false -> duration off

        // notify wrap on
        let docBody = document.body;

        let ntflxNotifyWrap = document.createElement('div');
        ntflxNotifyWrap.id = notifySettings.wrapID;
        ntflxNotifyWrap.style.width = newNotifySettings.width;
        ntflxNotifyWrap.style.zIndex = newNotifySettings.zindex;
        ntflxNotifyWrap.style.opacity = newNotifySettings.opacity;

        // wrap position on
        if (newNotifySettings.position === 'right-bottom') {

            ntflxNotifyWrap.style.right = newNotifySettings.distance;
            ntflxNotifyWrap.style.bottom = newNotifySettings.distance;
            ntflxNotifyWrap.style.top = 'auto';
            ntflxNotifyWrap.style.left = 'auto';

        } else if (newNotifySettings.position === 'left-top') {

            ntflxNotifyWrap.style.left = newNotifySettings.distance;
            ntflxNotifyWrap.style.top = newNotifySettings.distance;
            ntflxNotifyWrap.style.right = 'auto';
            ntflxNotifyWrap.style.bottom = 'auto';

        } else if (newNotifySettings.position === 'left-bottom') {

            ntflxNotifyWrap.style.left = newNotifySettings.distance;
            ntflxNotifyWrap.style.bottom = newNotifySettings.distance;
            ntflxNotifyWrap.style.top = 'auto';
            ntflxNotifyWrap.style.right = 'auto';

        } else { // 'right-top' or else

            ntflxNotifyWrap.style.right = newNotifySettings.distance;
            ntflxNotifyWrap.style.top = newNotifySettings.distance;
            ntflxNotifyWrap.style.left = 'auto';
            ntflxNotifyWrap.style.bottom = 'auto';
        }
        // wrap position off

        // if background overlay true on
        let notifyOverlay;
        if (newNotifySettings.backOverlay) {

            notifyOverlay = document.createElement('div');
            notifyOverlay.id = `${newNotifySettings.ID}Overlay`;
            notifyOverlay.style.width = '100%';
            notifyOverlay.style.height = '100%';
            notifyOverlay.style.position = 'fixed';
            notifyOverlay.style.zIndex = newNotifySettings.zindex;
            notifyOverlay.style.left = 0;
            notifyOverlay.style.top = 0;
            notifyOverlay.style.right = 0;
            notifyOverlay.style.bottom = 0;
            notifyOverlay.style.background = newNotifySettings.backOverlayColor;
            notifyOverlay.className = (newNotifySettings.cssAnimation ? 'with-animation' : '');
            notifyOverlay.style.animationDuration = (newNotifySettings.cssAnimation) ? `${newNotifySettings.cssAnimationDuration}ms` : '';

            if (!document.getElementById(notifyOverlay.id)) {
                docBody.appendChild(notifyOverlay);
            }

        }
        // if background overlay true off

        if (!document.getElementById(ntflxNotifyWrap.id)) {
            docBody.appendChild(ntflxNotifyWrap);
        }
        // notify wrap off


        // notify content on
        let ntflxNotify = document.createElement('div');
        ntflxNotify.id = `${newNotifySettings.ID}-${notiflixNotifyCount}`;
        ntflxNotify.className = `${newNotifySettings.className} ${theType.childClassName} ${(newNotifySettings.cssAnimation ? 'with-animation' : '')} ${(newNotifySettings.useIcon ? 'with-icon' : '')} nx-${newNotifySettings.cssAnimationStyle} ${(newNotifySettings.closeButton && !callback ? 'with-close' : '')} ${(callback ? 'with-callback' : '')}`;
        ntflxNotify.style.fontSize = newNotifySettings.fontSize;
        ntflxNotify.style.color = theType.textColor;
        ntflxNotify.style.background = theType.background;
        ntflxNotify.style.borderRadius = newNotifySettings.borderRadius;

        // rtl on
        if (newNotifySettings.rtl) {
            ntflxNotify.setAttribute('dir', 'rtl');
            ntflxNotify.classList.add('rtl-on');
        }
        // rtl off

        // font-family on
        ntflxNotify.style.fontFamily = `"${newNotifySettings.fontFamily}", sans-serif`;
        // font-family off

        // use css animation on
        if (newNotifySettings.cssAnimation) {
            ntflxNotify.style.animationDuration = `${newNotifySettings.cssAnimationDuration}ms`;
        }
        // use css animation off

        // click to close on
        let closeButtonHTML = '';
        if (newNotifySettings.closeButton && !callback) {
            closeButtonHTML = `<span class="click-to-close"><svg class="clck2cls" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="20px" height="20px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"viewBox="0 0 20 20"xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">.click2close{fill:${theType.notiflixIconColor};}</style></defs><g><path class="click2close" d="M0.38 2.19l7.8 7.81 -7.8 7.81c-0.51,0.5 -0.51,1.31 -0.01,1.81 0.25,0.25 0.57,0.38 0.91,0.38 0.34,0 0.67,-0.14 0.91,-0.38l7.81 -7.81 7.81 7.81c0.24,0.24 0.57,0.38 0.91,0.38 0.34,0 0.66,-0.14 0.9,-0.38 0.51,-0.5 0.51,-1.31 0,-1.81l-7.81 -7.81 7.81 -7.81c0.51,-0.5 0.51,-1.31 0,-1.82 -0.5,-0.5 -1.31,-0.5 -1.81,0l-7.81 7.81 -7.81 -7.81c-0.5,-0.5 -1.31,-0.5 -1.81,0 -0.51,0.51 -0.51,1.32 0,1.82z"/></g></svg></span>`;
        }
        // click to close off

        // use icon on
        if (newNotifySettings.useIcon) {

            if (newNotifySettings.useFontAwesome) { // use font awesome

                ntflxNotify.innerHTML = `<i style="color:${theType.fontAwesomeIconColor}; font-size:${newNotifySettings.fontAwesomeIconSize};" class="nmi wfa ${theType.fontAwesomeClassName} ${(newNotifySettings.fontAwesomeIconStyle === 'shadow' ? 'shadow' : 'basic')}"></i><span class="the-message with-icon">${message}</span>${(newNotifySettings.closeButton ? closeButtonHTML : '')}`;

            } else { // use notiflix icon

                let svgIcon = '';

                if (staticType === 'Success') {  // success

                    svgIcon = `<svg class="nmi" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="40px" height="40px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"viewBox="0 0 40 40"xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">#Notiflix-Icon-Success{fill:${theType.notiflixIconColor};}</style></defs><g><path id="Notiflix-Icon-Success" class="fil0" d="M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-2.4 -13.29l11.52 -12.96c0.37,-0.41 1.01,-0.45 1.42,-0.08 0.42,0.37 0.46,1 0.09,1.42l-12.16 13.67c-0.19,0.22 -0.46,0.34 -0.75,0.34 -0.23,0 -0.45,-0.07 -0.63,-0.22l-7.6 -6.07c-0.43,-0.35 -0.5,-0.99 -0.16,-1.42 0.35,-0.43 0.99,-0.5 1.42,-0.16l6.85 5.48z"/></g></svg>`;

                } else if (staticType === 'Failure') { // failure

                    svgIcon = `<svg class="nmi" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="40px" height="40px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"viewBox="0 0 40 40"xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">#Notiflix-Icon-Failure{fill:${theType.notiflixIconColor};}</style></defs><g><path id="Notiflix-Icon-Failure" class="fil0" d="M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm1.42 -17.98l6.13 6.12c0.39,0.4 0.39,1.04 0,1.43 -0.19,0.19 -0.45,0.29 -0.71,0.29 -0.27,0 -0.53,-0.1 -0.72,-0.29l-6.12 -6.13 -6.13 6.13c-0.19,0.19 -0.44,0.29 -0.71,0.29 -0.27,0 -0.52,-0.1 -0.71,-0.29 -0.39,-0.39 -0.39,-1.03 0,-1.43l6.13 -6.12 -6.13 -6.13c-0.39,-0.39 -0.39,-1.03 0,-1.42 0.39,-0.39 1.03,-0.39 1.42,0l6.13 6.12 6.12 -6.12c0.4,-0.39 1.04,-0.39 1.43,0 0.39,0.39 0.39,1.03 0,1.42l-6.13 6.13z"/></g></svg>`;

                } else if (staticType === 'Warning') { // warning

                    svgIcon = `<svg class="nmi" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="40px" height="40px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"viewBox="0 0 40 40"xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">#Notiflix-Icon-Warning{fill:${theType.notiflixIconColor};}</style></defs><g><path id="Notiflix-Icon-Warning" class="fil0" d="M21.91 3.48l17.8 30.89c0.84,1.46 -0.23,3.25 -1.91,3.25l-35.6 0c-1.68,0 -2.75,-1.79 -1.91,-3.25l17.8 -30.89c0.85,-1.47 2.97,-1.47 3.82,0zm16.15 31.84l-17.8 -30.89c-0.11,-0.2 -0.41,-0.2 -0.52,0l-17.8 30.89c-0.12,0.2 0.05,0.4 0.26,0.4l35.6 0c0.21,0 0.38,-0.2 0.26,-0.4zm-19.01 -4.12l0 -1.05c0,-0.53 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.42 0.95,0.95l0 1.05c0,0.53 -0.42,0.95 -0.95,0.95 -0.53,0 -0.95,-0.42 -0.95,-0.95zm0 -4.66l0 -13.39c0,-0.52 0.42,-0.95 0.95,-0.95 0.53,0 0.95,0.43 0.95,0.95l0 13.39c0,0.53 -0.42,0.96 -0.95,0.96 -0.53,0 -0.95,-0.43 -0.95,-0.96z"/></g></svg>`;

                } else if (staticType === 'Info') { // info

                    svgIcon = `<svg class="nmi" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="40px" height="40px" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd"viewBox="0 0 40 40"xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">#Notiflix-Icon-Info{fill:${theType.notiflixIconColor};}</style></defs><g><path id="Notiflix-Icon-Info" class="fil0" d="M20 0c11.03,0 20,8.97 20,20 0,11.03 -8.97,20 -20,20 -11.03,0 -20,-8.97 -20,-20 0,-11.03 8.97,-20 20,-20zm0 37.98c9.92,0 17.98,-8.06 17.98,-17.98 0,-9.92 -8.06,-17.98 -17.98,-17.98 -9.92,0 -17.98,8.06 -17.98,17.98 0,9.92 8.06,17.98 17.98,17.98zm-0.99 -23.3c0,-0.54 0.44,-0.98 0.99,-0.98 0.55,0 0.99,0.44 0.99,0.98l0 15.86c0,0.55 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.44 -0.99,-0.99l0 -15.86zm0 -5.22c0,-0.55 0.44,-0.99 0.99,-0.99 0.55,0 0.99,0.44 0.99,0.99l0 1.09c0,0.54 -0.44,0.99 -0.99,0.99 -0.55,0 -0.99,-0.45 -0.99,-0.99l0 -1.09z"/></g></svg>`;

                }

                ntflxNotify.innerHTML = `${svgIcon}<span class="the-message with-icon">${message}</span>${(newNotifySettings.closeButton ? closeButtonHTML : '')}`;

            }

        } else { // without icon

            ntflxNotify.innerHTML = `<span class="the-message">${message}</span> ${(newNotifySettings.closeButton ? closeButtonHTML : '')}`;
        }
        // use icon off
        // notify content off


        // notify append or prepend on
        const notifyWrapElement = document.getElementById(ntflxNotifyWrap.id);
        if (newNotifySettings.position === 'left-bottom' || newNotifySettings.position === 'right-bottom') { // the new one will be first

            notifyWrapElement.insertBefore(ntflxNotify, notifyWrapElement.firstChild);
        } else {

            notifyWrapElement.appendChild(ntflxNotify);
        }

        if (newNotifySettings.useIcon) { // if useIcon, dynamically vertical align the contents

            let messageIcon = document.getElementById(ntflxNotify.id).querySelectorAll('.nmi')[0];
            let messageIconH = 40;

            if (newNotifySettings.useFontAwesome) { // if font awesome

                messageIconH = Math.round(parseInt(messageIcon.offsetHeight));

            } else { // if notiflix SVG

                let SvgBBox = messageIcon.getBBox();
                messageIconH = Math.round(parseInt(SvgBBox.width));

            }

            let messageText = document.getElementById(ntflxNotify.id).querySelectorAll('span')[0];
            let messageTextH = Math.round(messageText.offsetHeight);

            if (messageTextH <= messageIconH) {
                let paddingVal = `${parseInt((messageIconH - messageTextH) / 2).toString()}px`;
                messageText.style.paddingTop = paddingVal;
                messageText.style.paddingBottom = paddingVal;
            }

        }
        // notify append or prepend off


        // remove by timeout or click on
        if (document.getElementById(ntflxNotify.id)) {

            // set elements on
            let removeDiv = document.getElementById(ntflxNotify.id);
            let removeWrap = document.getElementById(ntflxNotifyWrap.id);
            let removeOverlay;
            if (newNotifySettings.backOverlay) {
                removeOverlay = document.getElementById(notifyOverlay.id);
            }
            // set elements on

            // timeout vars on
            let timeoutAddClass;
            let timeoutRemove;
            // timeout vars off

            // timeout if click to close false and callback undefined on
            if (!newNotifySettings.closeButton && !callback) {
                timeoutAddClass = setTimeout(function () {

                    removeDiv.classList.add('remove');

                    if (newNotifySettings.backOverlay && removeWrap.childElementCount <= 0) {
                        removeOverlay.classList.add('remove');
                    }

                }, newNotifySettings.timeout);

                timeoutRemove = setTimeout(function () {
                    removeDiv.parentNode.removeChild(removeDiv);
                    if (removeWrap.childElementCount <= 0) { // if childs count === 0 remove wrap
                        removeWrap.parentNode.removeChild(removeWrap);

                        if (newNotifySettings.backOverlay) {
                            removeOverlay.parentNode.removeChild(removeOverlay);
                        }
                    }
                }, newNotifySettings.timeout + newNotifySettings.cssAnimationDuration);
            }
            // timeout if click to close false and callback undefined off

            // if click to close on            
            if (newNotifySettings.closeButton && !callback) {

                let closeButtonElm = document.getElementById(ntflxNotify.id).querySelectorAll('span.click-to-close')[0];

                closeButtonElm.addEventListener('click', function () {

                    removeDiv.classList.add('remove');
                    clearTimeout(timeoutAddClass);

                    if (newNotifySettings.backOverlay && removeWrap.childElementCount <= 1) { // if last child - addClass Remove to Overlay
                        removeOverlay.classList.add('remove');
                    }

                    setTimeout(function () {
                        removeDiv.parentNode.removeChild(removeDiv);
                        clearTimeout(timeoutRemove);

                        if (removeWrap.childElementCount <= 0) { // if childs count === 0 remove wrap
                            removeWrap.parentNode.removeChild(removeWrap); // remove wrap

                            if (newNotifySettings.backOverlay) {
                                removeOverlay.parentNode.removeChild(removeOverlay);
                            }
                        }

                    }, newNotifySettings.cssAnimationDuration);

                });

            }
            // if click to close off


            // callback on
            if (callback && typeof callback === 'function') {

                removeDiv.addEventListener('click', function (e) {

                    callback(); // callback

                    // remove element on
                    removeDiv.classList.add('remove');

                    if (newNotifySettings.backOverlay && removeWrap.childElementCount <= 0) {
                        removeOverlay.classList.add('remove');
                    }

                    clearTimeout(timeoutAddClass);

                    setTimeout(function () {

                        removeDiv.parentNode.removeChild(removeDiv);

                        if (removeWrap.childElementCount <= 0) { // if childs count === 0 remove wrap
                            removeWrap.parentNode.removeChild(removeWrap);

                            if (newNotifySettings.backOverlay) {
                                removeOverlay.parentNode.removeChild(removeOverlay);
                            }
                        }
                        clearTimeout(timeoutRemove);
                    }, newNotifySettings.cssAnimationDuration);
                    // remove element off

                });

            }
            // callback off

        }
        // remove by timeout or click off

    } else {
        notiflixConsoleError('Notiflix Error', 'Where is the arguments?');
    }

}
// Notiflix: Notify Single off


// Notiflix: Report Single on
const NotiflixReport = function (title, message, buttonText, buttonCallback, theType, staticType) {

    // if plainText true = HTML tags not allowed on
    if (newReportSettings.plainText) {
        title = notiflixPlaintext(title);
        message = notiflixPlaintext(message);
        buttonText = notiflixPlaintext(buttonText);
    }
    // if plainText true = HTML tags not allowed off

    // if plainText false but the contents length more than *MaxLength = HTML tags error on
    if (!newReportSettings.plainText) {
        if (title.length > newReportSettings.titleMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Title content length is more than "titleMaxLength" option.'; // message html error
            buttonText = 'Okay'; // button html error
        }

        if (message.length > newReportSettings.messageMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Message content length is more than "messageMaxLength" option.'; // message html error
            buttonText = 'Okay'; // button html error
        }

        if (buttonText.length > newReportSettings.buttonMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Button content length is more than "buttonMaxLength" option.'; // message html error
            buttonText = 'Okay'; // button html error
        }
    }
    // if plainText false but the contents length more than *MaxLength = HTML tags error off


    // max length on
    if (title.length > newReportSettings.titleMaxLength) {
        title = `${title.substring(0, newReportSettings.titleMaxLength)}...`;
    }

    if (message.length > newReportSettings.messageMaxLength) {
        message = `${message.substring(0, newReportSettings.messageMaxLength)}...`;
    }

    if (buttonText.length > newReportSettings.buttonMaxLength) {
        buttonText = `${buttonText.substring(0, newReportSettings.buttonMaxLength)}...`;
    }
    // max length off

    // if cssAnimaion false -> duration on
    if (!newReportSettings.cssAnimation) {
        newReportSettings.cssAnimationDuration = 0;
    }
    // if cssAnimaion false -> duration off

    // report wrap on
    const docBody = document.body;

    const ntflxReportWrap = document.createElement('div');
    ntflxReportWrap.id = reportSettings.ID;
    ntflxReportWrap.className = newReportSettings.className;
    ntflxReportWrap.style.width = newReportSettings.width;
    ntflxReportWrap.style.zIndex = newReportSettings.zindex;
    ntflxReportWrap.style.borderRadius = newReportSettings.borderRadius;

    // font-family on
    ntflxReportWrap.style.fontFamily = `"${newReportSettings.fontFamily}", sans-serif`;
    // font-family off

    // rtl on
    if (newReportSettings.rtl) {
        ntflxReportWrap.setAttribute('dir', 'rtl');
        ntflxReportWrap.classList.add('rtl-on');
    }
    // rtl off

    // overlay on
    let reportOverlay = '';
    if (newReportSettings.backOverlay) {
        reportOverlay = `<div class="${newReportSettings.className}-overlay ${(newReportSettings.cssAnimation ? 'with-animation' : '')}" style="background:${newReportSettings.backOverlayColor}; animation-duration:${newReportSettings.cssAnimationDuration}ms;"></div>`;
    }
    // overlay off


    // svg icon on
    let svgIcon = '';
    if (staticType === 'success') {
        svgIcon = notiflixReportSvgSuccess(newReportSettings.svgSize, theType.svgColor);
    } else if (staticType === 'failure') {
        svgIcon = notiflixReportSvgFailure(newReportSettings.svgSize, theType.svgColor);
    } else if (staticType === 'warning') {
        svgIcon = notiflixReportSvgWarning(newReportSettings.svgSize, theType.svgColor);
    } else if (staticType === 'info') {
        svgIcon = notiflixReportSvgInfo(newReportSettings.svgSize, theType.svgColor);
    }
    // svg icon off

    // report html on
    ntflxReportWrap.innerHTML = `${reportOverlay}
    <div class="${newReportSettings.className}-content ${(newReportSettings.cssAnimation ? 'with-animation' : '')} nx-${newReportSettings.cssAnimationStyle}" style="background:${newReportSettings.backgroundColor}; animation-duration:${newReportSettings.cssAnimationDuration}ms;">
    <div style="width:${newReportSettings.svgSize}; height:${newReportSettings.svgSize};" class="${newReportSettings.className}-icon">${svgIcon}</div>
    <h5 class="${newReportSettings.className}-title" style="font-weight:500; font-size:${newReportSettings.titleFontSize}; color:${theType.titleColor};">${title}</h5>
    <p class="${newReportSettings.className}-message" style="font-size:${newReportSettings.messageFontSize}; color:${theType.messageColor};">${message}</p>
    <a id="NXReportButton" class="${newReportSettings.className}-button" style="font-weight:500; font-size:${newReportSettings.buttonFontSize}; background:${theType.buttonBackground}; color:${theType.buttonColor};">${buttonText}</a>
    </div>`;
    // report html off

    if (!document.getElementById(ntflxReportWrap.id)) { // if no report

        docBody.appendChild(ntflxReportWrap); // append

        // vertical align on            
        let windowH = Math.round(window.innerHeight);
        let reportH = Math.round(document.getElementById(ntflxReportWrap.id).offsetHeight);
        ntflxReportWrap.style.top = `${parseInt((windowH - reportH) / 2).toString()}px`;
        // vertical align off

        // callback on
        let getReportWrap = document.getElementById(ntflxReportWrap.id);
        let reportButton = document.getElementById('NXReportButton');
        reportButton.addEventListener('click', function () {

            // if callback on
            if (buttonCallback && typeof buttonCallback === 'function') {
                buttonCallback();
            }
            // if callback off

            // remove element on
            getReportWrap.classList.add('remove');

            setTimeout(function () {
                getReportWrap.parentNode.removeChild(getReportWrap);
            }, newReportSettings.cssAnimationDuration);
            // remove element off

        });
        // callback off

    }
    // report wrap off

}
// Notiflix: Report Single off

// Notiflix: Report SVG Success on
const notiflixReportSvgSuccess = function (width, color) {

    if (!width) { width = '110px'; }
    if (!color) { color = '#00b462'; }

    const reportSvgSuccess = `<svg id="NXReportSuccess" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 120 120" xmlns:xlink="http://www.w3.org/1999/xlink"><style>@-webkit-keyframes NXReportSuccess5-animation{0%{-webkit-transform: translate(60px, 57.7px) scale(0.5, 0.5) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(0.5, 0.5) translate(-60px, -57.7px);}50%{-webkit-transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);}60%{-webkit-transform: translate(60px, 57.7px) scale(0.95, 0.95) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(0.95, 0.95) translate(-60px, -57.7px);}100%{-webkit-transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);}}@keyframes NXReportSuccess5-animation{0%{-webkit-transform: translate(60px, 57.7px) scale(0.5, 0.5) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(0.5, 0.5) translate(-60px, -57.7px);}50%{-webkit-transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);}60%{-webkit-transform: translate(60px, 57.7px) scale(0.95, 0.95) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(0.95, 0.95) translate(-60px, -57.7px);}100%{-webkit-transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);}}@-webkit-keyframes NXReportSuccess6-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportSuccess6-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportSuccess4-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportSuccess4-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportSuccess3-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportSuccess3-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}#NXReportSuccess *{-webkit-animation-duration: 1.2s;animation-duration: 1.2s;-webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);animation-timing-function: cubic-bezier(0, 0, 1, 1);}#NXReportSuccess4{fill: inherit;-webkit-animation-name: NXReportSuccess4-animation;animation-name: NXReportSuccess4-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportSuccess6{fill: inherit;-webkit-animation-name: NXReportSuccess6-animation;animation-name: NXReportSuccess6-animation;opacity: 1;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);}#NXReportSuccess3{-webkit-animation-name: NXReportSuccess3-animation;animation-name: NXReportSuccess3-animation;-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);}#NXReportSuccess5{-webkit-animation-name: NXReportSuccess5-animation;animation-name: NXReportSuccess5-animation;-webkit-transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);transform: translate(60px, 57.7px) scale(1, 1) translate(-60px, -57.7px);-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);}</style><g id="NXReportSuccess1"><g id="NXReportSuccess2"><g id="NXReportSuccess3" data-animator-group="true" data-animator-type="2"><path d="M60 115.38c-30.54,0 -55.38,-24.84 -55.38,-55.38 0,-30.54 24.84,-55.38 55.38,-55.38 30.54,0 55.38,24.84 55.38,55.38 0,30.54 -24.84,55.38 -55.38,55.38zm0 -115.38c-33.08,0 -60,26.92 -60,60 0,33.08 26.92,60 60,60 33.08,0 60,-26.92 60,-60 0,-33.08 -26.92,-60 -60,-60z" id="NXReportSuccess4"/></g><g id="NXReportSuccess5" data-animator-group="true" data-animator-type="2"><path d="M88.27 35.39l-35.47 39.9 -21.37 -17.09c-0.98,-0.81 -2.44,-0.63 -3.24,0.36 -0.79,0.99 -0.63,2.44 0.36,3.24l23.08 18.46c0.43,0.34 0.93,0.51 1.44,0.51 0.64,0 1.27,-0.26 1.74,-0.78l36.91 -41.53c0.86,-0.96 0.76,-2.42 -0.19,-3.26 -0.95,-0.86 -2.41,-0.77 -3.26,0.19z" id="NXReportSuccess6"/></g></g></g></svg>`;

    return reportSvgSuccess;

}
// Notiflix: Report SVG Success off

// Notiflix: Report SVG Failure on
const notiflixReportSvgFailure = function (width, color) {

    if (!width) { width = '110px'; }
    if (!color) { color = '#f44336'; }

    const reportSvgFailure = `<svg id="NXReportFailure" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 120 120" xmlns:xlink="http://www.w3.org/1999/xlink"><style>@-webkit-keyframes NXReportFailure4-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportFailure4-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportFailure3-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportFailure3-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@-webkit-keyframes NXReportFailure5-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}50%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportFailure5-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}50%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@-webkit-keyframes NXReportFailure6-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportFailure6-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}#NXReportFailure *{-webkit-animation-duration: 1.2s;animation-duration: 1.2s;-webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);animation-timing-function: cubic-bezier(0, 0, 1, 1);}#NXReportFailure6{fill:inherit;-webkit-animation-name: NXReportFailure6-animation;animation-name: NXReportFailure6-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportFailure5{-webkit-animation-name: NXReportFailure5-animation;animation-name: NXReportFailure5-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}#NXReportFailure3{-webkit-animation-name: NXReportFailure3-animation;animation-name: NXReportFailure3-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}#NXReportFailure4{fill:inherit;-webkit-animation-name: NXReportFailure4-animation;animation-name: NXReportFailure4-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}</style><g id="NXReportFailure1"><g id="NXReportFailure2"><g id="NXReportFailure3" data-animator-group="true" data-animator-type="2"><path d="M4.35 34.95c0,-16.82 13.78,-30.6 30.6,-30.6l50.1 0c16.82,0 30.6,13.78 30.6,30.6l0 50.1c0,16.82 -13.78,30.6 -30.6,30.6l-50.1 0c-16.82,0 -30.6,-13.78 -30.6,-30.6l0 -50.1zm30.6 85.05l50.1 0c19.22,0 34.95,-15.73 34.95,-34.95l0 -50.1c0,-19.22 -15.73,-34.95 -34.95,-34.95l-50.1 0c-19.22,0 -34.95,15.73 -34.95,34.95l0 50.1c0,19.22 15.73,34.95 34.95,34.95z" id="NXReportFailure4"/></g><g id="NXReportFailure5" data-animator-group="true" data-animator-type="2"><path d="M82.4 37.6c-0.9,-0.9 -2.37,-0.9 -3.27,0l-19.13 19.13 -19.14 -19.13c-0.9,-0.9 -2.36,-0.9 -3.26,0 -0.9,0.9 -0.9,2.35 0,3.26l19.13 19.14 -19.13 19.13c-0.9,0.9 -0.9,2.37 0,3.27 0.45,0.45 1.04,0.68 1.63,0.68 0.59,0 1.18,-0.23 1.63,-0.68l19.14 -19.14 19.13 19.14c0.45,0.45 1.05,0.68 1.64,0.68 0.58,0 1.18,-0.23 1.63,-0.68 0.9,-0.9 0.9,-2.37 0,-3.27l-19.14 -19.13 19.14 -19.14c0.9,-0.91 0.9,-2.36 0,-3.26z" id="NXReportFailure6"/></g></g></g></svg>`;

    return reportSvgFailure;
}
// Notiflix: Report SVG Failure off

// Notiflix: Report SVG Warning on
const notiflixReportSvgWarning = function (width, color) {

    if (!width) { width = '110px'; }
    if (!color) { color = '#f2bd1d'; }

    const reportSvgWarning = `<svg id="NXReportWarning" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 120 120" xmlns:xlink="http://www.w3.org/1999/xlink"><style>@-webkit-keyframes NXReportWarning3-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportWarning3-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportWarning2-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportWarning2-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@-webkit-keyframes NXReportWarning4-animation{0%{-webkit-transform: translate(60px, 66.6px) scale(0.5, 0.5) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(0.5, 0.5) translate(-60px, -66.6px);}50%{-webkit-transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);}60%{-webkit-transform: translate(60px, 66.6px) scale(0.95, 0.95) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(0.95, 0.95) translate(-60px, -66.6px);}100%{-webkit-transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);}}@keyframes NXReportWarning4-animation{0%{-webkit-transform: translate(60px, 66.6px) scale(0.5, 0.5) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(0.5, 0.5) translate(-60px, -66.6px);}50%{-webkit-transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);}60%{-webkit-transform: translate(60px, 66.6px) scale(0.95, 0.95) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(0.95, 0.95) translate(-60px, -66.6px);}100%{-webkit-transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);}}@-webkit-keyframes NXReportWarning5-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportWarning5-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}#NXReportWarning *{-webkit-animation-duration: 1.2s;animation-duration: 1.2s;-webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);animation-timing-function: cubic-bezier(0, 0, 1, 1);}#NXReportWarning3{fill: inherit;-webkit-animation-name: NXReportWarning3-animation;animation-name: NXReportWarning3-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportWarning5{fill: inherit;-webkit-animation-name: NXReportWarning5-animation;animation-name: NXReportWarning5-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportWarning4{-webkit-animation-name: NXReportWarning4-animation;animation-name: NXReportWarning4-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);transform: translate(60px, 66.6px) scale(1, 1) translate(-60px, -66.6px);}#NXReportWarning2{-webkit-animation-name: NXReportWarning2-animation;animation-name: NXReportWarning2-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}</style><g id="NXReportWarning1"><g id="NXReportWarning2" data-animator-group="true" data-animator-type="2"><path d="M115.46 106.15l-54.04 -93.8c-0.61,-1.06 -2.23,-1.06 -2.84,0l-54.04 93.8c-0.62,1.07 0.21,2.29 1.42,2.29l108.08 0c1.21,0 2.04,-1.22 1.42,-2.29zm-50.29 -95.95l54.04 93.8c2.28,3.96 -0.65,8.78 -5.17,8.78l-108.08 0c-4.52,0 -7.45,-4.82 -5.17,-8.78l54.04 -93.8c2.28,-3.95 8.03,-4 10.34,0z" id="NXReportWarning3"/></g><g id="NXReportWarning4" data-animator-group="true" data-animator-type="2"><path d="M57.83 94.01c0,1.2 0.97,2.17 2.17,2.17 1.2,0 2.17,-0.97 2.17,-2.17l0 -3.2c0,-1.2 -0.97,-2.17 -2.17,-2.17 -1.2,0 -2.17,0.97 -2.17,2.17l0 3.2zm0 -14.15c0,1.2 0.97,2.17 2.17,2.17 1.2,0 2.17,-0.97 2.17,-2.17l0 -40.65c0,-1.2 -0.97,-2.17 -2.17,-2.17 -1.2,0 -2.17,0.97 -2.17,2.17l0 40.65z" id="NXReportWarning5"/></g></g></svg>`;

    return reportSvgWarning;
}
// Notiflix: Report SVG Warning off

// Notiflix: Report SVG Info on
const notiflixReportSvgInfo = function (width, color) {

    if (!width) { width = '110px'; }
    if (!color) { color = '#00bcd4'; }

    const reportSvgInfo = `<svg id="NXReportInfo" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 120 120" xmlns:xlink="http://www.w3.org/1999/xlink"><style>@-webkit-keyframes NXReportInfo5-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportInfo5-animation{0%{opacity: 0;}50%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportInfo4-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}50%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportInfo4-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}50%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@-webkit-keyframes NXReportInfo3-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@keyframes NXReportInfo3-animation{0%{opacity: 0;}40%{opacity: 1;}100%{opacity: 1;}}@-webkit-keyframes NXReportInfo2-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}@keyframes NXReportInfo2-animation{0%{-webkit-transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.5, 0.5) translate(-60px, -60px);}40%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}60%{-webkit-transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);transform: translate(60px, 60px) scale(0.95, 0.95) translate(-60px, -60px);}100%{-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}}#NXReportInfo *{-webkit-animation-duration: 1.2s;animation-duration: 1.2s;-webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);animation-timing-function: cubic-bezier(0, 0, 1, 1);}#NXReportInfo3{fill:inherit;-webkit-animation-name: NXReportInfo3-animation;animation-name: NXReportInfo3-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportInfo5{fill:inherit;-webkit-animation-name: NXReportInfo5-animation;animation-name: NXReportInfo5-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);opacity: 1;}#NXReportInfo2{-webkit-animation-name: NXReportInfo2-animation;animation-name: NXReportInfo2-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}#NXReportInfo4{-webkit-animation-name: NXReportInfo4-animation;animation-name: NXReportInfo4-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);transform: translate(60px, 60px) scale(1, 1) translate(-60px, -60px);}</style><g id="NXReportInfo1"><g id="NXReportInfo2" data-animator-group="true" data-animator-type="2"><path d="M60 115.38c-30.54,0 -55.38,-24.84 -55.38,-55.38 0,-30.54 24.84,-55.38 55.38,-55.38 30.54,0 55.38,24.84 55.38,55.38 0,30.54 -24.84,55.38 -55.38,55.38zm0 -115.38c-33.08,0 -60,26.92 -60,60 0,33.08 26.92,60 60,60 33.08,0 60,-26.92 60,-60 0,-33.08 -26.92,-60 -60,-60z" id="NXReportInfo3"/></g><g id="NXReportInfo4" data-animator-group="true" data-animator-type="2"><path d="M57.75 43.85c0,-1.24 1.01,-2.25 2.25,-2.25 1.24,0 2.25,1.01 2.25,2.25l0 48.18c0,1.24 -1.01,2.25 -2.25,2.25 -1.24,0 -2.25,-1.01 -2.25,-2.25l0 -48.18zm0 -15.88c0,-1.24 1.01,-2.25 2.25,-2.25 1.24,0 2.25,1.01 2.25,2.25l0 3.32c0,1.25 -1.01,2.25 -2.25,2.25 -1.24,0 -2.25,-1 -2.25,-2.25l0 -3.32z" id="NXReportInfo5"/></g></g></svg>`;

    return reportSvgInfo;

}
// Notiflix: Report SVG Info off


// Notiflix: Confirm Single on
const NotiflixConfirm = function (title, message, okButtonText, cancelButtonText, okButtonCallback, cancelButtonCallback) {

    // if plainText true = HTML tags not allowed on
    if (newConfirmSettings.plainText) {
        title = notiflixPlaintext(title);
        message = notiflixPlaintext(message);
        okButtonText = notiflixPlaintext(okButtonText);
        cancelButtonText = notiflixPlaintext(cancelButtonText);
    }
    // if plainText true = HTML tags not allowed off

    // if plainText false but the contents length more than *MaxLength = HTML tags error on
    if (!newConfirmSettings.plainText) {
        if (title.length > newConfirmSettings.titleMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Title content length is more than "titleMaxLength" option.'; // message html error
            okButtonText = 'Okay'; // button html error
            cancelButtonText = '...'; // button html error
        }

        if (message.length > newConfirmSettings.messageMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Message content length is more than "messageMaxLength" option.'; // message html error
            okButtonText = 'Okay'; // button html error
            cancelButtonText = '...'; // button html error
        }

        if ((okButtonText.length || cancelButtonText.length) > newConfirmSettings.buttonsMaxLength) {
            title = 'HTML Tags Error'; // title html error
            message = 'Your Buttons contents length is more than "buttonsMaxLength" option.'; // message html error
            okButtonText = 'Okay'; // button html error
            cancelButtonText = '...'; // button html error
        }
    }
    // if plainText false but the contents length more than *MaxLength = HTML tags error off


    // max length on
    if (title.length > newConfirmSettings.titleMaxLength) {
        title = `${title.substring(0, newConfirmSettings.titleMaxLength)}...`;
    }

    if (message.length > newConfirmSettings.messageMaxLength) {
        message = `${message.substring(0, newConfirmSettings.messageMaxLength)}...`;
    }

    if (okButtonText.length > newConfirmSettings.buttonsMaxLength) {
        okButtonText = `${okButtonText.substring(0, newConfirmSettings.buttonsMaxLength)}...`;
    }

    if (cancelButtonText.length > newConfirmSettings.buttonsMaxLength) {
        cancelButtonText = `${cancelButtonText.substring(0, newConfirmSettings.buttonsMaxLength)}...`;
    }
    // max length off


    // if cssAnimaion false -> duration on
    if (!newConfirmSettings.cssAnimation) {
        newConfirmSettings.cssAnimationDuration = 0;
    }
    // if cssAnimaion false -> duration off


    // confirm wrap on
    const docBody = document.body;

    const ntflxConfirmWrap = document.createElement('div');
    ntflxConfirmWrap.id = confirmSettings.ID;
    ntflxConfirmWrap.className = `${newConfirmSettings.className} ${(newConfirmSettings.cssAnimation ? 'with-animation nx-' + newConfirmSettings.cssAnimationStyle : '')}`;
    ntflxConfirmWrap.style.width = newConfirmSettings.width;
    ntflxConfirmWrap.style.zIndex = newConfirmSettings.zindex;
    ntflxConfirmWrap.style.margin = 'auto';

    // rtl on
    if (newConfirmSettings.rtl) {
        ntflxConfirmWrap.setAttribute('dir', 'rtl');
        ntflxConfirmWrap.classList.add('rtl-on');
    }
    // rtl off

    // font-family on
    ntflxConfirmWrap.style.fontFamily = `"${newConfirmSettings.fontFamily}", sans-serif`;
    // font-family off

    // if background overlay true on
    let confirmOverlay = '';
    if (newConfirmSettings.backOverlay) {
        confirmOverlay = `<div class="${newConfirmSettings.className}-overlay ${(newConfirmSettings.cssAnimation ? 'with-animation' : '')}" style="background:${newConfirmSettings.backOverlayColor};animation-duration:${newConfirmSettings.cssAnimationDuration}ms;"></div>`;
    }
    // if background overlay true off


    // if have a callback - cancel button on
    let cancelButtonHTML = '';
    if (okButtonCallback) {
        cancelButtonHTML = `<a id="NXConfirmButtonCancel" class="confirm-button-cancel" style="color:${newConfirmSettings.cancelButtonColor};background:${newConfirmSettings.cancelButtonBackground};font-size:${newConfirmSettings.buttonsFontSize};">${cancelButtonText}</a>`;
    }
    // if have a callback - cancel button off

    ntflxConfirmWrap.innerHTML = `${confirmOverlay}
        <div class="${newConfirmSettings.className}-content" style="background:${newConfirmSettings.backgroundColor}; animation-duration:${newConfirmSettings.cssAnimationDuration}ms; border-radius:${newConfirmSettings.borderRadius};">
            <div class="${newConfirmSettings.className}-head">
                <h5 style="color:${newConfirmSettings.titleColor};font-size:${newConfirmSettings.titleFontSize};">${title}</h5>
                <p style="color:${newConfirmSettings.messageColor};font-size:${newConfirmSettings.messageFontSize};">${message}</p>
            </div>
            <div class="${newConfirmSettings.className}-buttons">
                <a id="NXConfirmButtonOk" class="confirm-button-ok ${(okButtonCallback ? '' : 'full')}" style="color:${newConfirmSettings.okButtonColor};background:${newConfirmSettings.okButtonBackground};font-size:${newConfirmSettings.buttonsFontSize};">${okButtonText}</a>
                ${cancelButtonHTML}
            </div>
        </div>`;
    // confirm wrap off

    // if there is no confirm box on
    if (!document.getElementById(ntflxConfirmWrap.id)) {
        docBody.appendChild(ntflxConfirmWrap);

        // position on                  
        if (newConfirmSettings.position === 'center') { // if center

            let windowH = Math.round(window.innerHeight);
            let confirmH = Math.round(document.getElementById(ntflxConfirmWrap.id).offsetHeight);

            ntflxConfirmWrap.style.top = `${parseInt((windowH - confirmH) / 2)}px`;
            ntflxConfirmWrap.style.left = newConfirmSettings.distance;
            ntflxConfirmWrap.style.right = newConfirmSettings.distance;
            ntflxConfirmWrap.style.bottom = 'auto';

        } else if (newConfirmSettings.position === 'right-top') { // if right-top

            ntflxConfirmWrap.style.right = newConfirmSettings.distance;
            ntflxConfirmWrap.style.top = newConfirmSettings.distance;
            ntflxConfirmWrap.style.bottom = 'auto';
            ntflxConfirmWrap.style.left = 'auto';

        } else if (newConfirmSettings.position === 'right-bottom') { // if right-bottom

            ntflxConfirmWrap.style.right = newConfirmSettings.distance;
            ntflxConfirmWrap.style.bottom = newConfirmSettings.distance;
            ntflxConfirmWrap.style.top = 'auto';
            ntflxConfirmWrap.style.left = 'auto';

        } else if (newConfirmSettings.position === 'left-top') { // if left-top

            ntflxConfirmWrap.style.left = newConfirmSettings.distance;
            ntflxConfirmWrap.style.top = newConfirmSettings.distance;
            ntflxConfirmWrap.style.right = 'auto';
            ntflxConfirmWrap.style.bottom = 'auto';

        } else if (newConfirmSettings.position === 'left-bottom') { // if left-bottom

            ntflxConfirmWrap.style.left = newConfirmSettings.distance;
            ntflxConfirmWrap.style.bottom = newConfirmSettings.distance;
            ntflxConfirmWrap.style.top = 'auto';
            ntflxConfirmWrap.style.right = 'auto';

        } else { // if center-top or else

            ntflxConfirmWrap.style.top = newConfirmSettings.distance;
            ntflxConfirmWrap.style.left = 0;
            ntflxConfirmWrap.style.right = 0;
            ntflxConfirmWrap.style.bottom = 'auto';
        }
        // position off

        // buttons listener on
        const confirmCloseWrap = document.getElementById(ntflxConfirmWrap.id);
        const okButton = document.getElementById('NXConfirmButtonOk');

        // ok button listener on
        okButton.addEventListener('click', function () {

            // if ok callback && if ok callback is a function
            if (okButtonCallback && typeof okButtonCallback === 'function') {
                okButtonCallback();
            }

            confirmCloseWrap.classList.add('remove');

            setTimeout(function () {
                confirmCloseWrap.parentNode.removeChild(confirmCloseWrap);
            }, newConfirmSettings.cssAnimationDuration);

        });
        // ok button listener off

        // if ok callback && if ok callback a function => add Cancel Button listener on
        if (okButtonCallback && typeof okButtonCallback === 'function') {

            // cancel button listener on
            const cancelButton = document.getElementById('NXConfirmButtonCancel');
            cancelButton.addEventListener('click', function () {

                // if cancel callback && if cancel callback a function
                if (cancelButtonCallback && typeof cancelButtonCallback === 'function') {
                    cancelButtonCallback();
                }

                confirmCloseWrap.classList.add('remove');

                setTimeout(function () {
                    confirmCloseWrap.parentNode.removeChild(confirmCloseWrap);
                }, newConfirmSettings.cssAnimationDuration);

            });
            // cancel button listener off

        }
        // if ok callback && if ok callback a function => add Cancel Button listener off
        // buttons listener off

    }
    // if there is no confirm box off

}
// Notiflix: Confirm Single off


// Notiflix: Loading Single on
const NotiflixLoading = function (message, iconType, display, theDelay) {

    if (display) { // show it

        // if message settings on
        if (message.toString().length > newLoadingSettings.messageMaxLength) {
            message = `${notiflixPlaintext(message).toString().substring(0, newLoadingSettings.messageMaxLength)}...`;
        } else {
            message = `${notiflixPlaintext(message).toString()}`;
        }

        let intSvgSize = parseInt(newLoadingSettings.svgSize.slice(0, -2));
        let messageHTML = '';
        if (message.length > 0) {

            let messagePosTop = `${parseInt(Math.round(intSvgSize - (intSvgSize / 4))).toString()}px`;
            let messageHeight = `${(parseInt(newLoadingSettings.messageFontSize.slice(0, 2)) * 1.2).toString()}px`;

            messageHTML = `<p id="${newLoadingSettings.messageID}" class="loading-message" style="color:${newLoadingSettings.messageColor};font-size:${newLoadingSettings.messageFontSize};height:${messageHeight}; top:${messagePosTop};">${message}</p>`;

        }
        // if message settings off

        // if cssAnimaion false -> duration on
        if (!newLoadingSettings.cssAnimation) {
            newLoadingSettings.cssAnimationDuration = 0;
        }
        // if cssAnimaion false -> duration off

        // svgIcon on
        let svgIcon = '';
        if (iconType === 'standard') {
            svgIcon = notiflixLoadingSvgStandard(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'hourglass') {
            svgIcon = notiflixLoadingSvgHourglass(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'circle') {
            svgIcon = notiflixLoadingSvgCircle(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'arrows') {
            svgIcon = notiflixLoadingSvgArrows(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'dots') {
            svgIcon = notiflixLoadingSvgDots(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'pulse') {
            svgIcon = notiflixLoadingSvgPulse(newLoadingSettings.svgSize, newLoadingSettings.svgColor);
        } else if (iconType === 'custom' && newLoadingSettings.customSvgUrl !== null) {
            svgIcon = `<img class="custom-loading-icon" width="${newLoadingSettings.svgSize}" height="${newLoadingSettings.svgSize}" src="${newLoadingSettings.customSvgUrl}" alt="Notiflix">`;
        } else if (iconType === 'custom' && newLoadingSettings.customSvgUrl == null) {
            notiflixConsoleError('Notiflix Error', 'You have to set a static SVG url to "customSvgUrl" option to use Loading Custom.');
            return false;
        } else if (iconType === 'notiflix') {
            svgIcon = notiflixLoadingSvgNotiflix(newLoadingSettings.svgSize, '#f8f8f8', '#00b462');
        }

        let svgPosTop = 0;
        if (message.length > 0) {
            svgPosTop = `-${parseInt(Math.round(intSvgSize - (intSvgSize / 4))).toString()}px`;
        }

        let svgIconHTML = `<div style="top:${svgPosTop}; width:${newLoadingSettings.svgSize}; height:${newLoadingSettings.svgSize};" class="${newLoadingSettings.className}-icon ${(message.length > 0 ? 'with-message' : '')}">${svgIcon}</div>`;
        // svgIcon off


        // loading wrap on
        const docBody = document.body;

        const ntflxLoadingWrap = document.createElement('div');
        ntflxLoadingWrap.id = loadingSettings.ID;
        ntflxLoadingWrap.className = `${newLoadingSettings.className} ${(newLoadingSettings.cssAnimation ? 'with-animation' : '')} ${(newLoadingSettings.clickToClose ? 'click-to-close' : '')}`;
        ntflxLoadingWrap.style.zIndex = newLoadingSettings.zindex;
        ntflxLoadingWrap.style.background = newLoadingSettings.backgroundColor;
        ntflxLoadingWrap.style.animationDuration = `${newLoadingSettings.cssAnimationDuration}ms`;

        // font-family on
        ntflxLoadingWrap.style.fontFamily = `"${newLoadingSettings.fontFamily}", sans-serif`;
        // font-family off

        // rtl on
        if (newLoadingSettings.rtl) {
            ntflxLoadingWrap.setAttribute('dir', 'rtl');
            ntflxLoadingWrap.classList.add('rtl-on');
        }
        // rtl off

        // append on
        ntflxLoadingWrap.innerHTML = `${svgIconHTML} ${messageHTML}`; // inner html

        if (!document.getElementById(ntflxLoadingWrap.id)) { // if not loading

            docBody.appendChild(ntflxLoadingWrap); // append

            // if click to close on            
            if (newLoadingSettings.clickToClose) {

                const loadingWrapElm = document.getElementById(ntflxLoadingWrap.id);

                loadingWrapElm.addEventListener('click', function () {

                    ntflxLoadingWrap.classList.add('remove');

                    setTimeout(function () {
                        ntflxLoadingWrap.parentNode.removeChild(ntflxLoadingWrap);
                    }, newLoadingSettings.cssAnimationDuration);

                });

            }
            // if click to close off
        }
        // append off

    } else { // Remove

        if (document.getElementById(loadingSettings.ID)) { // if has any loading

            const loadingElm = document.getElementById(loadingSettings.ID);

            setTimeout(function () {

                loadingElm.classList.add('remove');

                setTimeout(function () {
                    loadingElm.parentNode.removeChild(loadingElm);
                }, newLoadingSettings.cssAnimationDuration);

            }, theDelay);

        }

    }

}
// Notiflix: Loading Single off

// Notiflix: Loading Change Message on
const NotiflixLoadingChange = function (newMessage) {

    if (document.getElementById(loadingSettings.ID)) { // if has any loading

        if (newMessage.toString().length > newLoadingSettings.messageMaxLength) {
            newMessage = `${notiflixPlaintext(newMessage).toString().substring(0, newLoadingSettings.messageMaxLength)}...`;
        } else {
            newMessage = notiflixPlaintext(newMessage).toString();
        }

        if (newMessage.length > 0) { // if has any message

            let oldMessageElm = document.getElementById(loadingSettings.ID).getElementsByTagName('p')[0];

            if (oldMessageElm !== undefined) { // there is a message element

                oldMessageElm.innerHTML = newMessage; // change the message

            } else { // there is no message element

                // create a new message element on
                const newMessageHTML = document.createElement('p');
                newMessageHTML.id = newLoadingSettings.messageID;
                newMessageHTML.className = 'loading-message new';

                newMessageHTML.style.color = newLoadingSettings.messageColor;
                newMessageHTML.style.fontSize = newLoadingSettings.messageFontSize;

                const intSvgSize = parseInt(newLoadingSettings.svgSize.slice(0, -2));
                const messagePosTop = `${parseInt(Math.round(intSvgSize - (intSvgSize / 4))).toString()}px`;
                newMessageHTML.style.top = messagePosTop;

                const messageHeight = `${(parseInt(newLoadingSettings.messageFontSize.slice(0, 2)) * 1.2).toString()}px`;
                newMessageHTML.style.height = messageHeight;

                newMessageHTML.innerHTML = newMessage;

                const messageWrap = document.getElementById(loadingSettings.ID);
                messageWrap.appendChild(newMessageHTML);
                // create a new message element off

                // vertical align svg on
                const svgDivElm = document.getElementById(loadingSettings.ID).getElementsByTagName('div')[0];
                const svgNewPosTop = `-${parseInt(Math.round(intSvgSize - (intSvgSize / 4))).toString()}px`;
                svgDivElm.style.top = svgNewPosTop;
                // vertical align svg off

            }

        } else { // if no message
            notiflixConsoleError('Notiflix Error', 'Where is the new message?');
        }

    }

}
// Notiflix: Loading Change Message off


// Notiflix: Loading SVG standard on
const notiflixLoadingSvgStandard = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const standard = `<svg stroke="${color}" width="${width}" height="${width}" viewBox="0 0 38 38" style="transform:scale(0.8);" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd"><g transform="translate(1 1)" stroke-width="2"><circle stroke-opacity=".25" cx="18" cy="18" r="18"/><path d="M36 18c0-9.94-8.06-18-18-18"><animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="1s" repeatCount="indefinite"/></path></g></g></svg>`;
    return standard;
}
// Notiflix: Loading SVG standard off

// Notiflix: Loading SVG hourglass on
const notiflixLoadingSvgHourglass = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const hourglass = `<svg id="NXLoadingHourglass" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 200 200"><style>@-webkit-keyframes NXhourglass5-animation{0%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}16.67%{-webkit-transform: scale(1, 0.8);transform: scale(1, 0.8);}33.33%{-webkit-transform: scale(0.88, 0.6);transform: scale(0.88, 0.6);}37.50%{-webkit-transform: scale(0.85, 0.55);transform: scale(0.85, 0.55);}41.67%{-webkit-transform: scale(0.8, 0.5);transform: scale(0.8, 0.5);}45.83%{-webkit-transform: scale(0.75, 0.45);transform: scale(0.75, 0.45);}50%{-webkit-transform: scale(0.7, 0.4);transform: scale(0.7, 0.4);}54.17%{-webkit-transform: scale(0.6, 0.35);transform: scale(0.6, 0.35);}58.33%{-webkit-transform: scale(0.5, 0.3);transform: scale(0.5, 0.3);}83.33%{-webkit-transform: scale(0.2, 0);transform: scale(0.2, 0);}100%{-webkit-transform: scale(0.2, 0);transform: scale(0.2, 0);}}@keyframes NXhourglass5-animation{0%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}16.67%{-webkit-transform: scale(1, 0.8);transform: scale(1, 0.8);}33.33%{-webkit-transform: scale(0.88, 0.6);transform: scale(0.88, 0.6);}37.50%{-webkit-transform: scale(0.85, 0.55);transform: scale(0.85, 0.55);}41.67%{-webkit-transform: scale(0.8, 0.5);transform: scale(0.8, 0.5);}45.83%{-webkit-transform: scale(0.75, 0.45);transform: scale(0.75, 0.45);}50%{-webkit-transform: scale(0.7, 0.4);transform: scale(0.7, 0.4);}54.17%{-webkit-transform: scale(0.6, 0.35);transform: scale(0.6, 0.35);}58.33%{-webkit-transform: scale(0.5, 0.3);transform: scale(0.5, 0.3);}83.33%{-webkit-transform: scale(0.2, 0);transform: scale(0.2, 0);}100%{-webkit-transform: scale(0.2, 0);transform: scale(0.2, 0);}}@-webkit-keyframes NXhourglass3-animation{0%{-webkit-transform: scale(1, 0.02);transform: scale(1, 0.02);}79.17%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}100%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}}@keyframes NXhourglass3-animation{0%{-webkit-transform: scale(1, 0.02);transform: scale(1, 0.02);}79.17%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}100%{-webkit-transform: scale(1, 1);transform: scale(1, 1);}}@-webkit-keyframes NXhourglass1-animation{0%{-webkit-transform: rotate(0deg);transform: rotate(0deg);}83.33%{-webkit-transform: rotate(0deg);transform: rotate(0deg);}100%{-webkit-transform: rotate(180deg);transform: rotate(180deg);}}@keyframes NXhourglass1-animation{0%{-webkit-transform: rotate(0deg);transform: rotate(0deg);}83.33%{-webkit-transform: rotate(0deg);transform: rotate(0deg);}100%{-webkit-transform: rotate(180deg);transform: rotate(180deg);}}#NXLoadingHourglass *{-webkit-animation-duration: 1.2s;animation-duration: 1.2s;-webkit-animation-iteration-count: infinite;animation-iteration-count: infinite;-webkit-animation-timing-function: cubic-bezier(0, 0, 1, 1);animation-timing-function: cubic-bezier(0, 0, 1, 1);}#NXhourglass7{fill: inherit;}#NXhourglass1{-webkit-animation-name: NXhourglass1-animation;animation-name: NXhourglass1-animation;-webkit-transform-origin: 50% 50%;transform-origin: 50% 50%;transform-box: fill-box;}#NXhourglass3{-webkit-animation-name: NXhourglass3-animation;animation-name: NXhourglass3-animation;-webkit-animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);animation-timing-function: cubic-bezier(0.42, 0, 0.58, 1);-webkit-transform-origin: 50% 100%;transform-origin: 50% 100%;transform-box: fill-box;}#NXhourglass5{-webkit-animation-name: NXhourglass5-animation;animation-name: NXhourglass5-animation;-webkit-transform-origin: 50% 100%;transform-origin: 50% 100%;transform-box: fill-box;}g#NXhourglass5,#NXhourglass3{fill: inherit;opacity: .4;}</style><g id="NXhourglass1" data-animator-group="true" data-animator-type="1"><g id="NXhourglass2"><g id="NXhourglass3" data-animator-group="true" data-animator-type="2"><polygon points="100,100 65.62,132.08 65.62,163.22 134.38,163.22 134.38,132.08 " id="NXhourglass4"/></g><g id="NXhourglass5" data-animator-group="true" data-animator-type="2"><polygon points="100,100 65.62,67.92 65.62,36.78 134.38,36.78 134.38,67.92" id="NXhourglass6"/></g> <path d="M51.14 38.89l8.33 0 0 14.93c0,15.1 8.29,28.99 23.34,39.1 1.88,1.25 3.04,3.97 3.04,7.08 0,3.11 -1.16,5.83 -3.04,7.09 -15.05,10.1 -23.34,23.99 -23.34,39.09l0 14.93 -8.33 0c-2.68,0 -4.86,2.18 -4.86,4.86 0,2.69 2.18,4.86 4.86,4.86l97.72 0c2.68,0 4.86,-2.17 4.86,-4.86 0,-2.68 -2.18,-4.86 -4.86,-4.86l-8.33 0 0 -14.93c0,-15.1 -8.29,-28.99 -23.34,-39.09 -1.88,-1.26 -3.04,-3.98 -3.04,-7.09 0,-3.11 1.16,-5.83 3.04,-7.08 15.05,-10.11 23.34,-24 23.34,-39.1l0 -14.93 8.33 0c2.68,0 4.86,-2.18 4.86,-4.86 0,-2.69 -2.18,-4.86 -4.86,-4.86l-97.72 0c-2.68,0 -4.86,2.17 -4.86,4.86 0,2.68 2.18,4.86 4.86,4.86zm79.67 14.93c0,15.87 -11.93,26.25 -19.04,31.03 -4.6,3.08 -7.34,8.75 -7.34,15.15 0,6.41 2.74,12.07 7.34,15.15 7.11,4.78 19.04,15.16 19.04,31.03l0 14.93 -61.62 0 0 -14.93c0,-15.87 11.93,-26.25 19.04,-31.02 4.6,-3.09 7.34,-8.75 7.34,-15.16 0,-6.4 -2.74,-12.07 -7.34,-15.15 -7.11,-4.78 -19.04,-15.16 -19.04,-31.03l0 -14.93 61.62 0 0 14.93z" id="NXhourglass7"/></g></g></svg>`;
    return hourglass;
}
// Notiflix: Loading SVG hourglass off

// Notiflix: Loading SVG circle on
const notiflixLoadingSvgCircle = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const circle = `<svg id="NXLoadingCircle" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="25 25 50 50" xml:space="preserve" version="1.1"><style>#NXLoadingCircle{-webkit-animation: rotate 2s linear infinite; animation: rotate 2s linear infinite; height: ${width}; -webkit-transform-origin: center center; -ms-transform-origin: center center; transform-origin: center center; width: ${width}; position: absolute; top: 0; left: 0; margin: auto;}.notiflix-loader-circle-path{stroke-dasharray: 150,200; stroke-dashoffset: -10; -webkit-animation: dash 1.5s ease-in-out infinite, color 1.5s ease-in-out infinite; animation: dash 1.5s ease-in-out infinite, color 1.5s ease-in-out infinite; stroke-linecap: round;}@-webkit-keyframes rotate{100%{-webkit-transform: rotate(360deg); transform: rotate(360deg);}}@keyframes rotate{100%{-webkit-transform: rotate(360deg); transform: rotate(360deg);}}@-webkit-keyframes dash{0%{stroke-dasharray: 1,200; stroke-dashoffset: 0;}50%{stroke-dasharray: 89,200; stroke-dashoffset: -35;}100%{stroke-dasharray: 89,200; stroke-dashoffset: -124;}}@keyframes dash{0%{stroke-dasharray: 1,200; stroke-dashoffset: 0;}50%{stroke-dasharray: 89,200; stroke-dashoffset: -35;}100%{stroke-dasharray: 89,200; stroke-dashoffset: -124;}}</style><circle class="notiflix-loader-circle-path" cx="50" cy="50" r="20" fill="none" stroke="${color}" stroke-width="2"/></svg>`;
    return circle;
}
// Notiflix: Loading SVG circle off

// Notiflix: Loading SVG arrows on
const notiflixLoadingSvgArrows = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const arrows = `<svg id="NXLoadingArrows" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" viewBox="0 0 128 128" xml:space="preserve"><g><path fill="inherit" fill-opacity="1" d="M109.25 55.5h-36l12-12a29.54 29.54 0 0 0-49.53 12H18.75A46.04 46.04 0 0 1 96.9 31.84l12.35-12.34v36zm-90.5 17h36l-12 12a29.54 29.54 0 0 0 49.53-12h16.97A46.04 46.04 0 0 1 31.1 96.16L18.74 108.5v-36z" /><animateTransform attributeName="transform" type="rotate" from="0 64 64" to="360 64 64" dur="1.5s" repeatCount="indefinite"></animateTransform></g></svg>`;
    return arrows;
}
// Notiflix: Loading SVG arrows off

// Notiflix: Loading SVG dots on
const notiflixLoadingSvgDots = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const dots = `<svg id="NXLoadingDots" fill="${color}" width="${width}" height="${width}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid"><g transform="translate(25 50)"><circle cx="0" cy="0" r="9" fill="inherit" transform="scale(0.239 0.239)"><animateTransform attributeName="transform" type="scale" begin="-0.266s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="0.8s" repeatCount="indefinite"/></circle></g><g transform="translate(50 50)"> <circle cx="0" cy="0" r="9" fill="inherit" transform="scale(0.00152 0.00152)"><animateTransform attributeName="transform" type="scale" begin="-0.133s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="0.8s" repeatCount="indefinite"/></circle></g><g transform="translate(75 50)"><circle cx="0" cy="0" r="9" fill="inherit" transform="scale(0.299 0.299)"><animateTransform attributeName="transform" type="scale" begin="0s" calcMode="spline" keySplines="0.3 0 0.7 1;0.3 0 0.7 1" values="0;1;0" keyTimes="0;0.5;1" dur="0.8s" repeatCount="indefinite"/></circle></g></svg>`;
    return dots;
}
// Notiflix: Loading SVG dots off

// Notiflix: Loading SVG pulse on
const notiflixLoadingSvgPulse = (width, color) => {
    if (!width) { width = '60px'; }
    if (!color) { color = '#00b462'; }
    const pulse = `<svg stroke="${color}" width="${width}" height="${width}" viewBox="0 0 44 44" xmlns="http://www.w3.org/2000/svg"><g fill="none" fill-rule="evenodd" stroke-width="2"><circle cx="22" cy="22" r="1"><animate attributeName="r" begin="0s" dur="1.8s" values="1; 20" calcMode="spline" keyTimes="0; 1" keySplines="0.165, 0.84, 0.44, 1" repeatCount="indefinite"/><animate attributeName="stroke-opacity" begin="0s" dur="1.8s" values="1; 0" calcMode="spline" keyTimes="0; 1" keySplines="0.3, 0.61, 0.355, 1" repeatCount="indefinite"/></circle><circle cx="22" cy="22" r="1"><animate attributeName="r" begin="-0.9s" dur="1.8s" values="1; 20" calcMode="spline" keyTimes="0; 1" keySplines="0.165, 0.84, 0.44, 1" repeatCount="indefinite"/><animate attributeName="stroke-opacity" begin="-0.9s" dur="1.8s" values="1; 0" calcMode="spline" keyTimes="0; 1" keySplines="0.3, 0.61, 0.355, 1" repeatCount="indefinite"/></circle></g></svg>`;
    return pulse;
}
// Notiflix: Loading SVG pulse off

// Notiflix: Loading SVG notiflix on
const notiflixLoadingSvgNotiflix = (width, white, green) => {
    if (!width) { width = '60px'; }
    if (!white) { white = '#f8f8f8'; }
    if (!green) { green = '#00b462'; }
    const notiflixIcon = `<svg id="NXLoadingNotiflixLib" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" width="${width}" height="${width}" version="1.1" style="shape-rendering:geometricPrecision; text-rendering:geometricPrecision; image-rendering:optimizeQuality; fill-rule:evenodd; clip-rule:evenodd" viewBox="0 0 200 200" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css">.line{stroke:${white};stroke-width:12;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:22;}.line{fill:none;}.dot{fill:${green};stroke:${green};stroke-width:12;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:22;}.n{stroke-dasharray: 500;stroke-dashoffset: 0;animation-name: notiflix-n;animation-timing-function: linear;animation-duration: 2.5s;animation-delay:0s;animation-iteration-count: infinite;animation-direction: normal;}@keyframes notiflix-n{0%{stroke-dashoffset: 1000;}100%{stroke-dashoffset: 0;}}.x2,.x1{stroke-dasharray: 500;stroke-dashoffset: 0;animation-name: notiflix-x;animation-timing-function: linear;animation-duration: 2.5s;animation-delay:.2s;animation-iteration-count: infinite;animation-direction: normal;}@keyframes notiflix-x{0%{stroke-dashoffset: 1000;}100%{stroke-dashoffset: 0;}}.dot{animation-name: notiflix-dot;animation-timing-function: ease-in-out;animation-duration: 1.25s;animation-iteration-count: infinite;animation-direction: normal;}@keyframes notiflix-dot{0%{stroke-width: 0;}50%{stroke-width: 12;}100%{stroke-width: 0;}}</style></defs><g><path class="dot" d="M47.97 135.05c3.59,0 6.5,2.91 6.5,6.5 0,3.59 -2.91,6.5 -6.5,6.5 -3.59,0 -6.5,-2.91 -6.5,-6.5 0,-3.59 2.91,-6.5 6.5,-6.5z"/><path class="line n" d="M10.14 144.76l0 -0.22 0 -0.96 0 -56.03c0,-5.68 -4.54,-41.36 37.83,-41.36 42.36,0 37.82,35.68 37.82,41.36l0 57.21"/><path class="line x1" d="M115.06 144.49c24.98,-32.68 49.96,-65.35 74.94,-98.03"/><path class="line x2" d="M114.89 46.6c25.09,32.58 50.19,65.17 75.29,97.75"/></g></svg>`;
    return notiflixIcon;
}
// Notiflix: Loading SVG notiflix off

/***/ }),

/***/ "./node_modules/perfect-scrollbar/css/perfect-scrollbar.css":
/*!******************************************************************!*\
  !*** ./node_modules/perfect-scrollbar/css/perfect-scrollbar.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../css-loader??ref--6-1!../../postcss-loader/src??ref--6-2!./perfect-scrollbar.css */ "./node_modules/css-loader/index.js?!./node_modules/postcss-loader/src/index.js?!./node_modules/perfect-scrollbar/css/perfect-scrollbar.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js":
/*!******************************************************************!*\
  !*** ./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*!
 * perfect-scrollbar v1.4.0
 * (c) 2018 Hyunje Jun
 * @license MIT
 */
(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

function get(element) {
  return getComputedStyle(element);
}

function set(element, obj) {
  for (var key in obj) {
    var val = obj[key];
    if (typeof val === 'number') {
      val = val + "px";
    }
    element.style[key] = val;
  }
  return element;
}

function div(className) {
  var div = document.createElement('div');
  div.className = className;
  return div;
}

var elMatches =
  typeof Element !== 'undefined' &&
  (Element.prototype.matches ||
    Element.prototype.webkitMatchesSelector ||
    Element.prototype.mozMatchesSelector ||
    Element.prototype.msMatchesSelector);

function matches(element, query) {
  if (!elMatches) {
    throw new Error('No element matching method supported');
  }

  return elMatches.call(element, query);
}

function remove(element) {
  if (element.remove) {
    element.remove();
  } else {
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  }
}

function queryChildren(element, selector) {
  return Array.prototype.filter.call(element.children, function (child) { return matches(child, selector); }
  );
}

var cls = {
  main: 'ps',
  element: {
    thumb: function (x) { return ("ps__thumb-" + x); },
    rail: function (x) { return ("ps__rail-" + x); },
    consuming: 'ps__child--consume',
  },
  state: {
    focus: 'ps--focus',
    clicking: 'ps--clicking',
    active: function (x) { return ("ps--active-" + x); },
    scrolling: function (x) { return ("ps--scrolling-" + x); },
  },
};

/*
 * Helper methods
 */
var scrollingClassTimeout = { x: null, y: null };

function addScrollingClass(i, x) {
  var classList = i.element.classList;
  var className = cls.state.scrolling(x);

  if (classList.contains(className)) {
    clearTimeout(scrollingClassTimeout[x]);
  } else {
    classList.add(className);
  }
}

function removeScrollingClass(i, x) {
  scrollingClassTimeout[x] = setTimeout(
    function () { return i.isAlive && i.element.classList.remove(cls.state.scrolling(x)); },
    i.settings.scrollingThreshold
  );
}

function setScrollingClassInstantly(i, x) {
  addScrollingClass(i, x);
  removeScrollingClass(i, x);
}

var EventElement = function EventElement(element) {
  this.element = element;
  this.handlers = {};
};

var prototypeAccessors = { isEmpty: { configurable: true } };

EventElement.prototype.bind = function bind (eventName, handler) {
  if (typeof this.handlers[eventName] === 'undefined') {
    this.handlers[eventName] = [];
  }
  this.handlers[eventName].push(handler);
  this.element.addEventListener(eventName, handler, false);
};

EventElement.prototype.unbind = function unbind (eventName, target) {
    var this$1 = this;

  this.handlers[eventName] = this.handlers[eventName].filter(function (handler) {
    if (target && handler !== target) {
      return true;
    }
    this$1.element.removeEventListener(eventName, handler, false);
    return false;
  });
};

EventElement.prototype.unbindAll = function unbindAll () {
    var this$1 = this;

  for (var name in this$1.handlers) {
    this$1.unbind(name);
  }
};

prototypeAccessors.isEmpty.get = function () {
    var this$1 = this;

  return Object.keys(this.handlers).every(
    function (key) { return this$1.handlers[key].length === 0; }
  );
};

Object.defineProperties( EventElement.prototype, prototypeAccessors );

var EventManager = function EventManager() {
  this.eventElements = [];
};

EventManager.prototype.eventElement = function eventElement (element) {
  var ee = this.eventElements.filter(function (ee) { return ee.element === element; })[0];
  if (!ee) {
    ee = new EventElement(element);
    this.eventElements.push(ee);
  }
  return ee;
};

EventManager.prototype.bind = function bind (element, eventName, handler) {
  this.eventElement(element).bind(eventName, handler);
};

EventManager.prototype.unbind = function unbind (element, eventName, handler) {
  var ee = this.eventElement(element);
  ee.unbind(eventName, handler);

  if (ee.isEmpty) {
    // remove
    this.eventElements.splice(this.eventElements.indexOf(ee), 1);
  }
};

EventManager.prototype.unbindAll = function unbindAll () {
  this.eventElements.forEach(function (e) { return e.unbindAll(); });
  this.eventElements = [];
};

EventManager.prototype.once = function once (element, eventName, handler) {
  var ee = this.eventElement(element);
  var onceHandler = function (evt) {
    ee.unbind(eventName, onceHandler);
    handler(evt);
  };
  ee.bind(eventName, onceHandler);
};

function createEvent(name) {
  if (typeof window.CustomEvent === 'function') {
    return new CustomEvent(name);
  } else {
    var evt = document.createEvent('CustomEvent');
    evt.initCustomEvent(name, false, false, undefined);
    return evt;
  }
}

var processScrollDiff = function(
  i,
  axis,
  diff,
  useScrollingClass,
  forceFireReachEvent
) {
  if ( useScrollingClass === void 0 ) useScrollingClass = true;
  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

  var fields;
  if (axis === 'top') {
    fields = [
      'contentHeight',
      'containerHeight',
      'scrollTop',
      'y',
      'up',
      'down' ];
  } else if (axis === 'left') {
    fields = [
      'contentWidth',
      'containerWidth',
      'scrollLeft',
      'x',
      'left',
      'right' ];
  } else {
    throw new Error('A proper axis should be provided');
  }

  processScrollDiff$1(i, diff, fields, useScrollingClass, forceFireReachEvent);
};

function processScrollDiff$1(
  i,
  diff,
  ref,
  useScrollingClass,
  forceFireReachEvent
) {
  var contentHeight = ref[0];
  var containerHeight = ref[1];
  var scrollTop = ref[2];
  var y = ref[3];
  var up = ref[4];
  var down = ref[5];
  if ( useScrollingClass === void 0 ) useScrollingClass = true;
  if ( forceFireReachEvent === void 0 ) forceFireReachEvent = false;

  var element = i.element;

  // reset reach
  i.reach[y] = null;

  // 1 for subpixel rounding
  if (element[scrollTop] < 1) {
    i.reach[y] = 'start';
  }

  // 1 for subpixel rounding
  if (element[scrollTop] > i[contentHeight] - i[containerHeight] - 1) {
    i.reach[y] = 'end';
  }

  if (diff) {
    element.dispatchEvent(createEvent(("ps-scroll-" + y)));

    if (diff < 0) {
      element.dispatchEvent(createEvent(("ps-scroll-" + up)));
    } else if (diff > 0) {
      element.dispatchEvent(createEvent(("ps-scroll-" + down)));
    }

    if (useScrollingClass) {
      setScrollingClassInstantly(i, y);
    }
  }

  if (i.reach[y] && (diff || forceFireReachEvent)) {
    element.dispatchEvent(createEvent(("ps-" + y + "-reach-" + (i.reach[y]))));
  }
}

function toInt(x) {
  return parseInt(x, 10) || 0;
}

function isEditable(el) {
  return (
    matches(el, 'input,[contenteditable]') ||
    matches(el, 'select,[contenteditable]') ||
    matches(el, 'textarea,[contenteditable]') ||
    matches(el, 'button,[contenteditable]')
  );
}

function outerWidth(element) {
  var styles = get(element);
  return (
    toInt(styles.width) +
    toInt(styles.paddingLeft) +
    toInt(styles.paddingRight) +
    toInt(styles.borderLeftWidth) +
    toInt(styles.borderRightWidth)
  );
}

var env = {
  isWebKit:
    typeof document !== 'undefined' &&
    'WebkitAppearance' in document.documentElement.style,
  supportsTouch:
    typeof window !== 'undefined' &&
    ('ontouchstart' in window ||
      (window.DocumentTouch && document instanceof window.DocumentTouch)),
  supportsIePointer:
    typeof navigator !== 'undefined' && navigator.msMaxTouchPoints,
  isChrome:
    typeof navigator !== 'undefined' &&
    /Chrome/i.test(navigator && navigator.userAgent),
};

var updateGeometry = function(i) {
  var element = i.element;
  var roundedScrollTop = Math.floor(element.scrollTop);

  i.containerWidth = element.clientWidth;
  i.containerHeight = element.clientHeight;
  i.contentWidth = element.scrollWidth;
  i.contentHeight = element.scrollHeight;

  if (!element.contains(i.scrollbarXRail)) {
    // clean up and append
    queryChildren(element, cls.element.rail('x')).forEach(function (el) { return remove(el); }
    );
    element.appendChild(i.scrollbarXRail);
  }
  if (!element.contains(i.scrollbarYRail)) {
    // clean up and append
    queryChildren(element, cls.element.rail('y')).forEach(function (el) { return remove(el); }
    );
    element.appendChild(i.scrollbarYRail);
  }

  if (
    !i.settings.suppressScrollX &&
    i.containerWidth + i.settings.scrollXMarginOffset < i.contentWidth
  ) {
    i.scrollbarXActive = true;
    i.railXWidth = i.containerWidth - i.railXMarginWidth;
    i.railXRatio = i.containerWidth / i.railXWidth;
    i.scrollbarXWidth = getThumbSize(
      i,
      toInt(i.railXWidth * i.containerWidth / i.contentWidth)
    );
    i.scrollbarXLeft = toInt(
      (i.negativeScrollAdjustment + element.scrollLeft) *
        (i.railXWidth - i.scrollbarXWidth) /
        (i.contentWidth - i.containerWidth)
    );
  } else {
    i.scrollbarXActive = false;
  }

  if (
    !i.settings.suppressScrollY &&
    i.containerHeight + i.settings.scrollYMarginOffset < i.contentHeight
  ) {
    i.scrollbarYActive = true;
    i.railYHeight = i.containerHeight - i.railYMarginHeight;
    i.railYRatio = i.containerHeight / i.railYHeight;
    i.scrollbarYHeight = getThumbSize(
      i,
      toInt(i.railYHeight * i.containerHeight / i.contentHeight)
    );
    i.scrollbarYTop = toInt(
      roundedScrollTop *
        (i.railYHeight - i.scrollbarYHeight) /
        (i.contentHeight - i.containerHeight)
    );
  } else {
    i.scrollbarYActive = false;
  }

  if (i.scrollbarXLeft >= i.railXWidth - i.scrollbarXWidth) {
    i.scrollbarXLeft = i.railXWidth - i.scrollbarXWidth;
  }
  if (i.scrollbarYTop >= i.railYHeight - i.scrollbarYHeight) {
    i.scrollbarYTop = i.railYHeight - i.scrollbarYHeight;
  }

  updateCss(element, i);

  if (i.scrollbarXActive) {
    element.classList.add(cls.state.active('x'));
  } else {
    element.classList.remove(cls.state.active('x'));
    i.scrollbarXWidth = 0;
    i.scrollbarXLeft = 0;
    element.scrollLeft = 0;
  }
  if (i.scrollbarYActive) {
    element.classList.add(cls.state.active('y'));
  } else {
    element.classList.remove(cls.state.active('y'));
    i.scrollbarYHeight = 0;
    i.scrollbarYTop = 0;
    element.scrollTop = 0;
  }
};

function getThumbSize(i, thumbSize) {
  if (i.settings.minScrollbarLength) {
    thumbSize = Math.max(thumbSize, i.settings.minScrollbarLength);
  }
  if (i.settings.maxScrollbarLength) {
    thumbSize = Math.min(thumbSize, i.settings.maxScrollbarLength);
  }
  return thumbSize;
}

function updateCss(element, i) {
  var xRailOffset = { width: i.railXWidth };
  var roundedScrollTop = Math.floor(element.scrollTop);

  if (i.isRtl) {
    xRailOffset.left =
      i.negativeScrollAdjustment +
      element.scrollLeft +
      i.containerWidth -
      i.contentWidth;
  } else {
    xRailOffset.left = element.scrollLeft;
  }
  if (i.isScrollbarXUsingBottom) {
    xRailOffset.bottom = i.scrollbarXBottom - roundedScrollTop;
  } else {
    xRailOffset.top = i.scrollbarXTop + roundedScrollTop;
  }
  set(i.scrollbarXRail, xRailOffset);

  var yRailOffset = { top: roundedScrollTop, height: i.railYHeight };
  if (i.isScrollbarYUsingRight) {
    if (i.isRtl) {
      yRailOffset.right =
        i.contentWidth -
        (i.negativeScrollAdjustment + element.scrollLeft) -
        i.scrollbarYRight -
        i.scrollbarYOuterWidth;
    } else {
      yRailOffset.right = i.scrollbarYRight - element.scrollLeft;
    }
  } else {
    if (i.isRtl) {
      yRailOffset.left =
        i.negativeScrollAdjustment +
        element.scrollLeft +
        i.containerWidth * 2 -
        i.contentWidth -
        i.scrollbarYLeft -
        i.scrollbarYOuterWidth;
    } else {
      yRailOffset.left = i.scrollbarYLeft + element.scrollLeft;
    }
  }
  set(i.scrollbarYRail, yRailOffset);

  set(i.scrollbarX, {
    left: i.scrollbarXLeft,
    width: i.scrollbarXWidth - i.railBorderXWidth,
  });
  set(i.scrollbarY, {
    top: i.scrollbarYTop,
    height: i.scrollbarYHeight - i.railBorderYWidth,
  });
}

var clickRail = function(i) {
  i.event.bind(i.scrollbarY, 'mousedown', function (e) { return e.stopPropagation(); });
  i.event.bind(i.scrollbarYRail, 'mousedown', function (e) {
    var positionTop =
      e.pageY -
      window.pageYOffset -
      i.scrollbarYRail.getBoundingClientRect().top;
    var direction = positionTop > i.scrollbarYTop ? 1 : -1;

    i.element.scrollTop += direction * i.containerHeight;
    updateGeometry(i);

    e.stopPropagation();
  });

  i.event.bind(i.scrollbarX, 'mousedown', function (e) { return e.stopPropagation(); });
  i.event.bind(i.scrollbarXRail, 'mousedown', function (e) {
    var positionLeft =
      e.pageX -
      window.pageXOffset -
      i.scrollbarXRail.getBoundingClientRect().left;
    var direction = positionLeft > i.scrollbarXLeft ? 1 : -1;

    i.element.scrollLeft += direction * i.containerWidth;
    updateGeometry(i);

    e.stopPropagation();
  });
};

var dragThumb = function(i) {
  bindMouseScrollHandler(i, [
    'containerWidth',
    'contentWidth',
    'pageX',
    'railXWidth',
    'scrollbarX',
    'scrollbarXWidth',
    'scrollLeft',
    'x',
    'scrollbarXRail' ]);
  bindMouseScrollHandler(i, [
    'containerHeight',
    'contentHeight',
    'pageY',
    'railYHeight',
    'scrollbarY',
    'scrollbarYHeight',
    'scrollTop',
    'y',
    'scrollbarYRail' ]);
};

function bindMouseScrollHandler(
  i,
  ref
) {
  var containerHeight = ref[0];
  var contentHeight = ref[1];
  var pageY = ref[2];
  var railYHeight = ref[3];
  var scrollbarY = ref[4];
  var scrollbarYHeight = ref[5];
  var scrollTop = ref[6];
  var y = ref[7];
  var scrollbarYRail = ref[8];

  var element = i.element;

  var startingScrollTop = null;
  var startingMousePageY = null;
  var scrollBy = null;

  function mouseMoveHandler(e) {
    element[scrollTop] =
      startingScrollTop + scrollBy * (e[pageY] - startingMousePageY);
    addScrollingClass(i, y);
    updateGeometry(i);

    e.stopPropagation();
    e.preventDefault();
  }

  function mouseUpHandler() {
    removeScrollingClass(i, y);
    i[scrollbarYRail].classList.remove(cls.state.clicking);
    i.event.unbind(i.ownerDocument, 'mousemove', mouseMoveHandler);
  }

  i.event.bind(i[scrollbarY], 'mousedown', function (e) {
    startingScrollTop = element[scrollTop];
    startingMousePageY = e[pageY];
    scrollBy =
      (i[contentHeight] - i[containerHeight]) /
      (i[railYHeight] - i[scrollbarYHeight]);

    i.event.bind(i.ownerDocument, 'mousemove', mouseMoveHandler);
    i.event.once(i.ownerDocument, 'mouseup', mouseUpHandler);

    i[scrollbarYRail].classList.add(cls.state.clicking);

    e.stopPropagation();
    e.preventDefault();
  });
}

var keyboard = function(i) {
  var element = i.element;

  var elementHovered = function () { return matches(element, ':hover'); };
  var scrollbarFocused = function () { return matches(i.scrollbarX, ':focus') || matches(i.scrollbarY, ':focus'); };

  function shouldPreventDefault(deltaX, deltaY) {
    var scrollTop = Math.floor(element.scrollTop);
    if (deltaX === 0) {
      if (!i.scrollbarYActive) {
        return false;
      }
      if (
        (scrollTop === 0 && deltaY > 0) ||
        (scrollTop >= i.contentHeight - i.containerHeight && deltaY < 0)
      ) {
        return !i.settings.wheelPropagation;
      }
    }

    var scrollLeft = element.scrollLeft;
    if (deltaY === 0) {
      if (!i.scrollbarXActive) {
        return false;
      }
      if (
        (scrollLeft === 0 && deltaX < 0) ||
        (scrollLeft >= i.contentWidth - i.containerWidth && deltaX > 0)
      ) {
        return !i.settings.wheelPropagation;
      }
    }
    return true;
  }

  i.event.bind(i.ownerDocument, 'keydown', function (e) {
    if (
      (e.isDefaultPrevented && e.isDefaultPrevented()) ||
      e.defaultPrevented
    ) {
      return;
    }

    if (!elementHovered() && !scrollbarFocused()) {
      return;
    }

    var activeElement = document.activeElement
      ? document.activeElement
      : i.ownerDocument.activeElement;
    if (activeElement) {
      if (activeElement.tagName === 'IFRAME') {
        activeElement = activeElement.contentDocument.activeElement;
      } else {
        // go deeper if element is a webcomponent
        while (activeElement.shadowRoot) {
          activeElement = activeElement.shadowRoot.activeElement;
        }
      }
      if (isEditable(activeElement)) {
        return;
      }
    }

    var deltaX = 0;
    var deltaY = 0;

    switch (e.which) {
      case 37: // left
        if (e.metaKey) {
          deltaX = -i.contentWidth;
        } else if (e.altKey) {
          deltaX = -i.containerWidth;
        } else {
          deltaX = -30;
        }
        break;
      case 38: // up
        if (e.metaKey) {
          deltaY = i.contentHeight;
        } else if (e.altKey) {
          deltaY = i.containerHeight;
        } else {
          deltaY = 30;
        }
        break;
      case 39: // right
        if (e.metaKey) {
          deltaX = i.contentWidth;
        } else if (e.altKey) {
          deltaX = i.containerWidth;
        } else {
          deltaX = 30;
        }
        break;
      case 40: // down
        if (e.metaKey) {
          deltaY = -i.contentHeight;
        } else if (e.altKey) {
          deltaY = -i.containerHeight;
        } else {
          deltaY = -30;
        }
        break;
      case 32: // space bar
        if (e.shiftKey) {
          deltaY = i.containerHeight;
        } else {
          deltaY = -i.containerHeight;
        }
        break;
      case 33: // page up
        deltaY = i.containerHeight;
        break;
      case 34: // page down
        deltaY = -i.containerHeight;
        break;
      case 36: // home
        deltaY = i.contentHeight;
        break;
      case 35: // end
        deltaY = -i.contentHeight;
        break;
      default:
        return;
    }

    if (i.settings.suppressScrollX && deltaX !== 0) {
      return;
    }
    if (i.settings.suppressScrollY && deltaY !== 0) {
      return;
    }

    element.scrollTop -= deltaY;
    element.scrollLeft += deltaX;
    updateGeometry(i);

    if (shouldPreventDefault(deltaX, deltaY)) {
      e.preventDefault();
    }
  });
};

var wheel = function(i) {
  var element = i.element;

  function shouldPreventDefault(deltaX, deltaY) {
    var roundedScrollTop = Math.floor(element.scrollTop);
    var isTop = element.scrollTop === 0;
    var isBottom =
      roundedScrollTop + element.offsetHeight === element.scrollHeight;
    var isLeft = element.scrollLeft === 0;
    var isRight =
      element.scrollLeft + element.offsetWidth === element.scrollWidth;

    var hitsBound;

    // pick axis with primary direction
    if (Math.abs(deltaY) > Math.abs(deltaX)) {
      hitsBound = isTop || isBottom;
    } else {
      hitsBound = isLeft || isRight;
    }

    return hitsBound ? !i.settings.wheelPropagation : true;
  }

  function getDeltaFromEvent(e) {
    var deltaX = e.deltaX;
    var deltaY = -1 * e.deltaY;

    if (typeof deltaX === 'undefined' || typeof deltaY === 'undefined') {
      // OS X Safari
      deltaX = -1 * e.wheelDeltaX / 6;
      deltaY = e.wheelDeltaY / 6;
    }

    if (e.deltaMode && e.deltaMode === 1) {
      // Firefox in deltaMode 1: Line scrolling
      deltaX *= 10;
      deltaY *= 10;
    }

    if (deltaX !== deltaX && deltaY !== deltaY /* NaN checks */) {
      // IE in some mouse drivers
      deltaX = 0;
      deltaY = e.wheelDelta;
    }

    if (e.shiftKey) {
      // reverse axis with shift key
      return [-deltaY, -deltaX];
    }
    return [deltaX, deltaY];
  }

  function shouldBeConsumedByChild(target, deltaX, deltaY) {
    // FIXME: this is a workaround for <select> issue in FF and IE #571
    if (!env.isWebKit && element.querySelector('select:focus')) {
      return true;
    }

    if (!element.contains(target)) {
      return false;
    }

    var cursor = target;

    while (cursor && cursor !== element) {
      if (cursor.classList.contains(cls.element.consuming)) {
        return true;
      }

      var style = get(cursor);
      var overflow = [style.overflow, style.overflowX, style.overflowY].join(
        ''
      );

      // if scrollable
      if (overflow.match(/(scroll|auto)/)) {
        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
        if (maxScrollTop > 0) {
          if (
            !(cursor.scrollTop === 0 && deltaY > 0) &&
            !(cursor.scrollTop === maxScrollTop && deltaY < 0)
          ) {
            return true;
          }
        }
        var maxScrollLeft = cursor.scrollWidth - cursor.clientWidth;
        if (maxScrollLeft > 0) {
          if (
            !(cursor.scrollLeft === 0 && deltaX < 0) &&
            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)
          ) {
            return true;
          }
        }
      }

      cursor = cursor.parentNode;
    }

    return false;
  }

  function mousewheelHandler(e) {
    var ref = getDeltaFromEvent(e);
    var deltaX = ref[0];
    var deltaY = ref[1];

    if (shouldBeConsumedByChild(e.target, deltaX, deltaY)) {
      return;
    }

    var shouldPrevent = false;
    if (!i.settings.useBothWheelAxes) {
      // deltaX will only be used for horizontal scrolling and deltaY will
      // only be used for vertical scrolling - this is the default
      element.scrollTop -= deltaY * i.settings.wheelSpeed;
      element.scrollLeft += deltaX * i.settings.wheelSpeed;
    } else if (i.scrollbarYActive && !i.scrollbarXActive) {
      // only vertical scrollbar is active and useBothWheelAxes option is
      // active, so let's scroll vertical bar using both mouse wheel axes
      if (deltaY) {
        element.scrollTop -= deltaY * i.settings.wheelSpeed;
      } else {
        element.scrollTop += deltaX * i.settings.wheelSpeed;
      }
      shouldPrevent = true;
    } else if (i.scrollbarXActive && !i.scrollbarYActive) {
      // useBothWheelAxes and only horizontal bar is active, so use both
      // wheel axes for horizontal bar
      if (deltaX) {
        element.scrollLeft += deltaX * i.settings.wheelSpeed;
      } else {
        element.scrollLeft -= deltaY * i.settings.wheelSpeed;
      }
      shouldPrevent = true;
    }

    updateGeometry(i);

    shouldPrevent = shouldPrevent || shouldPreventDefault(deltaX, deltaY);
    if (shouldPrevent && !e.ctrlKey) {
      e.stopPropagation();
      e.preventDefault();
    }
  }

  if (typeof window.onwheel !== 'undefined') {
    i.event.bind(element, 'wheel', mousewheelHandler);
  } else if (typeof window.onmousewheel !== 'undefined') {
    i.event.bind(element, 'mousewheel', mousewheelHandler);
  }
};

var touch = function(i) {
  if (!env.supportsTouch && !env.supportsIePointer) {
    return;
  }

  var element = i.element;

  function shouldPrevent(deltaX, deltaY) {
    var scrollTop = Math.floor(element.scrollTop);
    var scrollLeft = element.scrollLeft;
    var magnitudeX = Math.abs(deltaX);
    var magnitudeY = Math.abs(deltaY);

    if (magnitudeY > magnitudeX) {
      // user is perhaps trying to swipe up/down the page

      if (
        (deltaY < 0 && scrollTop === i.contentHeight - i.containerHeight) ||
        (deltaY > 0 && scrollTop === 0)
      ) {
        // set prevent for mobile Chrome refresh
        return window.scrollY === 0 && deltaY > 0 && env.isChrome;
      }
    } else if (magnitudeX > magnitudeY) {
      // user is perhaps trying to swipe left/right across the page

      if (
        (deltaX < 0 && scrollLeft === i.contentWidth - i.containerWidth) ||
        (deltaX > 0 && scrollLeft === 0)
      ) {
        return true;
      }
    }

    return true;
  }

  function applyTouchMove(differenceX, differenceY) {
    element.scrollTop -= differenceY;
    element.scrollLeft -= differenceX;

    updateGeometry(i);
  }

  var startOffset = {};
  var startTime = 0;
  var speed = {};
  var easingLoop = null;

  function getTouch(e) {
    if (e.targetTouches) {
      return e.targetTouches[0];
    } else {
      // Maybe IE pointer
      return e;
    }
  }

  function shouldHandle(e) {
    if (e.pointerType && e.pointerType === 'pen' && e.buttons === 0) {
      return false;
    }
    if (e.targetTouches && e.targetTouches.length === 1) {
      return true;
    }
    if (
      e.pointerType &&
      e.pointerType !== 'mouse' &&
      e.pointerType !== e.MSPOINTER_TYPE_MOUSE
    ) {
      return true;
    }
    return false;
  }

  function touchStart(e) {
    if (!shouldHandle(e)) {
      return;
    }

    var touch = getTouch(e);

    startOffset.pageX = touch.pageX;
    startOffset.pageY = touch.pageY;

    startTime = new Date().getTime();

    if (easingLoop !== null) {
      clearInterval(easingLoop);
    }
  }

  function shouldBeConsumedByChild(target, deltaX, deltaY) {
    if (!element.contains(target)) {
      return false;
    }

    var cursor = target;

    while (cursor && cursor !== element) {
      if (cursor.classList.contains(cls.element.consuming)) {
        return true;
      }

      var style = get(cursor);
      var overflow = [style.overflow, style.overflowX, style.overflowY].join(
        ''
      );

      // if scrollable
      if (overflow.match(/(scroll|auto)/)) {
        var maxScrollTop = cursor.scrollHeight - cursor.clientHeight;
        if (maxScrollTop > 0) {
          if (
            !(cursor.scrollTop === 0 && deltaY > 0) &&
            !(cursor.scrollTop === maxScrollTop && deltaY < 0)
          ) {
            return true;
          }
        }
        var maxScrollLeft = cursor.scrollLeft - cursor.clientWidth;
        if (maxScrollLeft > 0) {
          if (
            !(cursor.scrollLeft === 0 && deltaX < 0) &&
            !(cursor.scrollLeft === maxScrollLeft && deltaX > 0)
          ) {
            return true;
          }
        }
      }

      cursor = cursor.parentNode;
    }

    return false;
  }

  function touchMove(e) {
    if (shouldHandle(e)) {
      var touch = getTouch(e);

      var currentOffset = { pageX: touch.pageX, pageY: touch.pageY };

      var differenceX = currentOffset.pageX - startOffset.pageX;
      var differenceY = currentOffset.pageY - startOffset.pageY;

      if (shouldBeConsumedByChild(e.target, differenceX, differenceY)) {
        return;
      }

      applyTouchMove(differenceX, differenceY);
      startOffset = currentOffset;

      var currentTime = new Date().getTime();

      var timeGap = currentTime - startTime;
      if (timeGap > 0) {
        speed.x = differenceX / timeGap;
        speed.y = differenceY / timeGap;
        startTime = currentTime;
      }

      if (shouldPrevent(differenceX, differenceY)) {
        e.preventDefault();
      }
    }
  }
  function touchEnd() {
    if (i.settings.swipeEasing) {
      clearInterval(easingLoop);
      easingLoop = setInterval(function() {
        if (i.isInitialized) {
          clearInterval(easingLoop);
          return;
        }

        if (!speed.x && !speed.y) {
          clearInterval(easingLoop);
          return;
        }

        if (Math.abs(speed.x) < 0.01 && Math.abs(speed.y) < 0.01) {
          clearInterval(easingLoop);
          return;
        }

        applyTouchMove(speed.x * 30, speed.y * 30);

        speed.x *= 0.8;
        speed.y *= 0.8;
      }, 10);
    }
  }

  if (env.supportsTouch) {
    i.event.bind(element, 'touchstart', touchStart);
    i.event.bind(element, 'touchmove', touchMove);
    i.event.bind(element, 'touchend', touchEnd);
  } else if (env.supportsIePointer) {
    if (window.PointerEvent) {
      i.event.bind(element, 'pointerdown', touchStart);
      i.event.bind(element, 'pointermove', touchMove);
      i.event.bind(element, 'pointerup', touchEnd);
    } else if (window.MSPointerEvent) {
      i.event.bind(element, 'MSPointerDown', touchStart);
      i.event.bind(element, 'MSPointerMove', touchMove);
      i.event.bind(element, 'MSPointerUp', touchEnd);
    }
  }
};

var defaultSettings = function () { return ({
  handlers: ['click-rail', 'drag-thumb', 'keyboard', 'wheel', 'touch'],
  maxScrollbarLength: null,
  minScrollbarLength: null,
  scrollingThreshold: 1000,
  scrollXMarginOffset: 0,
  scrollYMarginOffset: 0,
  suppressScrollX: false,
  suppressScrollY: false,
  swipeEasing: true,
  useBothWheelAxes: false,
  wheelPropagation: true,
  wheelSpeed: 1,
}); };

var handlers = {
  'click-rail': clickRail,
  'drag-thumb': dragThumb,
  keyboard: keyboard,
  wheel: wheel,
  touch: touch,
};

var PerfectScrollbar = function PerfectScrollbar(element, userSettings) {
  var this$1 = this;
  if ( userSettings === void 0 ) userSettings = {};

  if (typeof element === 'string') {
    element = document.querySelector(element);
  }

  if (!element || !element.nodeName) {
    throw new Error('no element is specified to initialize PerfectScrollbar');
  }

  this.element = element;

  element.classList.add(cls.main);

  this.settings = defaultSettings();
  for (var key in userSettings) {
    this$1.settings[key] = userSettings[key];
  }

  this.containerWidth = null;
  this.containerHeight = null;
  this.contentWidth = null;
  this.contentHeight = null;

  var focus = function () { return element.classList.add(cls.state.focus); };
  var blur = function () { return element.classList.remove(cls.state.focus); };

  this.isRtl = get(element).direction === 'rtl';
  this.isNegativeScroll = (function () {
    var originalScrollLeft = element.scrollLeft;
    var result = null;
    element.scrollLeft = -1;
    result = element.scrollLeft < 0;
    element.scrollLeft = originalScrollLeft;
    return result;
  })();
  this.negativeScrollAdjustment = this.isNegativeScroll
    ? element.scrollWidth - element.clientWidth
    : 0;
  this.event = new EventManager();
  this.ownerDocument = element.ownerDocument || document;

  this.scrollbarXRail = div(cls.element.rail('x'));
  element.appendChild(this.scrollbarXRail);
  this.scrollbarX = div(cls.element.thumb('x'));
  this.scrollbarXRail.appendChild(this.scrollbarX);
  this.scrollbarX.setAttribute('tabindex', 0);
  this.event.bind(this.scrollbarX, 'focus', focus);
  this.event.bind(this.scrollbarX, 'blur', blur);
  this.scrollbarXActive = null;
  this.scrollbarXWidth = null;
  this.scrollbarXLeft = null;
  var railXStyle = get(this.scrollbarXRail);
  this.scrollbarXBottom = parseInt(railXStyle.bottom, 10);
  if (isNaN(this.scrollbarXBottom)) {
    this.isScrollbarXUsingBottom = false;
    this.scrollbarXTop = toInt(railXStyle.top);
  } else {
    this.isScrollbarXUsingBottom = true;
  }
  this.railBorderXWidth =
    toInt(railXStyle.borderLeftWidth) + toInt(railXStyle.borderRightWidth);
  // Set rail to display:block to calculate margins
  set(this.scrollbarXRail, { display: 'block' });
  this.railXMarginWidth =
    toInt(railXStyle.marginLeft) + toInt(railXStyle.marginRight);
  set(this.scrollbarXRail, { display: '' });
  this.railXWidth = null;
  this.railXRatio = null;

  this.scrollbarYRail = div(cls.element.rail('y'));
  element.appendChild(this.scrollbarYRail);
  this.scrollbarY = div(cls.element.thumb('y'));
  this.scrollbarYRail.appendChild(this.scrollbarY);
  this.scrollbarY.setAttribute('tabindex', 0);
  this.event.bind(this.scrollbarY, 'focus', focus);
  this.event.bind(this.scrollbarY, 'blur', blur);
  this.scrollbarYActive = null;
  this.scrollbarYHeight = null;
  this.scrollbarYTop = null;
  var railYStyle = get(this.scrollbarYRail);
  this.scrollbarYRight = parseInt(railYStyle.right, 10);
  if (isNaN(this.scrollbarYRight)) {
    this.isScrollbarYUsingRight = false;
    this.scrollbarYLeft = toInt(railYStyle.left);
  } else {
    this.isScrollbarYUsingRight = true;
  }
  this.scrollbarYOuterWidth = this.isRtl ? outerWidth(this.scrollbarY) : null;
  this.railBorderYWidth =
    toInt(railYStyle.borderTopWidth) + toInt(railYStyle.borderBottomWidth);
  set(this.scrollbarYRail, { display: 'block' });
  this.railYMarginHeight =
    toInt(railYStyle.marginTop) + toInt(railYStyle.marginBottom);
  set(this.scrollbarYRail, { display: '' });
  this.railYHeight = null;
  this.railYRatio = null;

  this.reach = {
    x:
      element.scrollLeft <= 0
        ? 'start'
        : element.scrollLeft >= this.contentWidth - this.containerWidth
          ? 'end'
          : null,
    y:
      element.scrollTop <= 0
        ? 'start'
        : element.scrollTop >= this.contentHeight - this.containerHeight
          ? 'end'
          : null,
  };

  this.isAlive = true;

  this.settings.handlers.forEach(function (handlerName) { return handlers[handlerName](this$1); });

  this.lastScrollTop = Math.floor(element.scrollTop); // for onScroll only
  this.lastScrollLeft = element.scrollLeft; // for onScroll only
  this.event.bind(this.element, 'scroll', function (e) { return this$1.onScroll(e); });
  updateGeometry(this);
};

PerfectScrollbar.prototype.update = function update () {
  if (!this.isAlive) {
    return;
  }

  // Recalcuate negative scrollLeft adjustment
  this.negativeScrollAdjustment = this.isNegativeScroll
    ? this.element.scrollWidth - this.element.clientWidth
    : 0;

  // Recalculate rail margins
  set(this.scrollbarXRail, { display: 'block' });
  set(this.scrollbarYRail, { display: 'block' });
  this.railXMarginWidth =
    toInt(get(this.scrollbarXRail).marginLeft) +
    toInt(get(this.scrollbarXRail).marginRight);
  this.railYMarginHeight =
    toInt(get(this.scrollbarYRail).marginTop) +
    toInt(get(this.scrollbarYRail).marginBottom);

  // Hide scrollbars not to affect scrollWidth and scrollHeight
  set(this.scrollbarXRail, { display: 'none' });
  set(this.scrollbarYRail, { display: 'none' });

  updateGeometry(this);

  processScrollDiff(this, 'top', 0, false, true);
  processScrollDiff(this, 'left', 0, false, true);

  set(this.scrollbarXRail, { display: '' });
  set(this.scrollbarYRail, { display: '' });
};

PerfectScrollbar.prototype.onScroll = function onScroll (e) {
  if (!this.isAlive) {
    return;
  }

  updateGeometry(this);
  processScrollDiff(this, 'top', this.element.scrollTop - this.lastScrollTop);
  processScrollDiff(
    this,
    'left',
    this.element.scrollLeft - this.lastScrollLeft
  );

  this.lastScrollTop = Math.floor(this.element.scrollTop);
  this.lastScrollLeft = this.element.scrollLeft;
};

PerfectScrollbar.prototype.destroy = function destroy () {
  if (!this.isAlive) {
    return;
  }

  this.event.unbindAll();
  remove(this.scrollbarX);
  remove(this.scrollbarY);
  remove(this.scrollbarXRail);
  remove(this.scrollbarYRail);
  this.removePsClasses();

  // unset elements
  this.element = null;
  this.scrollbarX = null;
  this.scrollbarY = null;
  this.scrollbarXRail = null;
  this.scrollbarYRail = null;

  this.isAlive = false;
};

PerfectScrollbar.prototype.removePsClasses = function removePsClasses () {
  this.element.className = this.element.className
    .split(' ')
    .filter(function (name) { return !name.match(/^ps([-_].+|)$/); })
    .join(' ');
};

return PerfectScrollbar;

})));


/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }
  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }
    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;
    case '#document':
      return element.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */
function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */
function isIE(version) {
  if (version === 11) {
    return isIE11;
  }
  if (version === 10) {
    return isIE10;
  }
  return isIE11 || isIE10;
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null;

  // NOTE: 1 DOM access here
  var offsetParent = element.offsetParent || null;
  // Skip hidden elements which don't have an offsetParent
  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  }

  // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10);

  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }
  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  var parentNode = getParentNode(element);
  if (!parentNode) {
    return false;
  }
  return isFixed(parentNode);
}

/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */

function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }
  var el = element.parentElement;
  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }
  return el || document.documentElement;
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  // NOTE: 1 DOM access here

  var boundaries = { top: 0, left: 0 };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  data.positionFixed = this.options.positionFixed;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */
function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */
function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);

  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;

  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  var _data$offsets$arrow;

  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }
  data.offsets.popper = getClientRect(data.offsets.popper);

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

    // flips variation if reference element overflows boundaries
    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    // flips variation if popper content overflows boundaries
    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself
  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification
  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];

  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

  // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed
  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;

  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',
    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,
    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */


    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;

/* harmony default export */ __webpack_exports__["default"] = (Popper);
//# sourceMappingURL=popper.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sticky-js/dist/sticky.compile.js":
/*!*******************************************************!*\
  !*** ./node_modules/sticky-js/dist/sticky.compile.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Sticky.js
 * Library for sticky elements written in vanilla javascript. With this library you can easily set sticky elements on your website. It's also responsive.
 *
 * @version 1.2.0
 * @author Rafal Galus <biuro@rafalgalus.pl>
 * @website https://rgalus.github.io/sticky-js/
 * @repo https://github.com/rgalus/sticky-js
 * @license https://github.com/rgalus/sticky-js/blob/master/LICENSE
 */

var Sticky = function () {
  /**
   * Sticky instance constructor
   * @constructor
   * @param {string} selector - Selector which we can find elements
   * @param {string} options - Global options for sticky elements (could be overwritten by data-{option}="" attributes)
   */
  function Sticky() {
    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Sticky);

    this.selector = selector;
    this.elements = [];

    this.version = '1.2.0';

    this.vp = this.getViewportSize();
    this.body = document.querySelector('body');

    this.options = {
      wrap: options.wrap || false,
      marginTop: options.marginTop || 0,
      stickyFor: options.stickyFor || 0,
      stickyClass: options.stickyClass || null,
      stickyContainer: options.stickyContainer || 'body'
    };

    this.updateScrollTopPosition = this.updateScrollTopPosition.bind(this);

    this.updateScrollTopPosition();
    window.addEventListener('load', this.updateScrollTopPosition);
    window.addEventListener('scroll', this.updateScrollTopPosition);

    this.run();
  }

  /**
   * Function that waits for page to be fully loaded and then renders & activates every sticky element found with specified selector
   * @function
   */


  Sticky.prototype.run = function run() {
    var _this = this;

    // wait for page to be fully loaded
    var pageLoaded = setInterval(function () {
      if (document.readyState === 'complete') {
        clearInterval(pageLoaded);

        var elements = document.querySelectorAll(_this.selector);
        _this.forEach(elements, function (element) {
          return _this.renderElement(element);
        });
      }
    }, 10);
  };

  /**
   * Function that assign needed variables for sticky element, that are used in future for calculations and other
   * @function
   * @param {node} element - Element to be rendered
   */


  Sticky.prototype.renderElement = function renderElement(element) {
    var _this2 = this;

    // create container for variables needed in future
    element.sticky = {};

    // set default variables
    element.sticky.active = false;

    element.sticky.marginTop = parseInt(element.getAttribute('data-margin-top')) || this.options.marginTop;
    element.sticky.stickyFor = parseInt(element.getAttribute('data-sticky-for')) || this.options.stickyFor;
    element.sticky.stickyClass = element.getAttribute('data-sticky-class') || this.options.stickyClass;
    element.sticky.wrap = element.hasAttribute('data-sticky-wrap') ? true : this.options.wrap;
    // @todo attribute for stickyContainer
    // element.sticky.stickyContainer = element.getAttribute('data-sticky-container') || this.options.stickyContainer;
    element.sticky.stickyContainer = this.options.stickyContainer;

    element.sticky.container = this.getStickyContainer(element);
    element.sticky.container.rect = this.getRectangle(element.sticky.container);

    element.sticky.rect = this.getRectangle(element);

    // fix when element is image that has not yet loaded and width, height = 0
    if (element.tagName.toLowerCase() === 'img') {
      element.onload = function () {
        return element.sticky.rect = _this2.getRectangle(element);
      };
    }

    if (element.sticky.wrap) {
      this.wrapElement(element);
    }

    // activate rendered element
    this.activate(element);
  };

  /**
   * Wraps element into placeholder element
   * @function
   * @param {node} element - Element to be wrapped
   */


  Sticky.prototype.wrapElement = function wrapElement(element) {
    element.insertAdjacentHTML('beforebegin', '<span></span>');
    element.previousSibling.appendChild(element);
  };

  /**
   * Function that activates element when specified conditions are met and then initalise events
   * @function
   * @param {node} element - Element to be activated
   */


  Sticky.prototype.activate = function activate(element) {
    if (element.sticky.rect.top + element.sticky.rect.height < element.sticky.container.rect.top + element.sticky.container.rect.height && element.sticky.stickyFor < this.vp.width && !element.sticky.active) {
      element.sticky.active = true;
    }

    if (this.elements.indexOf(element) < 0) {
      this.elements.push(element);
    }

    if (!element.sticky.resizeEvent) {
      this.initResizeEvents(element);
      element.sticky.resizeEvent = true;
    }

    if (!element.sticky.scrollEvent) {
      this.initScrollEvents(element);
      element.sticky.scrollEvent = true;
    }

    this.setPosition(element);
  };

  /**
   * Function which is adding onResizeEvents to window listener and assigns function to element as resizeListener
   * @function
   * @param {node} element - Element for which resize events are initialised
   */


  Sticky.prototype.initResizeEvents = function initResizeEvents(element) {
    var _this3 = this;

    element.sticky.resizeListener = function () {
      return _this3.onResizeEvents(element);
    };
    window.addEventListener('resize', element.sticky.resizeListener);
  };

  /**
   * Removes element listener from resize event
   * @function
   * @param {node} element - Element from which listener is deleted
   */


  Sticky.prototype.destroyResizeEvents = function destroyResizeEvents(element) {
    window.removeEventListener('resize', element.sticky.resizeListener);
  };

  /**
   * Function which is fired when user resize window. It checks if element should be activated or deactivated and then run setPosition function
   * @function
   * @param {node} element - Element for which event function is fired
   */


  Sticky.prototype.onResizeEvents = function onResizeEvents(element) {
    this.vp = this.getViewportSize();

    element.sticky.rect = this.getRectangle(element);
    element.sticky.container.rect = this.getRectangle(element.sticky.container);

    if (element.sticky.rect.top + element.sticky.rect.height < element.sticky.container.rect.top + element.sticky.container.rect.height && element.sticky.stickyFor < this.vp.width && !element.sticky.active) {
      element.sticky.active = true;
    } else if (element.sticky.rect.top + element.sticky.rect.height >= element.sticky.container.rect.top + element.sticky.container.rect.height || element.sticky.stickyFor >= this.vp.width && element.sticky.active) {
      element.sticky.active = false;
    }

    this.setPosition(element);
  };

  /**
   * Function which is adding onScrollEvents to window listener and assigns function to element as scrollListener
   * @function
   * @param {node} element - Element for which scroll events are initialised
   */


  Sticky.prototype.initScrollEvents = function initScrollEvents(element) {
    var _this4 = this;

    element.sticky.scrollListener = function () {
      return _this4.onScrollEvents(element);
    };
    window.addEventListener('scroll', element.sticky.scrollListener);
  };

  /**
   * Removes element listener from scroll event
   * @function
   * @param {node} element - Element from which listener is deleted
   */


  Sticky.prototype.destroyScrollEvents = function destroyScrollEvents(element) {
    window.removeEventListener('scroll', element.sticky.scrollListener);
  };

  /**
   * Function which is fired when user scroll window. If element is active, function is invoking setPosition function
   * @function
   * @param {node} element - Element for which event function is fired
   */


  Sticky.prototype.onScrollEvents = function onScrollEvents(element) {
    if (element.sticky.active) {
      this.setPosition(element);
    }
  };

  /**
   * Main function for the library. Here are some condition calculations and css appending for sticky element when user scroll window
   * @function
   * @param {node} element - Element that will be positioned if it's active
   */


  Sticky.prototype.setPosition = function setPosition(element) {
    this.css(element, { position: '', width: '', top: '', left: '' });

    if (this.vp.height < element.sticky.rect.height || !element.sticky.active) {
      return;
    }

    if (!element.sticky.rect.width) {
      element.sticky.rect = this.getRectangle(element);
    }

    if (element.sticky.wrap) {
      this.css(element.parentNode, {
        display: 'block',
        width: element.sticky.rect.width + 'px',
        height: element.sticky.rect.height + 'px'
      });
    }

    if (element.sticky.rect.top === 0 && element.sticky.container === this.body) {
      this.css(element, {
        position: 'fixed',
        top: element.sticky.rect.top + 'px',
        left: element.sticky.rect.left + 'px',
        width: element.sticky.rect.width + 'px'
      });
    } else if (this.scrollTop > element.sticky.rect.top - element.sticky.marginTop) {
      this.css(element, {
        position: 'fixed',
        width: element.sticky.rect.width + 'px',
        left: element.sticky.rect.left + 'px'
      });

      if (this.scrollTop + element.sticky.rect.height + element.sticky.marginTop > element.sticky.container.rect.top + element.sticky.container.offsetHeight) {

        if (element.sticky.stickyClass) {
          element.classList.remove(element.sticky.stickyClass);
        }

        this.css(element, {
          top: element.sticky.container.rect.top + element.sticky.container.offsetHeight - (this.scrollTop + element.sticky.rect.height) + 'px' });
      } else {
        if (element.sticky.stickyClass) {
          element.classList.add(element.sticky.stickyClass);
        }

        this.css(element, { top: element.sticky.marginTop + 'px' });
      }
    } else {
      if (element.sticky.stickyClass) {
        element.classList.remove(element.sticky.stickyClass);
      }

      this.css(element, { position: '', width: '', top: '', left: '' });

      if (element.sticky.wrap) {
        this.css(element.parentNode, { display: '', width: '', height: '' });
      }
    }
  };

  /**
   * Function that updates element sticky rectangle (with sticky container), then activate or deactivate element, then update position if it's active
   * @function
   */


  Sticky.prototype.update = function update() {
    var _this5 = this;

    this.forEach(this.elements, function (element) {
      element.sticky.rect = _this5.getRectangle(element);
      element.sticky.container.rect = _this5.getRectangle(element.sticky.container);

      _this5.activate(element);
      _this5.setPosition(element);
    });
  };

  /**
   * Destroys sticky element, remove listeners
   * @function
   */


  Sticky.prototype.destroy = function destroy() {
    var _this6 = this;

    this.forEach(this.elements, function (element) {
      _this6.destroyResizeEvents(element);
      _this6.destroyScrollEvents(element);
      delete element.sticky;
    });
  };

  /**
   * Function that returns container element in which sticky element is stuck (if is not specified, then it's stuck to body)
   * @function
   * @param {node} element - Element which sticky container are looked for
   * @return {node} element - Sticky container
   */


  Sticky.prototype.getStickyContainer = function getStickyContainer(element) {
    var container = element.parentNode;

    while (!container.hasAttribute('data-sticky-container') && !container.parentNode.querySelector(element.sticky.stickyContainer) && container !== this.body) {
      container = container.parentNode;
    }

    return container;
  };

  /**
   * Function that returns element rectangle & position (width, height, top, left)
   * @function
   * @param {node} element - Element which position & rectangle are returned
   * @return {object}
   */


  Sticky.prototype.getRectangle = function getRectangle(element) {
    this.css(element, { position: '', width: '', top: '', left: '' });

    var width = Math.max(element.offsetWidth, element.clientWidth, element.scrollWidth);
    var height = Math.max(element.offsetHeight, element.clientHeight, element.scrollHeight);

    var top = 0;
    var left = 0;

    do {
      top += element.offsetTop || 0;
      left += element.offsetLeft || 0;
      element = element.offsetParent;
    } while (element);

    return { top: top, left: left, width: width, height: height };
  };

  /**
   * Function that returns viewport dimensions
   * @function
   * @return {object}
   */


  Sticky.prototype.getViewportSize = function getViewportSize() {
    return {
      width: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
      height: Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
    };
  };

  /**
   * Function that updates window scroll position
   * @function
   * @return {number}
   */


  Sticky.prototype.updateScrollTopPosition = function updateScrollTopPosition() {
    this.scrollTop = (window.pageYOffset || document.scrollTop) - (document.clientTop || 0) || 0;
  };

  /**
   * Helper function for loops
   * @helper
   * @param {array}
   * @param {function} callback - Callback function (no need for explanation)
   */


  Sticky.prototype.forEach = function forEach(array, callback) {
    for (var i = 0, len = array.length; i < len; i++) {
      callback(array[i]);
    }
  };

  /**
   * Helper function to add/remove css properties for specified element.
   * @helper
   * @param {node} element - DOM element
   * @param {object} properties - CSS properties that will be added/removed from specified element
   */


  Sticky.prototype.css = function css(element, properties) {
    for (var property in properties) {
      if (properties.hasOwnProperty(property)) {
        element.style[property] = properties[property];
      }
    }
  };

  return Sticky;
}();

/**
 * Export function that supports AMD, CommonJS and Plain Browser.
 */


(function (root, factory) {
  if (true) {
    module.exports = factory;
  } else {}
})(this, Sticky);

/***/ }),

/***/ "./node_modules/sticky-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/sticky-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var Sticky = __webpack_require__(/*! ./dist/sticky.compile.js */ "./node_modules/sticky-js/dist/sticky.compile.js");

module.exports = Sticky;


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/tooltip.js/dist/esm/tooltip.js":
/*!*****************************************************!*\
  !*** ./node_modules/tooltip.js/dist/esm/tooltip.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! popper.js */ "./node_modules/popper.js/dist/esm/popper.js");
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.3.3
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var DEFAULT_OPTIONS = {
  container: false,
  delay: 0,
  html: false,
  placement: 'top',
  title: '',
  template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
  trigger: 'hover focus',
  offset: 0,
  arrowSelector: '.tooltip-arrow, .tooltip__arrow',
  innerSelector: '.tooltip-inner, .tooltip__inner'
};

var Tooltip = function () {
  /**
   * Create a new Tooltip.js instance
   * @class Tooltip
   * @param {HTMLElement} reference - The DOM node used as reference of the tooltip (it can be a jQuery element).
   * @param {Object} options
   * @param {String} options.placement='top'
   *      Placement of the popper accepted values: `top(-start, -end), right(-start, -end), bottom(-start, -end),
   *      left(-start, -end)`
   * @param {String} [options.arrowSelector='.tooltip-arrow, .tooltip__arrow'] - className used to locate the DOM arrow element in the tooltip.
   * @param {String} [options.innerSelector='.tooltip-inner, .tooltip__inner'] - className used to locate the DOM inner element in the tooltip.
   * @param {HTMLElement|String|false} options.container=false - Append the tooltip to a specific element.
   * @param {Number|Object} options.delay=0
   *      Delay showing and hiding the tooltip (ms) - does not apply to manual trigger type.
   *      If a number is supplied, delay is applied to both hide/show.
   *      Object structure is: `{ show: 500, hide: 100 }`
   * @param {Boolean} options.html=false - Insert HTML into the tooltip. If false, the content will inserted with `textContent`.
   * @param {String} [options.template='<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>']
   *      Base HTML to used when creating the tooltip.
   *      The tooltip's `title` will be injected into the `.tooltip-inner` or `.tooltip__inner`.
   *      `.tooltip-arrow` or `.tooltip__arrow` will become the tooltip's arrow.
   *      The outermost wrapper element should have the `.tooltip` class.
   * @param {String|HTMLElement|TitleFunction} options.title='' - Default title value if `title` attribute isn't present.
   * @param {String} [options.trigger='hover focus']
   *      How tooltip is triggered - click, hover, focus, manual.
   *      You may pass multiple triggers; separate them with a space. `manual` cannot be combined with any other trigger.
   * @param {Boolean} options.closeOnClickOutside=false - Close a popper on click outside of the popper and reference element. This has effect only when options.trigger is 'click'.
   * @param {String|HTMLElement} options.boundariesElement
   *      The element used as boundaries for the tooltip. For more information refer to Popper.js'
   *      [boundariesElement docs](https://popper.js.org/popper-documentation.html)
   * @param {Number|String} options.offset=0 - Offset of the tooltip relative to its reference. For more information refer to Popper.js'
   *      [offset docs](https://popper.js.org/popper-documentation.html)
   * @param {Object} options.popperOptions={} - Popper options, will be passed directly to popper instance. For more information refer to Popper.js'
   *      [options docs](https://popper.js.org/popper-documentation.html)
   * @return {Object} instance - The generated tooltip instance
   */
  function Tooltip(reference, options) {
    classCallCheck(this, Tooltip);

    _initialiseProps.call(this);

    // apply user options over default ones
    options = _extends({}, DEFAULT_OPTIONS, options);

    reference.jquery && (reference = reference[0]);

    // cache reference and options
    this.reference = reference;
    this.options = options;

    // get events list
    var events = typeof options.trigger === 'string' ? options.trigger.split(' ').filter(function (trigger) {
      return ['click', 'hover', 'focus'].indexOf(trigger) !== -1;
    }) : [];

    // set initial state
    this._isOpen = false;
    this._popperOptions = {};

    // set event listeners
    this._setEventListeners(reference, events, options);
  }

  //
  // Public methods
  //

  /**
   * Reveals an element's tooltip. This is considered a "manual" triggering of the tooltip.
   * Tooltips with zero-length titles are never displayed.
   * @method Tooltip#show
   * @memberof Tooltip
   */


  /**
   * Hides an element’s tooltip. This is considered a “manual” triggering of the tooltip.
   * @method Tooltip#hide
   * @memberof Tooltip
   */


  /**
   * Hides and destroys an element’s tooltip.
   * @method Tooltip#dispose
   * @memberof Tooltip
   */


  /**
   * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
   * @method Tooltip#toggle
   * @memberof Tooltip
   */


  /**
   * Updates the tooltip's title content
   * @method Tooltip#updateTitleContent
   * @memberof Tooltip
   * @param {String|HTMLElement} title - The new content to use for the title
   */


  //
  // Private methods
  //

  createClass(Tooltip, [{
    key: '_create',


    /**
     * Creates a new tooltip node
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} reference
     * @param {String} template
     * @param {String|HTMLElement|TitleFunction} title
     * @param {Boolean} allowHtml
     * @return {HTMLElement} tooltipNode
     */
    value: function _create(reference, template, title, allowHtml) {
      // create tooltip element
      var tooltipGenerator = window.document.createElement('div');
      tooltipGenerator.innerHTML = template.trim();
      var tooltipNode = tooltipGenerator.childNodes[0];

      // add unique ID to our tooltip (needed for accessibility reasons)
      tooltipNode.id = 'tooltip_' + Math.random().toString(36).substr(2, 10);

      // set initial `aria-hidden` state to `false` (it's visible!)
      tooltipNode.setAttribute('aria-hidden', 'false');

      // add title to tooltip
      var titleNode = tooltipGenerator.querySelector(this.options.innerSelector);
      this._addTitleContent(reference, title, allowHtml, titleNode);

      // return the generated tooltip node
      return tooltipNode;
    }
  }, {
    key: '_addTitleContent',
    value: function _addTitleContent(reference, title, allowHtml, titleNode) {
      if (title.nodeType === 1 || title.nodeType === 11) {
        // if title is a element node or document fragment, append it only if allowHtml is true
        allowHtml && titleNode.appendChild(title);
      } else if (isFunction(title)) {
        // Recursively call ourself so that the return value of the function gets handled appropriately - either
        // as a dom node, a string, or even as another function.
        this._addTitleContent(reference, title.call(reference), allowHtml, titleNode);
      } else {
        // if it's just a simple text, set textContent or innerHtml depending by `allowHtml` value
        allowHtml ? titleNode.innerHTML = title : titleNode.textContent = title;
      }
    }
  }, {
    key: '_show',
    value: function _show(reference, options) {
      // don't show if it's already visible
      // or if it's not being showed
      if (this._isOpen && !this._isOpening) {
        return this;
      }
      this._isOpen = true;

      // if the tooltipNode already exists, just show it
      if (this._tooltipNode) {
        this._tooltipNode.style.visibility = 'visible';
        this._tooltipNode.setAttribute('aria-hidden', 'false');
        this.popperInstance.update();
        return this;
      }

      // get title
      var title = reference.getAttribute('title') || options.title;

      // don't show tooltip if no title is defined
      if (!title) {
        return this;
      }

      // create tooltip node
      var tooltipNode = this._create(reference, options.template, title, options.html);

      // Add `aria-describedby` to our reference element for accessibility reasons
      reference.setAttribute('aria-describedby', tooltipNode.id);

      // append tooltip to container
      var container = this._findContainer(options.container, reference);

      this._append(tooltipNode, container);

      this._popperOptions = _extends({}, options.popperOptions, {
        placement: options.placement
      });

      this._popperOptions.modifiers = _extends({}, this._popperOptions.modifiers, {
        arrow: _extends({}, this._popperOptions.modifiers && this._popperOptions.modifiers.arrow, {
          element: options.arrowSelector
        }),
        offset: _extends({}, this._popperOptions.modifiers && this._popperOptions.modifiers.offset, {
          offset: options.offset || this._popperOptions.modifiers && this._popperOptions.modifiers.offset && this._popperOptions.modifiers.offset.offset || options.offset
        })
      });

      if (options.boundariesElement) {
        this._popperOptions.modifiers.preventOverflow = {
          boundariesElement: options.boundariesElement
        };
      }

      this.popperInstance = new popper_js__WEBPACK_IMPORTED_MODULE_0__["default"](reference, tooltipNode, this._popperOptions);

      this._tooltipNode = tooltipNode;

      return this;
    }
  }, {
    key: '_hide',
    value: function _hide() /*reference, options*/{
      // don't hide if it's already hidden
      if (!this._isOpen) {
        return this;
      }

      this._isOpen = false;

      // hide tooltipNode
      this._tooltipNode.style.visibility = 'hidden';
      this._tooltipNode.setAttribute('aria-hidden', 'true');

      return this;
    }
  }, {
    key: '_dispose',
    value: function _dispose() {
      var _this = this;

      // remove event listeners first to prevent any unexpected behaviour
      this._events.forEach(function (_ref) {
        var func = _ref.func,
            event = _ref.event;

        _this.reference.removeEventListener(event, func);
      });
      this._events = [];

      if (this._tooltipNode) {
        this._hide();

        // destroy instance
        this.popperInstance.destroy();

        // destroy tooltipNode if removeOnDestroy is not set, as popperInstance.destroy() already removes the element
        if (!this.popperInstance.options.removeOnDestroy) {
          this._tooltipNode.parentNode.removeChild(this._tooltipNode);
          this._tooltipNode = null;
        }
      }
      return this;
    }
  }, {
    key: '_findContainer',
    value: function _findContainer(container, reference) {
      // if container is a query, get the relative element
      if (typeof container === 'string') {
        container = window.document.querySelector(container);
      } else if (container === false) {
        // if container is `false`, set it to reference parent
        container = reference.parentNode;
      }
      return container;
    }

    /**
     * Append tooltip to container
     * @memberof Tooltip
     * @private
     * @param {HTMLElement} tooltipNode
     * @param {HTMLElement|String|false} container
     */

  }, {
    key: '_append',
    value: function _append(tooltipNode, container) {
      container.appendChild(tooltipNode);
    }
  }, {
    key: '_setEventListeners',
    value: function _setEventListeners(reference, events, options) {
      var _this2 = this;

      var directEvents = [];
      var oppositeEvents = [];

      events.forEach(function (event) {
        switch (event) {
          case 'hover':
            directEvents.push('mouseenter');
            oppositeEvents.push('mouseleave');
            break;
          case 'focus':
            directEvents.push('focus');
            oppositeEvents.push('blur');
            break;
          case 'click':
            directEvents.push('click');
            oppositeEvents.push('click');
            break;
        }
      });

      // schedule show tooltip
      directEvents.forEach(function (event) {
        var func = function func(evt) {
          if (_this2._isOpening === true) {
            return;
          }
          evt.usedByTooltip = true;
          _this2._scheduleShow(reference, options.delay, options, evt);
        };
        _this2._events.push({ event: event, func: func });
        reference.addEventListener(event, func);
      });

      // schedule hide tooltip
      oppositeEvents.forEach(function (event) {
        var func = function func(evt) {
          if (evt.usedByTooltip === true) {
            return;
          }
          _this2._scheduleHide(reference, options.delay, options, evt);
        };
        _this2._events.push({ event: event, func: func });
        reference.addEventListener(event, func);
        if (event === 'click' && options.closeOnClickOutside) {
          document.addEventListener('mousedown', function (e) {
            if (!_this2._isOpening) {
              return;
            }
            var popper = _this2.popperInstance.popper;
            if (reference.contains(e.target) || popper.contains(e.target)) {
              return;
            }
            func(e);
          }, true);
        }
      });
    }
  }, {
    key: '_scheduleShow',
    value: function _scheduleShow(reference, delay, options /*, evt */) {
      var _this3 = this;

      this._isOpening = true;
      // defaults to 0
      var computedDelay = delay && delay.show || delay || 0;
      this._showTimeout = window.setTimeout(function () {
        return _this3._show(reference, options);
      }, computedDelay);
    }
  }, {
    key: '_scheduleHide',
    value: function _scheduleHide(reference, delay, options, evt) {
      var _this4 = this;

      this._isOpening = false;
      // defaults to 0
      var computedDelay = delay && delay.hide || delay || 0;
      window.clearTimeout(this._showTimeout);
      window.setTimeout(function () {
        if (_this4._isOpen === false) {
          return;
        }
        if (!document.body.contains(_this4._tooltipNode)) {
          return;
        }

        // if we are hiding because of a mouseleave, we must check that the new
        // reference isn't the tooltip, because in this case we don't want to hide it
        if (evt.type === 'mouseleave') {
          var isSet = _this4._setTooltipNodeEvent(evt, reference, delay, options);

          // if we set the new event, don't hide the tooltip yet
          // the new event will take care to hide it if necessary
          if (isSet) {
            return;
          }
        }

        _this4._hide(reference, options);
      }, computedDelay);
    }
  }, {
    key: '_updateTitleContent',
    value: function _updateTitleContent(title) {
      if (typeof this._tooltipNode === 'undefined') {
        if (typeof this.options.title !== 'undefined') {
          this.options.title = title;
        }
        return;
      }
      var titleNode = this._tooltipNode.querySelector(this.options.innerSelector);
      this._clearTitleContent(titleNode, this.options.html, this.reference.getAttribute('title') || this.options.title);
      this._addTitleContent(this.reference, title, this.options.html, titleNode);
      this.options.title = title;
      this.popperInstance.update();
    }
  }, {
    key: '_clearTitleContent',
    value: function _clearTitleContent(titleNode, allowHtml, lastTitle) {
      if (lastTitle.nodeType === 1 || lastTitle.nodeType === 11) {
        allowHtml && titleNode.removeChild(lastTitle);
      } else {
        allowHtml ? titleNode.innerHTML = '' : titleNode.textContent = '';
      }
    }
  }]);
  return Tooltip;
}();

/**
 * Title function, its context is the Tooltip instance.
 * @memberof Tooltip
 * @callback TitleFunction
 * @return {String} placement - The desired title.
 */


var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this.show = function () {
    return _this5._show(_this5.reference, _this5.options);
  };

  this.hide = function () {
    return _this5._hide();
  };

  this.dispose = function () {
    return _this5._dispose();
  };

  this.toggle = function () {
    if (_this5._isOpen) {
      return _this5.hide();
    } else {
      return _this5.show();
    }
  };

  this.updateTitleContent = function (title) {
    return _this5._updateTitleContent(title);
  };

  this._events = [];

  this._setTooltipNodeEvent = function (evt, reference, delay, options) {
    var relatedreference = evt.relatedreference || evt.toElement || evt.relatedTarget;

    var callback = function callback(evt2) {
      var relatedreference2 = evt2.relatedreference || evt2.toElement || evt2.relatedTarget;

      // Remove event listener after call
      _this5._tooltipNode.removeEventListener(evt.type, callback);

      // If the new reference is not the reference element
      if (!reference.contains(relatedreference2)) {
        // Schedule to hide tooltip
        _this5._scheduleHide(reference, options.delay, options, evt2);
      }
    };

    if (_this5._tooltipNode.contains(relatedreference)) {
      // listen to mouseleave on the tooltip element to be able to hide the tooltip
      _this5._tooltipNode.addEventListener(evt.type, callback);
      return true;
    }

    return false;
  };
};

/* harmony default export */ __webpack_exports__["default"] = (Tooltip);
//# sourceMappingURL=tooltip.js.map


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/wnumb/wNumb.js":
/*!*************************************!*\
  !*** ./node_modules/wnumb/wNumb.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(function() {
  "use strict";

  var FormatOptions = [
    "decimals",
    "thousand",
    "mark",
    "prefix",
    "suffix",
    "encoder",
    "decoder",
    "negativeBefore",
    "negative",
    "edit",
    "undo"
  ];

  // General

  // Reverse a string
  function strReverse(a) {
    return a
      .split("")
      .reverse()
      .join("");
  }

  // Check if a string starts with a specified prefix.
  function strStartsWith(input, match) {
    return input.substring(0, match.length) === match;
  }

  // Check is a string ends in a specified suffix.
  function strEndsWith(input, match) {
    return input.slice(-1 * match.length) === match;
  }

  // Throw an error if formatting options are incompatible.
  function throwEqualError(F, a, b) {
    if ((F[a] || F[b]) && F[a] === F[b]) {
      throw new Error(a);
    }
  }

  // Check if a number is finite and not NaN
  function isValidNumber(input) {
    return typeof input === "number" && isFinite(input);
  }

  // Provide rounding-accurate toFixed method.
  // Borrowed: http://stackoverflow.com/a/21323330/775265
  function toFixed(value, exp) {
    value = value.toString().split("e");
    value = Math.round(+(value[0] + "e" + (value[1] ? +value[1] + exp : exp)));
    value = value.toString().split("e");
    return (+(value[0] + "e" + (value[1] ? +value[1] - exp : -exp))).toFixed(exp);
  }

  // Formatting

  // Accept a number as input, output formatted string.
  function formatTo(
    decimals,
    thousand,
    mark,
    prefix,
    suffix,
    encoder,
    decoder,
    negativeBefore,
    negative,
    edit,
    undo,
    input
  ) {
    var originalInput = input,
      inputIsNegative,
      inputPieces,
      inputBase,
      inputDecimals = "",
      output = "";

    // Apply user encoder to the input.
    // Expected outcome: number.
    if (encoder) {
      input = encoder(input);
    }

    // Stop if no valid number was provided, the number is infinite or NaN.
    if (!isValidNumber(input)) {
      return false;
    }

    // Rounding away decimals might cause a value of -0
    // when using very small ranges. Remove those cases.
    if (decimals !== false && parseFloat(input.toFixed(decimals)) === 0) {
      input = 0;
    }

    // Formatting is done on absolute numbers,
    // decorated by an optional negative symbol.
    if (input < 0) {
      inputIsNegative = true;
      input = Math.abs(input);
    }

    // Reduce the number of decimals to the specified option.
    if (decimals !== false) {
      input = toFixed(input, decimals);
    }

    // Transform the number into a string, so it can be split.
    input = input.toString();

    // Break the number on the decimal separator.
    if (input.indexOf(".") !== -1) {
      inputPieces = input.split(".");

      inputBase = inputPieces[0];

      if (mark) {
        inputDecimals = mark + inputPieces[1];
      }
    } else {
      // If it isn't split, the entire number will do.
      inputBase = input;
    }

    // Group numbers in sets of three.
    if (thousand) {
      inputBase = strReverse(inputBase).match(/.{1,3}/g);
      inputBase = strReverse(inputBase.join(strReverse(thousand)));
    }

    // If the number is negative, prefix with negation symbol.
    if (inputIsNegative && negativeBefore) {
      output += negativeBefore;
    }

    // Prefix the number
    if (prefix) {
      output += prefix;
    }

    // Normal negative option comes after the prefix. Defaults to '-'.
    if (inputIsNegative && negative) {
      output += negative;
    }

    // Append the actual number.
    output += inputBase;
    output += inputDecimals;

    // Apply the suffix.
    if (suffix) {
      output += suffix;
    }

    // Run the output through a user-specified post-formatter.
    if (edit) {
      output = edit(output, originalInput);
    }

    // All done.
    return output;
  }

  // Accept a sting as input, output decoded number.
  function formatFrom(
    decimals,
    thousand,
    mark,
    prefix,
    suffix,
    encoder,
    decoder,
    negativeBefore,
    negative,
    edit,
    undo,
    input
  ) {
    var originalInput = input,
      inputIsNegative,
      output = "";

    // User defined pre-decoder. Result must be a non empty string.
    if (undo) {
      input = undo(input);
    }

    // Test the input. Can't be empty.
    if (!input || typeof input !== "string") {
      return false;
    }

    // If the string starts with the negativeBefore value: remove it.
    // Remember is was there, the number is negative.
    if (negativeBefore && strStartsWith(input, negativeBefore)) {
      input = input.replace(negativeBefore, "");
      inputIsNegative = true;
    }

    // Repeat the same procedure for the prefix.
    if (prefix && strStartsWith(input, prefix)) {
      input = input.replace(prefix, "");
    }

    // And again for negative.
    if (negative && strStartsWith(input, negative)) {
      input = input.replace(negative, "");
      inputIsNegative = true;
    }

    // Remove the suffix.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
    if (suffix && strEndsWith(input, suffix)) {
      input = input.slice(0, -1 * suffix.length);
    }

    // Remove the thousand grouping.
    if (thousand) {
      input = input.split(thousand).join("");
    }

    // Set the decimal separator back to period.
    if (mark) {
      input = input.replace(mark, ".");
    }

    // Prepend the negative symbol.
    if (inputIsNegative) {
      output += "-";
    }

    // Add the number
    output += input;

    // Trim all non-numeric characters (allow '.' and '-');
    output = output.replace(/[^0-9\.\-.]/g, "");

    // The value contains no parse-able number.
    if (output === "") {
      return false;
    }

    // Covert to number.
    output = Number(output);

    // Run the user-specified post-decoder.
    if (decoder) {
      output = decoder(output);
    }

    // Check is the output is valid, otherwise: return false.
    if (!isValidNumber(output)) {
      return false;
    }

    return output;
  }

  // Framework

  // Validate formatting options
  function validate(inputOptions) {
    var i,
      optionName,
      optionValue,
      filteredOptions = {};

    if (inputOptions["suffix"] === undefined) {
      inputOptions["suffix"] = inputOptions["postfix"];
    }

    for (i = 0; i < FormatOptions.length; i += 1) {
      optionName = FormatOptions[i];
      optionValue = inputOptions[optionName];

      if (optionValue === undefined) {
        // Only default if negativeBefore isn't set.
        if (optionName === "negative" && !filteredOptions.negativeBefore) {
          filteredOptions[optionName] = "-";
          // Don't set a default for mark when 'thousand' is set.
        } else if (optionName === "mark" && filteredOptions.thousand !== ".") {
          filteredOptions[optionName] = ".";
        } else {
          filteredOptions[optionName] = false;
        }

        // Floating points in JS are stable up to 7 decimals.
      } else if (optionName === "decimals") {
        if (optionValue >= 0 && optionValue < 8) {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // These options, when provided, must be functions.
      } else if (
        optionName === "encoder" ||
        optionName === "decoder" ||
        optionName === "edit" ||
        optionName === "undo"
      ) {
        if (typeof optionValue === "function") {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }

        // Other options are strings.
      } else {
        if (typeof optionValue === "string") {
          filteredOptions[optionName] = optionValue;
        } else {
          throw new Error(optionName);
        }
      }
    }

    // Some values can't be extracted from a
    // string if certain combinations are present.
    throwEqualError(filteredOptions, "mark", "thousand");
    throwEqualError(filteredOptions, "prefix", "negative");
    throwEqualError(filteredOptions, "prefix", "negativeBefore");

    return filteredOptions;
  }

  // Pass all options as function arguments
  function passAll(options, method, input) {
    var i,
      args = [];

    // Add all options in order of FormatOptions
    for (i = 0; i < FormatOptions.length; i += 1) {
      args.push(options[FormatOptions[i]]);
    }

    // Append the input, then call the method, presenting all
    // options as arguments.
    args.push(input);
    return method.apply("", args);
  }

  function wNumb(options) {
    if (!(this instanceof wNumb)) {
      return new wNumb(options);
    }

    if (typeof options !== "object") {
      return;
    }

    options = validate(options);

    // Call 'formatTo' with proper arguments.
    this.to = function(input) {
      return passAll(options, formatTo, input);
    };

    // Call 'formatFrom' with proper arguments.
    this.from = function(input) {
      return passAll(options, formatFrom, input);
    };
  }

  return wNumb;
});


/***/ }),

/***/ "./resources/assets/js/global/components/base/app.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/global/components/base/app.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @class KApp
 */

var KTApp = function () {
  /** @type {object} colors State colors **/
  var colors = {};

  var _initTooltip = function initTooltip(el) {
    var skin = el.data('skin') ? 'tooltip-' + el.data('skin') : '';
    var width = el.data('width') === 'auto' ? 'tooltop-auto-width' : '';
    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';
    var placement = el.data('placement') ? el.data('placement') : 'left';
    el.tooltip({
      trigger: triggerValue,
      template: '<div class="tooltip ' + skin + ' ' + width + '" role="tooltip">\
                <div class="arrow"></div>\
                <div class="tooltip-inner"></div>\
            </div>'
    });
  };

  var _initTooltips = function initTooltips() {
    // init bootstrap tooltips
    $('[data-toggle="tooltip"]').each(function () {
      _initTooltip($(this));
    });
  };

  var _initPopover = function initPopover(el) {
    var skin = el.data('skin') ? 'popover-' + el.data('skin') : '';
    var triggerValue = el.data('trigger') ? el.data('trigger') : 'hover';
    el.popover({
      trigger: triggerValue,
      template: '\
            <div class="popover ' + skin + '" role="tooltip">\
                <div class="arrow"></div>\
                <h3 class="popover-header"></h3>\
                <div class="popover-body"></div>\
            </div>'
    });
  };

  var _initPopovers = function initPopovers() {
    // init bootstrap popover
    $('[data-toggle="popover"]').each(function () {
      _initPopover($(this));
    });
  };

  var initFileInput = function initFileInput() {
    // init bootstrap popover
    $('.custom-file-input').on('change', function () {
      var fileName = $(this).val();
      $(this).next('.custom-file-label').addClass("selected").html(fileName);
    });
  };

  var _initPortlet = function initPortlet(el, options) {
    // init portlet tools
    var el = $(el);
    var portlet = new KTPortlet(el[0], options);
  };

  var _initPortlets = function initPortlets() {
    // init portlet tools
    $('[data-ktportlet="true"]').each(function () {
      var el = $(this);

      if (el.data('data-ktportlet-initialized') !== true) {
        _initPortlet(el, {});

        el.data('data-ktportlet-initialized', true);
      }
    });
  };

  var initScroll = function initScroll() {
    $('[data-scroll="true"]').each(function () {
      var el = $(this);
      KTUtil.scrollInit(this, {
        mobileNativeScroll: true,
        handleWindowResize: true,
        rememberPosition: el.data('remember-position') == 'true' ? true : false,
        height: function height() {
          if (KTUtil.isInResponsiveRange('tablet-and-mobile') && el.data('mobile-height')) {
            return el.data('mobile-height');
          } else {
            return el.data('height');
          }
        }
      });
    });
  };

  var initAlerts = function initAlerts() {
    // init bootstrap popover
    $('body').on('click', '[data-close=alert]', function () {
      $(this).closest('.alert').hide();
    });
  };

  var _initSticky = function initSticky() {
    var sticky = new Sticky('[data-sticky="true"]');
  };

  var _initAbsoluteDropdown = function initAbsoluteDropdown(context) {
    var dropdownMenu;

    if (!context) {
      return;
    }

    $('body').on('show.bs.dropdown', context, function (e) {
      dropdownMenu = $(e.target).find('.dropdown-menu');
      $('body').append(dropdownMenu.detach());
      dropdownMenu.css('display', 'block');
      dropdownMenu.position({
        'my': 'right top',
        'at': 'right bottom',
        'of': $(e.relatedTarget)
      });
    }).on('hide.bs.dropdown', context, function (e) {
      $(e.target).append(dropdownMenu.detach());
      dropdownMenu.hide();
    });
  };

  var initAbsoluteDropdowns = function initAbsoluteDropdowns() {
    $('body').on('show.bs.dropdown', function (e) {
      if ($(e.target).find("[data-attach='body']").length === 0) {
        return;
      }

      var dropdownMenu = $(e.target).find('.dropdown-menu');
      $('body').append(dropdownMenu.detach());
      dropdownMenu.css('display', 'block');
      dropdownMenu.position({
        'my': 'right top',
        'at': 'right bottom',
        'of': $(e.relatedTarget)
      });
    });
    $('body').on('hide.bs.dropdown', function (e) {
      if ($(e.target).find("[data-attach='body']").length === 0) {
        return;
      }

      var dropdownMenu = $(e.target).find('.dropdown-menu');
      $(e.target).append(dropdownMenu.detach());
      dropdownMenu.hide();
    });
  };

  return {
    init: function init(options) {
      if (options && options.colors) {
        colors = options.colors;
      }

      KTApp.initComponents();
    },
    initComponents: function initComponents() {
      initScroll();

      _initTooltips();

      _initPopovers();

      initAlerts();

      _initPortlets();

      initFileInput();

      _initSticky();

      initAbsoluteDropdowns();
    },
    initTooltips: function initTooltips() {
      _initTooltips();
    },
    initTooltip: function initTooltip(el) {
      _initTooltip(el);
    },
    initPopovers: function initPopovers() {
      _initPopovers();
    },
    initPopover: function initPopover(el) {
      _initPopover(el);
    },
    initPortlet: function initPortlet(el, options) {
      _initPortlet(el, options);
    },
    initPortlets: function initPortlets() {
      _initPortlets();
    },
    initSticky: function initSticky() {
      _initSticky();
    },
    initAbsoluteDropdown: function initAbsoluteDropdown(context) {
      _initAbsoluteDropdown(context);
    },
    block: function block(target, options) {
      var el = $(target);
      options = $.extend(true, {
        opacity: 0.05,
        overlayColor: '#000000',
        type: '',
        size: '',
        state: 'brand',
        centerX: true,
        centerY: true,
        message: '',
        shadow: true,
        width: 'auto'
      }, options);
      var html;
      var version = options.type ? 'spinner--' + options.type : '';
      var state = options.state ? 'spinner--' + options.state : '';
      var size = options.size ? 'spinner--' + options.size : '';
      var spinner = '<div class="spinner ' + version + ' ' + state + ' ' + size + '"></div';

      if (options.message && options.message.length > 0) {
        var classes = 'blockui ' + (options.shadow === false ? 'blockui' : '');
        html = '<div class="' + classes + '"><span>' + options.message + '</span><span>' + spinner + '</span></div>';
        var el = document.createElement('div');
        KTUtil.get('body').prepend(el);
        KTUtil.addClass(el, classes);
        el.innerHTML = '<span>' + options.message + '</span><span>' + spinner + '</span>';
        options.width = KTUtil.actualWidth(el) + 10;
        KTUtil.remove(el);

        if (target == 'body') {
          html = '<div class="' + classes + '" style="margin-left:-' + options.width / 2 + 'px;"><span>' + options.message + '</span><span>' + spinner + '</span></div>';
        }
      } else {
        html = spinner;
      }

      var params = {
        message: html,
        centerY: options.centerY,
        centerX: options.centerX,
        css: {
          top: '30%',
          left: '50%',
          border: '0',
          padding: '0',
          backgroundColor: 'none',
          width: options.width
        },
        overlayCSS: {
          backgroundColor: options.overlayColor,
          opacity: options.opacity,
          cursor: 'wait',
          zIndex: '10'
        },
        onUnblock: function onUnblock() {
          if (el && el[0]) {
            KTUtil.css(el[0], 'position', '');
            KTUtil.css(el[0], 'zoom', '');
          }
        }
      };

      if (target == 'body') {
        params.css.top = '50%';
        $.blockUI(params);
      } else {
        var el = $(target);
        el.block(params);
      }
    },
    unblock: function unblock(target) {
      if (target && target != 'body') {
        $(target).unblock();
      } else {
        $.unblockUI();
      }
    },
    blockPage: function blockPage(options) {
      return KTApp.block('body', options);
    },
    unblockPage: function unblockPage() {
      return KTApp.unblock('body');
    },
    progress: function progress(target, options) {
      var skin = options && options.skin ? options.skin : 'light';
      var alignment = options && options.alignment ? options.alignment : 'right';
      var size = options && options.size ? ' spinner--' + options.size : '';
      var classes = 'spinner ' + 'spinner--' + skin + ' spinner--' + alignment + size;
      KTApp.unprogress(target);
      KTUtil.attr(target, 'disabled', true);
      $(target).addClass(classes);
      $(target).data('progress-classes', classes);
    },
    unprogress: function unprogress(target) {
      $(target).removeClass($(target).data('progress-classes'));
      KTUtil.removeAttr(target, 'disabled');
    },
    getStateColor: function getStateColor(name) {
      return colors["state"][name];
    },
    getBaseColor: function getBaseColor(type, level) {
      return colors["base"][type][level - 1];
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTApp;
}

var KTAppOptions = {
  "colors": {
    "state": {
      "brand": "#007cc3",
      "metal": "#c4c5d6",
      "light": "#ffffff",
      "accent": "#00c5dc",
      "primary": "#007cc3",
      "success": "#34bfa3",
      "info": "#36a3f7",
      "warning": "#ffb822",
      "danger": "#fd3995",
      "focus": "#1d4670"
    },
    "base": {
      "label": ["#c5cbe3", "#a1a8c3", "#3d4465", "#3e4466"],
      "shape": ["#f0f3ff", "#d9dffa", "#afb4d4", "#646c9a"]
    }
  }
}; // Initialize KTApp class on document ready

$(document).ready(function () {
  KTApp.init(KTAppOptions);
});

/***/ }),

/***/ "./resources/assets/js/global/components/base/avatar.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/avatar.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// plugin setup
var KTAvatar = function KTAvatar(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {}; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('avatar')) {
        the = KTUtil.data(element).get('avatar');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('avatar', the);
      }

      return the;
    },

    /**
     * Init avatar
     */
    init: function init(options) {
      the.element = element;
      the.events = [];
      the.input = KTUtil.find(element, 'input[type="file"]');
      the.holder = KTUtil.find(element, '.avatar__holder');
      the.cancel = KTUtil.find(element, '.avatar__cancel');
      the.src = KTUtil.css(the.holder, 'backgroundImage'); // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Handle avatar change
      KTUtil.addEvent(the.input, 'change', function (e) {
        e.preventDefault();

        if (the.input && the.input.files && the.input.files[0]) {
          var reader = new FileReader();

          reader.onload = function (e) {
            KTUtil.css(the.holder, 'background-image', 'url(' + e.target.result + ')');
          };

          reader.readAsDataURL(the.input.files[0]);
          KTUtil.addClass(the.element, 'avatar--changed');
        }
      }); // Handle avatar cancel

      KTUtil.addEvent(the.cancel, 'click', function (e) {
        e.preventDefault();
        KTUtil.removeClass(the.element, 'avatar--changed');
        KTUtil.css(the.holder, 'background-image', the.src);
        the.input.value = "";
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTAvatar;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/dialog.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/dialog.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTDialog = function KTDialog(options) {
  // Main object
  var the = this; // Get element object

  var element;
  var body = KTUtil.get('body'); // Default options

  var defaultOptions = {
    'placement': 'top center',
    'type': 'loader',
    'width': 100,
    'state': 'default',
    'message': 'Loading...'
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      Plugin.init(options);
      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.state = false;
    },

    /**
     * Show dialog
     */
    show: function show() {
      Plugin.eventTrigger('show');
      element = document.createElement("DIV");
      KTUtil.setHTML(element, the.options.message);
      KTUtil.addClass(element, 'dialog dialog--shown');
      KTUtil.addClass(element, 'dialog--' + the.options.state);
      KTUtil.addClass(element, 'dialog--' + the.options.type);

      if (the.options.placement === 'top center') {
        KTUtil.addClass(element, 'dialog--top-center');
      }

      body.appendChild(element);
      the.state = 'shown';
      Plugin.eventTrigger('shown');
      return the;
    },

    /**
     * Hide dialog
     */
    hide: function hide() {
      if (element) {
        Plugin.eventTrigger('hide');
        element.remove();
        the.state = 'hidden';
        Plugin.eventTrigger('hidden');
      }

      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Check shown state
   */


  the.shown = function () {
    return the.state == 'shown';
  };
  /**
   * Check hidden state
   */


  the.hidden = function () {
    return the.state == 'hidden';
  };
  /**
   * Show dialog
   */


  the.show = function () {
    return Plugin.show();
  };
  /**
   * Hide dialog
   */


  the.hide = function () {
    return Plugin.hide();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTDialog;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/header.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/header.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTHeader = function KTHeader(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (element === undefined) {
    return;
  } // Default options


  var defaultOptions = {
    classic: false,
    offset: {
      mobile: 150,
      desktop: 200
    },
    minimize: {
      mobile: false,
      desktop: false
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTHeader}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('header')) {
        the = KTUtil.data(element).get('header');
      } else {
        // reset header
        Plugin.init(options); // build header

        Plugin.build();
        KTUtil.data(element).set('header', the);
      }

      return the;
    },

    /**
     * Handles subheader click toggle
     * @returns {KTHeader}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },

    /**
     * Reset header
     * @returns {KTHeader}
     */
    build: function build() {
      var lastScrollTop = 0;
      var eventTriggerState = true;
      var viewportHeight = KTUtil.getViewPort().height;
      var documentHeight = KTUtil.getDocumentHeight();

      if (the.options.minimize.mobile === false && the.options.minimize.desktop === false) {
        return;
      }

      window.addEventListener('scroll', function () {
        var offset = 0,
            on,
            off,
            st;

        if (KTUtil.isInResponsiveRange('desktop')) {
          offset = the.options.offset.desktop;
          on = the.options.minimize.desktop.on;
          off = the.options.minimize.desktop.off;
        } else if (KTUtil.isInResponsiveRange('tablet-and-mobile')) {
          offset = the.options.offset.mobile;
          on = the.options.minimize.mobile.on;
          off = the.options.minimize.mobile.off;
        }

        st = KTUtil.getScrollTop();

        if (KTUtil.isInResponsiveRange('tablet-and-mobile') && the.options.classic && the.options.classic.mobile || KTUtil.isInResponsiveRange('desktop') && the.options.classic && the.options.classic.desktop) {
          if (st > offset) {
            // down scroll mode
            KTUtil.addClass(body, on);
            KTUtil.removeClass(body, off);

            if (eventTriggerState) {
              Plugin.eventTrigger('minimizeOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            KTUtil.addClass(body, off);
            KTUtil.removeClass(body, on);

            if (eventTriggerState == false) {
              Plugin.eventTrigger('minimizeOff', the);
              eventTriggerState = true;
            }
          }
        } else {
          if (st > offset && lastScrollTop < st) {
            // down scroll mode
            KTUtil.addClass(body, on);
            KTUtil.removeClass(body, off);

            if (eventTriggerState) {
              Plugin.eventTrigger('minimizeOn', the);
              eventTriggerState = false;
            }
          } else {
            // back scroll mode
            KTUtil.addClass(body, off);
            KTUtil.removeClass(body, on);

            if (eventTriggerState == false) {
              Plugin.eventTrigger('minimizeOff', the);
              eventTriggerState = true;
            }
          }

          lastScrollTop = st;
        }
      });
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTHeader;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/menu.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/global/components/base/menu.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTMenu = function KTMenu(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    // scrollable area with Perfect Scroll
    scroll: {
      rememberPosition: false
    },
    // accordion submenu mode
    accordion: {
      slideSpeed: 200,
      // accordion toggle slide speed in milliseconds
      autoScroll: false,
      // enable auto scrolling(focus) to the clicked menu item
      autoScrollSpeed: 1200,
      expandAll: true // allow having multiple expanded accordions in the menu

    },
    // dropdown submenu mode
    dropdown: {
      timeout: 500 // timeout in milliseconds to show and hide the hoverable submenu dropdown

    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {KTMenu}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('menu')) {
        the = KTUtil.data(element).get('menu');
      } else {
        // reset menu
        Plugin.init(options); // reset menu

        Plugin.reset(); // build menu

        Plugin.build();
        KTUtil.data(element).set('menu', the);
      }

      return the;
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    init: function init(options) {
      the.events = [];
      the.eventHandlers = {}; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0;
      the.uid = KTUtil.getUniqueID();
    },
    update: function update(options) {
      // merge default and user defined options
      the.options = KTUtil.deepExtend({}, defaultOptions, options); // pause menu

      the.pauseDropdownHoverTime = 0; // reset menu

      Plugin.reset();
      the.eventHandlers = {}; // build menu

      Plugin.build();
      KTUtil.data(element).set('menu', the);
    },
    reload: function reload() {
      // reset menu
      Plugin.reset(); // build menu

      Plugin.build(); // reset submenu props

      Plugin.resetSubmenuProps();
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    build: function build() {
      // General accordion submenu toggle
      the.eventHandlers['event_1'] = KTUtil.on(element, '.menu__toggle', 'click', Plugin.handleSubmenuAccordion); // Dropdown mode(hoverable)

      if (Plugin.getSubmenuMode() === 'dropdown' || Plugin.isConditionalSubmenuDropdown()) {
        // dropdown submenu - hover toggle
        the.eventHandlers['event_2'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="hover"]', 'mouseover', Plugin.handleSubmenuDrodownHoverEnter);
        the.eventHandlers['event_3'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="hover"]', 'mouseout', Plugin.handleSubmenuDrodownHoverExit); // dropdown submenu - click toggle

        the.eventHandlers['event_4'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="click"] > .menu__toggle, [data-ktmenu-submenu-toggle="click"] > .menu__link .menu__toggle', 'click', Plugin.handleSubmenuDropdownClick);
        the.eventHandlers['event_5'] = KTUtil.on(element, '[data-ktmenu-submenu-toggle="tab"] > .menu__toggle, [data-ktmenu-submenu-toggle="tab"] > .menu__link .menu__toggle', 'click', Plugin.handleSubmenuDropdownTabClick);
      } // handle link click


      the.eventHandlers['event_6'] = KTUtil.on(element, '.menu__item > .menu__link:not(.menu__toggle):not(.menu__link--toggle-skip)', 'click', Plugin.handleLinkClick); // Init scrollable menu

      if (the.options.scroll && the.options.scroll.height) {
        Plugin.scrollInit();
      }
    },

    /**
     * Reset menu
     * @returns {KTMenu}
     */
    reset: function reset() {
      KTUtil.off(element, 'click', the.eventHandlers['event_1']); // dropdown submenu - hover toggle

      KTUtil.off(element, 'mouseover', the.eventHandlers['event_2']);
      KTUtil.off(element, 'mouseout', the.eventHandlers['event_3']); // dropdown submenu - click toggle

      KTUtil.off(element, 'click', the.eventHandlers['event_4']);
      KTUtil.off(element, 'click', the.eventHandlers['event_5']); // handle link click

      KTUtil.off(element, 'click', the.eventHandlers['event_6']);
    },

    /**
     * Init scroll menu
     *
    */
    scrollInit: function scrollInit() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollDestroy(element);
        KTUtil.scrollInit(element, {
          mobileNativeScroll: true,
          windowScroll: false,
          resetHeightOnDestroy: true,
          handleWindowResize: true,
          height: the.options.scroll.height,
          rememberPosition: the.options.scroll.rememberPosition
        });
      } else {
        KTUtil.scrollDestroy(element);
      }
    },

    /**
     * Update scroll menu
    */
    scrollUpdate: function scrollUpdate() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollUpdate(element);
      }
    },

    /**
     * Scroll top
    */
    scrollTop: function scrollTop() {
      if (the.options.scroll && the.options.scroll.height) {
        KTUtil.scrollTop(element);
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    getSubmenuMode: function getSubmenuMode(el) {
      if (KTUtil.isInResponsiveRange('desktop')) {
        if (el && KTUtil.hasAttr(el, 'data-ktmenu-submenu-toggle') && KTUtil.attr(el, 'data-ktmenu-submenu-toggle') === 'hover') {
          return 'dropdown';
        }

        if (KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
          if (KTUtil.hasClasses(body, the.options.submenu.desktop.state.body)) {
            return the.options.submenu.desktop.state.mode;
          } else {
            return the.options.submenu.desktop["default"];
          }
        } else if (KTUtil.isset(the.options.submenu, 'desktop')) {
          return the.options.submenu.desktop;
        }
      } else if (KTUtil.isInResponsiveRange('tablet') && KTUtil.isset(the.options.submenu, 'tablet')) {
        return the.options.submenu.tablet;
      } else if (KTUtil.isInResponsiveRange('mobile') && KTUtil.isset(the.options.submenu, 'mobile')) {
        return the.options.submenu.mobile;
      } else {
        return false;
      }
    },

    /**
     * Get submenu mode for current breakpoint and menu state
     * @returns {KTMenu}
     */
    isConditionalSubmenuDropdown: function isConditionalSubmenuDropdown() {
      if (KTUtil.isInResponsiveRange('desktop') && KTUtil.isset(the.options.submenu, 'desktop.state.body')) {
        return true;
      } else {
        return false;
      }
    },

    /**
     * Reset submenu attributes
     * @returns {KTMenu}
     */
    resetSubmenuProps: function resetSubmenuProps(e) {
      var submenus = KTUtil.findAll(element, '.menu__submenu');

      if (submenus) {
        for (var i = 0, len = submenus.length; i < len; i++) {
          KTUtil.css(submenus[0], 'display', '');
          KTUtil.css(submenus[0], 'overflow', '');
        }
      }
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverEnter: function handleSubmenuDrodownHoverEnter(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      if (the.resumeDropdownHover() === false) {
        return;
      }

      var item = this;

      if (item.getAttribute('data-hover') === '1') {
        item.removeAttribute('data-hover');
        clearTimeout(item.getAttribute('data-timeout'));
        item.removeAttribute('data-timeout');
      }

      Plugin.showSubmenuDropdown(item);
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    handleSubmenuDrodownHoverExit: function handleSubmenuDrodownHoverExit(e) {
      if (the.resumeDropdownHover() === false) {
        return;
      }

      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this;
      var time = the.options.dropdown.timeout;
      var timeout = setTimeout(function () {
        if (item.getAttribute('data-hover') === '1') {
          Plugin.hideSubmenuDropdown(item, true);
        }
      }, time);
      item.setAttribute('data-hover', '1');
      item.setAttribute('data-timeout', timeout);
    },

    /**
     * Handles submenu click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClick: function handleSubmenuDropdownClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.menu__item');

      if (item.getAttribute('data-ktmenu-submenu-mode') === 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'menu__item--hover') === false) {
        KTUtil.addClass(item, 'menu__item--open-dropdown');
        Plugin.showSubmenuDropdown(item);
      } else {
        KTUtil.removeClass(item, 'menu__item--open-dropdown');
        Plugin.hideSubmenuDropdown(item, true);
      }

      e.preventDefault();
    },

    /**
     * Handles tab click toggle
     * @returns {KTMenu}
     */
    handleSubmenuDropdownTabClick: function handleSubmenuDropdownTabClick(e) {
      if (Plugin.getSubmenuMode(this) === 'accordion') {
        return;
      }

      var item = this.closest('.menu__item');

      if (item.getAttribute('data-ktmenu-submenu-mode') === 'accordion') {
        return;
      }

      if (KTUtil.hasClass(item, 'menu__item--hover') === false) {
        KTUtil.addClass(item, 'menu__item--open-dropdown');
        Plugin.showSubmenuDropdown(item);
      }

      e.preventDefault();
    },

    /**
     * Handles link click
     * @returns {KTMenu}
     */
    handleLinkClick: function handleLinkClick(e) {
      var submenu = this.closest('.menu__item.menu__item--submenu'); //

      var result = Plugin.eventTrigger('linkClick', this, e);

      if (result === false) {
        return;
      }

      if (submenu && Plugin.getSubmenuMode(submenu) === 'dropdown') {
        Plugin.hideSubmenuDropdowns();
      }
    },

    /**
     * Handles submenu dropdown close on link click
     * @returns {KTMenu}
     */
    handleSubmenuDropdownClose: function handleSubmenuDropdownClose(e, el) {
      // exit if its not submenu dropdown mode
      if (Plugin.getSubmenuMode(el) === 'accordion') {
        return;
      }

      var shown = element.querySelectorAll('.menu__item.menu__item--submenu.menu__item--hover:not(.menu__item--tabs)'); // check if currently clicked link's parent item ha

      if (shown.length > 0 && KTUtil.hasClass(el, 'menu__toggle') === false && el.querySelectorAll('.menu__toggle').length === 0) {
        // close opened dropdown menus
        for (var i = 0, len = shown.length; i < len; i++) {
          Plugin.hideSubmenuDropdown(shown[0], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    handleSubmenuAccordion: function handleSubmenuAccordion(e, el) {
      var query;
      var item = el ? el : this;

      if (Plugin.getSubmenuMode(el) === 'dropdown' && (query = item.closest('.menu__item'))) {
        if (query.getAttribute('data-ktmenu-submenu-mode') !== 'accordion') {
          e.preventDefault();
          return;
        }
      }

      var li = item.closest('.menu__item');
      var submenu = KTUtil.child(li, '.menu__submenu, .menu__inner');

      if (KTUtil.hasClass(item.closest('.menu__item'), 'menu__item--open-always')) {
        return;
      }

      if (li && submenu) {
        e.preventDefault();
        var speed = the.options.accordion.slideSpeed;
        var hasClosables = false;

        if (KTUtil.hasClass(li, 'menu__item--open') === false) {
          // hide other accordions
          if (the.options.accordion.expandAll === false) {
            var subnav = item.closest('.menu__nav, .menu__subnav');
            var closables = KTUtil.children(subnav, '.menu__item.menu__item--open.menu__item--submenu:not(.menu__item--here):not(.menu__item--open-always)');

            if (subnav && closables) {
              var _loop = function _loop(i, len) {
                var el_ = closables[0];
                var submenu_ = KTUtil.child(el_, '.menu__submenu');

                if (submenu_) {
                  KTUtil.slideUp(submenu_, speed, function () {
                    Plugin.scrollUpdate();
                    KTUtil.removeClass(el_, 'menu__item--open');
                  });
                }
              };

              for (var i = 0, len = closables.length; i < len; i++) {
                _loop(i, len);
              }
            }
          }

          KTUtil.slideDown(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.scrollUpdate();
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.addClass(li, 'menu__item--open');
        } else {
          KTUtil.slideUp(submenu, speed, function () {
            Plugin.scrollToItem(item);
            Plugin.eventTrigger('submenuToggle', submenu, e);
          });
          KTUtil.removeClass(li, 'menu__item--open');
        }
      }
    },

    /**
     * scroll to item function
     * @returns {KTMenu}
     */
    scrollToItem: function scrollToItem(item) {
      // handle auto scroll for accordion submenus
      if (KTUtil.isInResponsiveRange('desktop') && the.options.accordion.autoScroll && element.getAttribute('data-ktmenu-scroll') !== '1') {
        KTUtil.scrollTo(item, the.options.accordion.autoScrollSpeed);
      }
    },

    /**
     * Hide submenu dropdown
     * @returns {KTMenu}
     */
    hideSubmenuDropdown: function hideSubmenuDropdown(item, classAlso) {
      // remove submenu activation class
      if (classAlso) {
        KTUtil.removeClass(item, 'menu__item--hover');
        KTUtil.removeClass(item, 'menu__item--active-tab');
      } // clear timeout


      item.removeAttribute('data-hover');

      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {
        KTUtil.removeClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));
      }

      var timeout = item.getAttribute('data-timeout');
      item.removeAttribute('data-timeout');
      clearTimeout(timeout);
    },

    /**
     * Hide submenu dropdowns
     * @returns {KTMenu}
     */
    hideSubmenuDropdowns: function hideSubmenuDropdowns() {
      var items;

      if (items = element.querySelectorAll('.menu__item--submenu.menu__item--hover:not(.menu__item--tabs):not([data-ktmenu-submenu-toggle="tab"])')) {
        for (var j = 0, cnt = items.length; j < cnt; j++) {
          Plugin.hideSubmenuDropdown(items[j], true);
        }
      }
    },

    /**
     * helper functions
     * @returns {KTMenu}
     */
    showSubmenuDropdown: function showSubmenuDropdown(item) {
      // close active submenus
      var list = element.querySelectorAll('.menu__item--submenu.menu__item--hover, .menu__item--submenu.menu__item--active-tab');

      if (list) {
        for (var i = 0, len = list.length; i < len; i++) {
          var el = list[i];

          if (item !== el && el.contains(item) === false && item.contains(el) === false) {
            Plugin.hideSubmenuDropdown(el, true);
          }
        }
      } // add submenu activation class


      KTUtil.addClass(item, 'menu__item--hover');

      if (item.getAttribute('data-ktmenu-dropdown-toggle-class')) {
        KTUtil.addClass(body, item.getAttribute('data-ktmenu-dropdown-toggle-class'));
      }
    },

    /**
     * Handles submenu slide toggle
     * @returns {KTMenu}
     */
    createSubmenuDropdownClickDropoff: function createSubmenuDropdownClickDropoff(el) {
      var query;
      var zIndex = (query = KTUtil.child(el, '.menu__submenu') ? KTUtil.css(query, 'z-index') : 0) - 1;
      var dropoff = document.createElement('<div class="menu__dropoff" style="background: transparent; position: fixed; top: 0; bottom: 0; left: 0; right: 0; z-index: ' + zIndex + '"></div>');
      body.appendChild(dropoff);
      KTUtil.addEvent(dropoff, 'click', function (e) {
        e.stopPropagation();
        e.preventDefault();
        KTUtil.remove(this);
        Plugin.hideSubmenuDropdown(el, true);
      });
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    pauseDropdownHover: function pauseDropdownHover(time) {
      var date = new Date();
      the.pauseDropdownHoverTime = date.getTime() + time;
    },

    /**
     * Handles submenu hover toggle
     * @returns {KTMenu}
     */
    resumeDropdownHover: function resumeDropdownHover() {
      var date = new Date();
      return date.getTime() > the.pauseDropdownHoverTime;
    },

    /**
     * Reset menu's current active item
     * @returns {KTMenu}
     */
    resetActiveItem: function resetActiveItem(item) {
      var list;
      var parents;
      list = element.querySelectorAll('.menu__item--active');

      for (var i = 0, len = list.length; i < len; i++) {
        var el = list[0];
        KTUtil.removeClass(el, 'menu__item--active');
        KTUtil.hide(KTUtil.child(el, '.menu__submenu'));
        parents = KTUtil.parents(el, '.menu__item--submenu') || [];

        for (var i_ = 0, len_ = parents.length; i_ < len_; i_++) {
          var el_ = parents[i];
          KTUtil.removeClass(el_, 'menu__item--open');
          KTUtil.hide(KTUtil.child(el_, '.menu__submenu'));
        }
      } // close open submenus


      if (the.options.accordion.expandAll === false) {
        if (list = element.querySelectorAll('.menu__item--open')) {
          for (var _i = 0, _len = list.length; _i < _len; _i++) {
            KTUtil.removeClass(parents[0], 'menu__item--open');
          }
        }
      }
    },

    /**
     * Sets menu's active item
     * @returns {KTMenu}
     */
    setActiveItem: function setActiveItem(item) {
      // reset current active item
      Plugin.resetActiveItem();
      var parents = KTUtil.parents(item, '.menu__item--submenu') || [];

      for (var i = 0, len = parents.length; i < len; i++) {
        KTUtil.addClass(KTUtil.get(parents[i]), 'menu__item--open');
      }

      KTUtil.addClass(KTUtil.get(item), 'menu__item--active');
    },

    /**
     * Returns page breadcrumbs for the menu's active item
     * @returns {KTMenu}
     */
    getBreadcrumbs: function getBreadcrumbs(item) {
      var query;
      var breadcrumbs = [];
      var link = KTUtil.child(item, '.menu__link');
      breadcrumbs.push({
        text: query = KTUtil.child(link, '.menu__link-text') ? query.innerHTML : '',
        title: link.getAttribute('title'),
        href: link.getAttribute('href')
      });
      var parents = KTUtil.parents(item, '.menu__item--submenu');

      for (var i = 0, len = parents.length; i < len; i++) {
        var submenuLink = KTUtil.child(parents[i], '.menu__link');
        breadcrumbs.push({
          text: query = KTUtil.child(submenuLink, '.menu__link-text') ? query.innerHTML : '',
          title: submenuLink.getAttribute('title'),
          href: submenuLink.getAttribute('href')
        });
      }

      return breadcrumbs.reverse();
    },

    /**
     * Returns page title for the menu's active item
     * @returns {KTMenu}
     */
    getPageTitle: function getPageTitle(item) {
      var query;
      return query = KTUtil.child(item, '.menu__link-text') ? query.innerHTML : '';
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, target, e) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name === name) {
          if (event.one === true) {
            if (event.fired === false) {
              the.events[i].fired = true;
              return event.handler.call(this, target, e);
            }
          } else {
            return event.handler.call(this, target, e);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    },
    removeEvent: function removeEvent(name) {
      if (the.events[name]) {
        delete the.events[name];
      }
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Update scroll
   */


  the.scrollUpdate = function () {
    return Plugin.scrollUpdate();
  };
  /**
   * Re-init scroll
   */


  the.scrollReInit = function () {
    return Plugin.scrollInit();
  };
  /**
   * Scroll top
   */


  the.scrollTop = function () {
    return Plugin.scrollTop();
  };
  /**
   * Set active menu item
   */


  the.setActiveItem = function (item) {
    return Plugin.setActiveItem(item);
  };

  the.reload = function () {
    return Plugin.reload();
  };

  the.update = function (options) {
    return Plugin.update(options);
  };
  /**
   * Set breadcrumb for menu item
   */


  the.getBreadcrumbs = function (item) {
    return Plugin.getBreadcrumbs(item);
  };
  /**
   * Set page title for menu item
   */


  the.getPageTitle = function (item) {
    return Plugin.getPageTitle(item);
  };
  /**
   * Get submenu mode
   */


  the.getSubmenuMode = function (el) {
    return Plugin.getSubmenuMode(el);
  };
  /**
   * Hide dropdown
   * @returns {Object}
   */


  the.hideDropdown = function (item) {
    Plugin.hideSubmenuDropdown(item, true);
  };
  /**
   * Hide dropdowns
   * @returns {Object}
   */


  the.hideDropdowns = function () {
    Plugin.hideSubmenuDropdowns();
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.pauseDropdownHover = function (time) {
    Plugin.pauseDropdownHover(time);
  };
  /**
   * Disable menu for given time
   * @returns {Object}
   */


  the.resumeDropdownHover = function () {
    return Plugin.resumeDropdownHover();
  };
  /**
   * Register event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };

  the.off = function (name) {
    return Plugin.removeEvent(name);
  };

  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Handle plugin on window resize

  KTUtil.addResizeHandler(function () {
    if (init) {
      the.reload();
    }
  }); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTMenu;
} // Plugin global lazy initialization


document.addEventListener("click", function (e) {
  var body = KTUtil.get('body');
  var query;

  if (query = body.querySelectorAll('.menu__nav .menu__item.menu__item--submenu.menu__item--hover:not(.menu__item--tabs)[data-ktmenu-submenu-toggle="click"]')) {
    for (var i = 0, len = query.length; i < len; i++) {
      var element = query[i].closest('.menu__nav').parentNode;

      if (element) {
        var the = KTUtil.data(element).get('menu');

        if (!the) {
          break;
        }

        if (!the || the.getSubmenuMode() !== 'dropdown') {
          break;
        }

        if (e.target !== element && element.contains(e.target) === false) {
          the.hideDropdowns();
        }
      }
    }
  }
});

/***/ }),

/***/ "./resources/assets/js/global/components/base/offcanvas.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/global/components/base/offcanvas.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTOffcanvas = function KTOffcanvas(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {}; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    construct: function construct(options) {
      if (KTUtil.data(element).has('offcanvas')) {
        the = KTUtil.data(element).get('offcanvas');
      } else {
        // reset offcanvas
        Plugin.init(options); // build offcanvas

        Plugin.build();
        KTUtil.data(element).set('offcanvas', the);
      }

      return the;
    },
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.overlay;
      the.classBase = the.options.baseClass;
      the.classShown = the.classBase + '--on';
      the.classOverlay = the.classBase + '-overlay';
      the.state = KTUtil.hasClass(element, the.classShown) ? 'shown' : 'hidden';
    },
    build: function build() {
      // offcanvas toggle
      if (the.options.toggleBy) {
        if (typeof the.options.toggleBy === 'string') {
          KTUtil.addEvent(the.options.toggleBy, 'click', function (e) {
            e.preventDefault();
            Plugin.toggle();
          });
        } else if (the.options.toggleBy && the.options.toggleBy[0]) {
          if (the.options.toggleBy[0].target) {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(the.options.toggleBy[i].target, 'click', function (e) {
                e.preventDefault();
                Plugin.toggle();
              });
            }
          } else {
            for (var i in the.options.toggleBy) {
              KTUtil.addEvent(the.options.toggleBy[i], 'click', function (e) {
                e.preventDefault();
                Plugin.toggle();
              });
            }
          }
        } else if (the.options.toggleBy && the.options.toggleBy.target) {
          KTUtil.addEvent(the.options.toggleBy.target, 'click', function (e) {
            e.preventDefault();
            Plugin.toggle();
          });
        }
      } // offcanvas close


      var closeBy = KTUtil.get(the.options.closeBy);

      if (closeBy) {
        KTUtil.addEvent(closeBy, 'click', function (e) {
          e.preventDefault();
          Plugin.hide();
        });
      } // Window resize


      KTUtil.addResizeHandler(function () {
        if (parseInt(KTUtil.css(element, 'left')) >= 0 || parseInt(KTUtil.css(element, 'right') >= 0) || KTUtil.css(element, 'position') != 'fixed') {
          KTUtil.css(element, 'opacity', '1');
        }
      });
    },
    isShown: function isShown(target) {
      return the.state == 'shown' ? true : false;
    },
    toggle: function toggle() {
      ;
      Plugin.eventTrigger('toggle');

      if (the.state == 'shown') {
        Plugin.hide(this);
      } else {
        Plugin.show(this);
      }
    },
    show: function show(target) {
      if (the.state == 'shown') {
        return;
      }

      Plugin.eventTrigger('beforeShow');
      Plugin.togglerClass(target, 'show'); // Offcanvas panel

      KTUtil.addClass(body, the.classShown);
      KTUtil.addClass(element, the.classShown);
      KTUtil.css(element, 'opacity', '1');
      the.state = 'shown';

      if (the.options.overlay) {
        the.overlay = KTUtil.insertAfter(document.createElement('DIV'), element);
        KTUtil.addClass(the.overlay, the.classOverlay);
        KTUtil.addEvent(the.overlay, 'click', function (e) {
          e.stopPropagation();
          e.preventDefault();
          Plugin.hide(target);
        });
      }

      Plugin.eventTrigger('afterShow');
    },
    hide: function hide(target) {
      if (the.state == 'hidden') {
        return;
      }

      Plugin.eventTrigger('beforeHide');
      Plugin.togglerClass(target, 'hide');
      KTUtil.removeClass(body, the.classShown);
      KTUtil.removeClass(element, the.classShown);
      the.state = 'hidden';

      if (the.options.overlay && the.overlay) {
        KTUtil.remove(the.overlay);
      }

      KTUtil.transitionEnd(element, function () {
        KTUtil.css(element, 'opacity', '0');
      });
      Plugin.eventTrigger('afterHide');
    },
    togglerClass: function togglerClass(target, mode) {
      // Toggler
      var id = KTUtil.attr(target, 'id');
      var toggleBy;

      if (the.options.toggleBy && the.options.toggleBy[0] && the.options.toggleBy[0].target) {
        for (var i in the.options.toggleBy) {
          if (the.options.toggleBy[i].target === id) {
            toggleBy = the.options.toggleBy[i];
          }
        }
      } else if (the.options.toggleBy && the.options.toggleBy.target) {
        toggleBy = the.options.toggleBy;
      }

      if (toggleBy) {
        var el = KTUtil.get(toggleBy.target);

        if (mode === 'show') {
          KTUtil.addClass(el, toggleBy.state);
        }

        if (mode === 'hide') {
          KTUtil.removeClass(el, toggleBy.state);
        }
      }
    },
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  the.setDefaults = function (options) {
    defaultOptions = options;
  };

  the.isShown = function () {
    return Plugin.isShown();
  };

  the.hide = function () {
    return Plugin.hide();
  };

  the.show = function () {
    return Plugin.show();
  };

  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };

  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTOffcanvas;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/portlet.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/global/components/base/portlet.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTPortlet = function KTPortlet(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    bodyToggleSpeed: 400,
    tooltips: true,
    tools: {
      toggle: {
        collapse: 'Collapse',
        expand: 'Expand'
      },
      reload: 'Reload',
      remove: 'Remove',
      fullscreen: {
        on: 'Fullscreen',
        off: 'Exit Fullscreen'
      }
    },
    sticky: {
      offset: 300,
      zIndex: 101
    }
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('portlet')) {
        the = KTUtil.data(element).get('portlet');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('portlet', the);
      }

      return the;
    },

    /**
     * Init portlet
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.head = KTUtil.child(element, '.portlet__head');
      the.foot = KTUtil.child(element, '.portlet__foot');

      if (KTUtil.child(element, '.portlet__body')) {
        the.body = KTUtil.child(element, '.portlet__body');
      } else if (KTUtil.child(element, '.form')) {
        the.body = KTUtil.child(element, '.form');
      }
    },

    /**
     * Build Form Wizard
     */
    build: function build() {
      // Remove
      var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

      if (remove) {
        KTUtil.addEvent(remove, 'click', function (e) {
          e.preventDefault();
          Plugin.remove();
        });
      } // Reload


      var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

      if (reload) {
        KTUtil.addEvent(reload, 'click', function (e) {
          e.preventDefault();
          Plugin.reload();
        });
      } // Toggle


      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle) {
        KTUtil.addEvent(toggle, 'click', function (e) {
          e.preventDefault();
          Plugin.toggle();
        });
      } //== Fullscreen


      var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

      if (fullscreen) {
        KTUtil.addEvent(fullscreen, 'click', function (e) {
          e.preventDefault();
          Plugin.fullscreen();
        });
      }

      Plugin.setupTooltips();
    },

    /**
     * Enable stickt mode
     */
    initSticky: function initSticky() {
      var lastScrollTop = 0;
      var offset = the.options.sticky.offset;

      if (!the.head) {
        return;
      }

      window.addEventListener('scroll', Plugin.onScrollSticky);
    },

    /**
     * Window scroll handle event for sticky portlet
     */
    onScrollSticky: function onScrollSticky(e) {
      var offset = the.options.sticky.offset;
      if (isNaN(offset)) return;
      var st = KTUtil.getScrollTop();

      if (st >= offset && KTUtil.hasClass(body, 'portlet--sticky') === false) {
        Plugin.eventTrigger('stickyOn');
        KTUtil.addClass(body, 'portlet--sticky');
        KTUtil.addClass(element, 'portlet--sticky');
        Plugin.updateSticky();
      } else if (st * 1.5 <= offset && KTUtil.hasClass(body, 'portlet--sticky')) {
        // back scroll mode
        Plugin.eventTrigger('stickyOff');
        KTUtil.removeClass(body, 'portlet--sticky');
        KTUtil.removeClass(element, 'portlet--sticky');
        Plugin.resetSticky();
      }
    },
    updateSticky: function updateSticky() {
      if (!the.head) {
        return;
      }

      var top;

      if (KTUtil.hasClass(body, 'portlet--sticky')) {
        if (the.options.sticky.position.top instanceof Function) {
          top = parseInt(the.options.sticky.position.top.call(this, the));
        } else {
          top = parseInt(the.options.sticky.position.top);
        }

        var left;

        if (the.options.sticky.position.left instanceof Function) {
          left = parseInt(the.options.sticky.position.left.call(this, the));
        } else {
          left = parseInt(the.options.sticky.position.left);
        }

        var right;

        if (the.options.sticky.position.right instanceof Function) {
          right = parseInt(the.options.sticky.position.right.call(this, the));
        } else {
          right = parseInt(the.options.sticky.position.right);
        }

        KTUtil.css(the.head, 'z-index', the.options.sticky.zIndex);
        KTUtil.css(the.head, 'top', top + 'px');
        KTUtil.css(the.head, 'left', left + 'px');
        KTUtil.css(the.head, 'right', right + 'px');
      }
    },
    resetSticky: function resetSticky() {
      if (!the.head) {
        return;
      }

      if (KTUtil.hasClass(body, 'portlet--sticky') === false) {
        KTUtil.css(the.head, 'z-index', '');
        KTUtil.css(the.head, 'top', '');
        KTUtil.css(the.head, 'left', '');
        KTUtil.css(the.head, 'right', '');
      }
    },

    /**
     * Remove portlet
     */
    remove: function remove() {
      if (Plugin.eventTrigger('beforeRemove') === false) {
        return;
      }

      if (KTUtil.hasClass(body, 'portlet--fullscreen') && KTUtil.hasClass(element, 'portlet--fullscreen')) {
        Plugin.fullscreen('off');
      }

      Plugin.removeTooltips();
      KTUtil.remove(element);
      Plugin.eventTrigger('afterRemove');
    },

    /**
     * Set content
     */
    setContent: function setContent(html) {
      if (html) {
        the.body.innerHTML = html;
      }
    },

    /**
     * Get body
     */
    getBody: function getBody() {
      return the.body;
    },

    /**
     * Get self
     */
    getSelf: function getSelf() {
      return element;
    },

    /**
     * Setup tooltips
     */
    setupTooltips: function setupTooltips() {
      if (the.options.tooltips) {
        var collapsed = KTUtil.hasClass(element, 'portlet--collapse') || KTUtil.hasClass(element, 'portlet--collapsed');
        var fullscreenOn = KTUtil.hasClass(body, 'portlet--fullscreen') && KTUtil.hasClass(element, 'portlet--fullscreen'); //== Remove

        var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

        if (remove) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(remove, {
            title: the.options.tools.remove,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(remove).set('tooltip', tip);
        } //== Reload


        var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

        if (reload) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(reload, {
            title: the.options.tools.reload,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(reload).set('tooltip', tip);
        } //== Toggle


        var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

        if (toggle) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(toggle, {
            title: collapsed ? the.options.tools.toggle.expand : the.options.tools.toggle.collapse,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(toggle).set('tooltip', tip);
        } //== Fullscreen


        var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

        if (fullscreen) {
          var placement = fullscreenOn ? 'bottom' : 'top';
          var tip = new Tooltip(fullscreen, {
            title: fullscreenOn ? the.options.tools.fullscreen.off : the.options.tools.fullscreen.on,
            placement: placement,
            offset: fullscreenOn ? '0,10px,0,0' : '0,5px',
            trigger: 'hover',
            template: '<div class="tooltip tooltip-portlet tooltip bs-tooltip-' + placement + '" role="tooltip">\
                            <div class="tooltip-arrow arrow"></div>\
                            <div class="tooltip-inner"></div>\
                        </div>'
          });
          KTUtil.data(fullscreen).set('tooltip', tip);
        }
      }
    },

    /**
     * Setup tooltips
     */
    removeTooltips: function removeTooltips() {
      if (the.options.tooltips) {
        //== Remove
        var remove = KTUtil.find(the.head, '[data-ktportlet-tool=remove]');

        if (remove && KTUtil.data(remove).has('tooltip')) {
          KTUtil.data(remove).get('tooltip').dispose();
        } //== Reload


        var reload = KTUtil.find(the.head, '[data-ktportlet-tool=reload]');

        if (reload && KTUtil.data(reload).has('tooltip')) {
          KTUtil.data(reload).get('tooltip').dispose();
        } //== Toggle


        var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

        if (toggle && KTUtil.data(toggle).has('tooltip')) {
          KTUtil.data(toggle).get('tooltip').dispose();
        } //== Fullscreen


        var fullscreen = KTUtil.find(the.head, '[data-ktportlet-tool=fullscreen]');

        if (fullscreen && KTUtil.data(fullscreen).has('tooltip')) {
          KTUtil.data(fullscreen).get('tooltip').dispose();
        }
      }
    },

    /**
     * Reload
     */
    reload: function reload() {
      Plugin.eventTrigger('reload');
    },

    /**
     * Toggle
     */
    toggle: function toggle() {
      if (KTUtil.hasClass(element, 'portlet--collapse') || KTUtil.hasClass(element, 'portlet--collapsed')) {
        Plugin.expand();
      } else {
        Plugin.collapse();
      }
    },

    /**
     * Collapse
     */
    collapse: function collapse() {
      if (Plugin.eventTrigger('beforeCollapse') === false) {
        return;
      }

      KTUtil.slideUp(the.body, the.options.bodyToggleSpeed, function () {
        Plugin.eventTrigger('afterCollapse');
      });
      KTUtil.addClass(element, 'portlet--collapse');
      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle && KTUtil.data(toggle).has('tooltip')) {
        KTUtil.data(toggle).get('tooltip').updateTitleContent(the.options.tools.toggle.expand);
      }
    },

    /**
     * Expand
     */
    expand: function expand() {
      if (Plugin.eventTrigger('beforeExpand') === false) {
        return;
      }

      KTUtil.slideDown(the.body, the.options.bodyToggleSpeed, function () {
        Plugin.eventTrigger('afterExpand');
      });
      KTUtil.removeClass(element, 'portlet--collapse');
      KTUtil.removeClass(element, 'portlet--collapsed');
      var toggle = KTUtil.find(the.head, '[data-ktportlet-tool=toggle]');

      if (toggle && KTUtil.data(toggle).has('tooltip')) {
        KTUtil.data(toggle).get('tooltip').updateTitleContent(the.options.tools.toggle.collapse);
      }
    },

    /**
     * fullscreen
     */
    fullscreen: function fullscreen(mode) {
      var d = {};
      var speed = 300;

      if (mode === 'off' || KTUtil.hasClass(body, 'portlet--fullscreen') && KTUtil.hasClass(element, 'portlet--fullscreen')) {
        Plugin.eventTrigger('beforeFullscreenOff');
        KTUtil.removeClass(body, 'portlet--fullscreen');
        KTUtil.removeClass(element, 'portlet--fullscreen');
        Plugin.removeTooltips();
        Plugin.setupTooltips();

        if (the.foot) {
          KTUtil.css(the.body, 'margin-bottom', '');
          KTUtil.css(the.foot, 'margin-top', '');
        }

        Plugin.eventTrigger('afterFullscreenOff');
      } else {
        Plugin.eventTrigger('beforeFullscreenOn');
        KTUtil.addClass(element, 'portlet--fullscreen');
        KTUtil.addClass(body, 'portlet--fullscreen');
        Plugin.removeTooltips();
        Plugin.setupTooltips();

        if (the.foot) {
          var height1 = parseInt(KTUtil.css(the.foot, 'height'));
          var height2 = parseInt(KTUtil.css(the.foot, 'height')) + parseInt(KTUtil.css(the.head, 'height'));
          KTUtil.css(the.body, 'margin-bottom', height1 + 'px');
          KTUtil.css(the.foot, 'margin-top', '-' + height2 + 'px');
        }

        Plugin.eventTrigger('afterFullscreenOn');
      }
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      //KTUtil.triggerCustomEvent(name);
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.remove = function () {
    return Plugin.remove(html);
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.initSticky = function () {
    return Plugin.initSticky();
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.updateSticky = function () {
    return Plugin.updateSticky();
  };
  /**
   * Remove portlet
   * @returns {KTPortlet}
   */


  the.resetSticky = function () {
    return Plugin.resetSticky();
  };
  /**
   * Destroy sticky portlet
   */


  the.destroySticky = function () {
    Plugin.resetSticky();
    window.removeEventListener('scroll', Plugin.onScrollSticky);
  };
  /**
   * Reload portlet
   * @returns {KTPortlet}
   */


  the.reload = function () {
    return Plugin.reload();
  };
  /**
   * Set portlet content
   * @returns {KTPortlet}
   */


  the.setContent = function (html) {
    return Plugin.setContent(html);
  };
  /**
   * Toggle portlet
   * @returns {KTPortlet}
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Collapse portlet
   * @returns {KTPortlet}
   */


  the.collapse = function () {
    return Plugin.collapse();
  };
  /**
   * Expand portlet
   * @returns {KTPortlet}
   */


  the.expand = function () {
    return Plugin.expand();
  };
  /**
   * Fullscreen portlet
   * @returns {MPortlet}
   */


  the.fullscreen = function () {
    return Plugin.fullscreen('on');
  };
  /**
   * Fullscreen portlet
   * @returns {MPortlet}
   */


  the.unFullscreen = function () {
    return Plugin.fullscreen('off');
  };
  /**
   * Get portletbody
   * @returns {jQuery}
   */


  the.getBody = function () {
    return Plugin.getBody();
  };
  /**
   * Get portletbody
   * @returns {jQuery}
   */


  the.getSelf = function () {
    return Plugin.getSelf();
  };
  /**
   * Attach event
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTPortlet;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/scrolltop.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/global/components/base/scrolltop.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTScrolltop = function KTScrolltop(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    offset: 300,
    speed: 600,
    toggleClass: 'scrolltop--on'
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Run plugin
     * @returns {mscrolltop}
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('scrolltop')) {
        the = KTUtil.data(element).get('scrolltop');
      } else {
        // reset scrolltop
        Plugin.init(options); // build scrolltop

        Plugin.build();
        KTUtil.data(element).set('scrolltop', the);
      }

      return the;
    },

    /**
     * Handles subscrolltop click toggle
     * @returns {mscrolltop}
     */
    init: function init(options) {
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
    },
    build: function build() {
      // handle window scroll
      if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {
        window.addEventListener('touchend', function () {
          Plugin.handle();
        });
        window.addEventListener('touchcancel', function () {
          Plugin.handle();
        });
        window.addEventListener('touchleave', function () {
          Plugin.handle();
        });
      } else {
        window.addEventListener('scroll', function () {
          Plugin.handle();
        });
      } // handle button click


      KTUtil.addEvent(element, 'click', Plugin.scroll);
    },

    /**
     * Handles scrolltop click scrollTop
     */
    handle: function handle() {
      var pos = window.pageYOffset; // current vertical position

      if (pos > the.options.offset) {
        KTUtil.addClass(body, the.options.toggleClass);
      } else {
        KTUtil.removeClass(body, the.options.toggleClass);
      }
    },

    /**
     * Handles scrolltop click scrollTop
     */
    scroll: function scroll(e) {
      e.preventDefault();
      KTUtil.scrollTop(0, the.options.speed);
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name, args) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the, args);
            }
          } else {
            return event.handler.call(this, the, args);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get subscrolltop mode
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Set scrolltop content
   * @returns {mscrolltop}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; ///////////////////////////////
  // ** Plugin Construction ** //
  ///////////////////////////////
  // Run plugin


  Plugin.construct.apply(the, [options]); // Init done

  init = true; // Return plugin instance

  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTScrolltop;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/toggle.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/components/base/toggle.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // plugin setup

var KTToggle = function KTToggle(elementId, options) {
  // Main object
  var the = this;
  var init = false; // Get element object

  var element = KTUtil.get(elementId);
  var body = KTUtil.get('body');

  if (!element) {
    return;
  } // Default options


  var defaultOptions = {
    togglerState: '',
    targetState: ''
  }; ////////////////////////////
  // ** Private Methods  ** //
  ////////////////////////////

  var Plugin = {
    /**
     * Construct
     */
    construct: function construct(options) {
      if (KTUtil.data(element).has('toggle')) {
        the = KTUtil.data(element).get('toggle');
      } else {
        // reset menu
        Plugin.init(options); // build menu

        Plugin.build();
        KTUtil.data(element).set('toggle', the);
      }

      return the;
    },

    /**
     * Handles subtoggle click toggle
     */
    init: function init(options) {
      the.element = element;
      the.events = []; // merge default and user defined options

      the.options = KTUtil.deepExtend({}, defaultOptions, options);
      the.target = KTUtil.get(the.options.target);
      the.targetState = the.options.targetState;
      the.togglerState = the.options.togglerState;
      the.state = KTUtil.hasClasses(the.target, the.targetState) ? 'on' : 'off';
    },

    /**
     * Setup toggle
     */
    build: function build() {
      KTUtil.addEvent(element, 'mouseup', Plugin.toggle);
    },

    /**
     * Handles offcanvas click toggle
     */
    toggle: function toggle(e) {
      Plugin.eventTrigger('beforeToggle');

      if (the.state == 'off') {
        Plugin.toggleOn();
      } else {
        Plugin.toggleOff();
      }

      Plugin.eventTrigger('afterToggle');
      e.preventDefault();
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOn: function toggleOn() {
      Plugin.eventTrigger('beforeOn');
      KTUtil.addClass(the.target, the.targetState);

      if (the.togglerState) {
        KTUtil.addClass(element, the.togglerState);
      }

      the.state = 'on';
      Plugin.eventTrigger('afterOn');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Handles toggle click toggle
     */
    toggleOff: function toggleOff() {
      Plugin.eventTrigger('beforeOff');
      KTUtil.removeClass(the.target, the.targetState);

      if (the.togglerState) {
        KTUtil.removeClass(element, the.togglerState);
      }

      the.state = 'off';
      Plugin.eventTrigger('afterOff');
      Plugin.eventTrigger('toggle');
      return the;
    },

    /**
     * Trigger events
     */
    eventTrigger: function eventTrigger(name) {
      for (var i = 0; i < the.events.length; i++) {
        var event = the.events[i];

        if (event.name == name) {
          if (event.one == true) {
            if (event.fired == false) {
              the.events[i].fired = true;
              return event.handler.call(this, the);
            }
          } else {
            return event.handler.call(this, the);
          }
        }
      }
    },
    addEvent: function addEvent(name, handler, one) {
      the.events.push({
        name: name,
        handler: handler,
        one: one,
        fired: false
      });
      return the;
    }
  }; //////////////////////////
  // ** Public Methods ** //
  //////////////////////////

  /**
   * Set default options 
   */

  the.setDefaults = function (options) {
    defaultOptions = options;
  };
  /**
   * Get toggle state 
   */


  the.getState = function () {
    return the.state;
  };
  /**
   * Toggle 
   */


  the.toggle = function () {
    return Plugin.toggle();
  };
  /**
   * Toggle on 
   */


  the.toggleOn = function () {
    return Plugin.toggleOn();
  };
  /**
   * Toggle off 
   */


  the.toggleOff = function () {
    return Plugin.toggleOff();
  };
  /**
   * Attach event
   * @returns {KTToggle}
   */


  the.on = function (name, handler) {
    return Plugin.addEvent(name, handler);
  };
  /**
   * Attach event that will be fired once
   * @returns {KTToggle}
   */


  the.one = function (name, handler) {
    return Plugin.addEvent(name, handler, true);
  }; // Construct plugin


  Plugin.construct.apply(the, [options]);
  return the;
}; // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTToggle;
}

/***/ }),

/***/ "./resources/assets/js/global/components/base/util.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/global/components/base/util.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * @class KTUtil  base utilize class that privides helper functions
 */
// Polyfills

/**
 * Element.matches() polyfill (simple version)
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
 */

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}
/**
 * Element.closest() polyfill
 * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill
 */


if (!Element.prototype.closest) {
  if (!Element.prototype.matches) {
    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
  }

  Element.prototype.closest = function (s) {
    var el = this;
    var ancestor = this;
    if (!document.documentElement.contains(el)) return null;

    do {
      if (ancestor.matches(s)) return ancestor;
      ancestor = ancestor.parentElement;
    } while (ancestor !== null);

    return null;
  };
}
/**
 * ChildNode.remove() polyfill
 * https://gomakethings.com/removing-an-element-from-the-dom-the-es6-way/
 * @author Chris Ferdinandi
 * @license MIT
 */


(function (elem) {
  for (var i = 0; i < elem.length; i++) {
    if (!window[elem[i]] || 'remove' in window[elem[i]].prototype) continue;

    window[elem[i]].prototype.remove = function () {
      this.parentNode.removeChild(this);
    };
  }
})(['Element', 'CharacterData', 'DocumentType']); //
// requestAnimationFrame polyfill by Erik Möller.
//  With fixes from Paul Irish and Tino Zijdel
//
//  http://paulirish.com/2011/requestanimationframe-for-smart-animating/
//  http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
//
//  MIT license
//


(function () {
  var lastTime = 0;
  var vendors = ['webkit', 'moz'];

  for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
    window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
    window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
  }

  if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback) {
    var currTime = new Date().getTime();
    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
    var id = window.setTimeout(function () {
      callback(currTime + timeToCall);
    }, timeToCall);
    lastTime = currTime + timeToCall;
    return id;
  };
  if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
    clearTimeout(id);
  };
})(); // Source: https://github.com/jserz/js_piece/blob/master/DOM/ParentNode/prepend()/prepend().md


(function (arr) {
  arr.forEach(function (item) {
    if (item.hasOwnProperty('prepend')) {
      return;
    }

    Object.defineProperty(item, 'prepend', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function prepend() {
        var argArr = Array.prototype.slice.call(arguments),
            docFrag = document.createDocumentFragment();
        argArr.forEach(function (argItem) {
          var isNode = argItem instanceof Node;
          docFrag.appendChild(isNode ? argItem : document.createTextNode(String(argItem)));
        });
        this.insertBefore(docFrag, this.firstChild);
      }
    });
  });
})([Element.prototype, Document.prototype, DocumentFragment.prototype]); // Global variables


window.KTUtilElementDataStore = {};
window.KTUtilElementDataStoreID = 0;
window.KTUtilDelegatedEventHandlers = {};

var KTUtil = function () {
  var resizeHandlers = [];
  /** @type {object} breakpoints The device width breakpoints **/

  var breakpoints = {
    sm: 544,
    // Small screen / phone
    md: 768,
    // Medium screen / tablet
    lg: 1024,
    // Large screen / desktop
    xl: 1200 // Extra large screen / wide desktop

  };
  /**
   * Handle window resize event with some
   * delay to attach event handlers upon resize complete
   */

  var _windowResizeHandler = function _windowResizeHandler() {
    var _runResizeHandlers = function _runResizeHandlers() {
      // reinitialize other subscribed elements
      for (var i = 0; i < resizeHandlers.length; i++) {
        var each = resizeHandlers[i];
        each.call();
      }
    };

    var timeout = false; // holder for timeout id

    var delay = 250; // delay after event is "complete" to run callback

    window.addEventListener('resize', function () {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        _runResizeHandlers();
      }, delay); // wait 50ms until window resize finishes.
    });
  };

  return {
    /**
     * Class main initializer.
     * @param {object} options.
     * @returns null
     */
    //main function to initiate the theme
    init: function init(options) {
      if (options && options.breakpoints) {
        breakpoints = options.breakpoints;
      }

      _windowResizeHandler();
    },

    /**
     * Adds window resize event handler.
     * @param {function} callback function.
     */
    addResizeHandler: function addResizeHandler(callback) {
      resizeHandlers.push(callback);
    },

    /**
     * Removes window resize event handler.
     * @param {function} callback function.
     */
    removeResizeHandler: function removeResizeHandler(callback) {
      for (var i = 0; i < resizeHandlers.length; i++) {
        if (callback === resizeHandlers[i]) {
          delete resizeHandlers[i];
        }
      }
    },

    /**
     * Trigger window resize handlers.
     */
    runResizeHandlers: function runResizeHandlers() {
      _runResizeHandlers();
    },
    resize: function resize() {
      if (typeof Event === 'function') {
        // modern browsers
        window.dispatchEvent(new Event('resize'));
      } else {
        // for IE and other old browsers
        // causes deprecation warning on modern browsers
        var evt = window.document.createEvent('UIEvents');
        evt.initUIEvent('resize', true, false, window, 0);
        window.dispatchEvent(evt);
      }
    },

    /**
     * Get GET parameter value from URL.
     * @param {string} paramName Parameter name.
     * @returns {string}
     */
    getURLParam: function getURLParam(paramName) {
      var searchString = window.location.search.substring(1),
          i,
          val,
          params = searchString.split("&");

      for (i = 0; i < params.length; i++) {
        val = params[i].split("=");

        if (val[0] == paramName) {
          return unescape(val[1]);
        }
      }

      return null;
    },

    /**
     * Checks whether current device is mobile touch.
     * @returns {boolean}
     */
    isMobileDevice: function isMobileDevice() {
      return this.getViewPort().width < this.getBreakpoint('lg') ? true : false;
    },

    /**
     * Checks whether current device is desktop.
     * @returns {boolean}
     */
    isDesktopDevice: function isDesktopDevice() {
      return KTUtil.isMobileDevice() ? false : true;
    },

    /**
     * Gets browser window viewport size. Ref:
     * http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/
     * @returns {object}
     */
    getViewPort: function getViewPort() {
      var e = window,
          a = 'inner';

      if (!('innerWidth' in window)) {
        a = 'client';
        e = document.documentElement || document.body;
      }

      return {
        width: e[a + 'Width'],
        height: e[a + 'Height']
      };
    },

    /**
     * Checks whether given device mode is currently activated.
     * @param {string} mode Responsive mode name(e.g: desktop,
     *     desktop-and-tablet, tablet, tablet-and-mobile, mobile)
     * @returns {boolean}
     */
    isInResponsiveRange: function isInResponsiveRange(mode) {
      var breakpoint = this.getViewPort().width;

      if (mode == 'general') {
        return true;
      } else if (mode == 'desktop' && breakpoint >= this.getBreakpoint('lg') + 1) {
        return true;
      } else if (mode == 'tablet' && breakpoint >= this.getBreakpoint('md') + 1 && breakpoint < this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'mobile' && breakpoint <= this.getBreakpoint('md')) {
        return true;
      } else if (mode == 'desktop-and-tablet' && breakpoint >= this.getBreakpoint('md') + 1) {
        return true;
      } else if (mode == 'tablet-and-mobile' && breakpoint <= this.getBreakpoint('lg')) {
        return true;
      } else if (mode == 'minimal-desktop-and-below' && breakpoint <= this.getBreakpoint('xl')) {
        return true;
      }

      return false;
    },

    /**
     * Generates unique ID for give prefix.
     * @param {string} prefix Prefix for generated ID
     * @returns {boolean}
     */
    getUniqueID: function getUniqueID(prefix) {
      return prefix + Math.floor(Math.random() * new Date().getTime());
    },

    /**
     * Gets window width for give breakpoint mode.
     * @param {string} mode Responsive mode name(e.g: xl, lg, md, sm)
     * @returns {number}
     */
    getBreakpoint: function getBreakpoint(mode) {
      return breakpoints[mode];
    },

    /**
     * Checks whether object has property matchs given key path.
     * @param {object} obj Object contains values paired with given key path
     * @param {string} keys Keys path seperated with dots
     * @returns {object}
     */
    isset: function isset(obj, keys) {
      var stone;
      keys = keys || '';

      if (keys.indexOf('[') !== -1) {
        throw new Error('Unsupported object path notation.');
      }

      keys = keys.split('.');

      do {
        if (obj === undefined) {
          return false;
        }

        stone = keys.shift();

        if (!obj.hasOwnProperty(stone)) {
          return false;
        }

        obj = obj[stone];
      } while (keys.length);

      return true;
    },

    /**
     * Gets highest z-index of the given element parents
     * @param {object} el jQuery element object
     * @returns {number}
     */
    getHighestZindex: function getHighestZindex(el) {
      var elem = KTUtil.get(el),
          position,
          value;

      while (elem && elem !== document) {
        // Ignore z-index if position is set to a value where z-index is ignored by the browser
        // This makes behavior of this function consistent across browsers
        // WebKit always returns auto if the element is positioned
        position = KTUtil.css(elem, 'position');

        if (position === "absolute" || position === "relative" || position === "fixed") {
          // IE returns 0 when zIndex is not specified
          // other browsers return a string
          // we ignore the case of nested elements with an explicit value of 0
          // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
          value = parseInt(KTUtil.css(elem, 'z-index'));

          if (!isNaN(value) && value !== 0) {
            return value;
          }
        }

        elem = elem.parentNode;
      }

      return null;
    },

    /**
     * Checks whether the element has any parent with fixed positionfreg
     * @param {object} el jQuery element object
     * @returns {boolean}
     */
    hasFixedPositionedParent: function hasFixedPositionedParent(el) {
      var position;

      while (el && el !== document) {
        position = KTUtil.css(el, 'position');

        if (position === "fixed") {
          return true;
        }

        el = el.parentNode;
      }

      return false;
    },

    /**
     * Simulates delay
     */
    sleep: function sleep(milliseconds) {
      var start = new Date().getTime();

      for (var i = 0; i < 1e7; i++) {
        if (new Date().getTime() - start > milliseconds) {
          break;
        }
      }
    },

    /**
     * Gets randomly generated integer value within given min and max range
     * @param {number} min Range start value
     * @param {number} max Range end value
     * @returns {number}
     */
    getRandomInt: function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    },

    /**
     * Checks whether Angular library is included
     * @returns {boolean}
     */
    isAngularVersion: function isAngularVersion() {
      return window.Zone !== undefined ? true : false;
    },
    // jQuery Workarounds
    // Deep extend:  $.extend(true, {}, objA, objB);
    deepExtend: function deepExtend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        var obj = arguments[i];
        if (!obj) continue;

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (_typeof(obj[key]) === 'object') out[key] = KTUtil.deepExtend(out[key], obj[key]);else out[key] = obj[key];
          }
        }
      }

      return out;
    },
    // extend:  $.extend({}, objA, objB);
    extend: function extend(out) {
      out = out || {};

      for (var i = 1; i < arguments.length; i++) {
        if (!arguments[i]) continue;

        for (var key in arguments[i]) {
          if (arguments[i].hasOwnProperty(key)) out[key] = arguments[i][key];
        }
      }

      return out;
    },
    get: function get(query) {
      var el;

      if (query === document) {
        return document;
      }

      if (!!(query && query.nodeType === 1)) {
        return query;
      }

      if (el = document.getElementById(query)) {
        return el;
      } else if (el = document.getElementsByTagName(query)) {
        return el[0];
      } else if (el = document.getElementsByClassName(query)) {
        return el[0];
      } else {
        return null;
      }
    },
    getByID: function getByID(query) {
      if (!!(query && query.nodeType === 1)) {
        return query;
      }

      return document.getElementById(query);
    },
    getByTag: function getByTag(query) {
      var el;

      if (el = document.getElementsByTagName(query)) {
        return el[0];
      } else {
        return null;
      }
    },
    getByClass: function getByClass(query) {
      var el;

      if (el = document.getElementsByClassName(query)) {
        return el[0];
      } else {
        return null;
      }
    },

    /**
     * Checks whether the element has given classes
     * @param {object} el jQuery element object
     * @param {string} Classes string
     * @returns {boolean}
     */
    hasClasses: function hasClasses(el, classes) {
      if (!el) {
        return;
      }

      var classesArr = classes.split(" ");

      for (var i = 0; i < classesArr.length; i++) {
        if (KTUtil.hasClass(el, KTUtil.trim(classesArr[i])) == false) {
          return false;
        }
      }

      return true;
    },
    hasClass: function hasClass(el, className) {
      if (!el) {
        return;
      }

      return el.classList ? el.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(el.className);
    },
    addClass: function addClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          if (classNames[i] && classNames[i].length > 0) {
            el.classList.add(KTUtil.trim(classNames[i]));
          }
        }
      } else if (!KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className += ' ' + KTUtil.trim(classNames[x]);
        }
      }
    },
    removeClass: function removeClass(el, className) {
      if (!el || typeof className === 'undefined') {
        return;
      }

      var classNames = className.split(' ');

      if (el.classList) {
        for (var i = 0; i < classNames.length; i++) {
          el.classList.remove(KTUtil.trim(classNames[i]));
        }
      } else if (KTUtil.hasClass(el, className)) {
        for (var x = 0; x < classNames.length; x++) {
          el.className = el.className.replace(new RegExp('\\b' + KTUtil.trim(classNames[x]) + '\\b', 'g'), '');
        }
      }
    },
    triggerCustomEvent: function triggerCustomEvent(el, eventName, data) {
      var event;

      if (window.CustomEvent) {
        event = new CustomEvent(eventName, {
          detail: data
        });
      } else {
        event = document.createEvent('CustomEvent');
        event.initCustomEvent(eventName, true, true, data);
      }

      el.dispatchEvent(event);
    },
    triggerEvent: function triggerEvent(node, eventName) {
      // Make sure we use the ownerDocument from the provided node to avoid cross-window problems
      var doc;

      if (node.ownerDocument) {
        doc = node.ownerDocument;
      } else if (node.nodeType == 9) {
        // the node may be the document itself, nodeType 9 = DOCUMENT_NODE
        doc = node;
      } else {
        throw new Error("Invalid node passed to fireEvent: " + node.id);
      }

      if (node.dispatchEvent) {
        // Gecko-style approach (now the standard) takes more work
        var eventClass = ""; // Different events have different event classes.
        // If this switch statement can't map an eventName to an eventClass,
        // the event firing is going to fail.

        switch (eventName) {
          case "click": // Dispatching of 'click' appears to not work correctly in Safari. Use 'mousedown' or 'mouseup' instead.

          case "mouseenter":
          case "mouseleave":
          case "mousedown":
          case "mouseup":
            eventClass = "MouseEvents";
            break;

          case "focus":
          case "change":
          case "blur":
          case "select":
            eventClass = "HTMLEvents";
            break;

          default:
            throw "fireEvent: Couldn't find an event class for event '" + eventName + "'.";
            break;
        }

        var event = doc.createEvent(eventClass);
        var bubbles = eventName == "change" ? false : true;
        event.initEvent(eventName, bubbles, true); // All events created as bubbling and cancelable.

        event.synthetic = true; // allow detection of synthetic events
        // The second parameter says go ahead with the default action

        node.dispatchEvent(event, true);
      } else if (node.fireEvent) {
        // IE-old school style
        var event = doc.createEventObject();
        event.synthetic = true; // allow detection of synthetic events

        node.fireEvent("on" + eventName, event);
      }
    },
    index: function index(elm) {
      elm = KTUtil.get(elm);
      var c = elm.parentNode.children,
          i = 0;

      for (; i < c.length; i++) {
        if (c[i] == elm) return i;
      }
    },
    trim: function trim(string) {
      return string.trim();
    },
    eventTriggered: function eventTriggered(e) {
      if (e.currentTarget.dataset.triggered) {
        return true;
      } else {
        e.currentTarget.dataset.triggered = true;
        return false;
      }
    },
    remove: function remove(el) {
      if (el && el.parentNode) {
        el.parentNode.removeChild(el);
      }
    },
    find: function find(parent, query) {
      parent = KTUtil.get(parent);

      if (parent) {
        return parent.querySelector(query);
      }
    },
    findAll: function findAll(parent, query) {
      parent = KTUtil.get(parent);

      if (parent) {
        return parent.querySelectorAll(query);
      }
    },
    insertAfter: function insertAfter(el, referenceNode) {
      return referenceNode.parentNode.insertBefore(el, referenceNode.nextSibling);
    },
    parents: function parents(elem, selector) {
      // Element.matches() polyfill
      if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
          var matches = (this.document || this.ownerDocument).querySelectorAll(s),
              i = matches.length;

          while (--i >= 0 && matches.item(i) !== this) {}

          return i > -1;
        };
      } // Set up a parent array


      var parents = []; // Push each parent element to the array

      for (; elem && elem !== document; elem = elem.parentNode) {
        if (selector) {
          if (elem.matches(selector)) {
            parents.push(elem);
          }

          continue;
        }

        parents.push(elem);
      } // Return our parent array


      return parents;
    },
    children: function children(el, selector, log) {
      if (!el || !el.childNodes) {
        return;
      }

      var result = [],
          i = 0,
          l = el.childNodes.length;

      for (var i; i < l; ++i) {
        if (el.childNodes[i].nodeType == 1 && KTUtil.matches(el.childNodes[i], selector, log)) {
          result.push(el.childNodes[i]);
        }
      }

      return result;
    },
    child: function child(el, selector, log) {
      var children = KTUtil.children(el, selector, log);
      return children ? children[0] : null;
    },
    matches: function matches(el, selector, log) {
      var p = Element.prototype;

      var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {
        return [].indexOf.call(document.querySelectorAll(s), this) !== -1;
      };

      if (el && el.tagName) {
        return f.call(el, selector);
      } else {
        return false;
      }
    },
    data: function data(element) {
      element = KTUtil.get(element);
      return {
        set: function set(name, data) {
          if (element === undefined) {
            return;
          }

          if (element.customDataTag === undefined) {
            window.KTUtilElementDataStoreID++;
            element.customDataTag = window.KTUtilElementDataStoreID;
          }

          if (window.KTUtilElementDataStore[element.customDataTag] === undefined) {
            window.KTUtilElementDataStore[element.customDataTag] = {};
          }

          window.KTUtilElementDataStore[element.customDataTag][name] = data;
        },
        get: function get(name) {
          if (element === undefined) {
            return;
          }

          if (element.customDataTag === undefined) {
            return null;
          }

          return this.has(name) ? window.KTUtilElementDataStore[element.customDataTag][name] : null;
        },
        has: function has(name) {
          if (element === undefined) {
            return false;
          }

          if (element.customDataTag === undefined) {
            return false;
          }

          return window.KTUtilElementDataStore[element.customDataTag] && window.KTUtilElementDataStore[element.customDataTag][name] ? true : false;
        },
        remove: function remove(name) {
          if (element && this.has(name)) {
            delete window.KTUtilElementDataStore[element.customDataTag][name];
          }
        }
      };
    },
    outerWidth: function outerWidth(el, margin) {
      var width;

      if (margin === true) {
        width = parseFloat(el.offsetWidth);
        width += parseFloat(KTUtil.css(el, 'margin-left')) + parseFloat(KTUtil.css(el, 'margin-right'));
        return parseFloat(width);
      } else {
        width = parseFloat(el.offsetWidth);
        return width;
      }
    },
    offset: function offset(elem) {
      var rect, win;
      elem = KTUtil.get(elem);

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    height: function height(el) {
      return KTUtil.css(el, 'height');
    },
    visible: function visible(el) {
      return !(el.offsetWidth === 0 && el.offsetHeight === 0);
    },
    attr: function attr(el, name, value) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      if (value !== undefined) {
        el.setAttribute(name, value);
      } else {
        return el.getAttribute(name);
      }
    },
    hasAttr: function hasAttr(el, name) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      return el.getAttribute(name) ? true : false;
    },
    removeAttr: function removeAttr(el, name) {
      el = KTUtil.get(el);

      if (el == undefined) {
        return;
      }

      el.removeAttribute(name);
    },
    animate: function animate(from, to, duration, update, easing, done) {
      /**
       * TinyAnimate.easings
       *  Adapted from jQuery Easing
       */
      var easings = {};
      var easing;

      easings.linear = function (t, b, c, d) {
        return c * t / d + b;
      };

      easing = easings.linear; // Early bail out if called incorrectly

      if (typeof from !== 'number' || typeof to !== 'number' || typeof duration !== 'number' || typeof update !== 'function') {
        return;
      } // Create mock done() function if necessary


      if (typeof done !== 'function') {
        done = function done() {};
      } // Pick implementation (requestAnimationFrame | setTimeout)


      var rAF = window.requestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 50);
      }; // Animation loop


      var canceled = false;
      var change = to - from;

      function loop(timestamp) {
        var time = (timestamp || +new Date()) - start;

        if (time >= 0) {
          update(easing(time, from, change, duration));
        }

        if (time >= 0 && time >= duration) {
          update(to);
          done();
        } else {
          rAF(loop);
        }
      }

      update(from); // Start animation loop

      var start = window.performance && window.performance.now ? window.performance.now() : +new Date();
      rAF(loop);
    },
    actualCss: function actualCss(el, prop, cache) {
      el = KTUtil.get(el);
      var css = '';

      if (el instanceof HTMLElement === false) {
        return;
      }

      if (!el.getAttribute('hidden-' + prop) || cache === false) {
        var value; // the element is hidden so:
        // making the el block so we can meassure its height but still be hidden

        css = el.style.cssText;
        el.style.cssText = 'position: absolute; visibility: hidden; display: block;';

        if (prop == 'width') {
          value = el.offsetWidth;
        } else if (prop == 'height') {
          value = el.offsetHeight;
        }

        el.style.cssText = css; // store it in cache

        el.setAttribute('hidden-' + prop, value);
        return parseFloat(value);
      } else {
        // store it in cache
        return parseFloat(el.getAttribute('hidden-' + prop));
      }
    },
    actualHeight: function actualHeight(el, cache) {
      return KTUtil.actualCss(el, 'height', cache);
    },
    actualWidth: function actualWidth(el, cache) {
      return KTUtil.actualCss(el, 'width', cache);
    },
    getScroll: function getScroll(element, method) {
      // The passed in `method` value should be 'Top' or 'Left'
      method = 'scroll' + method;
      return element == window || element == document ? self[method == 'scrollTop' ? 'pageYOffset' : 'pageXOffset'] || browserSupportsBoxModel && document.documentElement[method] || document.body[method] : element[method];
    },
    css: function css(el, styleProp, value) {
      el = KTUtil.get(el);

      if (!el) {
        return;
      }

      if (value !== undefined) {
        el.style[styleProp] = value;
      } else {
        var defaultView = (el.ownerDocument || document).defaultView; // W3C standard way:

        if (defaultView && defaultView.getComputedStyle) {
          // sanitize property name to css notation
          // (hyphen separated words eg. font-Size)
          styleProp = styleProp.replace(/([A-Z])/g, "-$1").toLowerCase();
          return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);
        } else if (el.currentStyle) {
          // IE
          // sanitize property name to camelCase
          styleProp = styleProp.replace(/\-(\w)/g, function (str, letter) {
            return letter.toUpperCase();
          });
          value = el.currentStyle[styleProp]; // convert other units to pixels on IE

          if (/^\d+(em|pt|%|ex)?$/i.test(value)) {
            return function (value) {
              var oldLeft = el.style.left,
                  oldRsLeft = el.runtimeStyle.left;
              el.runtimeStyle.left = el.currentStyle.left;
              el.style.left = value || 0;
              value = el.style.pixelLeft + "px";
              el.style.left = oldLeft;
              el.runtimeStyle.left = oldRsLeft;
              return value;
            }(value);
          }

          return value;
        }
      }
    },
    slide: function slide(el, dir, speed, callback, recalcMaxHeight) {
      if (!el || dir == 'up' && KTUtil.visible(el) === false || dir == 'down' && KTUtil.visible(el) === true) {
        return;
      }

      speed = speed ? speed : 600;
      var calcHeight = KTUtil.actualHeight(el);
      var calcPaddingTop = false;
      var calcPaddingBottom = false;

      if (KTUtil.css(el, 'padding-top') && KTUtil.data(el).has('slide-padding-top') !== true) {
        KTUtil.data(el).set('slide-padding-top', KTUtil.css(el, 'padding-top'));
      }

      if (KTUtil.css(el, 'padding-bottom') && KTUtil.data(el).has('slide-padding-bottom') !== true) {
        KTUtil.data(el).set('slide-padding-bottom', KTUtil.css(el, 'padding-bottom'));
      }

      if (KTUtil.data(el).has('slide-padding-top')) {
        calcPaddingTop = parseInt(KTUtil.data(el).get('slide-padding-top'));
      }

      if (KTUtil.data(el).has('slide-padding-bottom')) {
        calcPaddingBottom = parseInt(KTUtil.data(el).get('slide-padding-bottom'));
      }

      if (dir == 'up') {
        // up
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            el.style.paddingTop = calcPaddingTop - value + 'px';
          }, 'linear');
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = calcPaddingBottom - value + 'px';
          }, 'linear');
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = calcHeight - value + 'px';
        }, 'linear', function () {
          callback();
          el.style.height = '';
          el.style.display = 'none';
        });
      } else if (dir == 'down') {
        // down
        el.style.cssText = 'display: block; overflow: hidden;';

        if (calcPaddingTop) {
          KTUtil.animate(0, calcPaddingTop, speed, function (value) {
            el.style.paddingTop = value + 'px';
          }, 'linear', function () {
            el.style.paddingTop = '';
          });
        }

        if (calcPaddingBottom) {
          KTUtil.animate(0, calcPaddingBottom, speed, function (value) {
            el.style.paddingBottom = value + 'px';
          }, 'linear', function () {
            el.style.paddingBottom = '';
          });
        }

        KTUtil.animate(0, calcHeight, speed, function (value) {
          el.style.height = value + 'px';
        }, 'linear', function () {
          callback();
          el.style.height = '';
          el.style.display = '';
          el.style.overflow = '';
        });
      }
    },
    slideUp: function slideUp(el, speed, callback) {
      KTUtil.slide(el, 'up', speed, callback);
    },
    slideDown: function slideDown(el, speed, callback) {
      KTUtil.slide(el, 'down', speed, callback);
    },
    show: function show(el, display) {
      if (typeof el !== 'undefined') {
        el.style.display = display ? display : 'block';
      }
    },
    hide: function hide(el) {
      if (typeof el !== 'undefined') {
        el.style.display = 'none';
      }
    },
    addEvent: function addEvent(el, type, handler, one) {
      el = KTUtil.get(el);

      if (typeof el !== 'undefined') {
        el.addEventListener(type, handler);
      }
    },
    removeEvent: function removeEvent(el, type, handler) {
      el = KTUtil.get(el);
      el.removeEventListener(type, handler);
    },
    on: function on(element, selector, event, handler) {
      if (!selector) {
        return;
      }

      var eventId = KTUtil.getUniqueID('event');

      window.KTUtilDelegatedEventHandlers[eventId] = function (e) {
        var targets = element.querySelectorAll(selector);
        var target = e.target;

        while (target && target !== element) {
          for (var i = 0, j = targets.length; i < j; i++) {
            if (target === targets[i]) {
              handler.call(target, e);
            }
          }

          target = target.parentNode;
        }
      };

      KTUtil.addEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      return eventId;
    },
    off: function off(element, event, eventId) {
      if (!element || !window.KTUtilDelegatedEventHandlers[eventId]) {
        return;
      }

      KTUtil.removeEvent(element, event, window.KTUtilDelegatedEventHandlers[eventId]);
      delete window.KTUtilDelegatedEventHandlers[eventId];
    },
    one: function onetime(el, type, callback) {
      el = KTUtil.get(el);
      el.addEventListener(type, function callee(e) {
        // remove event
        if (e.target && e.target.removeEventListener) {
          e.target.removeEventListener(e.type, callee);
        } // call handler


        return callback(e);
      });
    },
    hash: function hash(str) {
      var hash = 0,
          i,
          chr;
      if (str.length === 0) return hash;

      for (i = 0; i < str.length; i++) {
        chr = str.charCodeAt(i);
        hash = (hash << 5) - hash + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash;
    },
    animateClass: function animateClass(el, animationName, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.addClass(el, 'animated ' + animationName);
      KTUtil.one(el, animation, function () {
        KTUtil.removeClass(el, 'animated ' + animationName);
      });

      if (callback) {
        KTUtil.one(el, animation, callback);
      }
    },
    transitionEnd: function transitionEnd(el, callback) {
      var transition;
      var transitions = {
        transition: 'transitionend',
        OTransition: 'oTransitionEnd',
        MozTransition: 'mozTransitionEnd',
        WebkitTransition: 'webkitTransitionEnd',
        msTransition: 'msTransitionEnd'
      };

      for (var t in transitions) {
        if (el.style[t] !== undefined) {
          transition = transitions[t];
        }
      }

      KTUtil.one(el, transition, callback);
    },
    animationEnd: function animationEnd(el, callback) {
      var animation;
      var animations = {
        animation: 'animationend',
        OAnimation: 'oAnimationEnd',
        MozAnimation: 'mozAnimationEnd',
        WebkitAnimation: 'webkitAnimationEnd',
        msAnimation: 'msAnimationEnd'
      };

      for (var t in animations) {
        if (el.style[t] !== undefined) {
          animation = animations[t];
        }
      }

      KTUtil.one(el, animation, callback);
    },
    animateDelay: function animateDelay(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-delay', value);
      }
    },
    animateDuration: function animateDuration(el, value) {
      var vendors = ['webkit-', 'moz-', 'ms-', 'o-', ''];

      for (var i = 0; i < vendors.length; i++) {
        KTUtil.css(el, vendors[i] + 'animation-duration', value);
      }
    },
    scrollTo: function scrollTo(target, offset, duration) {
      var duration = duration ? duration : 500;
      var target = KTUtil.get(target);
      var targetPos = target ? KTUtil.offset(target).top : 0;
      var scrollPos = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      var from, to;

      if (targetPos > scrollPos) {
        from = targetPos;
        to = scrollPos;
      } else {
        from = scrollPos;
        to = targetPos;
      }

      if (offset) {
        to += offset;
      }

      KTUtil.animate(from, to, duration, function (value) {
        document.documentElement.scrollTop = value;
        document.body.parentNode.scrollTop = value;
        document.body.scrollTop = value;
      }); //, easing, done
    },
    scrollTop: function scrollTop(offset, duration) {
      KTUtil.scrollTo(null, offset, duration);
    },
    isArray: function isArray(obj) {
      return obj && Array.isArray(obj);
    },
    ready: function ready(callback) {
      if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
        callback();
      } else {
        document.addEventListener('DOMContentLoaded', callback);
      }
    },
    isEmpty: function isEmpty(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
          return false;
        }
      }

      return true;
    },
    numberString: function numberString(nStr) {
      nStr += '';
      var x = nStr.split('.');
      var x1 = x[0];
      var x2 = x.length > 1 ? '.' + x[1] : '';
      var rgx = /(\d+)(\d{3})/;

      while (rgx.test(x1)) {
        x1 = x1.replace(rgx, '$1' + ',' + '$2');
      }

      return x1 + x2;
    },
    detectIE: function detectIE() {
      var ua = window.navigator.userAgent; // Test values; Uncomment to check result …
      // IE 10
      // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
      // IE 11
      // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
      // Edge 12 (Spartan)
      // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
      // Edge 13
      // ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2486.0 Safari/537.36 Edge/13.10586';

      var msie = ua.indexOf('MSIE ');

      if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
      }

      var trident = ua.indexOf('Trident/');

      if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
      }

      var edge = ua.indexOf('Edge/');

      if (edge > 0) {
        // Edge (IE 12+) => return version number
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
      } // other browser


      return false;
    },
    isRTL: function isRTL() {
      return KTUtil.attr(KTUtil.get('html'), 'direction') == 'rtl';
    },
    //
    // Scroller
    scrollInit: function scrollInit(element, options) {
      if (!element) return; // Define init function

      function init() {
        var ps;
        var height;

        if (options.height instanceof Function) {
          height = parseInt(options.height.call());
        } else {
          height = parseInt(options.height);
        } // Destroy scroll on table and mobile modes


        if ((options.mobileNativeScroll || options.disableForMobile) && KTUtil.isInResponsiveRange('tablet-and-mobile')) {
          ps = KTUtil.data(element).get('ps');

          if (ps) {
            if (options.resetHeightOnDestroy) {
              KTUtil.css(element, 'height', 'auto');
            } else {
              KTUtil.css(element, 'overflow', 'auto');

              if (height > 0) {
                KTUtil.css(element, 'height', height + 'px');
              }
            }

            ps.destroy();
            ps = KTUtil.data(element).remove('ps');
          } else if (height > 0) {
            KTUtil.css(element, 'overflow', 'auto');
            KTUtil.css(element, 'height', height + 'px');
          }

          return;
        }

        if (height > 0) {
          KTUtil.css(element, 'height', height + 'px');
        }

        if (options.desktopNativeScroll) {
          KTUtil.css(element, 'overflow', 'auto');
          return;
        } // Init scroll


        KTUtil.css(element, 'overflow', 'hidden');
        ps = KTUtil.data(element).get('ps');

        if (ps) {
          ps.update();
        } else {
          KTUtil.addClass(element, 'scroll');
          ps = new PerfectScrollbar(element, {
            wheelSpeed: 0.5,
            swipeEasing: true,
            wheelPropagation: options.windowScroll === false ? false : true,
            minScrollbarLength: 40,
            maxScrollbarLength: 300,
            suppressScrollX: KTUtil.attr(element, 'data-scroll-x') != 'true' ? true : false
          });
          KTUtil.data(element).set('ps', ps);
        } // Remember scroll position in cookie


        var uid = KTUtil.attr(element, 'id');

        if (options.rememberPosition === true && Cookies && uid) {
          if (Cookies.get(uid)) {
            var pos = parseInt(Cookies.get(uid));

            if (pos > 0) {
              element.scrollTop = pos;
            }
          }

          element.addEventListener('ps-scroll-y', function () {
            Cookies.set(uid, element.scrollTop);
          });
        }
      } // Init


      init(); // Handle window resize

      if (options.handleWindowResize) {
        KTUtil.addResizeHandler(function () {
          init();
        });
      }
    },
    scrollUpdate: function scrollUpdate(element) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.update();
      }
    },
    scrollUpdateAll: function scrollUpdateAll(parent) {
      var scrollers = KTUtil.findAll(parent, '.ps');

      for (var i = 0, len = scrollers.length; i < len; i++) {
        KTUtil.scrollerUpdate(scrollers[i]);
      }
    },
    scrollDestroy: function scrollDestroy(element) {
      var ps = KTUtil.data(element).get('ps');

      if (ps) {
        ps.destroy();
        ps = KTUtil.data(element).remove('ps');
      }
    },
    setHTML: function setHTML(el, html) {
      if (KTUtil.get(el)) {
        KTUtil.get(el).innerHTML = html;
      }
    },
    getHTML: function getHTML(el) {
      if (KTUtil.get(el)) {
        return KTUtil.get(el).innerHTML;
      }
    },
    getDocumentHeight: function getDocumentHeight() {
      var body = document.body;
      var html = document.documentElement;
      return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
    },
    getScrollTop: function getScrollTop() {
      return (document.scrollingElement || document.documentElement).scrollTop;
    }
  };
}(); // webpack support


if ( true && typeof module.exports !== 'undefined') {
  module.exports = KTUtil;
} // Initialize KTUtil class on document ready


KTUtil.ready(function () {
  KTUtil.init();
}); // CSS3 Transitions only after page load(.page-loading class added to body tag and remove with JS on page load)

window.onload = function () {
  KTUtil.removeClass(KTUtil.get('body'), 'page--loading');
};

/***/ }),

/***/ "./resources/assets/js/global/layout/layout.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/global/layout/layout.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTLayout = function () {
  var body;
  var aside;
  var asideMenu;
  var asideMenuOffcanvas;
  var scrollTop;
  var pageStickyPortlet; // Aside

  var _initAside = function initAside() {
    aside = KTUtil.get('aside'); // Init offcanvas layout for mobile

    asideMenuOffcanvas = new KTOffcanvas('aside', {
      baseClass: 'aside',
      overlay: true,
      closeBy: 'aside_close_btn',
      toggleBy: {
        target: 'aside_mobile_toggler',
        state: 'header-mobile__toolbar-toggler--active'
      }
    }); // Init aside menu

    var menu = KTUtil.getByID('aside_menu');
    var menuDesktopMode = KTUtil.attr(menu, 'data-ktmenu-dropdown') === '1' ? 'dropdown' : 'accordion'; // Init scrollable menu container

    var scroll;

    if (KTUtil.attr(menu, 'data-ktmenu-scroll') === '1') {
      scroll = {
        rememberPosition: true,
        // remember position on page reload
        height: function height() {
          // calculate available scrollable area height
          // calculated height
          var height; // window height

          var windowHeight = parseInt(KTUtil.getViewPort().height); // secondary

          var secondary = KTUtil.find(aside, '.aside__secondary');
          var secondaryPaddingTop = parseInt(KTUtil.css(secondary, 'padding-top'));
          var secondaryPaddingBottom = parseInt(KTUtil.css(secondary, 'padding-bottom')); // top height

          var top = KTUtil.find(aside, '.aside__secondary-top');
          var topHeight = parseInt(KTUtil.height(top)); // bottom

          var bottom = KTUtil.find(aside, '.aside__secondary-bottom');
          var bottomPaddingTop = parseInt(KTUtil.css(bottom, 'padding-top'));
          var bottomPaddingBotton = parseInt(KTUtil.css(bottom, 'padding-bottom')); // calculate height

          height = windowHeight - topHeight - bottomPaddingTop - bottomPaddingBotton - secondaryPaddingTop - secondaryPaddingBottom;
          return height;
        }
      };
    } // Init aside menu


    asideMenu = new KTMenu('aside_menu', {
      // vertical scroll
      scroll: scroll,
      // submenu setup
      submenu: {
        desktop: {
          // by default the menu mode set to accordion in desktop mode
          "default": menuDesktopMode,
          // whenever body has this class switch the menu mode to dropdown
          state: {
            body: 'aside--minimize',
            mode: 'dropdown'
          }
        },
        tablet: 'accordion',
        // menu set to accordion in tablet mode
        mobile: 'accordion' // menu set to accordion in mobile mode

      },
      //accordion setup
      accordion: {
        expandAll: false // allow having multiple expanded accordions in the menu

      }
    });
  }; // Scrolltop


  var _initScrolltop = function initScrolltop() {
    var scrolltop = new KTScrolltop('scrolltop', {
      offset: 300,
      speed: 600
    });
  }; // Init page sticky portlet


  var _initPageStickyPortlet = function initPageStickyPortlet() {
    var asidePrimaryWidth = 70;
    var asideSecondaryWidth = 250;
    return new KTPortlet('page_portlet', {
      sticky: {
        offset: 80,
        zIndex: 90,
        position: {
          top: function top() {
            var pos = 0;

            if (KTUtil.isInResponsiveRange('desktop')) {
              if (KTUtil.hasClass(body, 'subheader--fixed')) {
                pos = pos + parseInt(KTUtil.css(KTUtil.get('subheader'), 'height'));
              }
            } else {
              if (KTUtil.hasClass(body, 'header-mobile--fixed')) {
                pos = pos + parseInt(KTUtil.css(KTUtil.get('header_mobile'), 'height'));
              }
            }

            return pos;
          },
          left: function left(portlet) {
            var porletEl = portlet.getSelf();
            return KTUtil.offset(porletEl).left;
          },
          right: function right(portlet) {
            var porletEl = portlet.getSelf();
            var portletWidth = parseInt(KTUtil.css(porletEl, 'width'));
            var bodyWidth = parseInt(KTUtil.css(KTUtil.get('body'), 'width'));
            var portletOffsetLeft = KTUtil.offset(porletEl).left;
            return bodyWidth - portletWidth - portletOffsetLeft;
          }
        }
      }
    });
  };

  return {
    init: function init() {
      body = KTUtil.getByTag('body');
      this.initAside();
      this.initScrolltop();
      this.initPageStickyPortlet(); // Non functional links notice(can be removed in production)

      $('#aside_menu, #header_menu').on('click', '.menu__link[href="#"]:not(.menu__toggle)', function (e) {
        Notiflix.Notify.Failure("You have clicked on a non-functional dummy link!");
        e.preventDefault();
      });
    },
    initAside: function initAside() {
      _initAside();
    },
    initScrolltop: function initScrolltop() {
      _initScrolltop();
    },
    initPageStickyPortlet: function initPageStickyPortlet() {
      if (!KTUtil.get('page_portlet')) {
        return;
      }

      pageStickyPortlet = _initPageStickyPortlet();
      pageStickyPortlet.initSticky();
      KTUtil.addResizeHandler(function () {
        pageStickyPortlet.updateSticky();
      });

      _initPageStickyPortlet();
    },
    getAsideMenu: function getAsideMenu() {
      return asideMenu;
    },
    closeMobileAsideMenuOffcanvas: function closeMobileAsideMenuOffcanvas() {
      if (KTUtil.isMobileDevice()) {
        asideMenuOffcanvas.hide();
      }
    },
    closeMobileHeaderMenuOffcanvas: function closeMobileHeaderMenuOffcanvas() {
      if (KTUtil.isMobileDevice()) {
        headerMenuOffcanvas.hide();
      }
    }
  };
}(); // webpack support


if (true) {
  module.exports = KTLayout;
} // Init on page load completed


KTUtil.ready(function () {
  KTLayout.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/lib.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/global/layout/lib.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Class definition
var KTLib = function () {
  return {
    initMiniChart: function initMiniChart(src, data, color, border, fill, tooltip) {
      if (src.length === 0) {
        return;
      } // set default values


      fill = typeof fill !== 'undefined' ? fill : false;
      tooltip = typeof tooltip !== 'undefined' ? tooltip : false;
      var config = {
        type: 'line',
        data: {
          labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October"],
          datasets: [{
            label: "",
            borderColor: color,
            borderWidth: border,
            pointHoverRadius: 4,
            pointHoverBorderWidth: 4,
            pointBackgroundColor: Chart.helpers.color('#000000').alpha(0).rgbString(),
            pointBorderColor: Chart.helpers.color('#000000').alpha(0).rgbString(),
            pointHoverBackgroundColor: KTApp.getStateColor('brand'),
            pointHoverBorderColor: Chart.helpers.color('#000000').alpha(0.1).rgbString(),
            fill: fill,
            backgroundColor: color,
            data: data
          }]
        },
        options: {
          title: {
            display: false
          },
          tooltips: tooltip ? {
            enabled: true,
            intersect: false,
            mode: 'nearest',
            bodySpacing: 5,
            yPadding: 10,
            xPadding: 10,
            caretPadding: 0,
            displayColors: false,
            backgroundColor: KTApp.getStateColor('brand'),
            titleFontColor: '#ffffff',
            cornerRadius: 4,
            footerSpacing: 0,
            titleSpacing: 0
          } : false,
          legend: {
            display: false,
            labels: {
              usePointStyle: false
            }
          },
          responsive: false,
          maintainAspectRatio: true,
          hover: {
            mode: 'index'
          },
          scales: {
            xAxes: [{
              display: false,
              gridLines: false,
              scaleLabel: {
                display: false,
                labelString: 'Month'
              }
            }],
            yAxes: [{
              display: false,
              gridLines: false,
              scaleLabel: {
                display: false,
                labelString: 'Month'
              }
            }]
          },
          elements: {
            line: {
              tension: 0.5
            },
            point: {
              radius: 2,
              borderWidth: 4
            }
          },
          layout: {
            padding: {
              left: 6,
              right: 0,
              top: 4,
              bottom: 0
            }
          }
        }
      };
      var chart = new Chart(src, config);
    },
    initMediumChart: function initMediumChart(src, data, max, color, border) {
      if (!document.getElementById(src)) {
        return;
      }

      var border = border ? border : 2; // Main chart

      var ctx = document.getElementById(src).getContext("2d");
      var gradient = ctx.createLinearGradient(0, 0, 0, 100);
      gradient.addColorStop(0, Chart.helpers.color(color).alpha(0.3).rgbString());
      gradient.addColorStop(1, Chart.helpers.color(color).alpha(0).rgbString());
      var mainConfig = {
        type: 'line',
        data: {
          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October'],
          datasets: [{
            label: 'Orders',
            borderColor: color,
            borderWidth: border,
            backgroundColor: gradient,
            pointBackgroundColor: KTApp.getStateColor('brand'),
            data: data
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          title: {
            display: false,
            text: 'Stacked Area'
          },
          tooltips: {
            enabled: true,
            intersect: false,
            mode: 'nearest',
            bodySpacing: 5,
            yPadding: 10,
            xPadding: 10,
            caretPadding: 0,
            displayColors: false,
            backgroundColor: KTApp.getStateColor('brand'),
            titleFontColor: '#ffffff',
            cornerRadius: 4,
            footerSpacing: 0,
            titleSpacing: 0
          },
          legend: {
            display: false,
            labels: {
              usePointStyle: false
            }
          },
          hover: {
            mode: 'index'
          },
          scales: {
            xAxes: [{
              display: false,
              scaleLabel: {
                display: false,
                labelString: 'Month'
              },
              ticks: {
                display: false,
                beginAtZero: true
              }
            }],
            yAxes: [{
              display: false,
              scaleLabel: {
                display: false,
                labelString: 'Value'
              },
              gridLines: {
                color: '#eef2f9',
                drawBorder: false,
                offsetGridLines: true,
                drawTicks: false
              },
              ticks: {
                max: max,
                display: false,
                beginAtZero: true
              }
            }]
          },
          elements: {
            point: {
              radius: 0,
              borderWidth: 0,
              hoverRadius: 0,
              hoverBorderWidth: 0
            }
          },
          layout: {
            padding: {
              left: 0,
              right: 0,
              top: 0,
              bottom: 0
            }
          }
        }
      };
      var chart = new Chart(ctx, mainConfig); // Update chart on window resize

      KTUtil.addResizeHandler(function () {
        chart.update();
      });
    }
  };
}(); // webpack support


if (true) {
  module.exports = KTLib;
}

/***/ }),

/***/ "./resources/assets/js/global/layout/offcanvas-panel.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/global/layout/offcanvas-panel.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTOffcanvasPanel = function () {
  var notificationPanel = KTUtil.get('offcanvas_toolbar_notifications');
  var quickActionsPanel = KTUtil.get('offcanvas_toolbar_quick_actions');
  var profilePanel = KTUtil.get('offcanvas_toolbar_profile');
  var searchPanel = KTUtil.get('offcanvas_toolbar_search');

  var initNotifications = function initNotifications() {
    var head = KTUtil.find(notificationPanel, '.offcanvas-panel__head');
    var body = KTUtil.find(notificationPanel, '.offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(notificationPanel, {
      overlay: true,
      baseClass: 'offcanvas-panel',
      closeBy: 'offcanvas_toolbar_notifications_close',
      toggleBy: 'offcanvas_toolbar_notifications_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(notificationPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initQucikActions = function initQucikActions() {
    var head = KTUtil.find(quickActionsPanel, '.offcanvas-panel__head');
    var body = KTUtil.find(quickActionsPanel, '.offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(quickActionsPanel, {
      overlay: true,
      baseClass: 'offcanvas-panel',
      closeBy: 'offcanvas_toolbar_quick_actions_close',
      toggleBy: 'offcanvas_toolbar_quick_actions_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(quickActionsPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initProfile = function initProfile() {
    var head = KTUtil.find(profilePanel, '.offcanvas-panel__head');
    var body = KTUtil.find(profilePanel, '.offcanvas-panel__body');
    var offcanvas = new KTOffcanvas(profilePanel, {
      overlay: true,
      baseClass: 'offcanvas-panel',
      closeBy: 'offcanvas_toolbar_profile_close',
      toggleBy: 'offcanvas_toolbar_profile_toggler_btn'
    });
    KTUtil.scrollInit(body, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(profilePanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(profilePanel, 'paddingBottom'));
        return height;
      }
    });
  };

  var initSearch = function initSearch() {
    var head = KTUtil.find(searchPanel, '.offcanvas-panel__head');
    var body = KTUtil.find(searchPanel, '.offcanvas-panel__body');
    var search = KTUtil.get('quick_search_offcanvas');
    var form = KTUtil.find(search, '.quick-search__form');
    var wrapper = KTUtil.find(search, '.quick-search__wrapper');
    var offcanvas = new KTOffcanvas(searchPanel, {
      overlay: true,
      baseClass: 'offcanvas-panel',
      closeBy: 'offcanvas_toolbar_search_close',
      toggleBy: 'offcanvas_toolbar_search_toggler_btn'
    });
    KTUtil.scrollInit(wrapper, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        var height = parseInt(KTUtil.getViewPort().height);
        height = height - parseInt(KTUtil.actualHeight(form));
        height = height - parseInt(KTUtil.css(form, 'marginBottom'));

        if (head) {
          height = height - parseInt(KTUtil.actualHeight(head));
          height = height - parseInt(KTUtil.css(head, 'marginBottom'));
        }

        height = height - parseInt(KTUtil.css(searchPanel, 'paddingTop'));
        height = height - parseInt(KTUtil.css(searchPanel, 'paddingBottom'));
        return height;
      }
    });
  };

  return {
    init: function init() {
      initNotifications();
      initQucikActions();
      initProfile();
      initSearch();
    }
  };
}(); // Init on page load completed


KTUtil.ready(function () {
  KTOffcanvasPanel.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/quick-panel.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/global/layout/quick-panel.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTQuickPanel = function () {
  var panel = KTUtil.get('quick_panel');
  var notificationPanel = KTUtil.get('quick_panel_tab_notifications');
  var actionsPanel = KTUtil.get('quick_panel_tab_actions');
  var settingsPanel = KTUtil.get('quick_panel_tab_settings');

  var getContentHeight = function getContentHeight() {
    var height;
    var nav = KTUtil.find(panel, '.offcanvas-panel__nav');
    var content = KTUtil.find(panel, '.offcanvas-panel__body');
    height = parseInt(KTUtil.getViewPort().height) - parseInt(KTUtil.actualHeight(nav)) - parseInt(KTUtil.css(nav, 'margin-bottom')) - 2 * parseInt(KTUtil.css(nav, 'padding-top')) - 10;
    return height;
  };

  var initOffcanvas = function initOffcanvas() {
    var offcanvas = new KTOffcanvas(panel, {
      overlay: true,
      baseClass: 'offcanvas-panel',
      closeBy: 'quick_panel_close_btn',
      toggleBy: 'quick_panel_toggler_btn'
    });
  };

  var initNotifications = function initNotifications() {
    KTUtil.scrollInit(notificationPanel, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var initActions = function initActions() {
    KTUtil.scrollInit(actionsPanel, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var initSettings = function initSettings() {
    KTUtil.scrollInit(settingsPanel, {
      disableForMobile: true,
      resetHeightOnDestroy: true,
      handleWindowResize: true,
      height: function height() {
        return getContentHeight();
      }
    });
  };

  var updatePerfectScrollbars = function updatePerfectScrollbars() {
    $(panel).find('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
      KTUtil.scrollUpdate(notificationPanel);
      KTUtil.scrollUpdate(actionsPanel);
      KTUtil.scrollUpdate(settingsPanel);
    });
  };

  return {
    init: function init() {
      initOffcanvas();
      initNotifications();
      initActions();
      initSettings();
      updatePerfectScrollbars();
    }
  };
}(); // Init on page load completed


KTUtil.ready(function () {
  KTQuickPanel.init();
});

/***/ }),

/***/ "./resources/assets/js/global/layout/quick-search.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/global/layout/quick-search.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var KTQuickSearch = function KTQuickSearch() {
  var target;
  var form;
  var input;
  var closeIcon;
  var resultWrapper;
  var resultDropdown;
  var resultDropdownToggle;
  var inputGroup;
  var query = '';
  var hasResult = false;
  var timeout = false;
  var isProcessing = false;
  var requestTimeout = 200; // ajax request fire timeout in milliseconds

  var spinnerClass = 'spinner spinner--input spinner--sm spinner--brand spinner--right';
  var resultClass = 'quick-search--has-result';
  var minLength = 2;

  var showProgress = function showProgress() {
    isProcessing = true;
    KTUtil.addClass(inputGroup, spinnerClass);

    if (closeIcon) {
      KTUtil.hide(closeIcon);
    }
  };

  var hideProgress = function hideProgress() {
    isProcessing = false;
    KTUtil.removeClass(inputGroup, spinnerClass);

    if (closeIcon) {
      if (input.value.length < minLength) {
        KTUtil.hide(closeIcon);
      } else {
        KTUtil.show(closeIcon, 'flex');
      }
    }
  };

  var showDropdown = function showDropdown() {
    if (resultDropdownToggle && !KTUtil.hasClass(resultDropdown, 'show')) {
      $(resultDropdownToggle).dropdown('toggle');
      $(resultDropdownToggle).dropdown('update');
    }
  };

  var hideDropdown = function hideDropdown() {
    if (resultDropdownToggle && KTUtil.hasClass(resultDropdown, 'show')) {
      $(resultDropdownToggle).dropdown('toggle');
    }
  };

  var processSearch = function processSearch() {
    if (hasResult && query === input.value) {
      hideProgress();
      KTUtil.addClass(target, resultClass);
      showDropdown();
      KTUtil.scrollUpdate(resultWrapper);
      return;
    }

    query = input.value;
    KTUtil.removeClass(target, resultClass);
    showProgress();
    hideDropdown();
    setTimeout(function () {
      $.ajax({
        url: 'https://keenthemes.com/keen/tools/preview/inc/api/quick_search.php',
        data: {
          query: query
        },
        dataType: 'html',
        success: function success(res) {
          hasResult = true;
          hideProgress();
          KTUtil.addClass(target, resultClass);
          KTUtil.setHTML(resultWrapper, res);
          showDropdown();
          KTUtil.scrollUpdate(resultWrapper);
        },
        error: function error(res) {
          hasResult = false;
          hideProgress();
          KTUtil.addClass(target, resultClass);
          KTUtil.setHTML(resultWrapper, '<span class="quick-search__message">Connection error. Pleae try again later.</div>');
          showDropdown();
          KTUtil.scrollUpdate(resultWrapper);
        }
      });
    }, 1000);
  };

  var handleCancel = function handleCancel(e) {
    input.value = '';
    query = '';
    hasResult = false;
    KTUtil.hide(closeIcon);
    KTUtil.removeClass(target, resultClass);
    hideDropdown();
  };

  var handleSearch = function handleSearch() {
    if (input.value.length < minLength) {
      hideProgress();
      hideDropdown();
      return;
    }

    if (isProcessing == true) {
      return;
    }

    if (timeout) {
      clearTimeout(timeout);
    }

    timeout = setTimeout(function () {
      processSearch();
    }, requestTimeout);
  };

  return {
    init: function init(element) {
      // Init
      target = element;
      form = KTUtil.find(target, '.quick-search__form');
      input = KTUtil.find(target, '.quick-search__input');
      closeIcon = KTUtil.find(target, '.quick-search__close');
      resultWrapper = KTUtil.find(target, '.quick-search__wrapper');
      resultDropdown = KTUtil.find(target, '.dropdown-menu');
      resultDropdownToggle = KTUtil.find(target, '[data-toggle="dropdown"]');
      inputGroup = KTUtil.find(target, '.input-group'); // Attach input keyup handler

      KTUtil.addEvent(input, 'keyup', handleSearch);
      KTUtil.addEvent(input, 'focus', handleSearch); // Prevent enter click

      form.onkeypress = function (e) {
        var key = e.charCode || e.keyCode || 0;

        if (key == 13) {
          e.preventDefault();
        }
      };

      KTUtil.addEvent(closeIcon, 'click', handleCancel);
    }
  };
};

var KTQuickSearchMobile = KTQuickSearch; // Init on page load completed

KTUtil.ready(function () {
  if (KTUtil.get('quick_search_dropdown')) {
    KTQuickSearch().init(KTUtil.get('quick_search_dropdown'));
  }

  if (KTUtil.get('quick_search_inline')) {
    KTQuickSearchMobile().init(KTUtil.get('quick_search_inline'));
  }

  if (KTUtil.get('quick_search_offcanvas')) {
    KTQuickSearchMobile().init(KTUtil.get('quick_search_offcanvas'));
  }
});

/***/ }),

/***/ "./resources/assets/js/global/template.js":
/*!************************************************!*\
  !*** ./resources/assets/js/global/template.js ***!
  \************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tooltip_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tooltip.js */ "./node_modules/tooltip.js/dist/esm/tooltip.js");
/* harmony import */ var notiflix_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! notiflix-react */ "./node_modules/notiflix-react/dist/notiflix-react-aio-1.4.0.js");




/**
 * Define the output of this file. The output of CSS and JS file will be auto detected.
 *
 * @output js/template
 */
// Global Libraire

__webpack_require__(/*! perfect-scrollbar/css/perfect-scrollbar.css */ "./node_modules/perfect-scrollbar/css/perfect-scrollbar.css");

window.wNumb = __webpack_require__(/*! wnumb */ "./node_modules/wnumb/wNumb.js");
window.Sticky = __webpack_require__(/*! sticky-js */ "./node_modules/sticky-js/index.js");
window.PerfectScrollbar = __webpack_require__(/*! perfect-scrollbar/dist/perfect-scrollbar */ "./node_modules/perfect-scrollbar/dist/perfect-scrollbar.js");
window.Cookies = __webpack_require__(/*! js-cookie */ "./node_modules/js-cookie/src/js.cookie.js");
window.Tooltip = tooltip_js__WEBPACK_IMPORTED_MODULE_0__["default"];
window.Notiflix = notiflix_react__WEBPACK_IMPORTED_MODULE_1__["default"];
notiflix_react__WEBPACK_IMPORTED_MODULE_1__["default"].Notify.Init({
  timeout: 5000
}); // Shopper"s plugins

window.KTUtil = __webpack_require__(/*! ./components/base/util */ "./resources/assets/js/global/components/base/util.js");
window.KTApp = __webpack_require__(/*! ./components/base/app */ "./resources/assets/js/global/components/base/app.js");
window.KTAvatar = __webpack_require__(/*! ./components/base/avatar */ "./resources/assets/js/global/components/base/avatar.js");
window.KTDialog = __webpack_require__(/*! ./components/base/dialog */ "./resources/assets/js/global/components/base/dialog.js");
window.KTHeader = __webpack_require__(/*! ./components/base/header */ "./resources/assets/js/global/components/base/header.js");
window.KTMenu = __webpack_require__(/*! ./components/base/menu */ "./resources/assets/js/global/components/base/menu.js");
window.KTOffcanvas = __webpack_require__(/*! ./components/base/offcanvas */ "./resources/assets/js/global/components/base/offcanvas.js");
window.KTPortlet = __webpack_require__(/*! ./components/base/portlet */ "./resources/assets/js/global/components/base/portlet.js");
window.KTScrolltop = __webpack_require__(/*! ./components/base/scrolltop */ "./resources/assets/js/global/components/base/scrolltop.js");
window.KTToggle = __webpack_require__(/*! ./components/base/toggle */ "./resources/assets/js/global/components/base/toggle.js"); // Layout scripts

window.KTLayout = __webpack_require__(/*! ./layout/layout */ "./resources/assets/js/global/layout/layout.js");
window.KTLib = __webpack_require__(/*! ./layout/lib */ "./resources/assets/js/global/layout/lib.js");

__webpack_require__(/*! ./layout/offcanvas-panel */ "./resources/assets/js/global/layout/offcanvas-panel.js");

__webpack_require__(/*! ./layout/quick-panel */ "./resources/assets/js/global/layout/quick-panel.js");

__webpack_require__(/*! ./layout/quick-search */ "./resources/assets/js/global/layout/quick-search.js");

/***/ }),

/***/ 1:
/*!******************************************************!*\
  !*** multi ./resources/assets/js/global/template.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/mckenzie/Sites/packages/laravel-shopper-v6/packages/shopper/framework/resources/assets/js/global/template.js */"./resources/assets/js/global/template.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BlcmZlY3Qtc2Nyb2xsYmFyL2Nzcy9wZXJmZWN0LXNjcm9sbGJhci5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qcy1jb29raWUvc3JjL2pzLmNvb2tpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbm90aWZsaXgtcmVhY3QvZGlzdC9ub3RpZmxpeC1yZWFjdC1haW8tMS40LjAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BlcmZlY3Qtc2Nyb2xsYmFyL2Nzcy9wZXJmZWN0LXNjcm9sbGJhci5jc3M/ZDA4ZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcGVyZmVjdC1zY3JvbGxiYXIvZGlzdC9wZXJmZWN0LXNjcm9sbGJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RpY2t5LWpzL2Rpc3Qvc3RpY2t5LmNvbXBpbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0aWNreS1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG9vbHRpcC5qcy9kaXN0L2VzbS90b29sdGlwLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3dudW1iL3dOdW1iLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvZ2xvYmFsL2NvbXBvbmVudHMvYmFzZS9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvY29tcG9uZW50cy9iYXNlL2F2YXRhci5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2dsb2JhbC9jb21wb25lbnRzL2Jhc2UvZGlhbG9nLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvZ2xvYmFsL2NvbXBvbmVudHMvYmFzZS9oZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvY29tcG9uZW50cy9iYXNlL21lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvY29tcG9uZW50cy9iYXNlL29mZmNhbnZhcy5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2dsb2JhbC9jb21wb25lbnRzL2Jhc2UvcG9ydGxldC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2dsb2JhbC9jb21wb25lbnRzL2Jhc2Uvc2Nyb2xsdG9wLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvZ2xvYmFsL2NvbXBvbmVudHMvYmFzZS90b2dnbGUuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvY29tcG9uZW50cy9iYXNlL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvbGF5b3V0L2xheW91dC5qcyIsIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL2dsb2JhbC9sYXlvdXQvbGliLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvZ2xvYmFsL2xheW91dC9vZmZjYW52YXMtcGFuZWwuanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvbGF5b3V0L3F1aWNrLXBhbmVsLmpzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvZ2xvYmFsL2xheW91dC9xdWljay1zZWFyY2guanMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9nbG9iYWwvdGVtcGxhdGUuanMiXSwibmFtZXMiOlsiS1RBcHAiLCJjb2xvcnMiLCJpbml0VG9vbHRpcCIsImVsIiwic2tpbiIsImRhdGEiLCJ3aWR0aCIsInRyaWdnZXJWYWx1ZSIsInBsYWNlbWVudCIsInRvb2x0aXAiLCJ0cmlnZ2VyIiwidGVtcGxhdGUiLCJpbml0VG9vbHRpcHMiLCIkIiwiZWFjaCIsImluaXRQb3BvdmVyIiwicG9wb3ZlciIsImluaXRQb3BvdmVycyIsImluaXRGaWxlSW5wdXQiLCJvbiIsImZpbGVOYW1lIiwidmFsIiwibmV4dCIsImFkZENsYXNzIiwiaHRtbCIsImluaXRQb3J0bGV0Iiwib3B0aW9ucyIsInBvcnRsZXQiLCJLVFBvcnRsZXQiLCJpbml0UG9ydGxldHMiLCJpbml0U2Nyb2xsIiwiS1RVdGlsIiwic2Nyb2xsSW5pdCIsIm1vYmlsZU5hdGl2ZVNjcm9sbCIsImhhbmRsZVdpbmRvd1Jlc2l6ZSIsInJlbWVtYmVyUG9zaXRpb24iLCJoZWlnaHQiLCJpc0luUmVzcG9uc2l2ZVJhbmdlIiwiaW5pdEFsZXJ0cyIsImNsb3Nlc3QiLCJoaWRlIiwiaW5pdFN0aWNreSIsInN0aWNreSIsIlN0aWNreSIsImluaXRBYnNvbHV0ZURyb3Bkb3duIiwiY29udGV4dCIsImRyb3Bkb3duTWVudSIsImUiLCJ0YXJnZXQiLCJmaW5kIiwiYXBwZW5kIiwiZGV0YWNoIiwiY3NzIiwicG9zaXRpb24iLCJyZWxhdGVkVGFyZ2V0IiwiaW5pdEFic29sdXRlRHJvcGRvd25zIiwibGVuZ3RoIiwiaW5pdCIsImluaXRDb21wb25lbnRzIiwiYmxvY2siLCJleHRlbmQiLCJvcGFjaXR5Iiwib3ZlcmxheUNvbG9yIiwidHlwZSIsInNpemUiLCJzdGF0ZSIsImNlbnRlclgiLCJjZW50ZXJZIiwibWVzc2FnZSIsInNoYWRvdyIsInZlcnNpb24iLCJzcGlubmVyIiwiY2xhc3NlcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImdldCIsInByZXBlbmQiLCJpbm5lckhUTUwiLCJhY3R1YWxXaWR0aCIsInJlbW92ZSIsInBhcmFtcyIsInRvcCIsImxlZnQiLCJib3JkZXIiLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwib3ZlcmxheUNTUyIsImN1cnNvciIsInpJbmRleCIsIm9uVW5ibG9jayIsImJsb2NrVUkiLCJ1bmJsb2NrIiwidW5ibG9ja1VJIiwiYmxvY2tQYWdlIiwidW5ibG9ja1BhZ2UiLCJwcm9ncmVzcyIsImFsaWdubWVudCIsInVucHJvZ3Jlc3MiLCJhdHRyIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVBdHRyIiwiZ2V0U3RhdGVDb2xvciIsIm5hbWUiLCJnZXRCYXNlQ29sb3IiLCJsZXZlbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJLVEFwcE9wdGlvbnMiLCJyZWFkeSIsIktUQXZhdGFyIiwiZWxlbWVudElkIiwidGhlIiwiZWxlbWVudCIsImJvZHkiLCJkZWZhdWx0T3B0aW9ucyIsIlBsdWdpbiIsImNvbnN0cnVjdCIsImhhcyIsImJ1aWxkIiwic2V0IiwiZXZlbnRzIiwiaW5wdXQiLCJob2xkZXIiLCJjYW5jZWwiLCJzcmMiLCJkZWVwRXh0ZW5kIiwiYWRkRXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInJlc3VsdCIsInJlYWRBc0RhdGFVUkwiLCJ2YWx1ZSIsImV2ZW50VHJpZ2dlciIsImkiLCJldmVudCIsIm9uZSIsImZpcmVkIiwiaGFuZGxlciIsImNhbGwiLCJwdXNoIiwic2V0RGVmYXVsdHMiLCJhcHBseSIsIktURGlhbG9nIiwic2hvdyIsInNldEhUTUwiLCJhcHBlbmRDaGlsZCIsInNob3duIiwiaGlkZGVuIiwiS1RIZWFkZXIiLCJ1bmRlZmluZWQiLCJjbGFzc2ljIiwib2Zmc2V0IiwibW9iaWxlIiwiZGVza3RvcCIsIm1pbmltaXplIiwibGFzdFNjcm9sbFRvcCIsImV2ZW50VHJpZ2dlclN0YXRlIiwidmlld3BvcnRIZWlnaHQiLCJnZXRWaWV3UG9ydCIsImRvY3VtZW50SGVpZ2h0IiwiZ2V0RG9jdW1lbnRIZWlnaHQiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwib2ZmIiwic3QiLCJnZXRTY3JvbGxUb3AiLCJhcmdzIiwiS1RNZW51Iiwic2Nyb2xsIiwiYWNjb3JkaW9uIiwic2xpZGVTcGVlZCIsImF1dG9TY3JvbGwiLCJhdXRvU2Nyb2xsU3BlZWQiLCJleHBhbmRBbGwiLCJkcm9wZG93biIsInRpbWVvdXQiLCJyZXNldCIsImV2ZW50SGFuZGxlcnMiLCJwYXVzZURyb3Bkb3duSG92ZXJUaW1lIiwidWlkIiwiZ2V0VW5pcXVlSUQiLCJ1cGRhdGUiLCJyZWxvYWQiLCJyZXNldFN1Ym1lbnVQcm9wcyIsImhhbmRsZVN1Ym1lbnVBY2NvcmRpb24iLCJnZXRTdWJtZW51TW9kZSIsImlzQ29uZGl0aW9uYWxTdWJtZW51RHJvcGRvd24iLCJoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRW50ZXIiLCJoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRXhpdCIsImhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsaWNrIiwiaGFuZGxlU3VibWVudURyb3Bkb3duVGFiQ2xpY2siLCJoYW5kbGVMaW5rQ2xpY2siLCJzY3JvbGxEZXN0cm95Iiwid2luZG93U2Nyb2xsIiwicmVzZXRIZWlnaHRPbkRlc3Ryb3kiLCJzY3JvbGxVcGRhdGUiLCJzY3JvbGxUb3AiLCJoYXNBdHRyIiwiaXNzZXQiLCJzdWJtZW51IiwiaGFzQ2xhc3NlcyIsIm1vZGUiLCJ0YWJsZXQiLCJzdWJtZW51cyIsImZpbmRBbGwiLCJsZW4iLCJyZXN1bWVEcm9wZG93bkhvdmVyIiwiaXRlbSIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImNsZWFyVGltZW91dCIsInNob3dTdWJtZW51RHJvcGRvd24iLCJ0aW1lIiwic2V0VGltZW91dCIsImhpZGVTdWJtZW51RHJvcGRvd24iLCJzZXRBdHRyaWJ1dGUiLCJoYXNDbGFzcyIsImhpZGVTdWJtZW51RHJvcGRvd25zIiwiaGFuZGxlU3VibWVudURyb3Bkb3duQ2xvc2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXVlcnkiLCJsaSIsImNoaWxkIiwic3BlZWQiLCJoYXNDbG9zYWJsZXMiLCJzdWJuYXYiLCJjbG9zYWJsZXMiLCJjaGlsZHJlbiIsImVsXyIsInN1Ym1lbnVfIiwic2xpZGVVcCIsInNsaWRlRG93biIsInNjcm9sbFRvSXRlbSIsInNjcm9sbFRvIiwiY2xhc3NBbHNvIiwiaXRlbXMiLCJqIiwiY250IiwibGlzdCIsImNvbnRhaW5zIiwiY3JlYXRlU3VibWVudURyb3Bkb3duQ2xpY2tEcm9wb2ZmIiwiZHJvcG9mZiIsInN0b3BQcm9wYWdhdGlvbiIsInBhdXNlRHJvcGRvd25Ib3ZlciIsImRhdGUiLCJEYXRlIiwiZ2V0VGltZSIsInJlc2V0QWN0aXZlSXRlbSIsInBhcmVudHMiLCJpXyIsImxlbl8iLCJzZXRBY3RpdmVJdGVtIiwiZ2V0QnJlYWRjcnVtYnMiLCJicmVhZGNydW1icyIsImxpbmsiLCJ0ZXh0IiwidGl0bGUiLCJocmVmIiwic3VibWVudUxpbmsiLCJyZXZlcnNlIiwiZ2V0UGFnZVRpdGxlIiwicmVtb3ZlRXZlbnQiLCJzY3JvbGxSZUluaXQiLCJoaWRlRHJvcGRvd24iLCJoaWRlRHJvcGRvd25zIiwiYWRkUmVzaXplSGFuZGxlciIsInBhcmVudE5vZGUiLCJLVE9mZmNhbnZhcyIsIm92ZXJsYXkiLCJjbGFzc0Jhc2UiLCJiYXNlQ2xhc3MiLCJjbGFzc1Nob3duIiwiY2xhc3NPdmVybGF5IiwidG9nZ2xlQnkiLCJ0b2dnbGUiLCJjbG9zZUJ5IiwicGFyc2VJbnQiLCJpc1Nob3duIiwidG9nZ2xlckNsYXNzIiwiaW5zZXJ0QWZ0ZXIiLCJ0cmFuc2l0aW9uRW5kIiwiaWQiLCJib2R5VG9nZ2xlU3BlZWQiLCJ0b29sdGlwcyIsInRvb2xzIiwiY29sbGFwc2UiLCJleHBhbmQiLCJmdWxsc2NyZWVuIiwiaGVhZCIsImZvb3QiLCJzZXR1cFRvb2x0aXBzIiwib25TY3JvbGxTdGlja3kiLCJpc05hTiIsInVwZGF0ZVN0aWNreSIsInJlc2V0U3RpY2t5IiwiRnVuY3Rpb24iLCJyaWdodCIsInJlbW92ZVRvb2x0aXBzIiwic2V0Q29udGVudCIsImdldEJvZHkiLCJnZXRTZWxmIiwiY29sbGFwc2VkIiwiZnVsbHNjcmVlbk9uIiwidGlwIiwiVG9vbHRpcCIsImRpc3Bvc2UiLCJ1cGRhdGVUaXRsZUNvbnRlbnQiLCJkIiwiaGVpZ2h0MSIsImhlaWdodDIiLCJkZXN0cm95U3RpY2t5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInVuRnVsbHNjcmVlbiIsIktUU2Nyb2xsdG9wIiwidG9nZ2xlQ2xhc3MiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsImhhbmRsZSIsInBvcyIsInBhZ2VZT2Zmc2V0IiwiS1RUb2dnbGUiLCJ0b2dnbGVyU3RhdGUiLCJ0YXJnZXRTdGF0ZSIsInRvZ2dsZU9uIiwidG9nZ2xlT2ZmIiwiZ2V0U3RhdGUiLCJFbGVtZW50IiwicHJvdG90eXBlIiwibWF0Y2hlcyIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwicyIsImFuY2VzdG9yIiwiZG9jdW1lbnRFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImVsZW0iLCJyZW1vdmVDaGlsZCIsImxhc3RUaW1lIiwidmVuZG9ycyIsIngiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY3VyclRpbWUiLCJ0aW1lVG9DYWxsIiwiTWF0aCIsIm1heCIsImFyciIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiYXJnQXJyIiwiQXJyYXkiLCJzbGljZSIsImFyZ3VtZW50cyIsImRvY0ZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiYXJnSXRlbSIsImlzTm9kZSIsIk5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIlN0cmluZyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJEb2N1bWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJLVFV0aWxFbGVtZW50RGF0YVN0b3JlIiwiS1RVdGlsRWxlbWVudERhdGFTdG9yZUlEIiwiS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVycyIsInJlc2l6ZUhhbmRsZXJzIiwiYnJlYWtwb2ludHMiLCJzbSIsIm1kIiwibGciLCJ4bCIsIl93aW5kb3dSZXNpemVIYW5kbGVyIiwiX3J1blJlc2l6ZUhhbmRsZXJzIiwiZGVsYXkiLCJyZW1vdmVSZXNpemVIYW5kbGVyIiwicnVuUmVzaXplSGFuZGxlcnMiLCJyZXNpemUiLCJFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJldnQiLCJjcmVhdGVFdmVudCIsImluaXRVSUV2ZW50IiwiZ2V0VVJMUGFyYW0iLCJwYXJhbU5hbWUiLCJzZWFyY2hTdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsInN1YnN0cmluZyIsInNwbGl0IiwidW5lc2NhcGUiLCJpc01vYmlsZURldmljZSIsImdldEJyZWFrcG9pbnQiLCJpc0Rlc2t0b3BEZXZpY2UiLCJhIiwiYnJlYWtwb2ludCIsInByZWZpeCIsImZsb29yIiwicmFuZG9tIiwib2JqIiwia2V5cyIsInN0b25lIiwiaW5kZXhPZiIsIkVycm9yIiwic2hpZnQiLCJnZXRIaWdoZXN0WmluZGV4IiwiaGFzRml4ZWRQb3NpdGlvbmVkUGFyZW50Iiwic2xlZXAiLCJtaWxsaXNlY29uZHMiLCJzdGFydCIsImdldFJhbmRvbUludCIsIm1pbiIsImlzQW5ndWxhclZlcnNpb24iLCJab25lIiwib3V0Iiwia2V5Iiwibm9kZVR5cGUiLCJnZXRFbGVtZW50QnlJZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsImdldEJ5SUQiLCJnZXRCeVRhZyIsImdldEJ5Q2xhc3MiLCJjbGFzc2VzQXJyIiwidHJpbSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsIlJlZ0V4cCIsInRlc3QiLCJjbGFzc05hbWVzIiwiYWRkIiwicmVwbGFjZSIsInRyaWdnZXJDdXN0b21FdmVudCIsImV2ZW50TmFtZSIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiaW5pdEN1c3RvbUV2ZW50IiwidHJpZ2dlckV2ZW50Iiwibm9kZSIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJldmVudENsYXNzIiwiYnViYmxlcyIsImluaXRFdmVudCIsInN5bnRoZXRpYyIsImZpcmVFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiaW5kZXgiLCJlbG0iLCJjIiwic3RyaW5nIiwiZXZlbnRUcmlnZ2VyZWQiLCJjdXJyZW50VGFyZ2V0IiwiZGF0YXNldCIsInRyaWdnZXJlZCIsInBhcmVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZWxlY3RvciIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJsb2ciLCJjaGlsZE5vZGVzIiwibCIsInAiLCJmIiwidGFnTmFtZSIsImN1c3RvbURhdGFUYWciLCJvdXRlcldpZHRoIiwibWFyZ2luIiwicGFyc2VGbG9hdCIsIm9mZnNldFdpZHRoIiwicmVjdCIsIndpbiIsImdldENsaWVudFJlY3RzIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZGVmYXVsdFZpZXciLCJwYWdlWE9mZnNldCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJhbmltYXRlIiwiZnJvbSIsInRvIiwiZHVyYXRpb24iLCJlYXNpbmciLCJkb25lIiwiZWFzaW5ncyIsImxpbmVhciIsInQiLCJiIiwickFGIiwiY2FuY2VsZWQiLCJjaGFuZ2UiLCJsb29wIiwidGltZXN0YW1wIiwicGVyZm9ybWFuY2UiLCJub3ciLCJhY3R1YWxDc3MiLCJwcm9wIiwiY2FjaGUiLCJIVE1MRWxlbWVudCIsInN0eWxlIiwiY3NzVGV4dCIsImFjdHVhbEhlaWdodCIsImdldFNjcm9sbCIsIm1ldGhvZCIsInNlbGYiLCJicm93c2VyU3VwcG9ydHNCb3hNb2RlbCIsInN0eWxlUHJvcCIsImdldENvbXB1dGVkU3R5bGUiLCJ0b0xvd2VyQ2FzZSIsImdldFByb3BlcnR5VmFsdWUiLCJjdXJyZW50U3R5bGUiLCJzdHIiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsIm9sZExlZnQiLCJvbGRSc0xlZnQiLCJydW50aW1lU3R5bGUiLCJwaXhlbExlZnQiLCJzbGlkZSIsImRpciIsInJlY2FsY01heEhlaWdodCIsImNhbGNIZWlnaHQiLCJjYWxjUGFkZGluZ1RvcCIsImNhbGNQYWRkaW5nQm90dG9tIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJkaXNwbGF5Iiwib3ZlcmZsb3ciLCJldmVudElkIiwidGFyZ2V0cyIsIm9uZXRpbWUiLCJjYWxsZWUiLCJoYXNoIiwiY2hyIiwiY2hhckNvZGVBdCIsImFuaW1hdGVDbGFzcyIsImFuaW1hdGlvbk5hbWUiLCJhbmltYXRpb24iLCJhbmltYXRpb25zIiwiT0FuaW1hdGlvbiIsIk1vekFuaW1hdGlvbiIsIldlYmtpdEFuaW1hdGlvbiIsIm1zQW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsInRyYW5zaXRpb25zIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsImFuaW1hdGlvbkVuZCIsImFuaW1hdGVEZWxheSIsImFuaW1hdGVEdXJhdGlvbiIsInRhcmdldFBvcyIsInNjcm9sbFBvcyIsImlzQXJyYXkiLCJhdHRhY2hFdmVudCIsInJlYWR5U3RhdGUiLCJpc0VtcHR5IiwibnVtYmVyU3RyaW5nIiwiblN0ciIsIngxIiwieDIiLCJyZ3giLCJkZXRlY3RJRSIsInVhIiwibXNpZSIsInRyaWRlbnQiLCJydiIsImVkZ2UiLCJpc1JUTCIsInBzIiwiZGlzYWJsZUZvck1vYmlsZSIsImRlc3Ryb3kiLCJkZXNrdG9wTmF0aXZlU2Nyb2xsIiwiUGVyZmVjdFNjcm9sbGJhciIsIndoZWVsU3BlZWQiLCJzd2lwZUVhc2luZyIsIndoZWVsUHJvcGFnYXRpb24iLCJtaW5TY3JvbGxiYXJMZW5ndGgiLCJtYXhTY3JvbGxiYXJMZW5ndGgiLCJzdXBwcmVzc1Njcm9sbFgiLCJDb29raWVzIiwic2Nyb2xsVXBkYXRlQWxsIiwic2Nyb2xsZXJzIiwic2Nyb2xsZXJVcGRhdGUiLCJnZXRIVE1MIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsaW5nRWxlbWVudCIsIktUTGF5b3V0IiwiYXNpZGUiLCJhc2lkZU1lbnUiLCJhc2lkZU1lbnVPZmZjYW52YXMiLCJwYWdlU3RpY2t5UG9ydGxldCIsImluaXRBc2lkZSIsIm1lbnUiLCJtZW51RGVza3RvcE1vZGUiLCJ3aW5kb3dIZWlnaHQiLCJzZWNvbmRhcnkiLCJzZWNvbmRhcnlQYWRkaW5nVG9wIiwic2Vjb25kYXJ5UGFkZGluZ0JvdHRvbSIsInRvcEhlaWdodCIsImJvdHRvbSIsImJvdHRvbVBhZGRpbmdUb3AiLCJib3R0b21QYWRkaW5nQm90dG9uIiwiaW5pdFNjcm9sbHRvcCIsInNjcm9sbHRvcCIsImluaXRQYWdlU3RpY2t5UG9ydGxldCIsImFzaWRlUHJpbWFyeVdpZHRoIiwiYXNpZGVTZWNvbmRhcnlXaWR0aCIsInBvcmxldEVsIiwicG9ydGxldFdpZHRoIiwiYm9keVdpZHRoIiwicG9ydGxldE9mZnNldExlZnQiLCJOb3RpZmxpeCIsIk5vdGlmeSIsIkZhaWx1cmUiLCJnZXRBc2lkZU1lbnUiLCJjbG9zZU1vYmlsZUFzaWRlTWVudU9mZmNhbnZhcyIsImNsb3NlTW9iaWxlSGVhZGVyTWVudU9mZmNhbnZhcyIsImhlYWRlck1lbnVPZmZjYW52YXMiLCJLVExpYiIsImluaXRNaW5pQ2hhcnQiLCJjb2xvciIsImZpbGwiLCJjb25maWciLCJsYWJlbHMiLCJkYXRhc2V0cyIsImxhYmVsIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsInBvaW50SG92ZXJSYWRpdXMiLCJwb2ludEhvdmVyQm9yZGVyV2lkdGgiLCJwb2ludEJhY2tncm91bmRDb2xvciIsIkNoYXJ0IiwiaGVscGVycyIsImFscGhhIiwicmdiU3RyaW5nIiwicG9pbnRCb3JkZXJDb2xvciIsInBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEhvdmVyQm9yZGVyQ29sb3IiLCJlbmFibGVkIiwiaW50ZXJzZWN0IiwiYm9keVNwYWNpbmciLCJ5UGFkZGluZyIsInhQYWRkaW5nIiwiY2FyZXRQYWRkaW5nIiwiZGlzcGxheUNvbG9ycyIsInRpdGxlRm9udENvbG9yIiwiY29ybmVyUmFkaXVzIiwiZm9vdGVyU3BhY2luZyIsInRpdGxlU3BhY2luZyIsImxlZ2VuZCIsInVzZVBvaW50U3R5bGUiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsImhvdmVyIiwic2NhbGVzIiwieEF4ZXMiLCJncmlkTGluZXMiLCJzY2FsZUxhYmVsIiwibGFiZWxTdHJpbmciLCJ5QXhlcyIsImVsZW1lbnRzIiwibGluZSIsInRlbnNpb24iLCJwb2ludCIsInJhZGl1cyIsImxheW91dCIsImNoYXJ0IiwiaW5pdE1lZGl1bUNoYXJ0IiwiY3R4IiwiZ2V0Q29udGV4dCIsImdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJtYWluQ29uZmlnIiwidGlja3MiLCJiZWdpbkF0WmVybyIsImRyYXdCb3JkZXIiLCJvZmZzZXRHcmlkTGluZXMiLCJkcmF3VGlja3MiLCJob3ZlclJhZGl1cyIsImhvdmVyQm9yZGVyV2lkdGgiLCJLVE9mZmNhbnZhc1BhbmVsIiwibm90aWZpY2F0aW9uUGFuZWwiLCJxdWlja0FjdGlvbnNQYW5lbCIsInByb2ZpbGVQYW5lbCIsInNlYXJjaFBhbmVsIiwiaW5pdE5vdGlmaWNhdGlvbnMiLCJvZmZjYW52YXMiLCJpbml0UXVjaWtBY3Rpb25zIiwiaW5pdFByb2ZpbGUiLCJpbml0U2VhcmNoIiwiZm9ybSIsIndyYXBwZXIiLCJLVFF1aWNrUGFuZWwiLCJwYW5lbCIsImFjdGlvbnNQYW5lbCIsInNldHRpbmdzUGFuZWwiLCJnZXRDb250ZW50SGVpZ2h0IiwibmF2IiwiY29udGVudCIsImluaXRPZmZjYW52YXMiLCJpbml0QWN0aW9ucyIsImluaXRTZXR0aW5ncyIsInVwZGF0ZVBlcmZlY3RTY3JvbGxiYXJzIiwiS1RRdWlja1NlYXJjaCIsImNsb3NlSWNvbiIsInJlc3VsdFdyYXBwZXIiLCJyZXN1bHREcm9wZG93biIsInJlc3VsdERyb3Bkb3duVG9nZ2xlIiwiaW5wdXRHcm91cCIsImhhc1Jlc3VsdCIsImlzUHJvY2Vzc2luZyIsInJlcXVlc3RUaW1lb3V0Iiwic3Bpbm5lckNsYXNzIiwicmVzdWx0Q2xhc3MiLCJtaW5MZW5ndGgiLCJzaG93UHJvZ3Jlc3MiLCJoaWRlUHJvZ3Jlc3MiLCJzaG93RHJvcGRvd24iLCJwcm9jZXNzU2VhcmNoIiwiYWpheCIsInVybCIsImRhdGFUeXBlIiwic3VjY2VzcyIsInJlcyIsImVycm9yIiwiaGFuZGxlQ2FuY2VsIiwiaGFuZGxlU2VhcmNoIiwib25rZXlwcmVzcyIsImNoYXJDb2RlIiwia2V5Q29kZSIsIktUUXVpY2tTZWFyY2hNb2JpbGUiLCJyZXF1aXJlIiwid051bWIiLCJJbml0Il0sIm1hcHBpbmdzIjoiO1FBQUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFFO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0Esd0RBQXdELGtCQUFrQjtRQUMxRTtRQUNBLGlEQUFpRCxjQUFjO1FBQy9EOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSx5Q0FBeUMsaUNBQWlDO1FBQzFFLGdIQUFnSCxtQkFBbUIsRUFBRTtRQUNySTtRQUNBOztRQUVB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RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrSEFBK0g7QUFDL0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkRBQTJELG1CQUFtQixXQUFXO0FBQ3pGO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1QztBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1QztBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVDQUF1QztBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTOztBQUVULEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEM7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7O0FBRUEsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7O0FBRUEsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDOztBQUVBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFLHdHQUF3RztBQUN4Rzs7QUFFQSx5RUFBeUU7QUFDekU7QUFDQTs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFNBQVM7O0FBRVQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDOztBQUVBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFO0FBQ0E7O0FBRUEseUVBQXlFO0FBQ3pFO0FBQ0E7O0FBRUEsNkNBQTZDO0FBQzdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBOztBQUVBLHFDQUFxQztBQUNyQztBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtB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QUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5RUFBeUUsbUJBQW1CO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUUsbUJBQW1CO0FBQzVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQjtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLHdEQUF3RCw0QkFBNEIsRUFBRTtBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUgsd0RBQXdELDRCQUE0QixFQUFFO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQSxvQ0FBb0MsbUNBQW1DO0FBQ3ZFLHNDQUFzQywyRUFBMkU7O0FBRWpIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUU7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCLCtDQUErQztBQUMxRSwwQkFBMEIsa0RBQWtEOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQSw0QkFBNEIsY0FBYztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlEQUF5RCxzQ0FBc0MsRUFBRTs7QUFFakcscURBQXFEO0FBQ3JELDJDQUEyQztBQUMzQyx3REFBd0QsMkJBQTJCLEVBQUU7QUFDckY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0MsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDLDRCQUE0QixrQkFBa0I7O0FBRTlDOztBQUVBO0FBQ0E7O0FBRUEsNEJBQTRCLGNBQWM7QUFDMUMsNEJBQTRCLGNBQWM7QUFDMUM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIscUNBQXFDLEVBQUU7QUFDcEU7QUFDQTs7QUFFQTs7QUFFQSxDQUFDOzs7Ozs7Ozs7Ozs7O0FDM3lDRDtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsa0NBQWtDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxTQUFTO0FBQ3RCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxJQUFJO0FBQ2xCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLE9BQU87QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQkFBb0I7QUFDL0I7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25COztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixrQkFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7OztBQU1EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsT0FBTztBQUNsQixXQUFXLFlBQVk7QUFDdkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsb0JBQW9CO0FBQ3BCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsWUFBWTtBQUN2QixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QsbUJBQW1CO0FBQ25CLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixxQkFBcUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLGdCQUFnQjs7QUFFNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsZ0JBQWdCOztBQUV0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLHlEQUF5RDs7QUFFOUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxRQUFRO0FBQ3RCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrQkFBK0I7QUFDL0IsMkJBQTJCO0FBQzNCLGdDQUFnQzs7QUFFaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdEOztBQUVoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVE7QUFDdEIsYUFBYSxNQUFNO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsdUNBQXVDOztBQUV2QztBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsTUFBTTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxjQUFjO0FBQzVCO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QixLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixHQUFHOztBQUVIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhCQUE4QjtBQUM5Qiw0QkFBNEI7QUFDNUI7O0FBRUEscUNBQXFDO0FBQ3JDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFdBQVc7QUFDekIsY0FBYyxPQUFPO0FBQ3JCLGFBQWEsV0FBVztBQUN4Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0EsZUFBZSxjQUFjO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0E7QUFDQSxjQUFjLE1BQU07QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFtQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFdBQVc7QUFDMUI7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFdBQVc7QUFDMUI7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQztBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0E7QUFDQSxjQUFjLGFBQWE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBLGVBQWUsV0FBVztBQUMxQjtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFdBQVc7QUFDMUI7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsZUFBZSxXQUFXO0FBQzFCO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsWUFBWTtBQUMxQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLElBQUk7QUFDSjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLGtCQUFrQjtBQUM5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckMsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsT0FBTztBQUNwQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsY0FBYztBQUNkLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCLGlEQUFpRCx1Q0FBdUMsa0RBQWtEO0FBQzFJLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFZSxxRUFBTSxFQUFDO0FBQ3RCOzs7Ozs7Ozs7Ozs7O0FDdmpGQSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU8sNkVBQTZFLE9BQU87QUFDeEc7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxLQUFLO0FBQ2xCOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsS0FBSztBQUNsQjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEtBQUs7QUFDbEI7OztBQUdBO0FBQ0EsdUJBQXVCLDZDQUE2Qzs7QUFFcEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQOztBQUVBO0FBQ0E7QUFDQTs7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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpREFBaUQsSUFBSTtBQUNyRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGVBQWUsMEJBQTBCO0FBQ3pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSwwQkFBMEI7QUFDekM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7Ozs7Ozs7Ozs7OztBQzVYWTtBQUViOzs7O0FBSUEsSUFBSUEsS0FBSyxHQUFHLFlBQVc7QUFDbkI7QUFDQSxNQUFJQyxNQUFNLEdBQUcsRUFBYjs7QUFFQSxNQUFJQyxZQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTQyxFQUFULEVBQWE7QUFDM0IsUUFBSUMsSUFBSSxHQUFHRCxFQUFFLENBQUNFLElBQUgsQ0FBUSxNQUFSLElBQWtCLGFBQWFGLEVBQUUsQ0FBQ0UsSUFBSCxDQUFRLE1BQVIsQ0FBL0IsR0FBaUQsRUFBNUQ7QUFDQSxRQUFJQyxLQUFLLEdBQUdILEVBQUUsQ0FBQ0UsSUFBSCxDQUFRLE9BQVIsTUFBcUIsTUFBckIsR0FBOEIsb0JBQTlCLEdBQXFELEVBQWpFO0FBQ0EsUUFBSUUsWUFBWSxHQUFHSixFQUFFLENBQUNFLElBQUgsQ0FBUSxTQUFSLElBQXFCRixFQUFFLENBQUNFLElBQUgsQ0FBUSxTQUFSLENBQXJCLEdBQTBDLE9BQTdEO0FBQ0EsUUFBSUcsU0FBUyxHQUFHTCxFQUFFLENBQUNFLElBQUgsQ0FBUSxXQUFSLElBQXVCRixFQUFFLENBQUNFLElBQUgsQ0FBUSxXQUFSLENBQXZCLEdBQThDLE1BQTlEO0FBRUFGLE1BQUUsQ0FBQ00sT0FBSCxDQUFXO0FBQ1BDLGFBQU8sRUFBRUgsWUFERjtBQUVQSSxjQUFRLEVBQUUseUJBQXlCUCxJQUF6QixHQUFnQyxHQUFoQyxHQUFzQ0UsS0FBdEMsR0FBOEM7Ozs7QUFGakQsS0FBWDtBQU9ILEdBYkQ7O0FBZUEsTUFBSU0sYUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVztBQUMxQjtBQUNBQyxLQUFDLENBQUMseUJBQUQsQ0FBRCxDQUE2QkMsSUFBN0IsQ0FBa0MsWUFBVztBQUN6Q1osa0JBQVcsQ0FBQ1csQ0FBQyxDQUFDLElBQUQsQ0FBRixDQUFYO0FBQ0gsS0FGRDtBQUdILEdBTEQ7O0FBT0EsTUFBSUUsWUFBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBU1osRUFBVCxFQUFhO0FBQzNCLFFBQUlDLElBQUksR0FBR0QsRUFBRSxDQUFDRSxJQUFILENBQVEsTUFBUixJQUFrQixhQUFhRixFQUFFLENBQUNFLElBQUgsQ0FBUSxNQUFSLENBQS9CLEdBQWlELEVBQTVEO0FBQ0EsUUFBSUUsWUFBWSxHQUFHSixFQUFFLENBQUNFLElBQUgsQ0FBUSxTQUFSLElBQXFCRixFQUFFLENBQUNFLElBQUgsQ0FBUSxTQUFSLENBQXJCLEdBQTBDLE9BQTdEO0FBRUFGLE1BQUUsQ0FBQ2EsT0FBSCxDQUFXO0FBQ1BOLGFBQU8sRUFBRUgsWUFERjtBQUVQSSxjQUFRLEVBQUU7aUNBQUEsR0FDY1AsSUFEZCxHQUNxQjs7Ozs7QUFIeEIsS0FBWDtBQVNILEdBYkQ7O0FBZUEsTUFBSWEsYUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVztBQUMxQjtBQUNBSixLQUFDLENBQUMseUJBQUQsQ0FBRCxDQUE2QkMsSUFBN0IsQ0FBa0MsWUFBVztBQUN6Q0Msa0JBQVcsQ0FBQ0YsQ0FBQyxDQUFDLElBQUQsQ0FBRixDQUFYO0FBQ0gsS0FGRDtBQUdILEdBTEQ7O0FBT0EsTUFBSUssYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFXO0FBQzNCO0FBQ0FMLEtBQUMsQ0FBQyxvQkFBRCxDQUFELENBQXdCTSxFQUF4QixDQUEyQixRQUEzQixFQUFxQyxZQUFXO0FBQzVDLFVBQUlDLFFBQVEsR0FBR1AsQ0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUSxHQUFSLEVBQWY7QUFDQVIsT0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUyxJQUFSLENBQWEsb0JBQWIsRUFBbUNDLFFBQW5DLENBQTRDLFVBQTVDLEVBQXdEQyxJQUF4RCxDQUE2REosUUFBN0Q7QUFDSCxLQUhEO0FBSUgsR0FORDs7QUFRQSxNQUFJSyxZQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTdEIsRUFBVCxFQUFhdUIsT0FBYixFQUFzQjtBQUNwQztBQUNBLFFBQUl2QixFQUFFLEdBQUdVLENBQUMsQ0FBQ1YsRUFBRCxDQUFWO0FBQ0EsUUFBSXdCLE9BQU8sR0FBRyxJQUFJQyxTQUFKLENBQWN6QixFQUFFLENBQUMsQ0FBRCxDQUFoQixFQUFxQnVCLE9BQXJCLENBQWQ7QUFDSCxHQUpEOztBQU1BLE1BQUlHLGFBQVksR0FBRyxTQUFmQSxZQUFlLEdBQVc7QUFDMUI7QUFDQWhCLEtBQUMsQ0FBQyx5QkFBRCxDQUFELENBQTZCQyxJQUE3QixDQUFrQyxZQUFXO0FBQ3pDLFVBQUlYLEVBQUUsR0FBR1UsQ0FBQyxDQUFDLElBQUQsQ0FBVjs7QUFFQSxVQUFJVixFQUFFLENBQUNFLElBQUgsQ0FBUSw0QkFBUixNQUEwQyxJQUE5QyxFQUFvRDtBQUNoRG9CLG9CQUFXLENBQUN0QixFQUFELEVBQUssRUFBTCxDQUFYOztBQUNBQSxVQUFFLENBQUNFLElBQUgsQ0FBUSw0QkFBUixFQUFzQyxJQUF0QztBQUNIO0FBQ0osS0FQRDtBQVFILEdBVkQ7O0FBWUEsTUFBSXlCLFVBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEJqQixLQUFDLENBQUMsc0JBQUQsQ0FBRCxDQUEwQkMsSUFBMUIsQ0FBK0IsWUFBVztBQUN0QyxVQUFJWCxFQUFFLEdBQUdVLENBQUMsQ0FBQyxJQUFELENBQVY7QUFDQWtCLFlBQU0sQ0FBQ0MsVUFBUCxDQUFrQixJQUFsQixFQUF3QjtBQUNwQkMsMEJBQWtCLEVBQUUsSUFEQTtBQUVwQkMsMEJBQWtCLEVBQUUsSUFGQTtBQUdwQkMsd0JBQWdCLEVBQUdoQyxFQUFFLENBQUNFLElBQUgsQ0FBUSxtQkFBUixLQUFnQyxNQUFoQyxHQUF5QyxJQUF6QyxHQUFnRCxLQUgvQztBQUlwQitCLGNBQU0sRUFBRSxrQkFBVztBQUNmLGNBQUlMLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsbUJBQTNCLEtBQW1EbEMsRUFBRSxDQUFDRSxJQUFILENBQVEsZUFBUixDQUF2RCxFQUFpRjtBQUM3RSxtQkFBT0YsRUFBRSxDQUFDRSxJQUFILENBQVEsZUFBUixDQUFQO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsbUJBQU9GLEVBQUUsQ0FBQ0UsSUFBSCxDQUFRLFFBQVIsQ0FBUDtBQUNIO0FBQ0o7QUFWbUIsT0FBeEI7QUFZSCxLQWREO0FBZUgsR0FoQkQ7O0FBa0JBLE1BQUlpQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQ3hCO0FBQ0F6QixLQUFDLENBQUMsTUFBRCxDQUFELENBQVVNLEVBQVYsQ0FBYSxPQUFiLEVBQXNCLG9CQUF0QixFQUE0QyxZQUFXO0FBQ25ETixPQUFDLENBQUMsSUFBRCxDQUFELENBQVEwQixPQUFSLENBQWdCLFFBQWhCLEVBQTBCQyxJQUExQjtBQUNILEtBRkQ7QUFHSCxHQUxEOztBQU9BLE1BQUlDLFdBQVUsR0FBRyxTQUFiQSxVQUFhLEdBQVc7QUFDeEIsUUFBSUMsTUFBTSxHQUFHLElBQUlDLE1BQUosQ0FBVyxzQkFBWCxDQUFiO0FBQ0gsR0FGRDs7QUFJQSxNQUFJQyxxQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQVNDLE9BQVQsRUFBa0I7QUFDekMsUUFBSUMsWUFBSjs7QUFFQSxRQUFJLENBQUNELE9BQUwsRUFBYztBQUNWO0FBQ0g7O0FBRURoQyxLQUFDLENBQUMsTUFBRCxDQUFELENBQVVNLEVBQVYsQ0FBYSxrQkFBYixFQUFpQzBCLE9BQWpDLEVBQTBDLFVBQVNFLENBQVQsRUFBWTtBQUNyREQsa0JBQVksR0FBR2pDLENBQUMsQ0FBQ2tDLENBQUMsQ0FBQ0MsTUFBSCxDQUFELENBQVlDLElBQVosQ0FBaUIsZ0JBQWpCLENBQWY7QUFDQXBDLE9BQUMsQ0FBQyxNQUFELENBQUQsQ0FBVXFDLE1BQVYsQ0FBaUJKLFlBQVksQ0FBQ0ssTUFBYixFQUFqQjtBQUNBTCxrQkFBWSxDQUFDTSxHQUFiLENBQWlCLFNBQWpCLEVBQTRCLE9BQTVCO0FBQ0FOLGtCQUFZLENBQUNPLFFBQWIsQ0FBc0I7QUFDckIsY0FBTSxXQURlO0FBRXJCLGNBQU0sY0FGZTtBQUdyQixjQUFNeEMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDTyxhQUFIO0FBSGMsT0FBdEI7QUFLQSxLQVRELEVBU0duQyxFQVRILENBU00sa0JBVE4sRUFTMEIwQixPQVQxQixFQVNtQyxVQUFTRSxDQUFULEVBQVk7QUFDOUNsQyxPQUFDLENBQUNrQyxDQUFDLENBQUNDLE1BQUgsQ0FBRCxDQUFZRSxNQUFaLENBQW1CSixZQUFZLENBQUNLLE1BQWIsRUFBbkI7QUFDQUwsa0JBQVksQ0FBQ04sSUFBYjtBQUNBLEtBWkQ7QUFhSCxHQXBCRDs7QUFzQkEsTUFBSWUscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixHQUFXO0FBQ25DMUMsS0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVTSxFQUFWLENBQWEsa0JBQWIsRUFBaUMsVUFBUzRCLENBQVQsRUFBWTtBQUN6QyxVQUFLbEMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDQyxNQUFILENBQUQsQ0FBWUMsSUFBWixDQUFpQixzQkFBakIsRUFBeUNPLE1BQXpDLEtBQW9ELENBQXpELEVBQTREO0FBQ3hEO0FBQ0g7O0FBRUQsVUFBSVYsWUFBWSxHQUFHakMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDQyxNQUFILENBQUQsQ0FBWUMsSUFBWixDQUFpQixnQkFBakIsQ0FBbkI7QUFFQXBDLE9BQUMsQ0FBQyxNQUFELENBQUQsQ0FBVXFDLE1BQVYsQ0FBaUJKLFlBQVksQ0FBQ0ssTUFBYixFQUFqQjtBQUNBTCxrQkFBWSxDQUFDTSxHQUFiLENBQWlCLFNBQWpCLEVBQTRCLE9BQTVCO0FBQ0FOLGtCQUFZLENBQUNPLFFBQWIsQ0FBc0I7QUFDbEIsY0FBTSxXQURZO0FBRWxCLGNBQU0sY0FGWTtBQUdsQixjQUFNeEMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDTyxhQUFIO0FBSFcsT0FBdEI7QUFLSCxLQWREO0FBZ0JBekMsS0FBQyxDQUFDLE1BQUQsQ0FBRCxDQUFVTSxFQUFWLENBQWEsa0JBQWIsRUFBaUMsVUFBUzRCLENBQVQsRUFBWTtBQUN6QyxVQUFLbEMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDQyxNQUFILENBQUQsQ0FBWUMsSUFBWixDQUFpQixzQkFBakIsRUFBeUNPLE1BQXpDLEtBQW9ELENBQXpELEVBQTREO0FBQ3hEO0FBQ0g7O0FBRUQsVUFBSVYsWUFBWSxHQUFHakMsQ0FBQyxDQUFDa0MsQ0FBQyxDQUFDQyxNQUFILENBQUQsQ0FBWUMsSUFBWixDQUFpQixnQkFBakIsQ0FBbkI7QUFFQXBDLE9BQUMsQ0FBQ2tDLENBQUMsQ0FBQ0MsTUFBSCxDQUFELENBQVlFLE1BQVosQ0FBbUJKLFlBQVksQ0FBQ0ssTUFBYixFQUFuQjtBQUNBTCxrQkFBWSxDQUFDTixJQUFiO0FBQ0gsS0FURDtBQVVILEdBM0JEOztBQTZCQSxTQUFPO0FBQ0hpQixRQUFJLEVBQUUsY0FBUy9CLE9BQVQsRUFBa0I7QUFDcEIsVUFBSUEsT0FBTyxJQUFJQSxPQUFPLENBQUN6QixNQUF2QixFQUErQjtBQUMzQkEsY0FBTSxHQUFHeUIsT0FBTyxDQUFDekIsTUFBakI7QUFDSDs7QUFFREQsV0FBSyxDQUFDMEQsY0FBTjtBQUNILEtBUEU7QUFTSEEsa0JBQWMsRUFBRSwwQkFBVztBQUN2QjVCLGdCQUFVOztBQUNWbEIsbUJBQVk7O0FBQ1pLLG1CQUFZOztBQUNacUIsZ0JBQVU7O0FBQ1ZULG1CQUFZOztBQUNaWCxtQkFBYTs7QUFDYnVCLGlCQUFVOztBQUNWYywyQkFBcUI7QUFDeEIsS0FsQkU7QUFvQkgzQyxnQkFBWSxFQUFFLHdCQUFXO0FBQ3JCQSxtQkFBWTtBQUNmLEtBdEJFO0FBd0JIVixlQUFXLEVBQUUscUJBQVNDLEVBQVQsRUFBYTtBQUN0QkQsa0JBQVcsQ0FBQ0MsRUFBRCxDQUFYO0FBQ0gsS0ExQkU7QUE0QkhjLGdCQUFZLEVBQUUsd0JBQVc7QUFDckJBLG1CQUFZO0FBQ2YsS0E5QkU7QUFnQ0hGLGVBQVcsRUFBRSxxQkFBU1osRUFBVCxFQUFhO0FBQ3RCWSxrQkFBVyxDQUFDWixFQUFELENBQVg7QUFDSCxLQWxDRTtBQW9DSHNCLGVBQVcsRUFBRSxxQkFBU3RCLEVBQVQsRUFBYXVCLE9BQWIsRUFBc0I7QUFDL0JELGtCQUFXLENBQUN0QixFQUFELEVBQUt1QixPQUFMLENBQVg7QUFDSCxLQXRDRTtBQXdDSEcsZ0JBQVksRUFBRSx3QkFBVztBQUNyQkEsbUJBQVk7QUFDZixLQTFDRTtBQTRDSFksY0FBVSxFQUFFLHNCQUFXO0FBQ25CQSxpQkFBVTtBQUNiLEtBOUNFO0FBZ0RIRyx3QkFBb0IsRUFBRSw4QkFBU0MsT0FBVCxFQUFrQjtBQUNwQ0QsMkJBQW9CLENBQUNDLE9BQUQsQ0FBcEI7QUFDSCxLQWxERTtBQW9ESGMsU0FBSyxFQUFFLGVBQVNYLE1BQVQsRUFBaUJ0QixPQUFqQixFQUEwQjtBQUM3QixVQUFJdkIsRUFBRSxHQUFHVSxDQUFDLENBQUNtQyxNQUFELENBQVY7QUFFQXRCLGFBQU8sR0FBR2IsQ0FBQyxDQUFDK0MsTUFBRixDQUFTLElBQVQsRUFBZTtBQUNyQkMsZUFBTyxFQUFFLElBRFk7QUFFckJDLG9CQUFZLEVBQUUsU0FGTztBQUdyQkMsWUFBSSxFQUFFLEVBSGU7QUFJckJDLFlBQUksRUFBRSxFQUplO0FBS3JCQyxhQUFLLEVBQUUsT0FMYztBQU1yQkMsZUFBTyxFQUFFLElBTlk7QUFPckJDLGVBQU8sRUFBRSxJQVBZO0FBUXJCQyxlQUFPLEVBQUUsRUFSWTtBQVNyQkMsY0FBTSxFQUFFLElBVGE7QUFVckIvRCxhQUFLLEVBQUU7QUFWYyxPQUFmLEVBV1BvQixPQVhPLENBQVY7QUFhQSxVQUFJRixJQUFKO0FBQ0EsVUFBSThDLE9BQU8sR0FBRzVDLE9BQU8sQ0FBQ3FDLElBQVIsR0FBZSxjQUFjckMsT0FBTyxDQUFDcUMsSUFBckMsR0FBNEMsRUFBMUQ7QUFDQSxVQUFJRSxLQUFLLEdBQUd2QyxPQUFPLENBQUN1QyxLQUFSLEdBQWdCLGNBQWN2QyxPQUFPLENBQUN1QyxLQUF0QyxHQUE4QyxFQUExRDtBQUNBLFVBQUlELElBQUksR0FBR3RDLE9BQU8sQ0FBQ3NDLElBQVIsR0FBZSxjQUFjdEMsT0FBTyxDQUFDc0MsSUFBckMsR0FBNEMsRUFBdkQ7QUFDQSxVQUFJTyxPQUFPLEdBQUcseUJBQXlCRCxPQUF6QixHQUFtQyxHQUFuQyxHQUF5Q0wsS0FBekMsR0FBaUQsR0FBakQsR0FBdURELElBQXZELEdBQThELFNBQTVFOztBQUVBLFVBQUl0QyxPQUFPLENBQUMwQyxPQUFSLElBQW1CMUMsT0FBTyxDQUFDMEMsT0FBUixDQUFnQlosTUFBaEIsR0FBeUIsQ0FBaEQsRUFBbUQ7QUFDL0MsWUFBSWdCLE9BQU8sR0FBRyxjQUFjOUMsT0FBTyxDQUFDMkMsTUFBUixLQUFtQixLQUFuQixHQUEyQixTQUEzQixHQUF1QyxFQUFyRCxDQUFkO0FBRUE3QyxZQUFJLEdBQUcsaUJBQWlCZ0QsT0FBakIsR0FBMkIsVUFBM0IsR0FBd0M5QyxPQUFPLENBQUMwQyxPQUFoRCxHQUEwRCxlQUExRCxHQUE0RUcsT0FBNUUsR0FBc0YsZUFBN0Y7QUFFQSxZQUFJcEUsRUFBRSxHQUFHc0UsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQVQ7QUFDQTNDLGNBQU0sQ0FBQzRDLEdBQVAsQ0FBVyxNQUFYLEVBQW1CQyxPQUFuQixDQUEyQnpFLEVBQTNCO0FBQ0E0QixjQUFNLENBQUNSLFFBQVAsQ0FBZ0JwQixFQUFoQixFQUFvQnFFLE9BQXBCO0FBQ0FyRSxVQUFFLENBQUMwRSxTQUFILEdBQWUsV0FBV25ELE9BQU8sQ0FBQzBDLE9BQW5CLEdBQTZCLGVBQTdCLEdBQStDRyxPQUEvQyxHQUF5RCxTQUF4RTtBQUNBN0MsZUFBTyxDQUFDcEIsS0FBUixHQUFnQnlCLE1BQU0sQ0FBQytDLFdBQVAsQ0FBbUIzRSxFQUFuQixJQUF5QixFQUF6QztBQUNBNEIsY0FBTSxDQUFDZ0QsTUFBUCxDQUFjNUUsRUFBZDs7QUFFQSxZQUFJNkMsTUFBTSxJQUFJLE1BQWQsRUFBc0I7QUFDbEJ4QixjQUFJLEdBQUcsaUJBQWlCZ0QsT0FBakIsR0FBMkIsd0JBQTNCLEdBQXVEOUMsT0FBTyxDQUFDcEIsS0FBUixHQUFnQixDQUF2RSxHQUE0RSxhQUE1RSxHQUE0Rm9CLE9BQU8sQ0FBQzBDLE9BQXBHLEdBQThHLGVBQTlHLEdBQWdJRyxPQUFoSSxHQUEwSSxlQUFqSjtBQUNIO0FBQ0osT0FmRCxNQWVPO0FBQ0gvQyxZQUFJLEdBQUcrQyxPQUFQO0FBQ0g7O0FBRUQsVUFBSVMsTUFBTSxHQUFHO0FBQ1RaLGVBQU8sRUFBRTVDLElBREE7QUFFVDJDLGVBQU8sRUFBRXpDLE9BQU8sQ0FBQ3lDLE9BRlI7QUFHVEQsZUFBTyxFQUFFeEMsT0FBTyxDQUFDd0MsT0FIUjtBQUlUZCxXQUFHLEVBQUU7QUFDRDZCLGFBQUcsRUFBRSxLQURKO0FBRURDLGNBQUksRUFBRSxLQUZMO0FBR0RDLGdCQUFNLEVBQUUsR0FIUDtBQUlEQyxpQkFBTyxFQUFFLEdBSlI7QUFLREMseUJBQWUsRUFBRSxNQUxoQjtBQU1EL0UsZUFBSyxFQUFFb0IsT0FBTyxDQUFDcEI7QUFOZCxTQUpJO0FBWVRnRixrQkFBVSxFQUFFO0FBQ1JELHlCQUFlLEVBQUUzRCxPQUFPLENBQUNvQyxZQURqQjtBQUVSRCxpQkFBTyxFQUFFbkMsT0FBTyxDQUFDbUMsT0FGVDtBQUdSMEIsZ0JBQU0sRUFBRSxNQUhBO0FBSVJDLGdCQUFNLEVBQUU7QUFKQSxTQVpIO0FBa0JUQyxpQkFBUyxFQUFFLHFCQUFXO0FBQ2xCLGNBQUl0RixFQUFFLElBQUlBLEVBQUUsQ0FBQyxDQUFELENBQVosRUFBaUI7QUFDYjRCLGtCQUFNLENBQUNxQixHQUFQLENBQVdqRCxFQUFFLENBQUMsQ0FBRCxDQUFiLEVBQWtCLFVBQWxCLEVBQThCLEVBQTlCO0FBQ0E0QixrQkFBTSxDQUFDcUIsR0FBUCxDQUFXakQsRUFBRSxDQUFDLENBQUQsQ0FBYixFQUFrQixNQUFsQixFQUEwQixFQUExQjtBQUNIO0FBQ0o7QUF2QlEsT0FBYjs7QUEwQkEsVUFBSTZDLE1BQU0sSUFBSSxNQUFkLEVBQXNCO0FBQ2xCZ0MsY0FBTSxDQUFDNUIsR0FBUCxDQUFXNkIsR0FBWCxHQUFpQixLQUFqQjtBQUNBcEUsU0FBQyxDQUFDNkUsT0FBRixDQUFVVixNQUFWO0FBQ0gsT0FIRCxNQUdPO0FBQ0gsWUFBSTdFLEVBQUUsR0FBR1UsQ0FBQyxDQUFDbUMsTUFBRCxDQUFWO0FBQ0E3QyxVQUFFLENBQUN3RCxLQUFILENBQVNxQixNQUFUO0FBQ0g7QUFDSixLQTlIRTtBQWdJSFcsV0FBTyxFQUFFLGlCQUFTM0MsTUFBVCxFQUFpQjtBQUN0QixVQUFJQSxNQUFNLElBQUlBLE1BQU0sSUFBSSxNQUF4QixFQUFnQztBQUM1Qm5DLFNBQUMsQ0FBQ21DLE1BQUQsQ0FBRCxDQUFVMkMsT0FBVjtBQUNILE9BRkQsTUFFTztBQUNIOUUsU0FBQyxDQUFDK0UsU0FBRjtBQUNIO0FBQ0osS0F0SUU7QUF3SUhDLGFBQVMsRUFBRSxtQkFBU25FLE9BQVQsRUFBa0I7QUFDekIsYUFBTzFCLEtBQUssQ0FBQzJELEtBQU4sQ0FBWSxNQUFaLEVBQW9CakMsT0FBcEIsQ0FBUDtBQUNILEtBMUlFO0FBNElIb0UsZUFBVyxFQUFFLHVCQUFXO0FBQ3BCLGFBQU85RixLQUFLLENBQUMyRixPQUFOLENBQWMsTUFBZCxDQUFQO0FBQ0gsS0E5SUU7QUFnSkhJLFlBQVEsRUFBRSxrQkFBUy9DLE1BQVQsRUFBaUJ0QixPQUFqQixFQUEwQjtBQUNoQyxVQUFJdEIsSUFBSSxHQUFJc0IsT0FBTyxJQUFJQSxPQUFPLENBQUN0QixJQUFwQixHQUE0QnNCLE9BQU8sQ0FBQ3RCLElBQXBDLEdBQTJDLE9BQXREO0FBQ0EsVUFBSTRGLFNBQVMsR0FBSXRFLE9BQU8sSUFBSUEsT0FBTyxDQUFDc0UsU0FBcEIsR0FBaUN0RSxPQUFPLENBQUNzRSxTQUF6QyxHQUFxRCxPQUFyRTtBQUNBLFVBQUloQyxJQUFJLEdBQUl0QyxPQUFPLElBQUlBLE9BQU8sQ0FBQ3NDLElBQXBCLEdBQTRCLGVBQWV0QyxPQUFPLENBQUNzQyxJQUFuRCxHQUEwRCxFQUFyRTtBQUNBLFVBQUlRLE9BQU8sR0FBRyxhQUFhLFdBQWIsR0FBMkJwRSxJQUEzQixHQUFrQyxZQUFsQyxHQUFpRDRGLFNBQWpELEdBQTZEaEMsSUFBM0U7QUFFQWhFLFdBQUssQ0FBQ2lHLFVBQU4sQ0FBaUJqRCxNQUFqQjtBQUNBakIsWUFBTSxDQUFDbUUsSUFBUCxDQUFZbEQsTUFBWixFQUFvQixVQUFwQixFQUFnQyxJQUFoQztBQUVBbkMsT0FBQyxDQUFDbUMsTUFBRCxDQUFELENBQVV6QixRQUFWLENBQW1CaUQsT0FBbkI7QUFDQTNELE9BQUMsQ0FBQ21DLE1BQUQsQ0FBRCxDQUFVM0MsSUFBVixDQUFlLGtCQUFmLEVBQW1DbUUsT0FBbkM7QUFDSCxLQTNKRTtBQTZKSHlCLGNBQVUsRUFBRSxvQkFBU2pELE1BQVQsRUFBaUI7QUFDekJuQyxPQUFDLENBQUNtQyxNQUFELENBQUQsQ0FBVW1ELFdBQVYsQ0FBc0J0RixDQUFDLENBQUNtQyxNQUFELENBQUQsQ0FBVTNDLElBQVYsQ0FBZSxrQkFBZixDQUF0QjtBQUNBMEIsWUFBTSxDQUFDcUUsVUFBUCxDQUFrQnBELE1BQWxCLEVBQTBCLFVBQTFCO0FBQ0gsS0FoS0U7QUFrS0hxRCxpQkFBYSxFQUFFLHVCQUFTQyxJQUFULEVBQWU7QUFDMUIsYUFBT3JHLE1BQU0sQ0FBQyxPQUFELENBQU4sQ0FBZ0JxRyxJQUFoQixDQUFQO0FBQ0gsS0FwS0U7QUFzS0hDLGdCQUFZLEVBQUUsc0JBQVN4QyxJQUFULEVBQWV5QyxLQUFmLEVBQXNCO0FBQ2hDLGFBQU92RyxNQUFNLENBQUMsTUFBRCxDQUFOLENBQWU4RCxJQUFmLEVBQXFCeUMsS0FBSyxHQUFHLENBQTdCLENBQVA7QUFDSDtBQXhLRSxHQUFQO0FBMEtILENBcFVXLEVBQVosQyxDQXNVQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPQyxNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQjFHLEtBQWpCO0FBQ0g7O0FBRUQsSUFBTTJHLFlBQVksR0FBRztBQUNuQixZQUFVO0FBQ1IsYUFBUztBQUNQLGVBQVMsU0FERjtBQUVQLGVBQVMsU0FGRjtBQUdQLGVBQVMsU0FIRjtBQUlQLGdCQUFVLFNBSkg7QUFLUCxpQkFBVyxTQUxKO0FBTVAsaUJBQVcsU0FOSjtBQU9QLGNBQVEsU0FQRDtBQVFQLGlCQUFXLFNBUko7QUFTUCxnQkFBVSxTQVRIO0FBVVAsZUFBUztBQVZGLEtBREQ7QUFhUixZQUFRO0FBQ04sZUFBUyxDQUNQLFNBRE8sRUFFUCxTQUZPLEVBR1AsU0FITyxFQUlQLFNBSk8sQ0FESDtBQU9OLGVBQVMsQ0FDUCxTQURPLEVBRVAsU0FGTyxFQUdQLFNBSE8sRUFJUCxTQUpPO0FBUEg7QUFiQTtBQURTLENBQXJCLEMsQ0ErQkE7O0FBQ0E5RixDQUFDLENBQUM0RCxRQUFELENBQUQsQ0FBWW1DLEtBQVosQ0FBa0IsWUFBVztBQUN6QjVHLE9BQUssQ0FBQ3lELElBQU4sQ0FBV2tELFlBQVg7QUFDSCxDQUZELEU7Ozs7Ozs7Ozs7O0FDalhBO0FBQ0EsSUFBSUUsUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBU0MsU0FBVCxFQUFvQnBGLE9BQXBCLEVBQTZCO0FBQ3hDO0FBQ0EsTUFBSXFGLEdBQUcsR0FBRyxJQUFWO0FBQ0EsTUFBSXRELElBQUksR0FBRyxLQUFYLENBSHdDLENBS3hDOztBQUNBLE1BQUl1RCxPQUFPLEdBQUdqRixNQUFNLENBQUM0QyxHQUFQLENBQVdtQyxTQUFYLENBQWQ7QUFDQSxNQUFJRyxJQUFJLEdBQUdsRixNQUFNLENBQUM0QyxHQUFQLENBQVcsTUFBWCxDQUFYOztBQUVBLE1BQUksQ0FBQ3FDLE9BQUwsRUFBYztBQUNWO0FBQ0gsR0FYdUMsQ0FheEM7OztBQUNBLE1BQUlFLGNBQWMsR0FBRyxFQUFyQixDQWR3QyxDQWlCeEM7QUFDQTtBQUNBOztBQUVBLE1BQUlDLE1BQU0sR0FBRztBQUNUOzs7QUFJQUMsYUFBUyxFQUFFLG1CQUFTMUYsT0FBVCxFQUFrQjtBQUN6QixVQUFJSyxNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCSyxHQUFyQixDQUF5QixRQUF6QixDQUFKLEVBQXdDO0FBQ3BDTixXQUFHLEdBQUdoRixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCckMsR0FBckIsQ0FBeUIsUUFBekIsQ0FBTjtBQUNILE9BRkQsTUFFTztBQUNIO0FBQ0F3QyxjQUFNLENBQUMxRCxJQUFQLENBQVkvQixPQUFaLEVBRkcsQ0FJSDs7QUFDQXlGLGNBQU0sQ0FBQ0csS0FBUDtBQUVBdkYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQk8sR0FBckIsQ0FBeUIsUUFBekIsRUFBbUNSLEdBQW5DO0FBQ0g7O0FBRUQsYUFBT0EsR0FBUDtBQUNILEtBbkJROztBQXFCVDs7O0FBR0F0RCxRQUFJLEVBQUUsY0FBUy9CLE9BQVQsRUFBa0I7QUFDcEJxRixTQUFHLENBQUNDLE9BQUosR0FBY0EsT0FBZDtBQUNBRCxTQUFHLENBQUNTLE1BQUosR0FBYSxFQUFiO0FBRUFULFNBQUcsQ0FBQ1UsS0FBSixHQUFZMUYsTUFBTSxDQUFDa0IsSUFBUCxDQUFZK0QsT0FBWixFQUFxQixvQkFBckIsQ0FBWjtBQUNBRCxTQUFHLENBQUNXLE1BQUosR0FBYTNGLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWStELE9BQVosRUFBcUIsaUJBQXJCLENBQWI7QUFDQUQsU0FBRyxDQUFDWSxNQUFKLEdBQWE1RixNQUFNLENBQUNrQixJQUFQLENBQVkrRCxPQUFaLEVBQXFCLGlCQUFyQixDQUFiO0FBQ0FELFNBQUcsQ0FBQ2EsR0FBSixHQUFVN0YsTUFBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDVyxNQUFmLEVBQXVCLGlCQUF2QixDQUFWLENBUG9CLENBU3BCOztBQUNBWCxTQUFHLENBQUNyRixPQUFKLEdBQWNLLE1BQU0sQ0FBQzhGLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0JYLGNBQXRCLEVBQXNDeEYsT0FBdEMsQ0FBZDtBQUNILEtBbkNROztBQXFDVDs7O0FBR0E0RixTQUFLLEVBQUUsaUJBQVc7QUFDZDtBQUNBdkYsWUFBTSxDQUFDK0YsUUFBUCxDQUFnQmYsR0FBRyxDQUFDVSxLQUFwQixFQUEyQixRQUEzQixFQUFxQyxVQUFTMUUsQ0FBVCxFQUFZO0FBQzdDQSxTQUFDLENBQUNnRixjQUFGOztBQUVILFlBQUloQixHQUFHLENBQUNVLEtBQUosSUFBYVYsR0FBRyxDQUFDVSxLQUFKLENBQVVPLEtBQXZCLElBQWdDakIsR0FBRyxDQUFDVSxLQUFKLENBQVVPLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBcEMsRUFBd0Q7QUFDcEQsY0FBSUMsTUFBTSxHQUFHLElBQUlDLFVBQUosRUFBYjs7QUFDQUQsZ0JBQU0sQ0FBQ0UsTUFBUCxHQUFnQixVQUFTcEYsQ0FBVCxFQUFZO0FBQ3hCaEIsa0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ1csTUFBZixFQUF1QixrQkFBdkIsRUFBMkMsU0FBTzNFLENBQUMsQ0FBQ0MsTUFBRixDQUFTb0YsTUFBaEIsR0FBd0IsR0FBbkU7QUFDSCxXQUZEOztBQUdBSCxnQkFBTSxDQUFDSSxhQUFQLENBQXFCdEIsR0FBRyxDQUFDVSxLQUFKLENBQVVPLEtBQVYsQ0FBZ0IsQ0FBaEIsQ0FBckI7QUFFQWpHLGdCQUFNLENBQUNSLFFBQVAsQ0FBZ0J3RixHQUFHLENBQUNDLE9BQXBCLEVBQTZCLGlCQUE3QjtBQUNIO0FBQ0QsT0FaRCxFQUZjLENBZ0JkOztBQUNBakYsWUFBTSxDQUFDK0YsUUFBUCxDQUFnQmYsR0FBRyxDQUFDWSxNQUFwQixFQUE0QixPQUE1QixFQUFxQyxVQUFTNUUsQ0FBVCxFQUFZO0FBQzdDQSxTQUFDLENBQUNnRixjQUFGO0FBRUhoRyxjQUFNLENBQUNvRSxXQUFQLENBQW1CWSxHQUFHLENBQUNDLE9BQXZCLEVBQWdDLGlCQUFoQztBQUNBakYsY0FBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDVyxNQUFmLEVBQXVCLGtCQUF2QixFQUEyQ1gsR0FBRyxDQUFDYSxHQUEvQztBQUNBYixXQUFHLENBQUNVLEtBQUosQ0FBVWEsS0FBVixHQUFrQixFQUFsQjtBQUNBLE9BTkQ7QUFPSCxLQWhFUTs7QUFrRVQ7OztBQUdBQyxnQkFBWSxFQUFFLHNCQUFTakMsSUFBVCxFQUFlO0FBQ3pCO0FBQ0EsV0FBSyxJQUFJa0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXaEUsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlDLEtBQUssR0FBRzFCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxDQUFaOztBQUNBLFlBQUlDLEtBQUssQ0FBQ25DLElBQU4sSUFBY0EsSUFBbEIsRUFBd0I7QUFDcEIsY0FBSW1DLEtBQUssQ0FBQ0MsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ25CLGdCQUFJRCxLQUFLLENBQUNFLEtBQU4sSUFBZSxLQUFuQixFQUEwQjtBQUN0QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLENBQVA7QUFDSDtBQUNKLFdBTEQsTUFLTztBQUNILG1CQUFPMEIsS0FBSyxDQUFDRyxPQUFOLENBQWNDLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUI5QixHQUF6QixDQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osS0FwRlE7QUFzRlRlLFlBQVEsRUFBRSxrQkFBU3hCLElBQVQsRUFBZXNDLE9BQWYsRUFBd0JGLEdBQXhCLEVBQTZCO0FBQ25DM0IsU0FBRyxDQUFDUyxNQUFKLENBQVdzQixJQUFYLENBQWdCO0FBQ1p4QyxZQUFJLEVBQUVBLElBRE07QUFFWnNDLGVBQU8sRUFBRUEsT0FGRztBQUdaRixXQUFHLEVBQUVBLEdBSE87QUFJWkMsYUFBSyxFQUFFO0FBSkssT0FBaEI7QUFPQSxhQUFPNUIsR0FBUDtBQUNIO0FBL0ZRLEdBQWIsQ0FyQndDLENBdUh4QztBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQUEsS0FBRyxDQUFDZ0MsV0FBSixHQUFrQixVQUFTckgsT0FBVCxFQUFrQjtBQUNoQ3dGLGtCQUFjLEdBQUd4RixPQUFqQjtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQXFGLEtBQUcsQ0FBQzVGLEVBQUosR0FBUyxVQUFTbUYsSUFBVCxFQUFlc0MsT0FBZixFQUF3QjtBQUM3QixXQUFPekIsTUFBTSxDQUFDVyxRQUFQLENBQWdCeEIsSUFBaEIsRUFBc0JzQyxPQUF0QixDQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBN0IsS0FBRyxDQUFDMkIsR0FBSixHQUFVLFVBQVNwQyxJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzlCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDSCxHQUZELENBN0l3QyxDQWlKeEM7OztBQUNBekIsUUFBTSxDQUFDQyxTQUFQLENBQWlCNEIsS0FBakIsQ0FBdUJqQyxHQUF2QixFQUE0QixDQUFDckYsT0FBRCxDQUE1QjtBQUVBLFNBQU9xRixHQUFQO0FBQ0gsQ0FySkQsQyxDQXVKQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPTixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQkcsUUFBakI7QUFDSCxDOzs7Ozs7Ozs7Ozs7Q0N6SkQ7O0FBQ0EsSUFBSW9DLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVN2SCxPQUFULEVBQWtCO0FBQzdCO0FBQ0EsTUFBSXFGLEdBQUcsR0FBRyxJQUFWLENBRjZCLENBSTdCOztBQUNBLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxJQUFJLEdBQUdsRixNQUFNLENBQUM0QyxHQUFQLENBQVcsTUFBWCxDQUFYLENBTjZCLENBUTdCOztBQUNBLE1BQUl1QyxjQUFjLEdBQUc7QUFDakIsaUJBQWMsWUFERztBQUVqQixZQUFVLFFBRk87QUFHakIsYUFBVSxHQUhPO0FBSWpCLGFBQVUsU0FKTztBQUtqQixlQUFZO0FBTEssR0FBckIsQ0FUNkIsQ0FpQjdCO0FBQ0E7QUFDQTs7QUFFQSxNQUFJQyxNQUFNLEdBQUc7QUFDVDs7O0FBSUFDLGFBQVMsRUFBRSxtQkFBUzFGLE9BQVQsRUFBa0I7QUFDekJ5RixZQUFNLENBQUMxRCxJQUFQLENBQVkvQixPQUFaO0FBRUEsYUFBT3FGLEdBQVA7QUFDSCxLQVRROztBQVdUOzs7QUFHQXRELFFBQUksRUFBRSxjQUFTL0IsT0FBVCxFQUFrQjtBQUNwQnFGLFNBQUcsQ0FBQ1MsTUFBSixHQUFhLEVBQWIsQ0FEb0IsQ0FHcEI7O0FBQ0FULFNBQUcsQ0FBQ3JGLE9BQUosR0FBY0ssTUFBTSxDQUFDOEYsVUFBUCxDQUFrQixFQUFsQixFQUFzQlgsY0FBdEIsRUFBc0N4RixPQUF0QyxDQUFkO0FBRUFxRixTQUFHLENBQUM5QyxLQUFKLEdBQVksS0FBWjtBQUNILEtBckJROztBQXVCVDs7O0FBR0FpRixRQUFJLEVBQUUsZ0JBQVc7QUFDYi9CLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsTUFBcEI7QUFFQXZCLGFBQU8sR0FBR3ZDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQ0EzQyxZQUFNLENBQUNvSCxPQUFQLENBQWVuQyxPQUFmLEVBQXdCRCxHQUFHLENBQUNyRixPQUFKLENBQVkwQyxPQUFwQztBQUVBckMsWUFBTSxDQUFDUixRQUFQLENBQWdCeUYsT0FBaEIsRUFBeUIsc0JBQXpCO0FBQ0FqRixZQUFNLENBQUNSLFFBQVAsQ0FBZ0J5RixPQUFoQixFQUF5QixhQUFhRCxHQUFHLENBQUNyRixPQUFKLENBQVl1QyxLQUFsRDtBQUNBbEMsWUFBTSxDQUFDUixRQUFQLENBQWdCeUYsT0FBaEIsRUFBeUIsYUFBYUQsR0FBRyxDQUFDckYsT0FBSixDQUFZcUMsSUFBbEQ7O0FBRUEsVUFBSWdELEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWxCLFNBQVosS0FBMEIsWUFBOUIsRUFBNEM7QUFDeEN1QixjQUFNLENBQUNSLFFBQVAsQ0FBZ0J5RixPQUFoQixFQUF5QixvQkFBekI7QUFDSDs7QUFFREMsVUFBSSxDQUFDbUMsV0FBTCxDQUFpQnBDLE9BQWpCO0FBRUFELFNBQUcsQ0FBQzlDLEtBQUosR0FBWSxPQUFaO0FBRUFrRCxZQUFNLENBQUNvQixZQUFQLENBQW9CLE9BQXBCO0FBRUEsYUFBT3hCLEdBQVA7QUFDSCxLQS9DUTs7QUFpRFQ7OztBQUdBdkUsUUFBSSxFQUFFLGdCQUFXO0FBQ2IsVUFBSXdFLE9BQUosRUFBYTtBQUNURyxjQUFNLENBQUNvQixZQUFQLENBQW9CLE1BQXBCO0FBRUF2QixlQUFPLENBQUNqQyxNQUFSO0FBQ0FnQyxXQUFHLENBQUM5QyxLQUFKLEdBQVksUUFBWjtBQUVBa0QsY0FBTSxDQUFDb0IsWUFBUCxDQUFvQixRQUFwQjtBQUNIOztBQUVELGFBQU94QixHQUFQO0FBQ0gsS0EvRFE7O0FBaUVUOzs7QUFHQXdCLGdCQUFZLEVBQUUsc0JBQVNqQyxJQUFULEVBQWU7QUFDekIsV0FBSyxJQUFJa0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXaEUsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlDLEtBQUssR0FBRzFCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxDQUFaOztBQUVBLFlBQUlDLEtBQUssQ0FBQ25DLElBQU4sSUFBY0EsSUFBbEIsRUFBd0I7QUFDcEIsY0FBSW1DLEtBQUssQ0FBQ0MsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ25CLGdCQUFJRCxLQUFLLENBQUNFLEtBQU4sSUFBZSxLQUFuQixFQUEwQjtBQUN0QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLENBQVA7QUFDSDtBQUNKLFdBTEQsTUFLTztBQUNILG1CQUFPMEIsS0FBSyxDQUFDRyxPQUFOLENBQWNDLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUI5QixHQUF6QixDQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osS0FuRlE7QUFxRlRlLFlBQVEsRUFBRSxrQkFBU3hCLElBQVQsRUFBZXNDLE9BQWYsRUFBd0JGLEdBQXhCLEVBQTZCO0FBQ25DM0IsU0FBRyxDQUFDUyxNQUFKLENBQVdzQixJQUFYLENBQWdCO0FBQ1p4QyxZQUFJLEVBQUVBLElBRE07QUFFWnNDLGVBQU8sRUFBRUEsT0FGRztBQUdaRixXQUFHLEVBQUVBLEdBSE87QUFJWkMsYUFBSyxFQUFFO0FBSkssT0FBaEI7QUFPQSxhQUFPNUIsR0FBUDtBQUNIO0FBOUZRLEdBQWIsQ0FyQjZCLENBc0g3QjtBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQUEsS0FBRyxDQUFDZ0MsV0FBSixHQUFrQixVQUFTckgsT0FBVCxFQUFrQjtBQUNoQ3dGLGtCQUFjLEdBQUd4RixPQUFqQjtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQXFGLEtBQUcsQ0FBQ3NDLEtBQUosR0FBWSxZQUFXO0FBQ25CLFdBQU90QyxHQUFHLENBQUM5QyxLQUFKLElBQWEsT0FBcEI7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0E4QyxLQUFHLENBQUN1QyxNQUFKLEdBQWEsWUFBVztBQUNwQixXQUFPdkMsR0FBRyxDQUFDOUMsS0FBSixJQUFhLFFBQXBCO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBOEMsS0FBRyxDQUFDbUMsSUFBSixHQUFXLFlBQVc7QUFDbEIsV0FBTy9CLE1BQU0sQ0FBQytCLElBQVAsRUFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQW5DLEtBQUcsQ0FBQ3ZFLElBQUosR0FBVyxZQUFXO0FBQ2xCLFdBQU8yRSxNQUFNLENBQUMzRSxJQUFQLEVBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBdUUsS0FBRyxDQUFDNUYsRUFBSixHQUFTLFVBQVNtRixJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzdCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBN0IsS0FBRyxDQUFDMkIsR0FBSixHQUFVLFVBQVNwQyxJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzlCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDSCxHQUZELENBMUs2QixDQThLN0I7OztBQUNBekIsUUFBTSxDQUFDQyxTQUFQLENBQWlCNEIsS0FBakIsQ0FBdUJqQyxHQUF2QixFQUE0QixDQUFDckYsT0FBRCxDQUE1QjtBQUVBLFNBQU9xRixHQUFQO0FBQ0gsQ0FsTEQsQyxDQW9MQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPTixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQnVDLFFBQWpCO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0FDMUxZOztBQUNiLElBQUlNLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVN6QyxTQUFULEVBQW9CcEYsT0FBcEIsRUFBNkI7QUFDeEM7QUFDQSxNQUFJcUYsR0FBRyxHQUFHLElBQVY7QUFDQSxNQUFJdEQsSUFBSSxHQUFHLEtBQVgsQ0FId0MsQ0FLeEM7O0FBQ0EsTUFBSXVELE9BQU8sR0FBR2pGLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV21DLFNBQVgsQ0FBZDtBQUNBLE1BQUlHLElBQUksR0FBR2xGLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxNQUFYLENBQVg7O0FBRUEsTUFBSXFDLE9BQU8sS0FBS3dDLFNBQWhCLEVBQTJCO0FBQ3ZCO0FBQ0gsR0FYdUMsQ0FheEM7OztBQUNBLE1BQUl0QyxjQUFjLEdBQUc7QUFDakJ1QyxXQUFPLEVBQUUsS0FEUTtBQUVqQkMsVUFBTSxFQUFFO0FBQ0pDLFlBQU0sRUFBRSxHQURKO0FBRUpDLGFBQU8sRUFBRTtBQUZMLEtBRlM7QUFNakJDLFlBQVEsRUFBRTtBQUNORixZQUFNLEVBQUUsS0FERjtBQUVOQyxhQUFPLEVBQUU7QUFGSDtBQU5PLEdBQXJCLENBZHdDLENBMEJ4QztBQUNBO0FBQ0E7O0FBRUEsTUFBSXpDLE1BQU0sR0FBRztBQUNUOzs7O0FBSUFDLGFBQVMsRUFBRSxtQkFBUzFGLE9BQVQsRUFBa0I7QUFDekIsVUFBSUssTUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQkssR0FBckIsQ0FBeUIsUUFBekIsQ0FBSixFQUF3QztBQUNwQ04sV0FBRyxHQUFHaEYsTUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQnJDLEdBQXJCLENBQXlCLFFBQXpCLENBQU47QUFDSCxPQUZELE1BRU87QUFDSDtBQUNBd0MsY0FBTSxDQUFDMUQsSUFBUCxDQUFZL0IsT0FBWixFQUZHLENBSUg7O0FBQ0F5RixjQUFNLENBQUNHLEtBQVA7QUFFQXZGLGNBQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJPLEdBQXJCLENBQXlCLFFBQXpCLEVBQW1DUixHQUFuQztBQUNIOztBQUVELGFBQU9BLEdBQVA7QUFDSCxLQW5CUTs7QUFxQlQ7Ozs7QUFJQXRELFFBQUksRUFBRSxjQUFTL0IsT0FBVCxFQUFrQjtBQUNwQnFGLFNBQUcsQ0FBQ1MsTUFBSixHQUFhLEVBQWIsQ0FEb0IsQ0FHcEI7O0FBQ0FULFNBQUcsQ0FBQ3JGLE9BQUosR0FBY0ssTUFBTSxDQUFDOEYsVUFBUCxDQUFrQixFQUFsQixFQUFzQlgsY0FBdEIsRUFBc0N4RixPQUF0QyxDQUFkO0FBQ0gsS0E5QlE7O0FBZ0NUOzs7O0FBSUE0RixTQUFLLEVBQUUsaUJBQVc7QUFDZCxVQUFJd0MsYUFBYSxHQUFHLENBQXBCO0FBQ0EsVUFBSUMsaUJBQWlCLEdBQUcsSUFBeEI7QUFDQSxVQUFJQyxjQUFjLEdBQUdqSSxNQUFNLENBQUNrSSxXQUFQLEdBQXFCN0gsTUFBMUM7QUFDQSxVQUFJOEgsY0FBYyxHQUFHbkksTUFBTSxDQUFDb0ksaUJBQVAsRUFBckI7O0FBRUEsVUFBSXBELEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWW1JLFFBQVosQ0FBcUJGLE1BQXJCLEtBQWdDLEtBQWhDLElBQXlDNUMsR0FBRyxDQUFDckYsT0FBSixDQUFZbUksUUFBWixDQUFxQkQsT0FBckIsS0FBaUMsS0FBOUUsRUFBcUY7QUFDakY7QUFDSDs7QUFFRFEsWUFBTSxDQUFDQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQyxZQUFXO0FBQ3pDLFlBQUlYLE1BQU0sR0FBRyxDQUFiO0FBQUEsWUFBZ0J2SSxFQUFoQjtBQUFBLFlBQW9CbUosR0FBcEI7QUFBQSxZQUF5QkMsRUFBekI7O0FBRUEsWUFBSXhJLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsU0FBM0IsQ0FBSixFQUEyQztBQUN2Q3FILGdCQUFNLEdBQUczQyxHQUFHLENBQUNyRixPQUFKLENBQVlnSSxNQUFaLENBQW1CRSxPQUE1QjtBQUNBekksWUFBRSxHQUFHNEYsR0FBRyxDQUFDckYsT0FBSixDQUFZbUksUUFBWixDQUFxQkQsT0FBckIsQ0FBNkJ6SSxFQUFsQztBQUNBbUosYUFBRyxHQUFHdkQsR0FBRyxDQUFDckYsT0FBSixDQUFZbUksUUFBWixDQUFxQkQsT0FBckIsQ0FBNkJVLEdBQW5DO0FBQ0gsU0FKRCxNQUlPLElBQUl2SSxNQUFNLENBQUNNLG1CQUFQLENBQTJCLG1CQUEzQixDQUFKLEVBQXFEO0FBQ3hEcUgsZ0JBQU0sR0FBRzNDLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdJLE1BQVosQ0FBbUJDLE1BQTVCO0FBQ0F4SSxZQUFFLEdBQUc0RixHQUFHLENBQUNyRixPQUFKLENBQVltSSxRQUFaLENBQXFCRixNQUFyQixDQUE0QnhJLEVBQWpDO0FBQ0FtSixhQUFHLEdBQUd2RCxHQUFHLENBQUNyRixPQUFKLENBQVltSSxRQUFaLENBQXFCRixNQUFyQixDQUE0QlcsR0FBbEM7QUFDSDs7QUFFREMsVUFBRSxHQUFHeEksTUFBTSxDQUFDeUksWUFBUCxFQUFMOztBQUVBLFlBQ0t6SSxNQUFNLENBQUNNLG1CQUFQLENBQTJCLG1CQUEzQixLQUFtRDBFLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWStILE9BQS9ELElBQTBFMUMsR0FBRyxDQUFDckYsT0FBSixDQUFZK0gsT0FBWixDQUFvQkUsTUFBL0YsSUFDQzVILE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsU0FBM0IsS0FBeUMwRSxHQUFHLENBQUNyRixPQUFKLENBQVkrSCxPQUFyRCxJQUFnRTFDLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWStILE9BQVosQ0FBb0JHLE9BRnpGLEVBR0U7QUFDRSxjQUFJVyxFQUFFLEdBQUdiLE1BQVQsRUFBaUI7QUFBRTtBQUNmM0gsa0JBQU0sQ0FBQ1IsUUFBUCxDQUFnQjBGLElBQWhCLEVBQXNCOUYsRUFBdEI7QUFDQVksa0JBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJjLElBQW5CLEVBQXlCcUQsR0FBekI7O0FBRUEsZ0JBQUlQLGlCQUFKLEVBQXVCO0FBQ25CNUMsb0JBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsWUFBcEIsRUFBa0N4QixHQUFsQztBQUNBZ0QsK0JBQWlCLEdBQUcsS0FBcEI7QUFDSDtBQUNKLFdBUkQsTUFRTztBQUFFO0FBQ0xoSSxrQkFBTSxDQUFDUixRQUFQLENBQWdCMEYsSUFBaEIsRUFBc0JxRCxHQUF0QjtBQUNBdkksa0JBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJjLElBQW5CLEVBQXlCOUYsRUFBekI7O0FBRUEsZ0JBQUk0SSxpQkFBaUIsSUFBSSxLQUF6QixFQUFnQztBQUM1QjVDLG9CQUFNLENBQUNvQixZQUFQLENBQW9CLGFBQXBCLEVBQW1DeEIsR0FBbkM7QUFDQWdELCtCQUFpQixHQUFHLElBQXBCO0FBQ0g7QUFDSjtBQUNKLFNBckJELE1BcUJPO0FBQ0gsY0FBSVEsRUFBRSxHQUFHYixNQUFMLElBQWVJLGFBQWEsR0FBR1MsRUFBbkMsRUFBdUM7QUFBRTtBQUNyQ3hJLGtCQUFNLENBQUNSLFFBQVAsQ0FBZ0IwRixJQUFoQixFQUFzQjlGLEVBQXRCO0FBQ0FZLGtCQUFNLENBQUNvRSxXQUFQLENBQW1CYyxJQUFuQixFQUF5QnFELEdBQXpCOztBQUVBLGdCQUFJUCxpQkFBSixFQUF1QjtBQUNuQjVDLG9CQUFNLENBQUNvQixZQUFQLENBQW9CLFlBQXBCLEVBQWtDeEIsR0FBbEM7QUFDQWdELCtCQUFpQixHQUFHLEtBQXBCO0FBQ0g7QUFDSixXQVJELE1BUU87QUFBRTtBQUNMaEksa0JBQU0sQ0FBQ1IsUUFBUCxDQUFnQjBGLElBQWhCLEVBQXNCcUQsR0FBdEI7QUFDQXZJLGtCQUFNLENBQUNvRSxXQUFQLENBQW1CYyxJQUFuQixFQUF5QjlGLEVBQXpCOztBQUVBLGdCQUFJNEksaUJBQWlCLElBQUksS0FBekIsRUFBZ0M7QUFDNUI1QyxvQkFBTSxDQUFDb0IsWUFBUCxDQUFvQixhQUFwQixFQUFtQ3hCLEdBQW5DO0FBQ0FnRCwrQkFBaUIsR0FBRyxJQUFwQjtBQUNIO0FBQ0o7O0FBRURELHVCQUFhLEdBQUdTLEVBQWhCO0FBQ0g7QUFDSixPQXpERDtBQTBESCxLQXhHUTs7QUEwR1Q7OztBQUdBaEMsZ0JBQVksRUFBRSxzQkFBU2pDLElBQVQsRUFBZW1FLElBQWYsRUFBcUI7QUFDL0IsV0FBSyxJQUFJakMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXaEUsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlDLEtBQUssR0FBRzFCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxDQUFaOztBQUNBLFlBQUlDLEtBQUssQ0FBQ25DLElBQU4sSUFBY0EsSUFBbEIsRUFBd0I7QUFDcEIsY0FBSW1DLEtBQUssQ0FBQ0MsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ25CLGdCQUFJRCxLQUFLLENBQUNFLEtBQU4sSUFBZSxLQUFuQixFQUEwQjtBQUN0QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLEVBQThCMEQsSUFBOUIsQ0FBUDtBQUNIO0FBQ0osV0FMRCxNQUtPO0FBQ0gsbUJBQU9oQyxLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLEVBQThCMEQsSUFBOUIsQ0FBUDtBQUNIO0FBQ0o7QUFDSjtBQUNKLEtBM0hRO0FBNkhUM0MsWUFBUSxFQUFFLGtCQUFTeEIsSUFBVCxFQUFlc0MsT0FBZixFQUF3QkYsR0FBeEIsRUFBNkI7QUFDbkMzQixTQUFHLENBQUNTLE1BQUosQ0FBV3NCLElBQVgsQ0FBZ0I7QUFDWnhDLFlBQUksRUFBRUEsSUFETTtBQUVac0MsZUFBTyxFQUFFQSxPQUZHO0FBR1pGLFdBQUcsRUFBRUEsR0FITztBQUlaQyxhQUFLLEVBQUU7QUFKSyxPQUFoQjtBQU1IO0FBcElRLEdBQWIsQ0E5QndDLENBcUt4QztBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTVCLEtBQUcsQ0FBQ2dDLFdBQUosR0FBa0IsVUFBU3JILE9BQVQsRUFBa0I7QUFDaEN3RixrQkFBYyxHQUFHeEYsT0FBakI7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0FxRixLQUFHLENBQUM1RixFQUFKLEdBQVMsVUFBU21GLElBQVQsRUFBZXNDLE9BQWYsRUFBd0I7QUFDN0IsV0FBT3pCLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQnhCLElBQWhCLEVBQXNCc0MsT0FBdEIsQ0FBUDtBQUNILEdBRkQsQ0FwTHdDLENBd0x4QztBQUNBO0FBQ0E7QUFFQTs7O0FBQ0F6QixRQUFNLENBQUNDLFNBQVAsQ0FBaUI0QixLQUFqQixDQUF1QmpDLEdBQXZCLEVBQTRCLENBQUNyRixPQUFELENBQTVCLEVBN0x3QyxDQStMeEM7O0FBQ0ErQixNQUFJLEdBQUcsSUFBUCxDQWhNd0MsQ0FrTXhDOztBQUNBLFNBQU9zRCxHQUFQO0FBQ0gsQ0FwTUQsQyxDQXNNQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPTixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQjZDLFFBQWpCO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0FDMU1ZOztBQUNiLElBQU1tQixNQUFNLEdBQUcsU0FBVEEsTUFBUyxDQUFTNUQsU0FBVCxFQUFvQnBGLE9BQXBCLEVBQTZCO0FBQ3hDO0FBQ0EsTUFBSXFGLEdBQUcsR0FBRyxJQUFWO0FBQ0EsTUFBSXRELElBQUksR0FBRyxLQUFYLENBSHdDLENBS3hDOztBQUNBLE1BQUl1RCxPQUFPLEdBQUdqRixNQUFNLENBQUM0QyxHQUFQLENBQVdtQyxTQUFYLENBQWQ7QUFDQSxNQUFNRyxJQUFJLEdBQUdsRixNQUFNLENBQUM0QyxHQUFQLENBQVcsTUFBWCxDQUFiOztBQUVBLE1BQUksQ0FBQ3FDLE9BQUwsRUFBYztBQUNWO0FBQ0gsR0FYdUMsQ0FheEM7OztBQUNBLE1BQUlFLGNBQWMsR0FBRztBQUNqQjtBQUNBeUQsVUFBTSxFQUFFO0FBQ0p4SSxzQkFBZ0IsRUFBRTtBQURkLEtBRlM7QUFNakI7QUFDQXlJLGFBQVMsRUFBRTtBQUNQQyxnQkFBVSxFQUFFLEdBREw7QUFDVTtBQUNqQkMsZ0JBQVUsRUFBRSxLQUZMO0FBRVk7QUFDbkJDLHFCQUFlLEVBQUUsSUFIVjtBQUlQQyxlQUFTLEVBQUUsSUFKSixDQUlTOztBQUpULEtBUE07QUFjakI7QUFDQUMsWUFBUSxFQUFFO0FBQ05DLGFBQU8sRUFBRSxHQURILENBQ087O0FBRFA7QUFmTyxHQUFyQixDQWR3QyxDQWtDeEM7QUFDQTtBQUNBOztBQUVBLE1BQU0vRCxNQUFNLEdBQUc7QUFDWDs7OztBQUlBQyxhQUFTLEVBQUUsbUJBQVMxRixPQUFULEVBQWtCO0FBQ3pCLFVBQUlLLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJLLEdBQXJCLENBQXlCLE1BQXpCLENBQUosRUFBc0M7QUFDbENOLFdBQUcsR0FBR2hGLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJyQyxHQUFyQixDQUF5QixNQUF6QixDQUFOO0FBQ0gsT0FGRCxNQUVPO0FBQ0g7QUFDQXdDLGNBQU0sQ0FBQzFELElBQVAsQ0FBWS9CLE9BQVosRUFGRyxDQUlIOztBQUNBeUYsY0FBTSxDQUFDZ0UsS0FBUCxHQUxHLENBT0g7O0FBQ0FoRSxjQUFNLENBQUNHLEtBQVA7QUFFQXZGLGNBQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJPLEdBQXJCLENBQXlCLE1BQXpCLEVBQWlDUixHQUFqQztBQUNIOztBQUVELGFBQU9BLEdBQVA7QUFDSCxLQXRCVTs7QUF3Qlg7Ozs7QUFJQXRELFFBQUksRUFBRSxjQUFTL0IsT0FBVCxFQUFrQjtBQUNwQnFGLFNBQUcsQ0FBQ1MsTUFBSixHQUFhLEVBQWI7QUFFQVQsU0FBRyxDQUFDcUUsYUFBSixHQUFvQixFQUFwQixDQUhvQixDQUtwQjs7QUFDQXJFLFNBQUcsQ0FBQ3JGLE9BQUosR0FBY0ssTUFBTSxDQUFDOEYsVUFBUCxDQUFrQixFQUFsQixFQUFzQlgsY0FBdEIsRUFBc0N4RixPQUF0QyxDQUFkLENBTm9CLENBUXBCOztBQUNBcUYsU0FBRyxDQUFDc0Usc0JBQUosR0FBNkIsQ0FBN0I7QUFFQXRFLFNBQUcsQ0FBQ3VFLEdBQUosR0FBVXZKLE1BQU0sQ0FBQ3dKLFdBQVAsRUFBVjtBQUNILEtBeENVO0FBMENYQyxVQUFNLEVBQUUsZ0JBQVM5SixPQUFULEVBQWtCO0FBQ3RCO0FBQ0FxRixTQUFHLENBQUNyRixPQUFKLEdBQWNLLE1BQU0sQ0FBQzhGLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0JYLGNBQXRCLEVBQXNDeEYsT0FBdEMsQ0FBZCxDQUZzQixDQUl0Qjs7QUFDQXFGLFNBQUcsQ0FBQ3NFLHNCQUFKLEdBQTZCLENBQTdCLENBTHNCLENBT3JCOztBQUNEbEUsWUFBTSxDQUFDZ0UsS0FBUDtBQUVBcEUsU0FBRyxDQUFDcUUsYUFBSixHQUFvQixFQUFwQixDQVZzQixDQVl0Qjs7QUFDQWpFLFlBQU0sQ0FBQ0csS0FBUDtBQUVBdkYsWUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQk8sR0FBckIsQ0FBeUIsTUFBekIsRUFBaUNSLEdBQWpDO0FBQ0gsS0ExRFU7QUE0RFgwRSxVQUFNLEVBQUUsa0JBQVc7QUFDZDtBQUNEdEUsWUFBTSxDQUFDZ0UsS0FBUCxHQUZlLENBSWY7O0FBQ0FoRSxZQUFNLENBQUNHLEtBQVAsR0FMZSxDQU9mOztBQUNBSCxZQUFNLENBQUN1RSxpQkFBUDtBQUNILEtBckVVOztBQXVFWDs7OztBQUlBcEUsU0FBSyxFQUFFLGlCQUFXO0FBQ2Q7QUFDQVAsU0FBRyxDQUFDcUUsYUFBSixDQUFrQixTQUFsQixJQUErQnJKLE1BQU0sQ0FBQ1osRUFBUCxDQUFXNkYsT0FBWCxFQUFvQixlQUFwQixFQUFxQyxPQUFyQyxFQUE4Q0csTUFBTSxDQUFDd0Usc0JBQXJELENBQS9CLENBRmMsQ0FJZDs7QUFDQSxVQUFJeEUsTUFBTSxDQUFDeUUsY0FBUCxPQUE0QixVQUE1QixJQUEwQ3pFLE1BQU0sQ0FBQzBFLDRCQUFQLEVBQTlDLEVBQXFGO0FBQ2pGO0FBQ0E5RSxXQUFHLENBQUNxRSxhQUFKLENBQWtCLFNBQWxCLElBQStCckosTUFBTSxDQUFDWixFQUFQLENBQVc2RixPQUFYLEVBQW9CLHNDQUFwQixFQUE0RCxXQUE1RCxFQUF5RUcsTUFBTSxDQUFDMkUsOEJBQWhGLENBQS9CO0FBQ0EvRSxXQUFHLENBQUNxRSxhQUFKLENBQWtCLFNBQWxCLElBQStCckosTUFBTSxDQUFDWixFQUFQLENBQVc2RixPQUFYLEVBQW9CLHNDQUFwQixFQUE0RCxVQUE1RCxFQUF3RUcsTUFBTSxDQUFDNEUsNkJBQS9FLENBQS9CLENBSGlGLENBS2pGOztBQUNBaEYsV0FBRyxDQUFDcUUsYUFBSixDQUFrQixTQUFsQixJQUErQnJKLE1BQU0sQ0FBQ1osRUFBUCxDQUFXNkYsT0FBWCxFQUFvQix3SEFBcEIsRUFBOEksT0FBOUksRUFBdUpHLE1BQU0sQ0FBQzZFLDBCQUE5SixDQUEvQjtBQUNBakYsV0FBRyxDQUFDcUUsYUFBSixDQUFrQixTQUFsQixJQUErQnJKLE1BQU0sQ0FBQ1osRUFBUCxDQUFXNkYsT0FBWCxFQUFvQixvSEFBcEIsRUFBMEksT0FBMUksRUFBbUpHLE1BQU0sQ0FBQzhFLDZCQUExSixDQUEvQjtBQUNILE9BYmEsQ0FlZDs7O0FBQ0FsRixTQUFHLENBQUNxRSxhQUFKLENBQWtCLFNBQWxCLElBQStCckosTUFBTSxDQUFDWixFQUFQLENBQVU2RixPQUFWLEVBQW1CLDRFQUFuQixFQUFpRyxPQUFqRyxFQUEwR0csTUFBTSxDQUFDK0UsZUFBakgsQ0FBL0IsQ0FoQmMsQ0FrQmQ7O0FBQ0EsVUFBSW5GLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWlKLE1BQVosSUFBc0I1RCxHQUFHLENBQUNyRixPQUFKLENBQVlpSixNQUFaLENBQW1CdkksTUFBN0MsRUFBcUQ7QUFDakQrRSxjQUFNLENBQUNuRixVQUFQO0FBQ0g7QUFDSixLQWpHVTs7QUFtR1g7Ozs7QUFJQW1KLFNBQUssRUFBRSxpQkFBVztBQUNkcEosWUFBTSxDQUFDdUksR0FBUCxDQUFZdEQsT0FBWixFQUFxQixPQUFyQixFQUE4QkQsR0FBRyxDQUFDcUUsYUFBSixDQUFrQixTQUFsQixDQUE5QixFQURjLENBR2Q7O0FBQ0FySixZQUFNLENBQUN1SSxHQUFQLENBQVl0RCxPQUFaLEVBQXFCLFdBQXJCLEVBQWtDRCxHQUFHLENBQUNxRSxhQUFKLENBQWtCLFNBQWxCLENBQWxDO0FBQ0FySixZQUFNLENBQUN1SSxHQUFQLENBQVl0RCxPQUFaLEVBQXFCLFVBQXJCLEVBQWlDRCxHQUFHLENBQUNxRSxhQUFKLENBQWtCLFNBQWxCLENBQWpDLEVBTGMsQ0FPZDs7QUFDQXJKLFlBQU0sQ0FBQ3VJLEdBQVAsQ0FBWXRELE9BQVosRUFBcUIsT0FBckIsRUFBOEJELEdBQUcsQ0FBQ3FFLGFBQUosQ0FBa0IsU0FBbEIsQ0FBOUI7QUFDQXJKLFlBQU0sQ0FBQ3VJLEdBQVAsQ0FBWXRELE9BQVosRUFBcUIsT0FBckIsRUFBOEJELEdBQUcsQ0FBQ3FFLGFBQUosQ0FBa0IsU0FBbEIsQ0FBOUIsRUFUYyxDQVdkOztBQUNBckosWUFBTSxDQUFDdUksR0FBUCxDQUFXdEQsT0FBWCxFQUFvQixPQUFwQixFQUE2QkQsR0FBRyxDQUFDcUUsYUFBSixDQUFrQixTQUFsQixDQUE3QjtBQUNILEtBcEhVOztBQXNIWDs7OztBQUlBcEosY0FBVSxFQUFFLHNCQUFXO0FBQ25CLFVBQUsrRSxHQUFHLENBQUNyRixPQUFKLENBQVlpSixNQUFaLElBQXNCNUQsR0FBRyxDQUFDckYsT0FBSixDQUFZaUosTUFBWixDQUFtQnZJLE1BQTlDLEVBQXVEO0FBQ25ETCxjQUFNLENBQUNvSyxhQUFQLENBQXFCbkYsT0FBckI7QUFDQWpGLGNBQU0sQ0FBQ0MsVUFBUCxDQUFrQmdGLE9BQWxCLEVBQTJCO0FBQUMvRSw0QkFBa0IsRUFBRSxJQUFyQjtBQUEyQm1LLHNCQUFZLEVBQUUsS0FBekM7QUFBZ0RDLDhCQUFvQixFQUFFLElBQXRFO0FBQTRFbkssNEJBQWtCLEVBQUUsSUFBaEc7QUFBc0dFLGdCQUFNLEVBQUUyRSxHQUFHLENBQUNyRixPQUFKLENBQVlpSixNQUFaLENBQW1CdkksTUFBakk7QUFBeUlELDBCQUFnQixFQUFFNEUsR0FBRyxDQUFDckYsT0FBSixDQUFZaUosTUFBWixDQUFtQnhJO0FBQTlLLFNBQTNCO0FBQ0gsT0FIRCxNQUdPO0FBQ0hKLGNBQU0sQ0FBQ29LLGFBQVAsQ0FBcUJuRixPQUFyQjtBQUNIO0FBQ0osS0FqSVU7O0FBbUlYOzs7QUFHQXNGLGdCQUFZLEVBQUUsd0JBQVc7QUFDckIsVUFBS3ZGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWlKLE1BQVosSUFBc0I1RCxHQUFHLENBQUNyRixPQUFKLENBQVlpSixNQUFaLENBQW1CdkksTUFBOUMsRUFBdUQ7QUFDbkRMLGNBQU0sQ0FBQ3VLLFlBQVAsQ0FBb0J0RixPQUFwQjtBQUNIO0FBQ0osS0ExSVU7O0FBNElYOzs7QUFHQXVGLGFBQVMsRUFBRSxxQkFBVztBQUNsQixVQUFLeEYsR0FBRyxDQUFDckYsT0FBSixDQUFZaUosTUFBWixJQUFzQjVELEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWlKLE1BQVosQ0FBbUJ2SSxNQUE5QyxFQUF1RDtBQUNuREwsY0FBTSxDQUFDd0ssU0FBUCxDQUFpQnZGLE9BQWpCO0FBQ0g7QUFDSixLQW5KVTs7QUFxSlg7Ozs7QUFJQTRFLGtCQUFjLEVBQUUsd0JBQVN6TCxFQUFULEVBQWE7QUFDekIsVUFBSzRCLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsU0FBM0IsQ0FBTCxFQUE2QztBQUN6QyxZQUFJbEMsRUFBRSxJQUFJNEIsTUFBTSxDQUFDeUssT0FBUCxDQUFlck0sRUFBZixFQUFtQiw0QkFBbkIsQ0FBTixJQUEwRDRCLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWS9GLEVBQVosRUFBZ0IsNEJBQWhCLE1BQWtELE9BQWhILEVBQXlIO0FBQ3JILGlCQUFPLFVBQVA7QUFDSDs7QUFFRCxZQUFLNEIsTUFBTSxDQUFDMEssS0FBUCxDQUFhMUYsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0wsT0FBekIsRUFBa0Msb0JBQWxDLENBQUwsRUFBK0Q7QUFDM0QsY0FBSzNLLE1BQU0sQ0FBQzRLLFVBQVAsQ0FBa0IxRixJQUFsQixFQUF3QkYsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0wsT0FBWixDQUFvQjlDLE9BQXBCLENBQTRCM0YsS0FBNUIsQ0FBa0NnRCxJQUExRCxDQUFMLEVBQXVFO0FBQ25FLG1CQUFPRixHQUFHLENBQUNyRixPQUFKLENBQVlnTCxPQUFaLENBQW9COUMsT0FBcEIsQ0FBNEIzRixLQUE1QixDQUFrQzJJLElBQXpDO0FBQ0gsV0FGRCxNQUVPO0FBQ0gsbUJBQU83RixHQUFHLENBQUNyRixPQUFKLENBQVlnTCxPQUFaLENBQW9COUMsT0FBcEIsV0FBUDtBQUNIO0FBQ0osU0FORCxNQU1PLElBQUs3SCxNQUFNLENBQUMwSyxLQUFQLENBQWExRixHQUFHLENBQUNyRixPQUFKLENBQVlnTCxPQUF6QixFQUFrQyxTQUFsQyxDQUFMLEVBQW9EO0FBQ3ZELGlCQUFPM0YsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0wsT0FBWixDQUFvQjlDLE9BQTNCO0FBQ0g7QUFDSixPQWRELE1BY08sSUFBSzdILE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsUUFBM0IsS0FBd0NOLE1BQU0sQ0FBQzBLLEtBQVAsQ0FBYTFGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdMLE9BQXpCLEVBQWtDLFFBQWxDLENBQTdDLEVBQTJGO0FBQzlGLGVBQU8zRixHQUFHLENBQUNyRixPQUFKLENBQVlnTCxPQUFaLENBQW9CRyxNQUEzQjtBQUNILE9BRk0sTUFFQSxJQUFLOUssTUFBTSxDQUFDTSxtQkFBUCxDQUEyQixRQUEzQixLQUF3Q04sTUFBTSxDQUFDMEssS0FBUCxDQUFhMUYsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0wsT0FBekIsRUFBa0MsUUFBbEMsQ0FBN0MsRUFBMkY7QUFDOUYsZUFBTzNGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdMLE9BQVosQ0FBb0IvQyxNQUEzQjtBQUNILE9BRk0sTUFFQTtBQUNILGVBQU8sS0FBUDtBQUNIO0FBQ0osS0EvS1U7O0FBaUxYOzs7O0FBSUFrQyxnQ0FBNEIsRUFBRSx3Q0FBVztBQUNyQyxVQUFLOUosTUFBTSxDQUFDTSxtQkFBUCxDQUEyQixTQUEzQixLQUF5Q04sTUFBTSxDQUFDMEssS0FBUCxDQUFhMUYsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0wsT0FBekIsRUFBa0Msb0JBQWxDLENBQTlDLEVBQXdHO0FBQ3BHLGVBQU8sSUFBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sS0FBUDtBQUNIO0FBQ0osS0EzTFU7O0FBOExYOzs7O0FBSUFoQixxQkFBaUIsRUFBRSwyQkFBUzNJLENBQVQsRUFBWTtBQUMzQixVQUFNK0osUUFBUSxHQUFHL0ssTUFBTSxDQUFDZ0wsT0FBUCxDQUFlL0YsT0FBZixFQUF3QixnQkFBeEIsQ0FBakI7O0FBQ0EsVUFBSzhGLFFBQUwsRUFBZ0I7QUFDWixhQUFLLElBQUl0RSxDQUFDLEdBQUcsQ0FBUixFQUFXd0UsR0FBRyxHQUFHRixRQUFRLENBQUN0SixNQUEvQixFQUF1Q2dGLENBQUMsR0FBR3dFLEdBQTNDLEVBQWdEeEUsQ0FBQyxFQUFqRCxFQUFxRDtBQUNqRHpHLGdCQUFNLENBQUNxQixHQUFQLENBQVcwSixRQUFRLENBQUMsQ0FBRCxDQUFuQixFQUF3QixTQUF4QixFQUFtQyxFQUFuQztBQUNBL0ssZ0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzBKLFFBQVEsQ0FBQyxDQUFELENBQW5CLEVBQXdCLFVBQXhCLEVBQW9DLEVBQXBDO0FBQ0g7QUFDSjtBQUNKLEtBMU1VOztBQTRNWDs7OztBQUlBaEIsa0NBQThCLEVBQUUsd0NBQVMvSSxDQUFULEVBQVk7QUFDeEMsVUFBS29FLE1BQU0sQ0FBQ3lFLGNBQVAsQ0FBc0IsSUFBdEIsTUFBZ0MsV0FBckMsRUFBbUQ7QUFDL0M7QUFDSDs7QUFFRCxVQUFLN0UsR0FBRyxDQUFDa0csbUJBQUosT0FBOEIsS0FBbkMsRUFBMkM7QUFDdkM7QUFDSDs7QUFFRCxVQUFNQyxJQUFJLEdBQUcsSUFBYjs7QUFFQSxVQUFLQSxJQUFJLENBQUNDLFlBQUwsQ0FBa0IsWUFBbEIsTUFBb0MsR0FBekMsRUFBK0M7QUFDM0NELFlBQUksQ0FBQ0UsZUFBTCxDQUFxQixZQUFyQjtBQUNBQyxvQkFBWSxDQUFFSCxJQUFJLENBQUNDLFlBQUwsQ0FBa0IsY0FBbEIsQ0FBRixDQUFaO0FBQ0FELFlBQUksQ0FBQ0UsZUFBTCxDQUFxQixjQUFyQjtBQUNIOztBQUVEakcsWUFBTSxDQUFDbUcsbUJBQVAsQ0FBMkJKLElBQTNCO0FBQ0gsS0FsT1U7O0FBb09YOzs7O0FBSUFuQixpQ0FBNkIsRUFBRSx1Q0FBU2hKLENBQVQsRUFBWTtBQUN2QyxVQUFLZ0UsR0FBRyxDQUFDa0csbUJBQUosT0FBOEIsS0FBbkMsRUFBMkM7QUFDdkM7QUFDSDs7QUFFRCxVQUFLOUYsTUFBTSxDQUFDeUUsY0FBUCxDQUFzQixJQUF0QixNQUFnQyxXQUFyQyxFQUFtRDtBQUMvQztBQUNIOztBQUVELFVBQU1zQixJQUFJLEdBQUcsSUFBYjtBQUNBLFVBQU1LLElBQUksR0FBR3hHLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWXVKLFFBQVosQ0FBcUJDLE9BQWxDO0FBRUEsVUFBTUEsT0FBTyxHQUFHc0MsVUFBVSxDQUFDLFlBQVc7QUFDbEMsWUFBS04sSUFBSSxDQUFDQyxZQUFMLENBQWtCLFlBQWxCLE1BQW9DLEdBQXpDLEVBQStDO0FBQzNDaEcsZ0JBQU0sQ0FBQ3NHLG1CQUFQLENBQTJCUCxJQUEzQixFQUFpQyxJQUFqQztBQUNIO0FBQ0osT0FKeUIsRUFJdkJLLElBSnVCLENBQTFCO0FBTUFMLFVBQUksQ0FBQ1EsWUFBTCxDQUFrQixZQUFsQixFQUFnQyxHQUFoQztBQUNBUixVQUFJLENBQUNRLFlBQUwsQ0FBa0IsY0FBbEIsRUFBa0N4QyxPQUFsQztBQUNILEtBNVBVOztBQThQWDs7OztBQUlBYyw4QkFBMEIsRUFBRSxvQ0FBU2pKLENBQVQsRUFBWTtBQUNwQyxVQUFLb0UsTUFBTSxDQUFDeUUsY0FBUCxDQUFzQixJQUF0QixNQUFnQyxXQUFyQyxFQUFtRDtBQUMvQztBQUNIOztBQUVELFVBQU1zQixJQUFJLEdBQUcsS0FBSzNLLE9BQUwsQ0FBYSxhQUFiLENBQWI7O0FBRUEsVUFBSzJLLElBQUksQ0FBQ0MsWUFBTCxDQUFrQiwwQkFBbEIsTUFBa0QsV0FBdkQsRUFBcUU7QUFDakU7QUFDSDs7QUFFRCxVQUFLcEwsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQlQsSUFBaEIsRUFBc0IsbUJBQXRCLE1BQStDLEtBQXBELEVBQTREO0FBQ3hEbkwsY0FBTSxDQUFDUixRQUFQLENBQWdCMkwsSUFBaEIsRUFBc0IsMkJBQXRCO0FBQ0EvRixjQUFNLENBQUNtRyxtQkFBUCxDQUEyQkosSUFBM0I7QUFDSCxPQUhELE1BR087QUFDSG5MLGNBQU0sQ0FBQ29FLFdBQVAsQ0FBbUIrRyxJQUFuQixFQUF5QiwyQkFBekI7QUFDQS9GLGNBQU0sQ0FBQ3NHLG1CQUFQLENBQTJCUCxJQUEzQixFQUFpQyxJQUFqQztBQUNIOztBQUVEbkssT0FBQyxDQUFDZ0YsY0FBRjtBQUNILEtBdFJVOztBQXdSWDs7OztBQUlBa0UsaUNBQTZCLEVBQUUsdUNBQVNsSixDQUFULEVBQVk7QUFDdkMsVUFBSW9FLE1BQU0sQ0FBQ3lFLGNBQVAsQ0FBc0IsSUFBdEIsTUFBZ0MsV0FBcEMsRUFBaUQ7QUFDN0M7QUFDSDs7QUFFRCxVQUFNc0IsSUFBSSxHQUFHLEtBQUszSyxPQUFMLENBQWEsYUFBYixDQUFiOztBQUVBLFVBQUkySyxJQUFJLENBQUNDLFlBQUwsQ0FBa0IsMEJBQWxCLE1BQWtELFdBQXRELEVBQW1FO0FBQy9EO0FBQ0g7O0FBRUQsVUFBSXBMLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0JULElBQWhCLEVBQXNCLG1CQUF0QixNQUErQyxLQUFuRCxFQUEwRDtBQUN0RG5MLGNBQU0sQ0FBQ1IsUUFBUCxDQUFnQjJMLElBQWhCLEVBQXNCLDJCQUF0QjtBQUNBL0YsY0FBTSxDQUFDbUcsbUJBQVAsQ0FBMkJKLElBQTNCO0FBQ0g7O0FBRURuSyxPQUFDLENBQUNnRixjQUFGO0FBQ0gsS0E3U1U7O0FBK1NYOzs7O0FBSUFtRSxtQkFBZSxFQUFFLHlCQUFTbkosQ0FBVCxFQUFZO0FBQ3pCLFVBQU0ySixPQUFPLEdBQUcsS0FBS25LLE9BQUwsQ0FBYSxpQ0FBYixDQUFoQixDQUR5QixDQUN3Qzs7QUFFakUsVUFBSTZGLE1BQU0sR0FBR2pCLE1BQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsV0FBcEIsRUFBaUMsSUFBakMsRUFBdUN4RixDQUF2QyxDQUFiOztBQUNBLFVBQUlxRixNQUFNLEtBQUssS0FBZixFQUFzQjtBQUNsQjtBQUNIOztBQUVELFVBQUtzRSxPQUFPLElBQUl2RixNQUFNLENBQUN5RSxjQUFQLENBQXNCYyxPQUF0QixNQUFtQyxVQUFuRCxFQUFnRTtBQUM1RHZGLGNBQU0sQ0FBQ3lHLG9CQUFQO0FBQ0g7QUFDSixLQTlUVTs7QUFnVVg7Ozs7QUFJQUMsOEJBQTBCLEVBQUUsb0NBQVM5SyxDQUFULEVBQVk1QyxFQUFaLEVBQWdCO0FBQ3hDO0FBQ0EsVUFBSWdILE1BQU0sQ0FBQ3lFLGNBQVAsQ0FBc0J6TCxFQUF0QixNQUE4QixXQUFsQyxFQUErQztBQUMzQztBQUNIOztBQUVELFVBQU1rSixLQUFLLEdBQUdyQyxPQUFPLENBQUM4RyxnQkFBUixDQUF5QiwwRUFBekIsQ0FBZCxDQU53QyxDQVF4Qzs7QUFDQSxVQUFJekUsS0FBSyxDQUFDN0YsTUFBTixHQUFlLENBQWYsSUFBb0J6QixNQUFNLENBQUM0TCxRQUFQLENBQWdCeE4sRUFBaEIsRUFBb0IsY0FBcEIsTUFBd0MsS0FBNUQsSUFBcUVBLEVBQUUsQ0FBQzJOLGdCQUFILENBQW9CLGVBQXBCLEVBQXFDdEssTUFBckMsS0FBZ0QsQ0FBekgsRUFBNEg7QUFDeEg7QUFDQSxhQUFLLElBQUlnRixDQUFDLEdBQUcsQ0FBUixFQUFXd0UsR0FBRyxHQUFHM0QsS0FBSyxDQUFDN0YsTUFBNUIsRUFBb0NnRixDQUFDLEdBQUd3RSxHQUF4QyxFQUE2Q3hFLENBQUMsRUFBOUMsRUFBa0Q7QUFDOUNyQixnQkFBTSxDQUFDc0csbUJBQVAsQ0FBMkJwRSxLQUFLLENBQUMsQ0FBRCxDQUFoQyxFQUFxQyxJQUFyQztBQUNIO0FBQ0o7QUFDSixLQW5WVTs7QUFxVlg7Ozs7QUFJQXNDLDBCQUFzQixFQUFFLGdDQUFTNUksQ0FBVCxFQUFZNUMsRUFBWixFQUFnQjtBQUNwQyxVQUFJNE4sS0FBSjtBQUNBLFVBQUliLElBQUksR0FBRy9NLEVBQUUsR0FBR0EsRUFBSCxHQUFRLElBQXJCOztBQUVBLFVBQUtnSCxNQUFNLENBQUN5RSxjQUFQLENBQXNCekwsRUFBdEIsTUFBOEIsVUFBOUIsS0FBNkM0TixLQUFLLEdBQUdiLElBQUksQ0FBQzNLLE9BQUwsQ0FBYSxhQUFiLENBQXJELENBQUwsRUFBMEY7QUFDdEYsWUFBSXdMLEtBQUssQ0FBQ1osWUFBTixDQUFtQiwwQkFBbkIsTUFBbUQsV0FBdkQsRUFBcUU7QUFDakVwSyxXQUFDLENBQUNnRixjQUFGO0FBQ0E7QUFDSDtBQUNKOztBQUVELFVBQUlpRyxFQUFFLEdBQUdkLElBQUksQ0FBQzNLLE9BQUwsQ0FBYSxhQUFiLENBQVQ7QUFDQSxVQUFJbUssT0FBTyxHQUFHM0ssTUFBTSxDQUFDa00sS0FBUCxDQUFhRCxFQUFiLEVBQWlCLDhCQUFqQixDQUFkOztBQUVBLFVBQUlqTSxNQUFNLENBQUM0TCxRQUFQLENBQWdCVCxJQUFJLENBQUMzSyxPQUFMLENBQWEsYUFBYixDQUFoQixFQUE2Qyx5QkFBN0MsQ0FBSixFQUE2RTtBQUN6RTtBQUNIOztBQUVELFVBQUt5TCxFQUFFLElBQUl0QixPQUFYLEVBQXFCO0FBQ2pCM0osU0FBQyxDQUFDZ0YsY0FBRjtBQUNBLFlBQUltRyxLQUFLLEdBQUduSCxHQUFHLENBQUNyRixPQUFKLENBQVlrSixTQUFaLENBQXNCQyxVQUFsQztBQUNBLFlBQU1zRCxZQUFZLEdBQUcsS0FBckI7O0FBRUEsWUFBS3BNLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0JLLEVBQWhCLEVBQW9CLGtCQUFwQixNQUE0QyxLQUFqRCxFQUF5RDtBQUNyRDtBQUNBLGNBQUtqSCxHQUFHLENBQUNyRixPQUFKLENBQVlrSixTQUFaLENBQXNCSSxTQUF0QixLQUFvQyxLQUF6QyxFQUFpRDtBQUMvQyxnQkFBTW9ELE1BQU0sR0FBR2xCLElBQUksQ0FBQzNLLE9BQUwsQ0FBYSwyQkFBYixDQUFmO0FBQ0EsZ0JBQU04TCxTQUFTLEdBQUd0TSxNQUFNLENBQUN1TSxRQUFQLENBQWdCRixNQUFoQixFQUF3Qix1R0FBeEIsQ0FBbEI7O0FBRUUsZ0JBQUtBLE1BQU0sSUFBSUMsU0FBZixFQUEyQjtBQUFBLHlDQUNkN0YsQ0FEYyxFQUNQd0UsR0FETztBQUVuQixvQkFBSXVCLEdBQUcsR0FBR0YsU0FBUyxDQUFDLENBQUQsQ0FBbkI7QUFDQSxvQkFBSUcsUUFBUSxHQUFHek0sTUFBTSxDQUFDa00sS0FBUCxDQUFhTSxHQUFiLEVBQWtCLGdCQUFsQixDQUFmOztBQUNBLG9CQUFLQyxRQUFMLEVBQWdCO0FBQ1p6TSx3QkFBTSxDQUFDME0sT0FBUCxDQUFlRCxRQUFmLEVBQXlCTixLQUF6QixFQUFnQyxZQUFXO0FBQ3ZDL0csMEJBQU0sQ0FBQ21GLFlBQVA7QUFDQXZLLDBCQUFNLENBQUNvRSxXQUFQLENBQW1Cb0ksR0FBbkIsRUFBd0Isa0JBQXhCO0FBQ0gsbUJBSEQ7QUFJSDtBQVRrQjs7QUFDdkIsbUJBQUssSUFBSS9GLENBQUMsR0FBRyxDQUFSLEVBQVd3RSxHQUFHLEdBQUdxQixTQUFTLENBQUM3SyxNQUFoQyxFQUF3Q2dGLENBQUMsR0FBR3dFLEdBQTVDLEVBQWlEeEUsQ0FBQyxFQUFsRCxFQUFzRDtBQUFBLHNCQUE3Q0EsQ0FBNkMsRUFBdEN3RSxHQUFzQztBQVNyRDtBQUNKO0FBQ0o7O0FBRURqTCxnQkFBTSxDQUFDMk0sU0FBUCxDQUFpQmhDLE9BQWpCLEVBQTBCd0IsS0FBMUIsRUFBaUMsWUFBVztBQUN4Qy9HLGtCQUFNLENBQUN3SCxZQUFQLENBQW9CekIsSUFBcEI7QUFDQS9GLGtCQUFNLENBQUNtRixZQUFQO0FBRUFuRixrQkFBTSxDQUFDb0IsWUFBUCxDQUFvQixlQUFwQixFQUFxQ21FLE9BQXJDLEVBQThDM0osQ0FBOUM7QUFDSCxXQUxEO0FBT0FoQixnQkFBTSxDQUFDUixRQUFQLENBQWdCeU0sRUFBaEIsRUFBb0Isa0JBQXBCO0FBRUgsU0E3QkQsTUE2Qk87QUFDSGpNLGdCQUFNLENBQUMwTSxPQUFQLENBQWUvQixPQUFmLEVBQXdCd0IsS0FBeEIsRUFBK0IsWUFBVztBQUN0Qy9HLGtCQUFNLENBQUN3SCxZQUFQLENBQW9CekIsSUFBcEI7QUFDQS9GLGtCQUFNLENBQUNvQixZQUFQLENBQW9CLGVBQXBCLEVBQXFDbUUsT0FBckMsRUFBOEMzSixDQUE5QztBQUNILFdBSEQ7QUFLQWhCLGdCQUFNLENBQUNvRSxXQUFQLENBQW1CNkgsRUFBbkIsRUFBdUIsa0JBQXZCO0FBQ0g7QUFDSjtBQUNKLEtBdFpVOztBQXdaWDs7OztBQUlBVyxnQkFBWSxFQUFFLHNCQUFTekIsSUFBVCxFQUFlO0FBQ3pCO0FBQ0EsVUFBS25MLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsU0FBM0IsS0FBeUMwRSxHQUFHLENBQUNyRixPQUFKLENBQVlrSixTQUFaLENBQXNCRSxVQUEvRCxJQUE2RTlELE9BQU8sQ0FBQ21HLFlBQVIsQ0FBcUIsb0JBQXJCLE1BQStDLEdBQWpJLEVBQXVJO0FBQ25JcEwsY0FBTSxDQUFDNk0sUUFBUCxDQUFnQjFCLElBQWhCLEVBQXNCbkcsR0FBRyxDQUFDckYsT0FBSixDQUFZa0osU0FBWixDQUFzQkcsZUFBNUM7QUFDSDtBQUNKLEtBamFVOztBQW1hWDs7OztBQUlBMEMsdUJBQW1CLEVBQUUsNkJBQVNQLElBQVQsRUFBZTJCLFNBQWYsRUFBMEI7QUFDM0M7QUFDQSxVQUFLQSxTQUFMLEVBQWlCO0FBQ2I5TSxjQUFNLENBQUNvRSxXQUFQLENBQW1CK0csSUFBbkIsRUFBeUIsbUJBQXpCO0FBQ0FuTCxjQUFNLENBQUNvRSxXQUFQLENBQW1CK0csSUFBbkIsRUFBeUIsd0JBQXpCO0FBQ0gsT0FMMEMsQ0FPM0M7OztBQUNBQSxVQUFJLENBQUNFLGVBQUwsQ0FBcUIsWUFBckI7O0FBRUEsVUFBS0YsSUFBSSxDQUFDQyxZQUFMLENBQWtCLG1DQUFsQixDQUFMLEVBQThEO0FBQzFEcEwsY0FBTSxDQUFDb0UsV0FBUCxDQUFtQmMsSUFBbkIsRUFBeUJpRyxJQUFJLENBQUNDLFlBQUwsQ0FBa0IsbUNBQWxCLENBQXpCO0FBQ0g7O0FBRUQsVUFBTWpDLE9BQU8sR0FBR2dDLElBQUksQ0FBQ0MsWUFBTCxDQUFrQixjQUFsQixDQUFoQjtBQUNBRCxVQUFJLENBQUNFLGVBQUwsQ0FBcUIsY0FBckI7QUFDQUMsa0JBQVksQ0FBQ25DLE9BQUQsQ0FBWjtBQUNILEtBeGJVOztBQTBiWDs7OztBQUlBMEMsd0JBQW9CLEVBQUUsZ0NBQVc7QUFDN0IsVUFBSWtCLEtBQUo7O0FBQ0EsVUFBS0EsS0FBSyxHQUFHOUgsT0FBTyxDQUFDOEcsZ0JBQVIsQ0FBeUIsdUdBQXpCLENBQWIsRUFBaUo7QUFDN0ksYUFBSyxJQUFJaUIsQ0FBQyxHQUFHLENBQVIsRUFBV0MsR0FBRyxHQUFHRixLQUFLLENBQUN0TCxNQUE1QixFQUFvQ3VMLENBQUMsR0FBR0MsR0FBeEMsRUFBNkNELENBQUMsRUFBOUMsRUFBa0Q7QUFDOUM1SCxnQkFBTSxDQUFDc0csbUJBQVAsQ0FBMkJxQixLQUFLLENBQUNDLENBQUQsQ0FBaEMsRUFBcUMsSUFBckM7QUFDSDtBQUNKO0FBQ0osS0FyY1U7O0FBdWNYOzs7O0FBSUF6Qix1QkFBbUIsRUFBRSw2QkFBU0osSUFBVCxFQUFlO0FBQ2hDO0FBQ0EsVUFBSStCLElBQUksR0FBR2pJLE9BQU8sQ0FBQzhHLGdCQUFSLENBQXlCLHFGQUF6QixDQUFYOztBQUVBLFVBQUttQixJQUFMLEVBQVk7QUFDUixhQUFLLElBQUl6RyxDQUFDLEdBQUcsQ0FBUixFQUFXd0UsR0FBRyxHQUFHaUMsSUFBSSxDQUFDekwsTUFBM0IsRUFBbUNnRixDQUFDLEdBQUd3RSxHQUF2QyxFQUE0Q3hFLENBQUMsRUFBN0MsRUFBaUQ7QUFDN0MsY0FBSXJJLEVBQUUsR0FBRzhPLElBQUksQ0FBQ3pHLENBQUQsQ0FBYjs7QUFDQSxjQUFLMEUsSUFBSSxLQUFLL00sRUFBVCxJQUFlQSxFQUFFLENBQUMrTyxRQUFILENBQVloQyxJQUFaLE1BQXNCLEtBQXJDLElBQThDQSxJQUFJLENBQUNnQyxRQUFMLENBQWMvTyxFQUFkLE1BQXNCLEtBQXpFLEVBQWlGO0FBQzdFZ0gsa0JBQU0sQ0FBQ3NHLG1CQUFQLENBQTJCdE4sRUFBM0IsRUFBK0IsSUFBL0I7QUFDSDtBQUNKO0FBQ0osT0FYK0IsQ0FhaEM7OztBQUNBNEIsWUFBTSxDQUFDUixRQUFQLENBQWdCMkwsSUFBaEIsRUFBc0IsbUJBQXRCOztBQUVBLFVBQUtBLElBQUksQ0FBQ0MsWUFBTCxDQUFrQixtQ0FBbEIsQ0FBTCxFQUE4RDtBQUMxRHBMLGNBQU0sQ0FBQ1IsUUFBUCxDQUFnQjBGLElBQWhCLEVBQXNCaUcsSUFBSSxDQUFDQyxZQUFMLENBQWtCLG1DQUFsQixDQUF0QjtBQUNIO0FBQ0osS0E5ZFU7O0FBZ2VYOzs7O0FBSUFnQyxxQ0FBaUMsRUFBRSwyQ0FBU2hQLEVBQVQsRUFBYTtBQUM1QyxVQUFJNE4sS0FBSjtBQUNBLFVBQUl2SSxNQUFNLEdBQUcsQ0FBQ3VJLEtBQUssR0FBR2hNLE1BQU0sQ0FBQ2tNLEtBQVAsQ0FBYTlOLEVBQWIsRUFBaUIsZ0JBQWpCLElBQXFDNEIsTUFBTSxDQUFDcUIsR0FBUCxDQUFXMkssS0FBWCxFQUFrQixTQUFsQixDQUFyQyxHQUFvRSxDQUE3RSxJQUFrRixDQUEvRjtBQUVBLFVBQUlxQixPQUFPLEdBQUczSyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsZ0lBQWdJYyxNQUFoSSxHQUF5SSxVQUFoSyxDQUFkO0FBRUF5QixVQUFJLENBQUNtQyxXQUFMLENBQWlCZ0csT0FBakI7QUFFQXJOLFlBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JzSCxPQUFoQixFQUF5QixPQUF6QixFQUFrQyxVQUFTck0sQ0FBVCxFQUFZO0FBQzFDQSxTQUFDLENBQUNzTSxlQUFGO0FBQ0F0TSxTQUFDLENBQUNnRixjQUFGO0FBQ0FoRyxjQUFNLENBQUNnRCxNQUFQLENBQWMsSUFBZDtBQUNBb0MsY0FBTSxDQUFDc0csbUJBQVAsQ0FBMkJ0TixFQUEzQixFQUErQixJQUEvQjtBQUNILE9BTEQ7QUFNSCxLQWxmVTs7QUFvZlg7Ozs7QUFJQW1QLHNCQUFrQixFQUFFLDRCQUFTL0IsSUFBVCxFQUFlO0FBQy9CLFVBQU1nQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixFQUFiO0FBRUF6SSxTQUFHLENBQUNzRSxzQkFBSixHQUE2QmtFLElBQUksQ0FBQ0UsT0FBTCxLQUFpQmxDLElBQTlDO0FBQ0gsS0E1ZlU7O0FBOGZYOzs7O0FBSUFOLHVCQUFtQixFQUFFLCtCQUFXO0FBQzVCLFVBQU1zQyxJQUFJLEdBQUcsSUFBSUMsSUFBSixFQUFiO0FBRUEsYUFBUUQsSUFBSSxDQUFDRSxPQUFMLEtBQWlCMUksR0FBRyxDQUFDc0Usc0JBQTdCO0FBQ0gsS0F0Z0JVOztBQXdnQlg7Ozs7QUFJQXFFLG1CQUFlLEVBQUUseUJBQVN4QyxJQUFULEVBQWU7QUFDNUIsVUFBSStCLElBQUo7QUFDQSxVQUFJVSxPQUFKO0FBRUFWLFVBQUksR0FBR2pJLE9BQU8sQ0FBQzhHLGdCQUFSLENBQXlCLHFCQUF6QixDQUFQOztBQUVBLFdBQUssSUFBSXRGLENBQUMsR0FBRyxDQUFSLEVBQVd3RSxHQUFHLEdBQUdpQyxJQUFJLENBQUN6TCxNQUEzQixFQUFtQ2dGLENBQUMsR0FBR3dFLEdBQXZDLEVBQTRDeEUsQ0FBQyxFQUE3QyxFQUFpRDtBQUM3QyxZQUFJckksRUFBRSxHQUFHOE8sSUFBSSxDQUFDLENBQUQsQ0FBYjtBQUNBbE4sY0FBTSxDQUFDb0UsV0FBUCxDQUFtQmhHLEVBQW5CLEVBQXVCLG9CQUF2QjtBQUNBNEIsY0FBTSxDQUFDUyxJQUFQLENBQWFULE1BQU0sQ0FBQ2tNLEtBQVAsQ0FBYTlOLEVBQWIsRUFBaUIsZ0JBQWpCLENBQWI7QUFDQXdQLGVBQU8sR0FBRzVOLE1BQU0sQ0FBQzROLE9BQVAsQ0FBZXhQLEVBQWYsRUFBbUIsc0JBQW5CLEtBQThDLEVBQXhEOztBQUVBLGFBQUssSUFBSXlQLEVBQUUsR0FBRyxDQUFULEVBQVlDLElBQUksR0FBR0YsT0FBTyxDQUFDbk0sTUFBaEMsRUFBd0NvTSxFQUFFLEdBQUdDLElBQTdDLEVBQW1ERCxFQUFFLEVBQXJELEVBQXlEO0FBQ3JELGNBQUlyQixHQUFHLEdBQUdvQixPQUFPLENBQUNuSCxDQUFELENBQWpCO0FBQ0F6RyxnQkFBTSxDQUFDb0UsV0FBUCxDQUFtQm9JLEdBQW5CLEVBQXdCLGtCQUF4QjtBQUNBeE0sZ0JBQU0sQ0FBQ1MsSUFBUCxDQUFhVCxNQUFNLENBQUNrTSxLQUFQLENBQWFNLEdBQWIsRUFBa0IsZ0JBQWxCLENBQWI7QUFDSDtBQUNKLE9BakIyQixDQW1CNUI7OztBQUNBLFVBQUt4SCxHQUFHLENBQUNyRixPQUFKLENBQVlrSixTQUFaLENBQXNCSSxTQUF0QixLQUFvQyxLQUF6QyxFQUFpRDtBQUM3QyxZQUFLaUUsSUFBSSxHQUFHakksT0FBTyxDQUFDOEcsZ0JBQVIsQ0FBeUIsbUJBQXpCLENBQVosRUFBNEQ7QUFDeEQsZUFBSyxJQUFJdEYsRUFBQyxHQUFHLENBQVIsRUFBV3dFLElBQUcsR0FBR2lDLElBQUksQ0FBQ3pMLE1BQTNCLEVBQW1DZ0YsRUFBQyxHQUFHd0UsSUFBdkMsRUFBNEN4RSxFQUFDLEVBQTdDLEVBQWlEO0FBQzdDekcsa0JBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJ3SixPQUFPLENBQUMsQ0FBRCxDQUExQixFQUErQixrQkFBL0I7QUFDSDtBQUNKO0FBQ0o7QUFDSixLQXZpQlU7O0FBeWlCWDs7OztBQUlBRyxpQkFBYSxFQUFFLHVCQUFTNUMsSUFBVCxFQUFlO0FBQzFCO0FBQ0EvRixZQUFNLENBQUN1SSxlQUFQO0FBRUEsVUFBSUMsT0FBTyxHQUFHNU4sTUFBTSxDQUFDNE4sT0FBUCxDQUFlekMsSUFBZixFQUFxQixzQkFBckIsS0FBZ0QsRUFBOUQ7O0FBQ0EsV0FBSyxJQUFJMUUsQ0FBQyxHQUFHLENBQVIsRUFBV3dFLEdBQUcsR0FBRzJDLE9BQU8sQ0FBQ25NLE1BQTlCLEVBQXNDZ0YsQ0FBQyxHQUFHd0UsR0FBMUMsRUFBK0N4RSxDQUFDLEVBQWhELEVBQW9EO0FBQ2hEekcsY0FBTSxDQUFDUixRQUFQLENBQWdCUSxNQUFNLENBQUM0QyxHQUFQLENBQVdnTCxPQUFPLENBQUNuSCxDQUFELENBQWxCLENBQWhCLEVBQXdDLGtCQUF4QztBQUNIOztBQUVEekcsWUFBTSxDQUFDUixRQUFQLENBQWdCUSxNQUFNLENBQUM0QyxHQUFQLENBQVd1SSxJQUFYLENBQWhCLEVBQWtDLG9CQUFsQztBQUNILEtBdmpCVTs7QUF5akJYOzs7O0FBSUE2QyxrQkFBYyxFQUFFLHdCQUFTN0MsSUFBVCxFQUFlO0FBQzNCLFVBQUlhLEtBQUo7QUFDQSxVQUFJaUMsV0FBVyxHQUFHLEVBQWxCO0FBQ0EsVUFBSUMsSUFBSSxHQUFHbE8sTUFBTSxDQUFDa00sS0FBUCxDQUFhZixJQUFiLEVBQW1CLGFBQW5CLENBQVg7QUFFQThDLGlCQUFXLENBQUNsSCxJQUFaLENBQWlCO0FBQ2JvSCxZQUFJLEVBQUduQyxLQUFLLEdBQUdoTSxNQUFNLENBQUNrTSxLQUFQLENBQWFnQyxJQUFiLEVBQW1CLGtCQUFuQixJQUF5Q2xDLEtBQUssQ0FBQ2xKLFNBQS9DLEdBQTJELEVBRDdEO0FBRWJzTCxhQUFLLEVBQUVGLElBQUksQ0FBQzlDLFlBQUwsQ0FBa0IsT0FBbEIsQ0FGTTtBQUdiaUQsWUFBSSxFQUFFSCxJQUFJLENBQUM5QyxZQUFMLENBQWtCLE1BQWxCO0FBSE8sT0FBakI7QUFNQSxVQUFJd0MsT0FBTyxHQUFHNU4sTUFBTSxDQUFDNE4sT0FBUCxDQUFlekMsSUFBZixFQUFxQixzQkFBckIsQ0FBZDs7QUFDQSxXQUFLLElBQUkxRSxDQUFDLEdBQUcsQ0FBUixFQUFXd0UsR0FBRyxHQUFHMkMsT0FBTyxDQUFDbk0sTUFBOUIsRUFBc0NnRixDQUFDLEdBQUd3RSxHQUExQyxFQUErQ3hFLENBQUMsRUFBaEQsRUFBb0Q7QUFDaEQsWUFBSTZILFdBQVcsR0FBR3RPLE1BQU0sQ0FBQ2tNLEtBQVAsQ0FBYTBCLE9BQU8sQ0FBQ25ILENBQUQsQ0FBcEIsRUFBeUIsYUFBekIsQ0FBbEI7QUFFQXdILG1CQUFXLENBQUNsSCxJQUFaLENBQWlCO0FBQ2JvSCxjQUFJLEVBQUduQyxLQUFLLEdBQUdoTSxNQUFNLENBQUNrTSxLQUFQLENBQWFvQyxXQUFiLEVBQTBCLGtCQUExQixJQUFnRHRDLEtBQUssQ0FBQ2xKLFNBQXRELEdBQWtFLEVBRHBFO0FBRWJzTCxlQUFLLEVBQUVFLFdBQVcsQ0FBQ2xELFlBQVosQ0FBeUIsT0FBekIsQ0FGTTtBQUdiaUQsY0FBSSxFQUFFQyxXQUFXLENBQUNsRCxZQUFaLENBQXlCLE1BQXpCO0FBSE8sU0FBakI7QUFLSDs7QUFFRCxhQUFRNkMsV0FBVyxDQUFDTSxPQUFaLEVBQVI7QUFDSCxLQXBsQlU7O0FBc2xCWDs7OztBQUlBQyxnQkFBWSxFQUFFLHNCQUFTckQsSUFBVCxFQUFlO0FBQ3pCLFVBQUlhLEtBQUo7QUFFQSxhQUFRQSxLQUFLLEdBQUdoTSxNQUFNLENBQUNrTSxLQUFQLENBQWFmLElBQWIsRUFBbUIsa0JBQW5CLElBQXlDYSxLQUFLLENBQUNsSixTQUEvQyxHQUEyRCxFQUEzRTtBQUNILEtBOWxCVTs7QUFnbUJYOzs7QUFHQTBELGdCQUFZLEVBQUUsc0JBQVNqQyxJQUFULEVBQWV0RCxNQUFmLEVBQXVCRCxDQUF2QixFQUEwQjtBQUNwQyxXQUFLLElBQUl5RixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHekIsR0FBRyxDQUFDUyxNQUFKLENBQVdoRSxNQUEvQixFQUF1Q2dGLENBQUMsRUFBeEMsRUFBNkM7QUFDekMsWUFBSUMsS0FBSyxHQUFHMUIsR0FBRyxDQUFDUyxNQUFKLENBQVdnQixDQUFYLENBQVo7O0FBQ0EsWUFBS0MsS0FBSyxDQUFDbkMsSUFBTixLQUFlQSxJQUFwQixFQUEyQjtBQUN2QixjQUFLbUMsS0FBSyxDQUFDQyxHQUFOLEtBQWMsSUFBbkIsRUFBMEI7QUFDdEIsZ0JBQUtELEtBQUssQ0FBQ0UsS0FBTixLQUFnQixLQUFyQixFQUE2QjtBQUN6QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjdGLE1BQXpCLEVBQWlDRCxDQUFqQyxDQUFQO0FBQ0g7QUFDSixXQUxELE1BS087QUFDSCxtQkFBTzBGLEtBQUssQ0FBQ0csT0FBTixDQUFjQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCN0YsTUFBekIsRUFBaUNELENBQWpDLENBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixLQWpuQlU7QUFtbkJYK0UsWUFBUSxFQUFFLGtCQUFTeEIsSUFBVCxFQUFlc0MsT0FBZixFQUF3QkYsR0FBeEIsRUFBNkI7QUFDbkMzQixTQUFHLENBQUNTLE1BQUosQ0FBV3NCLElBQVgsQ0FBZ0I7QUFDWnhDLFlBQUksRUFBRUEsSUFETTtBQUVac0MsZUFBTyxFQUFFQSxPQUZHO0FBR1pGLFdBQUcsRUFBRUEsR0FITztBQUlaQyxhQUFLLEVBQUU7QUFKSyxPQUFoQjtBQU1ILEtBMW5CVTtBQTRuQlg2SCxlQUFXLEVBQUUscUJBQVNsSyxJQUFULEVBQWU7QUFDeEIsVUFBSVMsR0FBRyxDQUFDUyxNQUFKLENBQVdsQixJQUFYLENBQUosRUFBc0I7QUFDbEIsZUFBT1MsR0FBRyxDQUFDUyxNQUFKLENBQVdsQixJQUFYLENBQVA7QUFDSDtBQUNKO0FBaG9CVSxHQUFmLENBdEN3QyxDQXlxQnhDO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBUyxLQUFHLENBQUNnQyxXQUFKLEdBQWtCLFVBQVNySCxPQUFULEVBQWtCO0FBQ2hDd0Ysa0JBQWMsR0FBR3hGLE9BQWpCO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBcUYsS0FBRyxDQUFDdUYsWUFBSixHQUFtQixZQUFXO0FBQzFCLFdBQU9uRixNQUFNLENBQUNtRixZQUFQLEVBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0F2RixLQUFHLENBQUMwSixZQUFKLEdBQW1CLFlBQVc7QUFDMUIsV0FBT3RKLE1BQU0sQ0FBQ25GLFVBQVAsRUFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQStFLEtBQUcsQ0FBQ3dGLFNBQUosR0FBZ0IsWUFBVztBQUN2QixXQUFPcEYsTUFBTSxDQUFDb0YsU0FBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBeEYsS0FBRyxDQUFDK0ksYUFBSixHQUFvQixVQUFTNUMsSUFBVCxFQUFlO0FBQy9CLFdBQU8vRixNQUFNLENBQUMySSxhQUFQLENBQXFCNUMsSUFBckIsQ0FBUDtBQUNILEdBRkQ7O0FBSUFuRyxLQUFHLENBQUMwRSxNQUFKLEdBQWEsWUFBVztBQUNwQixXQUFPdEUsTUFBTSxDQUFDc0UsTUFBUCxFQUFQO0FBQ0gsR0FGRDs7QUFJQTFFLEtBQUcsQ0FBQ3lFLE1BQUosR0FBYSxVQUFTOUosT0FBVCxFQUFrQjtBQUMzQixXQUFPeUYsTUFBTSxDQUFDcUUsTUFBUCxDQUFjOUosT0FBZCxDQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBcUYsS0FBRyxDQUFDZ0osY0FBSixHQUFxQixVQUFTN0MsSUFBVCxFQUFlO0FBQ2hDLFdBQU8vRixNQUFNLENBQUM0SSxjQUFQLENBQXNCN0MsSUFBdEIsQ0FBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQW5HLEtBQUcsQ0FBQ3dKLFlBQUosR0FBbUIsVUFBU3JELElBQVQsRUFBZTtBQUM5QixXQUFPL0YsTUFBTSxDQUFDb0osWUFBUCxDQUFvQnJELElBQXBCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0FuRyxLQUFHLENBQUM2RSxjQUFKLEdBQXFCLFVBQVN6TCxFQUFULEVBQWE7QUFDOUIsV0FBT2dILE1BQU0sQ0FBQ3lFLGNBQVAsQ0FBc0J6TCxFQUF0QixDQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQTRHLEtBQUcsQ0FBQzJKLFlBQUosR0FBbUIsVUFBU3hELElBQVQsRUFBZTtBQUM5Qi9GLFVBQU0sQ0FBQ3NHLG1CQUFQLENBQTJCUCxJQUEzQixFQUFpQyxJQUFqQztBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUFuRyxLQUFHLENBQUM0SixhQUFKLEdBQW9CLFlBQVc7QUFDM0J4SixVQUFNLENBQUN5RyxvQkFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUE3RyxLQUFHLENBQUN1SSxrQkFBSixHQUF5QixVQUFTL0IsSUFBVCxFQUFlO0FBQ3BDcEcsVUFBTSxDQUFDbUksa0JBQVAsQ0FBMEIvQixJQUExQjtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUF4RyxLQUFHLENBQUNrRyxtQkFBSixHQUEwQixZQUFXO0FBQ2pDLFdBQU85RixNQUFNLENBQUM4RixtQkFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBbEcsS0FBRyxDQUFDNUYsRUFBSixHQUFTLFVBQVNtRixJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzdCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLENBQVA7QUFDSCxHQUZEOztBQUlBN0IsS0FBRyxDQUFDdUQsR0FBSixHQUFVLFVBQVNoRSxJQUFULEVBQWU7QUFDckIsV0FBT2EsTUFBTSxDQUFDcUosV0FBUCxDQUFtQmxLLElBQW5CLENBQVA7QUFDSCxHQUZEOztBQUlBUyxLQUFHLENBQUMyQixHQUFKLEdBQVUsVUFBU3BDLElBQVQsRUFBZXNDLE9BQWYsRUFBd0I7QUFDOUIsV0FBT3pCLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQnhCLElBQWhCLEVBQXNCc0MsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNILEdBRkQsQ0F6eEJ3QyxDQTZ4QnhDO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQXpCLFFBQU0sQ0FBQ0MsU0FBUCxDQUFpQjRCLEtBQWpCLENBQXVCakMsR0FBdkIsRUFBNEIsQ0FBQ3JGLE9BQUQsQ0FBNUIsRUFseUJ3QyxDQW95QnhDOztBQUNBSyxRQUFNLENBQUM2TyxnQkFBUCxDQUF3QixZQUFXO0FBQy9CLFFBQUluTixJQUFKLEVBQVU7QUFDTnNELFNBQUcsQ0FBQzBFLE1BQUo7QUFDSDtBQUNKLEdBSkQsRUFyeUJ3QyxDQTJ5QnhDOztBQUNBaEksTUFBSSxHQUFHLElBQVAsQ0E1eUJ3QyxDQTh5QnhDOztBQUNBLFNBQU9zRCxHQUFQO0FBQ0gsQ0FoekJELEMsQ0FrekJBOzs7QUFDQSxJQUFJLFNBQWlDLE9BQU9OLE1BQU0sQ0FBQ0MsT0FBZCxLQUEwQixXQUEvRCxFQUE0RTtBQUN4RUQsUUFBTSxDQUFDQyxPQUFQLEdBQWlCZ0UsTUFBakI7QUFDSCxDLENBRUQ7OztBQUNBakcsUUFBUSxDQUFDNEYsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUMsVUFBVXRILENBQVYsRUFBYTtBQUM1QyxNQUFNa0UsSUFBSSxHQUFHbEYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLE1BQVgsQ0FBYjtBQUNBLE1BQUlvSixLQUFKOztBQUNBLE1BQUtBLEtBQUssR0FBRzlHLElBQUksQ0FBQzZHLGdCQUFMLENBQXNCLHlIQUF0QixDQUFiLEVBQWdLO0FBQzVKLFNBQUssSUFBSXRGLENBQUMsR0FBRyxDQUFSLEVBQVd3RSxHQUFHLEdBQUdlLEtBQUssQ0FBQ3ZLLE1BQTVCLEVBQW9DZ0YsQ0FBQyxHQUFHd0UsR0FBeEMsRUFBNkN4RSxDQUFDLEVBQTlDLEVBQWtEO0FBQzlDLFVBQUl4QixPQUFPLEdBQUcrRyxLQUFLLENBQUN2RixDQUFELENBQUwsQ0FBU2pHLE9BQVQsQ0FBaUIsWUFBakIsRUFBK0JzTyxVQUE3Qzs7QUFFQSxVQUFLN0osT0FBTCxFQUFlO0FBQ1gsWUFBSUQsR0FBRyxHQUFHaEYsTUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQnJDLEdBQXJCLENBQXlCLE1BQXpCLENBQVY7O0FBRUEsWUFBSyxDQUFDb0MsR0FBTixFQUFZO0FBQ1I7QUFDSDs7QUFFRCxZQUFLLENBQUNBLEdBQUQsSUFBUUEsR0FBRyxDQUFDNkUsY0FBSixPQUF5QixVQUF0QyxFQUFtRDtBQUMvQztBQUNIOztBQUVELFlBQUs3SSxDQUFDLENBQUNDLE1BQUYsS0FBYWdFLE9BQWIsSUFBd0JBLE9BQU8sQ0FBQ2tJLFFBQVIsQ0FBaUJuTSxDQUFDLENBQUNDLE1BQW5CLE1BQStCLEtBQTVELEVBQW9FO0FBQ2hFK0QsYUFBRyxDQUFDNEosYUFBSjtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBQ0osQ0F4QkQsRTs7Ozs7Ozs7Ozs7O0FDenpCYTs7QUFDYixJQUFJRyxXQUFXLEdBQUcsU0FBZEEsV0FBYyxDQUFTaEssU0FBVCxFQUFvQnBGLE9BQXBCLEVBQTZCO0FBQzNDO0FBQ0EsTUFBSXFGLEdBQUcsR0FBRyxJQUFWO0FBQ0EsTUFBSXRELElBQUksR0FBRyxLQUFYLENBSDJDLENBSzNDOztBQUNBLE1BQUl1RCxPQUFPLEdBQUdqRixNQUFNLENBQUM0QyxHQUFQLENBQVdtQyxTQUFYLENBQWQ7QUFDQSxNQUFJRyxJQUFJLEdBQUdsRixNQUFNLENBQUM0QyxHQUFQLENBQVcsTUFBWCxDQUFYOztBQUVBLE1BQUksQ0FBQ3FDLE9BQUwsRUFBYztBQUNWO0FBQ0gsR0FYMEMsQ0FhM0M7OztBQUNBLE1BQUlFLGNBQWMsR0FBRyxFQUFyQixDQWQyQyxDQWdCM0M7QUFDQTtBQUNBOztBQUVBLE1BQUlDLE1BQU0sR0FBRztBQUNUQyxhQUFTLEVBQUUsbUJBQVMxRixPQUFULEVBQWtCO0FBQ3pCLFVBQUlLLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJLLEdBQXJCLENBQXlCLFdBQXpCLENBQUosRUFBMkM7QUFDdkNOLFdBQUcsR0FBR2hGLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJyQyxHQUFyQixDQUF5QixXQUF6QixDQUFOO0FBQ0gsT0FGRCxNQUVPO0FBQ0g7QUFDQXdDLGNBQU0sQ0FBQzFELElBQVAsQ0FBWS9CLE9BQVosRUFGRyxDQUlIOztBQUNBeUYsY0FBTSxDQUFDRyxLQUFQO0FBRUF2RixjQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCTyxHQUFyQixDQUF5QixXQUF6QixFQUFzQ1IsR0FBdEM7QUFDSDs7QUFFRCxhQUFPQSxHQUFQO0FBQ0gsS0FmUTtBQWlCVHRELFFBQUksRUFBRSxjQUFTL0IsT0FBVCxFQUFrQjtBQUNwQnFGLFNBQUcsQ0FBQ1MsTUFBSixHQUFhLEVBQWIsQ0FEb0IsQ0FHcEI7O0FBQ0FULFNBQUcsQ0FBQ3JGLE9BQUosR0FBY0ssTUFBTSxDQUFDOEYsVUFBUCxDQUFrQixFQUFsQixFQUFzQlgsY0FBdEIsRUFBc0N4RixPQUF0QyxDQUFkO0FBQ0FxRixTQUFHLENBQUNnSyxPQUFKO0FBRUFoSyxTQUFHLENBQUNpSyxTQUFKLEdBQWdCakssR0FBRyxDQUFDckYsT0FBSixDQUFZdVAsU0FBNUI7QUFDQWxLLFNBQUcsQ0FBQ21LLFVBQUosR0FBaUJuSyxHQUFHLENBQUNpSyxTQUFKLEdBQWdCLE1BQWpDO0FBQ0FqSyxTQUFHLENBQUNvSyxZQUFKLEdBQW1CcEssR0FBRyxDQUFDaUssU0FBSixHQUFnQixVQUFuQztBQUVBakssU0FBRyxDQUFDOUMsS0FBSixHQUFZbEMsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjNHLE9BQWhCLEVBQXlCRCxHQUFHLENBQUNtSyxVQUE3QixJQUEyQyxPQUEzQyxHQUFxRCxRQUFqRTtBQUNILEtBN0JRO0FBK0JUNUosU0FBSyxFQUFFLGlCQUFXO0FBQ2Q7QUFDQSxVQUFJUCxHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFoQixFQUEwQjtBQUN0QixZQUFJLE9BQU9ySyxHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFuQixLQUFnQyxRQUFwQyxFQUE4QztBQUMxQ3JQLGdCQUFNLENBQUMrRixRQUFQLENBQWlCZixHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUE3QixFQUF1QyxPQUF2QyxFQUFnRCxVQUFTck8sQ0FBVCxFQUFZO0FBQ3hEQSxhQUFDLENBQUNnRixjQUFGO0FBQ0FaLGtCQUFNLENBQUNrSyxNQUFQO0FBQ0gsV0FIRDtBQUlILFNBTEQsTUFLTyxJQUFJdEssR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixJQUF3QnJLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQVosQ0FBcUIsQ0FBckIsQ0FBNUIsRUFBcUQ7QUFDeEQsY0FBSXJLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQVosQ0FBcUIsQ0FBckIsRUFBd0JwTyxNQUE1QixFQUFvQztBQUNoQyxpQkFBSyxJQUFJd0YsQ0FBVCxJQUFjekIsR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBMUIsRUFBb0M7QUFDaENyUCxvQkFBTSxDQUFDK0YsUUFBUCxDQUFpQmYsR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixDQUFxQjVJLENBQXJCLEVBQXdCeEYsTUFBekMsRUFBaUQsT0FBakQsRUFBMEQsVUFBU0QsQ0FBVCxFQUFZO0FBQ2xFQSxpQkFBQyxDQUFDZ0YsY0FBRjtBQUNBWixzQkFBTSxDQUFDa0ssTUFBUDtBQUNILGVBSEQ7QUFJSDtBQUNKLFdBUEQsTUFPTztBQUNILGlCQUFLLElBQUk3SSxDQUFULElBQWN6QixHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUExQixFQUFvQztBQUNoQ3JQLG9CQUFNLENBQUMrRixRQUFQLENBQWlCZixHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFaLENBQXFCNUksQ0FBckIsQ0FBakIsRUFBMEMsT0FBMUMsRUFBbUQsVUFBU3pGLENBQVQsRUFBWTtBQUMzREEsaUJBQUMsQ0FBQ2dGLGNBQUY7QUFDQVosc0JBQU0sQ0FBQ2tLLE1BQVA7QUFDSCxlQUhEO0FBSUg7QUFDSjtBQUVKLFNBakJNLE1BaUJBLElBQUl0SyxHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFaLElBQXdCckssR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixDQUFxQnBPLE1BQWpELEVBQXlEO0FBQzVEakIsZ0JBQU0sQ0FBQytGLFFBQVAsQ0FBaUJmLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQVosQ0FBcUJwTyxNQUF0QyxFQUE4QyxPQUE5QyxFQUF1RCxVQUFTRCxDQUFULEVBQVk7QUFDL0RBLGFBQUMsQ0FBQ2dGLGNBQUY7QUFDQVosa0JBQU0sQ0FBQ2tLLE1BQVA7QUFDSCxXQUhEO0FBSUg7QUFDSixPQS9CYSxDQWlDZDs7O0FBQ0EsVUFBSUMsT0FBTyxHQUFHdlAsTUFBTSxDQUFDNEMsR0FBUCxDQUFXb0MsR0FBRyxDQUFDckYsT0FBSixDQUFZNFAsT0FBdkIsQ0FBZDs7QUFDQSxVQUFJQSxPQUFKLEVBQWE7QUFDVHZQLGNBQU0sQ0FBQytGLFFBQVAsQ0FBZ0J3SixPQUFoQixFQUF5QixPQUF6QixFQUFrQyxVQUFTdk8sQ0FBVCxFQUFZO0FBQzFDQSxXQUFDLENBQUNnRixjQUFGO0FBQ0FaLGdCQUFNLENBQUMzRSxJQUFQO0FBQ0gsU0FIRDtBQUlILE9BeENhLENBMENkOzs7QUFDQVQsWUFBTSxDQUFDNk8sZ0JBQVAsQ0FBd0IsWUFBVztBQUMvQixZQUFJVyxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVc0RCxPQUFYLEVBQW9CLE1BQXBCLENBQUQsQ0FBUixJQUF5QyxDQUF6QyxJQUE4Q3VLLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBVzRELE9BQVgsRUFBb0IsT0FBcEIsS0FBZ0MsQ0FBakMsQ0FBdEQsSUFBNkZqRixNQUFNLENBQUNxQixHQUFQLENBQVc0RCxPQUFYLEVBQW9CLFVBQXBCLEtBQW1DLE9BQXBJLEVBQTZJO0FBQ3pJakYsZ0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzRELE9BQVgsRUFBb0IsU0FBcEIsRUFBK0IsR0FBL0I7QUFDSDtBQUNKLE9BSkQ7QUFLSCxLQS9FUTtBQWlGVHdLLFdBQU8sRUFBRSxpQkFBU3hPLE1BQVQsRUFBaUI7QUFDdEIsYUFBUStELEdBQUcsQ0FBQzlDLEtBQUosSUFBYSxPQUFiLEdBQXVCLElBQXZCLEdBQThCLEtBQXRDO0FBQ0gsS0FuRlE7QUFxRlRvTixVQUFNLEVBQUUsa0JBQVc7QUFBQztBQUNoQmxLLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsUUFBcEI7O0FBRUEsVUFBSXhCLEdBQUcsQ0FBQzlDLEtBQUosSUFBYSxPQUFqQixFQUEwQjtBQUN0QmtELGNBQU0sQ0FBQzNFLElBQVAsQ0FBWSxJQUFaO0FBQ0gsT0FGRCxNQUVPO0FBQ0gyRSxjQUFNLENBQUMrQixJQUFQLENBQVksSUFBWjtBQUNIO0FBQ0osS0E3RlE7QUErRlRBLFFBQUksRUFBRSxjQUFTbEcsTUFBVCxFQUFpQjtBQUNuQixVQUFJK0QsR0FBRyxDQUFDOUMsS0FBSixJQUFhLE9BQWpCLEVBQTBCO0FBQ3RCO0FBQ0g7O0FBRURrRCxZQUFNLENBQUNvQixZQUFQLENBQW9CLFlBQXBCO0FBRUFwQixZQUFNLENBQUNzSyxZQUFQLENBQW9Cek8sTUFBcEIsRUFBNEIsTUFBNUIsRUFQbUIsQ0FTbkI7O0FBQ0FqQixZQUFNLENBQUNSLFFBQVAsQ0FBZ0IwRixJQUFoQixFQUFzQkYsR0FBRyxDQUFDbUssVUFBMUI7QUFDQW5QLFlBQU0sQ0FBQ1IsUUFBUCxDQUFnQnlGLE9BQWhCLEVBQXlCRCxHQUFHLENBQUNtSyxVQUE3QjtBQUNBblAsWUFBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixTQUFwQixFQUErQixHQUEvQjtBQUVBRCxTQUFHLENBQUM5QyxLQUFKLEdBQVksT0FBWjs7QUFFQSxVQUFJOEMsR0FBRyxDQUFDckYsT0FBSixDQUFZcVAsT0FBaEIsRUFBeUI7QUFDckJoSyxXQUFHLENBQUNnSyxPQUFKLEdBQWNoUCxNQUFNLENBQUMyUCxXQUFQLENBQW1Cak4sUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQW5CLEVBQW1Ec0MsT0FBbkQsQ0FBZDtBQUNBakYsY0FBTSxDQUFDUixRQUFQLENBQWdCd0YsR0FBRyxDQUFDZ0ssT0FBcEIsRUFBNkJoSyxHQUFHLENBQUNvSyxZQUFqQztBQUNBcFAsY0FBTSxDQUFDK0YsUUFBUCxDQUFnQmYsR0FBRyxDQUFDZ0ssT0FBcEIsRUFBNkIsT0FBN0IsRUFBc0MsVUFBU2hPLENBQVQsRUFBWTtBQUM5Q0EsV0FBQyxDQUFDc00sZUFBRjtBQUNBdE0sV0FBQyxDQUFDZ0YsY0FBRjtBQUNBWixnQkFBTSxDQUFDM0UsSUFBUCxDQUFZUSxNQUFaO0FBQ0gsU0FKRDtBQUtIOztBQUVEbUUsWUFBTSxDQUFDb0IsWUFBUCxDQUFvQixXQUFwQjtBQUNILEtBMUhRO0FBNEhUL0YsUUFBSSxFQUFFLGNBQVNRLE1BQVQsRUFBaUI7QUFDbkIsVUFBSStELEdBQUcsQ0FBQzlDLEtBQUosSUFBYSxRQUFqQixFQUEyQjtBQUN2QjtBQUNIOztBQUVEa0QsWUFBTSxDQUFDb0IsWUFBUCxDQUFvQixZQUFwQjtBQUVBcEIsWUFBTSxDQUFDc0ssWUFBUCxDQUFvQnpPLE1BQXBCLEVBQTRCLE1BQTVCO0FBRUFqQixZQUFNLENBQUNvRSxXQUFQLENBQW1CYyxJQUFuQixFQUF5QkYsR0FBRyxDQUFDbUssVUFBN0I7QUFDQW5QLFlBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJhLE9BQW5CLEVBQTRCRCxHQUFHLENBQUNtSyxVQUFoQztBQUVBbkssU0FBRyxDQUFDOUMsS0FBSixHQUFZLFFBQVo7O0FBRUEsVUFBSThDLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWXFQLE9BQVosSUFBdUJoSyxHQUFHLENBQUNnSyxPQUEvQixFQUF3QztBQUNwQ2hQLGNBQU0sQ0FBQ2dELE1BQVAsQ0FBY2dDLEdBQUcsQ0FBQ2dLLE9BQWxCO0FBQ0g7O0FBRURoUCxZQUFNLENBQUM0UCxhQUFQLENBQXFCM0ssT0FBckIsRUFBOEIsWUFBVztBQUNyQ2pGLGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzRELE9BQVgsRUFBb0IsU0FBcEIsRUFBK0IsR0FBL0I7QUFDSCxPQUZEO0FBSUFHLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsV0FBcEI7QUFDSCxLQW5KUTtBQXFKVGtKLGdCQUFZLEVBQUUsc0JBQVN6TyxNQUFULEVBQWlCNEosSUFBakIsRUFBdUI7QUFDakM7QUFDQSxVQUFJZ0YsRUFBRSxHQUFHN1AsTUFBTSxDQUFDbUUsSUFBUCxDQUFZbEQsTUFBWixFQUFvQixJQUFwQixDQUFUO0FBQ0EsVUFBSW9PLFFBQUo7O0FBRUEsVUFBSXJLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQVosSUFBd0JySyxHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFaLENBQXFCLENBQXJCLENBQXhCLElBQW1EckssR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixDQUFxQixDQUFyQixFQUF3QnBPLE1BQS9FLEVBQXVGO0FBQ25GLGFBQUssSUFBSXdGLENBQVQsSUFBY3pCLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQTFCLEVBQW9DO0FBQ2hDLGNBQUlySyxHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFaLENBQXFCNUksQ0FBckIsRUFBd0J4RixNQUF4QixLQUFtQzRPLEVBQXZDLEVBQTJDO0FBQ3ZDUixvQkFBUSxHQUFHckssR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixDQUFxQjVJLENBQXJCLENBQVg7QUFDSDtBQUNKO0FBQ0osT0FORCxNQU1PLElBQUl6QixHQUFHLENBQUNyRixPQUFKLENBQVkwUCxRQUFaLElBQXdCckssR0FBRyxDQUFDckYsT0FBSixDQUFZMFAsUUFBWixDQUFxQnBPLE1BQWpELEVBQXlEO0FBQzVEb08sZ0JBQVEsR0FBR3JLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTBQLFFBQXZCO0FBQ0g7O0FBRUQsVUFBSUEsUUFBSixFQUFjO0FBQ1YsWUFBSWpSLEVBQUUsR0FBRzRCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3lNLFFBQVEsQ0FBQ3BPLE1BQXBCLENBQVQ7O0FBRUEsWUFBSTRKLElBQUksS0FBSyxNQUFiLEVBQXFCO0FBQ2pCN0ssZ0JBQU0sQ0FBQ1IsUUFBUCxDQUFnQnBCLEVBQWhCLEVBQW9CaVIsUUFBUSxDQUFDbk4sS0FBN0I7QUFDSDs7QUFFRCxZQUFJMkksSUFBSSxLQUFLLE1BQWIsRUFBcUI7QUFDakI3SyxnQkFBTSxDQUFDb0UsV0FBUCxDQUFtQmhHLEVBQW5CLEVBQXVCaVIsUUFBUSxDQUFDbk4sS0FBaEM7QUFDSDtBQUNKO0FBQ0osS0EvS1E7QUFpTFRzRSxnQkFBWSxFQUFFLHNCQUFTakMsSUFBVCxFQUFlbUUsSUFBZixFQUFxQjtBQUMvQixXQUFLLElBQUlqQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHekIsR0FBRyxDQUFDUyxNQUFKLENBQVdoRSxNQUEvQixFQUF1Q2dGLENBQUMsRUFBeEMsRUFBNEM7QUFDeEMsWUFBSUMsS0FBSyxHQUFHMUIsR0FBRyxDQUFDUyxNQUFKLENBQVdnQixDQUFYLENBQVo7O0FBQ0EsWUFBSUMsS0FBSyxDQUFDbkMsSUFBTixJQUFjQSxJQUFsQixFQUF3QjtBQUNwQixjQUFJbUMsS0FBSyxDQUFDQyxHQUFOLElBQWEsSUFBakIsRUFBdUI7QUFDbkIsZ0JBQUlELEtBQUssQ0FBQ0UsS0FBTixJQUFlLEtBQW5CLEVBQTBCO0FBQ3RCNUIsaUJBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxFQUFjRyxLQUFkLEdBQXNCLElBQXRCO0FBQ0EscUJBQU9GLEtBQUssQ0FBQ0csT0FBTixDQUFjQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCOUIsR0FBekIsRUFBOEIwRCxJQUE5QixDQUFQO0FBQ0g7QUFDSixXQUxELE1BS087QUFDSCxtQkFBT2hDLEtBQUssQ0FBQ0csT0FBTixDQUFjQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCOUIsR0FBekIsRUFBOEIwRCxJQUE5QixDQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osS0EvTFE7QUFpTVQzQyxZQUFRLEVBQUUsa0JBQVN4QixJQUFULEVBQWVzQyxPQUFmLEVBQXdCRixHQUF4QixFQUE2QjtBQUNuQzNCLFNBQUcsQ0FBQ1MsTUFBSixDQUFXc0IsSUFBWCxDQUFnQjtBQUNaeEMsWUFBSSxFQUFFQSxJQURNO0FBRVpzQyxlQUFPLEVBQUVBLE9BRkc7QUFHWkYsV0FBRyxFQUFFQSxHQUhPO0FBSVpDLGFBQUssRUFBRTtBQUpLLE9BQWhCO0FBTUg7QUF4TVEsR0FBYixDQXBCMkMsQ0ErTjNDO0FBQ0E7QUFDQTs7QUFDQTVCLEtBQUcsQ0FBQ2dDLFdBQUosR0FBa0IsVUFBU3JILE9BQVQsRUFBa0I7QUFDaEN3RixrQkFBYyxHQUFHeEYsT0FBakI7QUFDSCxHQUZEOztBQUlBcUYsS0FBRyxDQUFDeUssT0FBSixHQUFjLFlBQVc7QUFDckIsV0FBT3JLLE1BQU0sQ0FBQ3FLLE9BQVAsRUFBUDtBQUNILEdBRkQ7O0FBSUF6SyxLQUFHLENBQUN2RSxJQUFKLEdBQVcsWUFBVztBQUNsQixXQUFPMkUsTUFBTSxDQUFDM0UsSUFBUCxFQUFQO0FBQ0gsR0FGRDs7QUFJQXVFLEtBQUcsQ0FBQ21DLElBQUosR0FBVyxZQUFXO0FBQ2xCLFdBQU8vQixNQUFNLENBQUMrQixJQUFQLEVBQVA7QUFDSCxHQUZEOztBQUlBbkMsS0FBRyxDQUFDNUYsRUFBSixHQUFTLFVBQVNtRixJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzdCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLENBQVA7QUFDSCxHQUZEOztBQUlBN0IsS0FBRyxDQUFDMkIsR0FBSixHQUFVLFVBQVNwQyxJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzlCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLEVBQStCLElBQS9CLENBQVA7QUFDSCxHQUZELENBdFAyQyxDQTBQM0M7QUFDQTtBQUNBO0FBRUE7OztBQUNBekIsUUFBTSxDQUFDQyxTQUFQLENBQWlCNEIsS0FBakIsQ0FBdUJqQyxHQUF2QixFQUE0QixDQUFDckYsT0FBRCxDQUE1QixFQS9QMkMsQ0FpUTNDOztBQUNBK0IsTUFBSSxHQUFHLElBQVAsQ0FsUTJDLENBb1EzQzs7QUFDQSxTQUFPc0QsR0FBUDtBQUNILENBdFFELEMsQ0F3UUE7OztBQUNBLElBQUksU0FBaUMsT0FBT04sTUFBTSxDQUFDQyxPQUFkLEtBQTBCLFdBQS9ELEVBQTRFO0FBQ3hFRCxRQUFNLENBQUNDLE9BQVAsR0FBaUJvSyxXQUFqQjtBQUNILEM7Ozs7Ozs7Ozs7OztDQzNRRDs7QUFDQSxJQUFJbFAsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBU2tGLFNBQVQsRUFBb0JwRixPQUFwQixFQUE2QjtBQUN6QztBQUNBLE1BQUlxRixHQUFHLEdBQUcsSUFBVjtBQUNBLE1BQUl0RCxJQUFJLEdBQUcsS0FBWCxDQUh5QyxDQUt6Qzs7QUFDQSxNQUFJdUQsT0FBTyxHQUFHakYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXbUMsU0FBWCxDQUFkO0FBQ0EsTUFBSUcsSUFBSSxHQUFHbEYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLE1BQVgsQ0FBWDs7QUFFQSxNQUFJLENBQUNxQyxPQUFMLEVBQWM7QUFDVjtBQUNILEdBWHdDLENBYXpDOzs7QUFDQSxNQUFJRSxjQUFjLEdBQUc7QUFDakIySyxtQkFBZSxFQUFFLEdBREE7QUFFakJDLFlBQVEsRUFBRSxJQUZPO0FBR2pCQyxTQUFLLEVBQUU7QUFDSFYsWUFBTSxFQUFFO0FBQ0pXLGdCQUFRLEVBQUUsVUFETjtBQUVKQyxjQUFNLEVBQUU7QUFGSixPQURMO0FBS0h4RyxZQUFNLEVBQUUsUUFMTDtBQU1IMUcsWUFBTSxFQUFFLFFBTkw7QUFPSG1OLGdCQUFVLEVBQUU7QUFDUi9RLFVBQUUsRUFBRSxZQURJO0FBRVJtSixXQUFHLEVBQUU7QUFGRztBQVBULEtBSFU7QUFlakI1SCxVQUFNLEVBQUU7QUFDSmdILFlBQU0sRUFBRSxHQURKO0FBRUpsRSxZQUFNLEVBQUU7QUFGSjtBQWZTLEdBQXJCLENBZHlDLENBbUN6QztBQUNBO0FBQ0E7O0FBRUEsTUFBSTJCLE1BQU0sR0FBRztBQUNUOzs7QUFJQUMsYUFBUyxFQUFFLG1CQUFTMUYsT0FBVCxFQUFrQjtBQUN6QixVQUFJSyxNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCSyxHQUFyQixDQUF5QixTQUF6QixDQUFKLEVBQXlDO0FBQ3JDTixXQUFHLEdBQUdoRixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCckMsR0FBckIsQ0FBeUIsU0FBekIsQ0FBTjtBQUNILE9BRkQsTUFFTztBQUNIO0FBQ0F3QyxjQUFNLENBQUMxRCxJQUFQLENBQVkvQixPQUFaLEVBRkcsQ0FJSDs7QUFDQXlGLGNBQU0sQ0FBQ0csS0FBUDtBQUVBdkYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQk8sR0FBckIsQ0FBeUIsU0FBekIsRUFBb0NSLEdBQXBDO0FBQ0g7O0FBRUQsYUFBT0EsR0FBUDtBQUNILEtBbkJROztBQXFCVDs7O0FBR0F0RCxRQUFJLEVBQUUsY0FBUy9CLE9BQVQsRUFBa0I7QUFDcEJxRixTQUFHLENBQUNDLE9BQUosR0FBY0EsT0FBZDtBQUNBRCxTQUFHLENBQUNTLE1BQUosR0FBYSxFQUFiLENBRm9CLENBSXBCOztBQUNBVCxTQUFHLENBQUNyRixPQUFKLEdBQWNLLE1BQU0sQ0FBQzhGLFVBQVAsQ0FBa0IsRUFBbEIsRUFBc0JYLGNBQXRCLEVBQXNDeEYsT0FBdEMsQ0FBZDtBQUNBcUYsU0FBRyxDQUFDb0wsSUFBSixHQUFXcFEsTUFBTSxDQUFDa00sS0FBUCxDQUFhakgsT0FBYixFQUFzQixnQkFBdEIsQ0FBWDtBQUNBRCxTQUFHLENBQUNxTCxJQUFKLEdBQVdyUSxNQUFNLENBQUNrTSxLQUFQLENBQWFqSCxPQUFiLEVBQXNCLGdCQUF0QixDQUFYOztBQUVBLFVBQUlqRixNQUFNLENBQUNrTSxLQUFQLENBQWFqSCxPQUFiLEVBQXNCLGdCQUF0QixDQUFKLEVBQTZDO0FBQ3pDRCxXQUFHLENBQUNFLElBQUosR0FBV2xGLE1BQU0sQ0FBQ2tNLEtBQVAsQ0FBYWpILE9BQWIsRUFBc0IsZ0JBQXRCLENBQVg7QUFDSCxPQUZELE1BRU8sSUFBSWpGLE1BQU0sQ0FBQ2tNLEtBQVAsQ0FBYWpILE9BQWIsRUFBc0IsT0FBdEIsQ0FBSixFQUFvQztBQUN2Q0QsV0FBRyxDQUFDRSxJQUFKLEdBQVdsRixNQUFNLENBQUNrTSxLQUFQLENBQWFqSCxPQUFiLEVBQXNCLE9BQXRCLENBQVg7QUFDSDtBQUNKLEtBdENROztBQXdDVDs7O0FBR0FNLFNBQUssRUFBRSxpQkFBVztBQUNkO0FBQ0EsVUFBSXZDLE1BQU0sR0FBR2hELE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFVBQUlwTixNQUFKLEVBQVk7QUFDUmhELGNBQU0sQ0FBQytGLFFBQVAsQ0FBZ0IvQyxNQUFoQixFQUF3QixPQUF4QixFQUFpQyxVQUFTaEMsQ0FBVCxFQUFZO0FBQ3pDQSxXQUFDLENBQUNnRixjQUFGO0FBQ0FaLGdCQUFNLENBQUNwQyxNQUFQO0FBQ0gsU0FIRDtBQUlILE9BUmEsQ0FVZDs7O0FBQ0EsVUFBSTBHLE1BQU0sR0FBRzFKLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFVBQUkxRyxNQUFKLEVBQVk7QUFDUjFKLGNBQU0sQ0FBQytGLFFBQVAsQ0FBZ0IyRCxNQUFoQixFQUF3QixPQUF4QixFQUFpQyxVQUFTMUksQ0FBVCxFQUFZO0FBQ3pDQSxXQUFDLENBQUNnRixjQUFGO0FBQ0FaLGdCQUFNLENBQUNzRSxNQUFQO0FBQ0gsU0FIRDtBQUlILE9BakJhLENBbUJkOzs7QUFDQSxVQUFJNEYsTUFBTSxHQUFHdFAsTUFBTSxDQUFDa0IsSUFBUCxDQUFZOEQsR0FBRyxDQUFDb0wsSUFBaEIsRUFBc0IsOEJBQXRCLENBQWI7O0FBQ0EsVUFBSWQsTUFBSixFQUFZO0FBQ1J0UCxjQUFNLENBQUMrRixRQUFQLENBQWdCdUosTUFBaEIsRUFBd0IsT0FBeEIsRUFBaUMsVUFBU3RPLENBQVQsRUFBWTtBQUN6Q0EsV0FBQyxDQUFDZ0YsY0FBRjtBQUNBWixnQkFBTSxDQUFDa0ssTUFBUDtBQUNILFNBSEQ7QUFJSCxPQTFCYSxDQTRCZDs7O0FBQ0EsVUFBSWEsVUFBVSxHQUFHblEsTUFBTSxDQUFDa0IsSUFBUCxDQUFZOEQsR0FBRyxDQUFDb0wsSUFBaEIsRUFBc0Isa0NBQXRCLENBQWpCOztBQUNBLFVBQUlELFVBQUosRUFBZ0I7QUFDWm5RLGNBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JvSyxVQUFoQixFQUE0QixPQUE1QixFQUFxQyxVQUFTblAsQ0FBVCxFQUFZO0FBQzdDQSxXQUFDLENBQUNnRixjQUFGO0FBQ0FaLGdCQUFNLENBQUMrSyxVQUFQO0FBQ0gsU0FIRDtBQUlIOztBQUVEL0ssWUFBTSxDQUFDa0wsYUFBUDtBQUNILEtBakZROztBQW1GVDs7O0FBR0E1UCxjQUFVLEVBQUUsc0JBQVc7QUFDbkIsVUFBSXFILGFBQWEsR0FBRyxDQUFwQjtBQUNBLFVBQUlKLE1BQU0sR0FBRzNDLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdCLE1BQVosQ0FBbUJnSCxNQUFoQzs7QUFFQSxVQUFJLENBQUMzQyxHQUFHLENBQUNvTCxJQUFULEVBQWU7QUFDWDtBQUNIOztBQUVKL0gsWUFBTSxDQUFDQyxnQkFBUCxDQUF3QixRQUF4QixFQUFrQ2xELE1BQU0sQ0FBQ21MLGNBQXpDO0FBQ0EsS0EvRlE7O0FBaUdaOzs7QUFHQUEsa0JBQWMsRUFBRSx3QkFBU3ZQLENBQVQsRUFBWTtBQUMzQixVQUFJMkcsTUFBTSxHQUFHM0MsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0IsTUFBWixDQUFtQmdILE1BQWhDO0FBRUEsVUFBRzZJLEtBQUssQ0FBQzdJLE1BQUQsQ0FBUixFQUFrQjtBQUVsQixVQUFJYSxFQUFFLEdBQUd4SSxNQUFNLENBQUN5SSxZQUFQLEVBQVQ7O0FBRUEsVUFBSUQsRUFBRSxJQUFJYixNQUFOLElBQWdCM0gsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjFHLElBQWhCLEVBQXNCLGlCQUF0QixNQUE2QyxLQUFqRSxFQUF3RTtBQUN2RUUsY0FBTSxDQUFDb0IsWUFBUCxDQUFvQixVQUFwQjtBQUVBeEcsY0FBTSxDQUFDUixRQUFQLENBQWdCMEYsSUFBaEIsRUFBc0IsaUJBQXRCO0FBQ0FsRixjQUFNLENBQUNSLFFBQVAsQ0FBZ0J5RixPQUFoQixFQUF5QixpQkFBekI7QUFFQUcsY0FBTSxDQUFDcUwsWUFBUDtBQUVBLE9BUkQsTUFRTyxJQUFLakksRUFBRSxHQUFDLEdBQUosSUFBWWIsTUFBWixJQUFzQjNILE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IxRyxJQUFoQixFQUFzQixpQkFBdEIsQ0FBMUIsRUFBb0U7QUFDMUU7QUFDQUUsY0FBTSxDQUFDb0IsWUFBUCxDQUFvQixXQUFwQjtBQUVBeEcsY0FBTSxDQUFDb0UsV0FBUCxDQUFtQmMsSUFBbkIsRUFBeUIsaUJBQXpCO0FBQ0FsRixjQUFNLENBQUNvRSxXQUFQLENBQW1CYSxPQUFuQixFQUE0QixpQkFBNUI7QUFFQUcsY0FBTSxDQUFDc0wsV0FBUDtBQUNBO0FBQ0QsS0E1SFc7QUE4SFRELGdCQUFZLEVBQUUsd0JBQVc7QUFDckIsVUFBSSxDQUFDekwsR0FBRyxDQUFDb0wsSUFBVCxFQUFlO0FBQ1g7QUFDSDs7QUFFRCxVQUFJbE4sR0FBSjs7QUFFQSxVQUFJbEQsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjFHLElBQWhCLEVBQXNCLGlCQUF0QixDQUFKLEVBQThDO0FBQzFDLFlBQUlGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdCLE1BQVosQ0FBbUJXLFFBQW5CLENBQTRCNEIsR0FBNUIsWUFBMkN5TixRQUEvQyxFQUF5RDtBQUNyRHpOLGFBQUcsR0FBR3NNLFFBQVEsQ0FBQ3hLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdCLE1BQVosQ0FBbUJXLFFBQW5CLENBQTRCNEIsR0FBNUIsQ0FBZ0M0RCxJQUFoQyxDQUFxQyxJQUFyQyxFQUEyQzlCLEdBQTNDLENBQUQsQ0FBZDtBQUNILFNBRkQsTUFFTztBQUNIOUIsYUFBRyxHQUFHc00sUUFBUSxDQUFDeEssR0FBRyxDQUFDckYsT0FBSixDQUFZZ0IsTUFBWixDQUFtQlcsUUFBbkIsQ0FBNEI0QixHQUE3QixDQUFkO0FBQ0g7O0FBRUQsWUFBSUMsSUFBSjs7QUFDQSxZQUFJNkIsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0IsTUFBWixDQUFtQlcsUUFBbkIsQ0FBNEI2QixJQUE1QixZQUE0Q3dOLFFBQWhELEVBQTBEO0FBQ3REeE4sY0FBSSxHQUFHcU0sUUFBUSxDQUFDeEssR0FBRyxDQUFDckYsT0FBSixDQUFZZ0IsTUFBWixDQUFtQlcsUUFBbkIsQ0FBNEI2QixJQUE1QixDQUFpQzJELElBQWpDLENBQXNDLElBQXRDLEVBQTRDOUIsR0FBNUMsQ0FBRCxDQUFmO0FBQ0gsU0FGRCxNQUVPO0FBQ0g3QixjQUFJLEdBQUdxTSxRQUFRLENBQUN4SyxHQUFHLENBQUNyRixPQUFKLENBQVlnQixNQUFaLENBQW1CVyxRQUFuQixDQUE0QjZCLElBQTdCLENBQWY7QUFDSDs7QUFFRCxZQUFJeU4sS0FBSjs7QUFDQSxZQUFJNUwsR0FBRyxDQUFDckYsT0FBSixDQUFZZ0IsTUFBWixDQUFtQlcsUUFBbkIsQ0FBNEJzUCxLQUE1QixZQUE2Q0QsUUFBakQsRUFBMkQ7QUFDdkRDLGVBQUssR0FBR3BCLFFBQVEsQ0FBQ3hLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdCLE1BQVosQ0FBbUJXLFFBQW5CLENBQTRCc1AsS0FBNUIsQ0FBa0M5SixJQUFsQyxDQUF1QyxJQUF2QyxFQUE2QzlCLEdBQTdDLENBQUQsQ0FBaEI7QUFDSCxTQUZELE1BRU87QUFDSDRMLGVBQUssR0FBR3BCLFFBQVEsQ0FBQ3hLLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWWdCLE1BQVosQ0FBbUJXLFFBQW5CLENBQTRCc1AsS0FBN0IsQ0FBaEI7QUFDSDs7QUFFRDVRLGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ29MLElBQWYsRUFBcUIsU0FBckIsRUFBZ0NwTCxHQUFHLENBQUNyRixPQUFKLENBQVlnQixNQUFaLENBQW1COEMsTUFBbkQ7QUFDQXpELGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ29MLElBQWYsRUFBcUIsS0FBckIsRUFBNEJsTixHQUFHLEdBQUcsSUFBbEM7QUFDQWxELGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ29MLElBQWYsRUFBcUIsTUFBckIsRUFBNkJqTixJQUFJLEdBQUcsSUFBcEM7QUFDQW5ELGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ29MLElBQWYsRUFBcUIsT0FBckIsRUFBOEJRLEtBQUssR0FBRyxJQUF0QztBQUNIO0FBQ0osS0EvSlE7QUFpS1RGLGVBQVcsRUFBRSx1QkFBVztBQUNwQixVQUFJLENBQUMxTCxHQUFHLENBQUNvTCxJQUFULEVBQWU7QUFDWDtBQUNIOztBQUVELFVBQUlwUSxNQUFNLENBQUM0TCxRQUFQLENBQWdCMUcsSUFBaEIsRUFBc0IsaUJBQXRCLE1BQTZDLEtBQWpELEVBQXdEO0FBQ3BEbEYsY0FBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDb0wsSUFBZixFQUFxQixTQUFyQixFQUFnQyxFQUFoQztBQUNBcFEsY0FBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDb0wsSUFBZixFQUFxQixLQUFyQixFQUE0QixFQUE1QjtBQUNBcFEsY0FBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDb0wsSUFBZixFQUFxQixNQUFyQixFQUE2QixFQUE3QjtBQUNBcFEsY0FBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDb0wsSUFBZixFQUFxQixPQUFyQixFQUE4QixFQUE5QjtBQUNIO0FBQ0osS0E1S1E7O0FBOEtUOzs7QUFHQXBOLFVBQU0sRUFBRSxrQkFBVztBQUNmLFVBQUlvQyxNQUFNLENBQUNvQixZQUFQLENBQW9CLGNBQXBCLE1BQXdDLEtBQTVDLEVBQW1EO0FBQy9DO0FBQ0g7O0FBRUQsVUFBSXhHLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IxRyxJQUFoQixFQUFzQixxQkFBdEIsS0FBZ0RsRixNQUFNLENBQUM0TCxRQUFQLENBQWdCM0csT0FBaEIsRUFBeUIscUJBQXpCLENBQXBELEVBQXFHO0FBQ2pHRyxjQUFNLENBQUMrSyxVQUFQLENBQWtCLEtBQWxCO0FBQ0g7O0FBRUQvSyxZQUFNLENBQUN5TCxjQUFQO0FBRUE3USxZQUFNLENBQUNnRCxNQUFQLENBQWNpQyxPQUFkO0FBRUFHLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsYUFBcEI7QUFDSCxLQS9MUTs7QUFpTVQ7OztBQUdBc0ssY0FBVSxFQUFFLG9CQUFTclIsSUFBVCxFQUFlO0FBQ3ZCLFVBQUlBLElBQUosRUFBVTtBQUNOdUYsV0FBRyxDQUFDRSxJQUFKLENBQVNwQyxTQUFULEdBQXFCckQsSUFBckI7QUFDSDtBQUNKLEtBeE1ROztBQTBNVDs7O0FBR0FzUixXQUFPLEVBQUUsbUJBQVc7QUFDaEIsYUFBTy9MLEdBQUcsQ0FBQ0UsSUFBWDtBQUNILEtBL01ROztBQWlOVDs7O0FBR0E4TCxXQUFPLEVBQUUsbUJBQVc7QUFDaEIsYUFBTy9MLE9BQVA7QUFDSCxLQXROUTs7QUF3TlQ7OztBQUdBcUwsaUJBQWEsRUFBRSx5QkFBVztBQUN0QixVQUFJdEwsR0FBRyxDQUFDckYsT0FBSixDQUFZb1EsUUFBaEIsRUFBMEI7QUFDdEIsWUFBSWtCLFNBQVMsR0FBR2pSLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IzRyxPQUFoQixFQUF5QixtQkFBekIsS0FBaURqRixNQUFNLENBQUM0TCxRQUFQLENBQWdCM0csT0FBaEIsRUFBeUIsb0JBQXpCLENBQWpFO0FBQ0EsWUFBSWlNLFlBQVksR0FBR2xSLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IxRyxJQUFoQixFQUFzQixxQkFBdEIsS0FBZ0RsRixNQUFNLENBQUM0TCxRQUFQLENBQWdCM0csT0FBaEIsRUFBeUIscUJBQXpCLENBQW5FLENBRnNCLENBSXRCOztBQUNBLFlBQUlqQyxNQUFNLEdBQUdoRCxNQUFNLENBQUNrQixJQUFQLENBQVk4RCxHQUFHLENBQUNvTCxJQUFoQixFQUFzQiw4QkFBdEIsQ0FBYjs7QUFDQSxZQUFJcE4sTUFBSixFQUFZO0FBQ1IsY0FBSXZFLFNBQVMsR0FBSXlTLFlBQVksR0FBRyxRQUFILEdBQWMsS0FBM0M7QUFDQSxjQUFJQyxHQUFHLEdBQUcsSUFBSUMsT0FBSixDQUFZcE8sTUFBWixFQUFvQjtBQUMxQm9MLGlCQUFLLEVBQUVwSixHQUFHLENBQUNyRixPQUFKLENBQVlxUSxLQUFaLENBQWtCaE4sTUFEQztBQUUxQnZFLHFCQUFTLEVBQUVBLFNBRmU7QUFHMUJrSixrQkFBTSxFQUFHdUosWUFBWSxHQUFHLFlBQUgsR0FBa0IsT0FIYjtBQUkxQnZTLG1CQUFPLEVBQUUsT0FKaUI7QUFLMUJDLG9CQUFRLEVBQUUsNERBQTRESCxTQUE1RCxHQUF3RTs7OztBQUx4RCxXQUFwQixDQUFWO0FBV0F1QixnQkFBTSxDQUFDMUIsSUFBUCxDQUFZMEUsTUFBWixFQUFvQndDLEdBQXBCLENBQXdCLFNBQXhCLEVBQW1DMkwsR0FBbkM7QUFDSCxTQXBCcUIsQ0FzQnRCOzs7QUFDQSxZQUFJekgsTUFBTSxHQUFHMUosTUFBTSxDQUFDa0IsSUFBUCxDQUFZOEQsR0FBRyxDQUFDb0wsSUFBaEIsRUFBc0IsOEJBQXRCLENBQWI7O0FBQ0EsWUFBSTFHLE1BQUosRUFBWTtBQUNSLGNBQUlqTCxTQUFTLEdBQUl5UyxZQUFZLEdBQUcsUUFBSCxHQUFjLEtBQTNDO0FBQ0EsY0FBSUMsR0FBRyxHQUFHLElBQUlDLE9BQUosQ0FBWTFILE1BQVosRUFBb0I7QUFDMUIwRSxpQkFBSyxFQUFFcEosR0FBRyxDQUFDckYsT0FBSixDQUFZcVEsS0FBWixDQUFrQnRHLE1BREM7QUFFMUJqTCxxQkFBUyxFQUFFQSxTQUZlO0FBRzFCa0osa0JBQU0sRUFBR3VKLFlBQVksR0FBRyxZQUFILEdBQWtCLE9BSGI7QUFJMUJ2UyxtQkFBTyxFQUFFLE9BSmlCO0FBSzFCQyxvQkFBUSxFQUFFLDREQUE0REgsU0FBNUQsR0FBd0U7Ozs7QUFMeEQsV0FBcEIsQ0FBVjtBQVdBdUIsZ0JBQU0sQ0FBQzFCLElBQVAsQ0FBWW9MLE1BQVosRUFBb0JsRSxHQUFwQixDQUF3QixTQUF4QixFQUFtQzJMLEdBQW5DO0FBQ0gsU0F0Q3FCLENBd0N0Qjs7O0FBQ0EsWUFBSTdCLE1BQU0sR0FBR3RQLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFlBQUlkLE1BQUosRUFBWTtBQUNSLGNBQUk3USxTQUFTLEdBQUl5UyxZQUFZLEdBQUcsUUFBSCxHQUFjLEtBQTNDO0FBQ0EsY0FBSUMsR0FBRyxHQUFHLElBQUlDLE9BQUosQ0FBWTlCLE1BQVosRUFBb0I7QUFDMUJsQixpQkFBSyxFQUFHNkMsU0FBUyxHQUFHak0sR0FBRyxDQUFDckYsT0FBSixDQUFZcVEsS0FBWixDQUFrQlYsTUFBbEIsQ0FBeUJZLE1BQTVCLEdBQXFDbEwsR0FBRyxDQUFDckYsT0FBSixDQUFZcVEsS0FBWixDQUFrQlYsTUFBbEIsQ0FBeUJXLFFBRHJEO0FBRTFCeFIscUJBQVMsRUFBRUEsU0FGZTtBQUcxQmtKLGtCQUFNLEVBQUd1SixZQUFZLEdBQUcsWUFBSCxHQUFrQixPQUhiO0FBSTFCdlMsbUJBQU8sRUFBRSxPQUppQjtBQUsxQkMsb0JBQVEsRUFBRSw0REFBNERILFNBQTVELEdBQXdFOzs7O0FBTHhELFdBQXBCLENBQVY7QUFXQXVCLGdCQUFNLENBQUMxQixJQUFQLENBQVlnUixNQUFaLEVBQW9COUosR0FBcEIsQ0FBd0IsU0FBeEIsRUFBbUMyTCxHQUFuQztBQUNILFNBeERxQixDQTBEdEI7OztBQUNBLFlBQUloQixVQUFVLEdBQUduUSxNQUFNLENBQUNrQixJQUFQLENBQVk4RCxHQUFHLENBQUNvTCxJQUFoQixFQUFzQixrQ0FBdEIsQ0FBakI7O0FBQ0EsWUFBSUQsVUFBSixFQUFnQjtBQUNaLGNBQUkxUixTQUFTLEdBQUl5UyxZQUFZLEdBQUcsUUFBSCxHQUFjLEtBQTNDO0FBQ0EsY0FBSUMsR0FBRyxHQUFHLElBQUlDLE9BQUosQ0FBWWpCLFVBQVosRUFBd0I7QUFDOUIvQixpQkFBSyxFQUFHOEMsWUFBWSxHQUFHbE0sR0FBRyxDQUFDckYsT0FBSixDQUFZcVEsS0FBWixDQUFrQkcsVUFBbEIsQ0FBNkI1SCxHQUFoQyxHQUFzQ3ZELEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWXFRLEtBQVosQ0FBa0JHLFVBQWxCLENBQTZCL1EsRUFEekQ7QUFFOUJYLHFCQUFTLEVBQUVBLFNBRm1CO0FBRzlCa0osa0JBQU0sRUFBR3VKLFlBQVksR0FBRyxZQUFILEdBQWtCLE9BSFQ7QUFJOUJ2UyxtQkFBTyxFQUFFLE9BSnFCO0FBSzlCQyxvQkFBUSxFQUFFLDREQUE0REgsU0FBNUQsR0FBd0U7Ozs7QUFMcEQsV0FBeEIsQ0FBVjtBQVdBdUIsZ0JBQU0sQ0FBQzFCLElBQVAsQ0FBWTZSLFVBQVosRUFBd0IzSyxHQUF4QixDQUE0QixTQUE1QixFQUF1QzJMLEdBQXZDO0FBQ0g7QUFDSjtBQUNKLEtBeFNROztBQTBTVDs7O0FBR0FOLGtCQUFjLEVBQUUsMEJBQVc7QUFDdkIsVUFBSTdMLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWW9RLFFBQWhCLEVBQTBCO0FBQ3RCO0FBQ0EsWUFBSS9NLE1BQU0sR0FBR2hELE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFlBQUlwTixNQUFNLElBQUloRCxNQUFNLENBQUMxQixJQUFQLENBQVkwRSxNQUFaLEVBQW9Cc0MsR0FBcEIsQ0FBd0IsU0FBeEIsQ0FBZCxFQUFrRDtBQUM5Q3RGLGdCQUFNLENBQUMxQixJQUFQLENBQVkwRSxNQUFaLEVBQW9CSixHQUFwQixDQUF3QixTQUF4QixFQUFtQ3lPLE9BQW5DO0FBQ0gsU0FMcUIsQ0FPdEI7OztBQUNBLFlBQUkzSCxNQUFNLEdBQUcxSixNQUFNLENBQUNrQixJQUFQLENBQVk4RCxHQUFHLENBQUNvTCxJQUFoQixFQUFzQiw4QkFBdEIsQ0FBYjs7QUFDQSxZQUFJMUcsTUFBTSxJQUFJMUosTUFBTSxDQUFDMUIsSUFBUCxDQUFZb0wsTUFBWixFQUFvQnBFLEdBQXBCLENBQXdCLFNBQXhCLENBQWQsRUFBa0Q7QUFDOUN0RixnQkFBTSxDQUFDMUIsSUFBUCxDQUFZb0wsTUFBWixFQUFvQjlHLEdBQXBCLENBQXdCLFNBQXhCLEVBQW1DeU8sT0FBbkM7QUFDSCxTQVhxQixDQWF0Qjs7O0FBQ0EsWUFBSS9CLE1BQU0sR0FBR3RQLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFlBQUlkLE1BQU0sSUFBSXRQLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWWdSLE1BQVosRUFBb0JoSyxHQUFwQixDQUF3QixTQUF4QixDQUFkLEVBQWtEO0FBQzlDdEYsZ0JBQU0sQ0FBQzFCLElBQVAsQ0FBWWdSLE1BQVosRUFBb0IxTSxHQUFwQixDQUF3QixTQUF4QixFQUFtQ3lPLE9BQW5DO0FBQ0gsU0FqQnFCLENBbUJ0Qjs7O0FBQ0EsWUFBSWxCLFVBQVUsR0FBR25RLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLGtDQUF0QixDQUFqQjs7QUFDQSxZQUFJRCxVQUFVLElBQUluUSxNQUFNLENBQUMxQixJQUFQLENBQVk2UixVQUFaLEVBQXdCN0ssR0FBeEIsQ0FBNEIsU0FBNUIsQ0FBbEIsRUFBMEQ7QUFDdER0RixnQkFBTSxDQUFDMUIsSUFBUCxDQUFZNlIsVUFBWixFQUF3QnZOLEdBQXhCLENBQTRCLFNBQTVCLEVBQXVDeU8sT0FBdkM7QUFDSDtBQUNKO0FBQ0osS0F2VVE7O0FBeVVUOzs7QUFHQTNILFVBQU0sRUFBRSxrQkFBVztBQUNmdEUsWUFBTSxDQUFDb0IsWUFBUCxDQUFvQixRQUFwQjtBQUNILEtBOVVROztBQWdWVDs7O0FBR0E4SSxVQUFNLEVBQUUsa0JBQVc7QUFDZixVQUFJdFAsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjNHLE9BQWhCLEVBQXlCLG1CQUF6QixLQUFpRGpGLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IzRyxPQUFoQixFQUF5QixvQkFBekIsQ0FBckQsRUFBcUc7QUFDakdHLGNBQU0sQ0FBQzhLLE1BQVA7QUFDSCxPQUZELE1BRU87QUFDSDlLLGNBQU0sQ0FBQzZLLFFBQVA7QUFDSDtBQUNKLEtBelZROztBQTJWVDs7O0FBR0FBLFlBQVEsRUFBRSxvQkFBVztBQUNqQixVQUFJN0ssTUFBTSxDQUFDb0IsWUFBUCxDQUFvQixnQkFBcEIsTUFBMEMsS0FBOUMsRUFBcUQ7QUFDakQ7QUFDSDs7QUFFRHhHLFlBQU0sQ0FBQzBNLE9BQVAsQ0FBZTFILEdBQUcsQ0FBQ0UsSUFBbkIsRUFBeUJGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWW1RLGVBQXJDLEVBQXNELFlBQVc7QUFDN0QxSyxjQUFNLENBQUNvQixZQUFQLENBQW9CLGVBQXBCO0FBQ0gsT0FGRDtBQUlBeEcsWUFBTSxDQUFDUixRQUFQLENBQWdCeUYsT0FBaEIsRUFBeUIsbUJBQXpCO0FBRUEsVUFBSXFLLE1BQU0sR0FBR3RQLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWThELEdBQUcsQ0FBQ29MLElBQWhCLEVBQXNCLDhCQUF0QixDQUFiOztBQUNBLFVBQUlkLE1BQU0sSUFBSXRQLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWWdSLE1BQVosRUFBb0JoSyxHQUFwQixDQUF3QixTQUF4QixDQUFkLEVBQWtEO0FBQzlDdEYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZZ1IsTUFBWixFQUFvQjFNLEdBQXBCLENBQXdCLFNBQXhCLEVBQW1DME8sa0JBQW5DLENBQXNEdE0sR0FBRyxDQUFDckYsT0FBSixDQUFZcVEsS0FBWixDQUFrQlYsTUFBbEIsQ0FBeUJZLE1BQS9FO0FBQ0g7QUFDSixLQTdXUTs7QUErV1Q7OztBQUdBQSxVQUFNLEVBQUUsa0JBQVc7QUFDZixVQUFJOUssTUFBTSxDQUFDb0IsWUFBUCxDQUFvQixjQUFwQixNQUF3QyxLQUE1QyxFQUFtRDtBQUMvQztBQUNIOztBQUVEeEcsWUFBTSxDQUFDMk0sU0FBUCxDQUFpQjNILEdBQUcsQ0FBQ0UsSUFBckIsRUFBMkJGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWW1RLGVBQXZDLEVBQXdELFlBQVc7QUFDL0QxSyxjQUFNLENBQUNvQixZQUFQLENBQW9CLGFBQXBCO0FBQ0gsT0FGRDtBQUlBeEcsWUFBTSxDQUFDb0UsV0FBUCxDQUFtQmEsT0FBbkIsRUFBNEIsbUJBQTVCO0FBQ0FqRixZQUFNLENBQUNvRSxXQUFQLENBQW1CYSxPQUFuQixFQUE0QixvQkFBNUI7QUFFQSxVQUFJcUssTUFBTSxHQUFHdFAsTUFBTSxDQUFDa0IsSUFBUCxDQUFZOEQsR0FBRyxDQUFDb0wsSUFBaEIsRUFBc0IsOEJBQXRCLENBQWI7O0FBQ0EsVUFBSWQsTUFBTSxJQUFJdFAsTUFBTSxDQUFDMUIsSUFBUCxDQUFZZ1IsTUFBWixFQUFvQmhLLEdBQXBCLENBQXdCLFNBQXhCLENBQWQsRUFBa0Q7QUFDOUN0RixjQUFNLENBQUMxQixJQUFQLENBQVlnUixNQUFaLEVBQW9CMU0sR0FBcEIsQ0FBd0IsU0FBeEIsRUFBbUMwTyxrQkFBbkMsQ0FBc0R0TSxHQUFHLENBQUNyRixPQUFKLENBQVlxUSxLQUFaLENBQWtCVixNQUFsQixDQUF5QlcsUUFBL0U7QUFDSDtBQUNKLEtBbFlROztBQW9ZVDs7O0FBR0FFLGNBQVUsRUFBRSxvQkFBU3RGLElBQVQsRUFBZTtBQUN2QixVQUFJMEcsQ0FBQyxHQUFHLEVBQVI7QUFDQSxVQUFJcEYsS0FBSyxHQUFHLEdBQVo7O0FBRUEsVUFBSXRCLElBQUksS0FBSyxLQUFULElBQW1CN0ssTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjFHLElBQWhCLEVBQXNCLHFCQUF0QixLQUFnRGxGLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0IzRyxPQUFoQixFQUF5QixxQkFBekIsQ0FBdkUsRUFBeUg7QUFDckhHLGNBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IscUJBQXBCO0FBRUF4RyxjQUFNLENBQUNvRSxXQUFQLENBQW1CYyxJQUFuQixFQUF5QixxQkFBekI7QUFDQWxGLGNBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJhLE9BQW5CLEVBQTRCLHFCQUE1QjtBQUVBRyxjQUFNLENBQUN5TCxjQUFQO0FBQ0F6TCxjQUFNLENBQUNrTCxhQUFQOztBQUVBLFlBQUl0TCxHQUFHLENBQUNxTCxJQUFSLEVBQWM7QUFDVnJRLGdCQUFNLENBQUNxQixHQUFQLENBQVcyRCxHQUFHLENBQUNFLElBQWYsRUFBcUIsZUFBckIsRUFBc0MsRUFBdEM7QUFDQWxGLGdCQUFNLENBQUNxQixHQUFQLENBQVcyRCxHQUFHLENBQUNxTCxJQUFmLEVBQXFCLFlBQXJCLEVBQW1DLEVBQW5DO0FBQ0g7O0FBRURqTCxjQUFNLENBQUNvQixZQUFQLENBQW9CLG9CQUFwQjtBQUNILE9BZkQsTUFlTztBQUNIcEIsY0FBTSxDQUFDb0IsWUFBUCxDQUFvQixvQkFBcEI7QUFFQXhHLGNBQU0sQ0FBQ1IsUUFBUCxDQUFnQnlGLE9BQWhCLEVBQXlCLHFCQUF6QjtBQUNBakYsY0FBTSxDQUFDUixRQUFQLENBQWdCMEYsSUFBaEIsRUFBc0IscUJBQXRCO0FBRUFFLGNBQU0sQ0FBQ3lMLGNBQVA7QUFDQXpMLGNBQU0sQ0FBQ2tMLGFBQVA7O0FBR0EsWUFBSXRMLEdBQUcsQ0FBQ3FMLElBQVIsRUFBYztBQUNWLGNBQUltQixPQUFPLEdBQUdoQyxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVcyRCxHQUFHLENBQUNxTCxJQUFmLEVBQXFCLFFBQXJCLENBQUQsQ0FBdEI7QUFDQSxjQUFJb0IsT0FBTyxHQUFHakMsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXMkQsR0FBRyxDQUFDcUwsSUFBZixFQUFxQixRQUFyQixDQUFELENBQVIsR0FBMkNiLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ29MLElBQWYsRUFBcUIsUUFBckIsQ0FBRCxDQUFqRTtBQUNBcFEsZ0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ0UsSUFBZixFQUFxQixlQUFyQixFQUFzQ3NNLE9BQU8sR0FBRyxJQUFoRDtBQUNBeFIsZ0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzJELEdBQUcsQ0FBQ3FMLElBQWYsRUFBcUIsWUFBckIsRUFBbUMsTUFBTW9CLE9BQU4sR0FBZ0IsSUFBbkQ7QUFDSDs7QUFFRHJNLGNBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsbUJBQXBCO0FBQ0g7QUFDSixLQTdhUTs7QUErYVQ7OztBQUdBQSxnQkFBWSxFQUFFLHNCQUFTakMsSUFBVCxFQUFlO0FBQ3pCO0FBQ0EsV0FBSyxJQUFJa0MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXaEUsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlDLEtBQUssR0FBRzFCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxDQUFaOztBQUNBLFlBQUlDLEtBQUssQ0FBQ25DLElBQU4sSUFBY0EsSUFBbEIsRUFBd0I7QUFDcEIsY0FBSW1DLEtBQUssQ0FBQ0MsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ25CLGdCQUFJRCxLQUFLLENBQUNFLEtBQU4sSUFBZSxLQUFuQixFQUEwQjtBQUN0QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLENBQVA7QUFDSDtBQUNKLFdBTEQsTUFLTztBQUNILG1CQUFPMEIsS0FBSyxDQUFDRyxPQUFOLENBQWNDLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUI5QixHQUF6QixDQUFQO0FBQ0g7QUFDSjtBQUNKO0FBQ0osS0FqY1E7QUFtY1RlLFlBQVEsRUFBRSxrQkFBU3hCLElBQVQsRUFBZXNDLE9BQWYsRUFBd0JGLEdBQXhCLEVBQTZCO0FBQ25DM0IsU0FBRyxDQUFDUyxNQUFKLENBQVdzQixJQUFYLENBQWdCO0FBQ1p4QyxZQUFJLEVBQUVBLElBRE07QUFFWnNDLGVBQU8sRUFBRUEsT0FGRztBQUdaRixXQUFHLEVBQUVBLEdBSE87QUFJWkMsYUFBSyxFQUFFO0FBSkssT0FBaEI7QUFPQSxhQUFPNUIsR0FBUDtBQUNIO0FBNWNRLEdBQWIsQ0F2Q3lDLENBc2Z6QztBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQUEsS0FBRyxDQUFDZ0MsV0FBSixHQUFrQixVQUFTckgsT0FBVCxFQUFrQjtBQUNoQ3dGLGtCQUFjLEdBQUd4RixPQUFqQjtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUFxRixLQUFHLENBQUNoQyxNQUFKLEdBQWEsWUFBVztBQUNwQixXQUFPb0MsTUFBTSxDQUFDcEMsTUFBUCxDQUFjdkQsSUFBZCxDQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQXVGLEtBQUcsQ0FBQ3RFLFVBQUosR0FBaUIsWUFBVztBQUN4QixXQUFPMEUsTUFBTSxDQUFDMUUsVUFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQXNFLEtBQUcsQ0FBQ3lMLFlBQUosR0FBbUIsWUFBVztBQUMxQixXQUFPckwsTUFBTSxDQUFDcUwsWUFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQXpMLEtBQUcsQ0FBQzBMLFdBQUosR0FBa0IsWUFBVztBQUN6QixXQUFPdEwsTUFBTSxDQUFDc0wsV0FBUCxFQUFQO0FBQ0gsR0FGRDtBQUlIOzs7OztBQUdBMUwsS0FBRyxDQUFDME0sYUFBSixHQUFvQixZQUFXO0FBQzlCdE0sVUFBTSxDQUFDc0wsV0FBUDtBQUNBckksVUFBTSxDQUFDc0osbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUN2TSxNQUFNLENBQUNtTCxjQUE1QztBQUNBLEdBSEQ7QUFLRzs7Ozs7O0FBSUF2TCxLQUFHLENBQUMwRSxNQUFKLEdBQWEsWUFBVztBQUNwQixXQUFPdEUsTUFBTSxDQUFDc0UsTUFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQTFFLEtBQUcsQ0FBQzhMLFVBQUosR0FBaUIsVUFBU3JSLElBQVQsRUFBZTtBQUM1QixXQUFPMkYsTUFBTSxDQUFDMEwsVUFBUCxDQUFrQnJSLElBQWxCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBdUYsS0FBRyxDQUFDc0ssTUFBSixHQUFhLFlBQVc7QUFDcEIsV0FBT2xLLE1BQU0sQ0FBQ2tLLE1BQVAsRUFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUF0SyxLQUFHLENBQUNpTCxRQUFKLEdBQWUsWUFBVztBQUN0QixXQUFPN0ssTUFBTSxDQUFDNkssUUFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQWpMLEtBQUcsQ0FBQ2tMLE1BQUosR0FBYSxZQUFXO0FBQ3BCLFdBQU85SyxNQUFNLENBQUM4SyxNQUFQLEVBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBbEwsS0FBRyxDQUFDbUwsVUFBSixHQUFpQixZQUFXO0FBQ3hCLFdBQU8vSyxNQUFNLENBQUMrSyxVQUFQLENBQWtCLElBQWxCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBbkwsS0FBRyxDQUFDNE0sWUFBSixHQUFtQixZQUFXO0FBQzFCLFdBQU94TSxNQUFNLENBQUMrSyxVQUFQLENBQWtCLEtBQWxCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7OztBQUlBbkwsS0FBRyxDQUFDK0wsT0FBSixHQUFjLFlBQVc7QUFDckIsV0FBTzNMLE1BQU0sQ0FBQzJMLE9BQVAsRUFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUEvTCxLQUFHLENBQUNnTSxPQUFKLEdBQWMsWUFBVztBQUNyQixXQUFPNUwsTUFBTSxDQUFDNEwsT0FBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBaE0sS0FBRyxDQUFDNUYsRUFBSixHQUFTLFVBQVNtRixJQUFULEVBQWVzQyxPQUFmLEVBQXdCO0FBQzdCLFdBQU96QixNQUFNLENBQUNXLFFBQVAsQ0FBZ0J4QixJQUFoQixFQUFzQnNDLE9BQXRCLENBQVA7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0E3QixLQUFHLENBQUMyQixHQUFKLEdBQVUsVUFBU3BDLElBQVQsRUFBZXNDLE9BQWYsRUFBd0I7QUFDOUIsV0FBT3pCLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQnhCLElBQWhCLEVBQXNCc0MsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNILEdBRkQsQ0E1bkJ5QyxDQWdvQnpDOzs7QUFDQXpCLFFBQU0sQ0FBQ0MsU0FBUCxDQUFpQjRCLEtBQWpCLENBQXVCakMsR0FBdkIsRUFBNEIsQ0FBQ3JGLE9BQUQsQ0FBNUI7QUFFQSxTQUFPcUYsR0FBUDtBQUNILENBcG9CRCxDLENBc29CQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPTixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQjlFLFNBQWpCO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0FDM29CWTs7QUFDYixJQUFJZ1MsV0FBVyxHQUFHLFNBQWRBLFdBQWMsQ0FBUzlNLFNBQVQsRUFBb0JwRixPQUFwQixFQUE2QjtBQUMzQztBQUNBLE1BQUlxRixHQUFHLEdBQUcsSUFBVjtBQUNBLE1BQUl0RCxJQUFJLEdBQUcsS0FBWCxDQUgyQyxDQUszQzs7QUFDQSxNQUFJdUQsT0FBTyxHQUFHakYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXbUMsU0FBWCxDQUFkO0FBQ0EsTUFBSUcsSUFBSSxHQUFHbEYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLE1BQVgsQ0FBWDs7QUFFQSxNQUFJLENBQUNxQyxPQUFMLEVBQWM7QUFDVjtBQUNILEdBWDBDLENBYTNDOzs7QUFDQSxNQUFJRSxjQUFjLEdBQUc7QUFDakJ3QyxVQUFNLEVBQUUsR0FEUztBQUVqQndFLFNBQUssRUFBRSxHQUZVO0FBR2pCMkYsZUFBVyxFQUFFO0FBSEksR0FBckIsQ0FkMkMsQ0FvQjNDO0FBQ0E7QUFDQTs7QUFFQSxNQUFJMU0sTUFBTSxHQUFHO0FBQ1Q7Ozs7QUFJQUMsYUFBUyxFQUFFLG1CQUFTMUYsT0FBVCxFQUFrQjtBQUN6QixVQUFJSyxNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCSyxHQUFyQixDQUF5QixXQUF6QixDQUFKLEVBQTJDO0FBQ3ZDTixXQUFHLEdBQUdoRixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCckMsR0FBckIsQ0FBeUIsV0FBekIsQ0FBTjtBQUNILE9BRkQsTUFFTztBQUNIO0FBQ0F3QyxjQUFNLENBQUMxRCxJQUFQLENBQVkvQixPQUFaLEVBRkcsQ0FJSDs7QUFDQXlGLGNBQU0sQ0FBQ0csS0FBUDtBQUVBdkYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQk8sR0FBckIsQ0FBeUIsV0FBekIsRUFBc0NSLEdBQXRDO0FBQ0g7O0FBRUQsYUFBT0EsR0FBUDtBQUNILEtBbkJROztBQXFCVDs7OztBQUlBdEQsUUFBSSxFQUFFLGNBQVMvQixPQUFULEVBQWtCO0FBQ3BCcUYsU0FBRyxDQUFDUyxNQUFKLEdBQWEsRUFBYixDQURvQixDQUdwQjs7QUFDQVQsU0FBRyxDQUFDckYsT0FBSixHQUFjSyxNQUFNLENBQUM4RixVQUFQLENBQWtCLEVBQWxCLEVBQXNCWCxjQUF0QixFQUFzQ3hGLE9BQXRDLENBQWQ7QUFDSCxLQTlCUTtBQWdDVDRGLFNBQUssRUFBRSxpQkFBVztBQUNkO0FBQ0EsVUFBSXdNLFNBQVMsQ0FBQ0MsU0FBVixDQUFvQkMsS0FBcEIsQ0FBMEIsbUJBQTFCLENBQUosRUFBb0Q7QUFDaEQ1SixjQUFNLENBQUNDLGdCQUFQLENBQXdCLFVBQXhCLEVBQW9DLFlBQVc7QUFDM0NsRCxnQkFBTSxDQUFDOE0sTUFBUDtBQUNILFNBRkQ7QUFJQTdKLGNBQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsYUFBeEIsRUFBdUMsWUFBVztBQUM5Q2xELGdCQUFNLENBQUM4TSxNQUFQO0FBQ0gsU0FGRDtBQUlBN0osY0FBTSxDQUFDQyxnQkFBUCxDQUF3QixZQUF4QixFQUFzQyxZQUFXO0FBQzdDbEQsZ0JBQU0sQ0FBQzhNLE1BQVA7QUFDSCxTQUZEO0FBR0gsT0FaRCxNQVlPO0FBQ0g3SixjQUFNLENBQUNDLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLFlBQVc7QUFDekNsRCxnQkFBTSxDQUFDOE0sTUFBUDtBQUNILFNBRkQ7QUFHSCxPQWxCYSxDQW9CZDs7O0FBQ0FsUyxZQUFNLENBQUMrRixRQUFQLENBQWdCZCxPQUFoQixFQUF5QixPQUF6QixFQUFrQ0csTUFBTSxDQUFDd0QsTUFBekM7QUFDSCxLQXREUTs7QUF3RFQ7OztBQUdBc0osVUFBTSxFQUFFLGtCQUFXO0FBQ2YsVUFBSUMsR0FBRyxHQUFHOUosTUFBTSxDQUFDK0osV0FBakIsQ0FEZSxDQUNlOztBQUM5QixVQUFJRCxHQUFHLEdBQUduTixHQUFHLENBQUNyRixPQUFKLENBQVlnSSxNQUF0QixFQUE4QjtBQUMxQjNILGNBQU0sQ0FBQ1IsUUFBUCxDQUFnQjBGLElBQWhCLEVBQXNCRixHQUFHLENBQUNyRixPQUFKLENBQVltUyxXQUFsQztBQUNILE9BRkQsTUFFTztBQUNIOVIsY0FBTSxDQUFDb0UsV0FBUCxDQUFtQmMsSUFBbkIsRUFBeUJGLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWW1TLFdBQXJDO0FBQ0g7QUFDSixLQWxFUTs7QUFvRVQ7OztBQUdBbEosVUFBTSxFQUFFLGdCQUFTNUgsQ0FBVCxFQUFZO0FBQ2hCQSxPQUFDLENBQUNnRixjQUFGO0FBRUFoRyxZQUFNLENBQUN3SyxTQUFQLENBQWlCLENBQWpCLEVBQW9CeEYsR0FBRyxDQUFDckYsT0FBSixDQUFZd00sS0FBaEM7QUFDSCxLQTNFUTs7QUE4RVQ7OztBQUdBM0YsZ0JBQVksRUFBRSxzQkFBU2pDLElBQVQsRUFBZW1FLElBQWYsRUFBcUI7QUFDL0IsV0FBSyxJQUFJakMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXaEUsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUlDLEtBQUssR0FBRzFCLEdBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxDQUFaOztBQUNBLFlBQUlDLEtBQUssQ0FBQ25DLElBQU4sSUFBY0EsSUFBbEIsRUFBd0I7QUFDcEIsY0FBSW1DLEtBQUssQ0FBQ0MsR0FBTixJQUFhLElBQWpCLEVBQXVCO0FBQ25CLGdCQUFJRCxLQUFLLENBQUNFLEtBQU4sSUFBZSxLQUFuQixFQUEwQjtBQUN0QjVCLGlCQUFHLENBQUNTLE1BQUosQ0FBV2dCLENBQVgsRUFBY0csS0FBZCxHQUFzQixJQUF0QjtBQUNBLHFCQUFPRixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLEVBQThCMEQsSUFBOUIsQ0FBUDtBQUNIO0FBQ0osV0FMRCxNQUtPO0FBQ0osbUJBQU9oQyxLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLEVBQThCMEQsSUFBOUIsQ0FBUDtBQUNGO0FBQ0o7QUFDSjtBQUNKLEtBL0ZRO0FBaUdUM0MsWUFBUSxFQUFFLGtCQUFTeEIsSUFBVCxFQUFlc0MsT0FBZixFQUF3QkYsR0FBeEIsRUFBNkI7QUFDbkMzQixTQUFHLENBQUNTLE1BQUosQ0FBV3NCLElBQVgsQ0FBZ0I7QUFDWnhDLFlBQUksRUFBRUEsSUFETTtBQUVac0MsZUFBTyxFQUFFQSxPQUZHO0FBR1pGLFdBQUcsRUFBRUEsR0FITztBQUlaQyxhQUFLLEVBQUU7QUFKSyxPQUFoQjtBQU1IO0FBeEdRLEdBQWIsQ0F4QjJDLENBbUkzQztBQUNBO0FBQ0E7O0FBRUE7Ozs7QUFJQTVCLEtBQUcsQ0FBQ2dDLFdBQUosR0FBa0IsVUFBU3JILE9BQVQsRUFBa0I7QUFDaEN3RixrQkFBYyxHQUFHeEYsT0FBakI7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0FxRixLQUFHLENBQUM1RixFQUFKLEdBQVMsVUFBU21GLElBQVQsRUFBZXNDLE9BQWYsRUFBd0I7QUFDN0IsV0FBT3pCLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQnhCLElBQWhCLEVBQXNCc0MsT0FBdEIsQ0FBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7O0FBSUE3QixLQUFHLENBQUMyQixHQUFKLEdBQVUsVUFBU3BDLElBQVQsRUFBZXNDLE9BQWYsRUFBd0I7QUFDOUIsV0FBT3pCLE1BQU0sQ0FBQ1csUUFBUCxDQUFnQnhCLElBQWhCLEVBQXNCc0MsT0FBdEIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNILEdBRkQsQ0ExSjJDLENBOEozQztBQUNBO0FBQ0E7QUFFQTs7O0FBQ0F6QixRQUFNLENBQUNDLFNBQVAsQ0FBaUI0QixLQUFqQixDQUF1QmpDLEdBQXZCLEVBQTRCLENBQUNyRixPQUFELENBQTVCLEVBbksyQyxDQXFLM0M7O0FBQ0ErQixNQUFJLEdBQUcsSUFBUCxDQXRLMkMsQ0F3SzNDOztBQUNBLFNBQU9zRCxHQUFQO0FBQ0gsQ0ExS0QsQyxDQTRLQTs7O0FBQ0EsSUFBSSxTQUFpQyxPQUFPTixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQmtOLFdBQWpCO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0NDOUtEOztBQUNBLElBQUlRLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVN0TixTQUFULEVBQW9CcEYsT0FBcEIsRUFBNkI7QUFDeEM7QUFDQSxNQUFJcUYsR0FBRyxHQUFHLElBQVY7QUFDQSxNQUFJdEQsSUFBSSxHQUFHLEtBQVgsQ0FId0MsQ0FLeEM7O0FBQ0EsTUFBSXVELE9BQU8sR0FBR2pGLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV21DLFNBQVgsQ0FBZDtBQUNBLE1BQUlHLElBQUksR0FBR2xGLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxNQUFYLENBQVg7O0FBRUEsTUFBSSxDQUFDcUMsT0FBTCxFQUFjO0FBQ1Y7QUFDSCxHQVh1QyxDQWF4Qzs7O0FBQ0EsTUFBSUUsY0FBYyxHQUFHO0FBQ2pCbU4sZ0JBQVksRUFBRSxFQURHO0FBRWpCQyxlQUFXLEVBQUU7QUFGSSxHQUFyQixDQWR3QyxDQW1CeEM7QUFDQTtBQUNBOztBQUVBLE1BQUluTixNQUFNLEdBQUc7QUFDVDs7O0FBSUFDLGFBQVMsRUFBRSxtQkFBUzFGLE9BQVQsRUFBa0I7QUFDekIsVUFBSUssTUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQkssR0FBckIsQ0FBeUIsUUFBekIsQ0FBSixFQUF3QztBQUNwQ04sV0FBRyxHQUFHaEYsTUFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQnJDLEdBQXJCLENBQXlCLFFBQXpCLENBQU47QUFDSCxPQUZELE1BRU87QUFDSDtBQUNBd0MsY0FBTSxDQUFDMUQsSUFBUCxDQUFZL0IsT0FBWixFQUZHLENBSUg7O0FBQ0F5RixjQUFNLENBQUNHLEtBQVA7QUFFQXZGLGNBQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJPLEdBQXJCLENBQXlCLFFBQXpCLEVBQW1DUixHQUFuQztBQUNIOztBQUVELGFBQU9BLEdBQVA7QUFDSCxLQW5CUTs7QUFxQlQ7OztBQUdBdEQsUUFBSSxFQUFFLGNBQVMvQixPQUFULEVBQWtCO0FBQ3BCcUYsU0FBRyxDQUFDQyxPQUFKLEdBQWNBLE9BQWQ7QUFDQUQsU0FBRyxDQUFDUyxNQUFKLEdBQWEsRUFBYixDQUZvQixDQUlwQjs7QUFDQVQsU0FBRyxDQUFDckYsT0FBSixHQUFjSyxNQUFNLENBQUM4RixVQUFQLENBQWtCLEVBQWxCLEVBQXNCWCxjQUF0QixFQUFzQ3hGLE9BQXRDLENBQWQ7QUFFQXFGLFNBQUcsQ0FBQy9ELE1BQUosR0FBYWpCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV29DLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWXNCLE1BQXZCLENBQWI7QUFDQStELFNBQUcsQ0FBQ3VOLFdBQUosR0FBa0J2TixHQUFHLENBQUNyRixPQUFKLENBQVk0UyxXQUE5QjtBQUNBdk4sU0FBRyxDQUFDc04sWUFBSixHQUFtQnROLEdBQUcsQ0FBQ3JGLE9BQUosQ0FBWTJTLFlBQS9CO0FBRUF0TixTQUFHLENBQUM5QyxLQUFKLEdBQVlsQyxNQUFNLENBQUM0SyxVQUFQLENBQWtCNUYsR0FBRyxDQUFDL0QsTUFBdEIsRUFBOEIrRCxHQUFHLENBQUN1TixXQUFsQyxJQUFpRCxJQUFqRCxHQUF3RCxLQUFwRTtBQUNILEtBcENROztBQXNDVDs7O0FBR0FoTixTQUFLLEVBQUUsaUJBQVc7QUFDZHZGLFlBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JkLE9BQWhCLEVBQXlCLFNBQXpCLEVBQW9DRyxNQUFNLENBQUNrSyxNQUEzQztBQUNILEtBM0NROztBQTZDVDs7O0FBR0FBLFVBQU0sRUFBRSxnQkFBU3RPLENBQVQsRUFBWTtBQUNoQm9FLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsY0FBcEI7O0FBRUEsVUFBSXhCLEdBQUcsQ0FBQzlDLEtBQUosSUFBYSxLQUFqQixFQUF3QjtBQUNwQmtELGNBQU0sQ0FBQ29OLFFBQVA7QUFDSCxPQUZELE1BRU87QUFDSHBOLGNBQU0sQ0FBQ3FOLFNBQVA7QUFDSDs7QUFFRHJOLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsYUFBcEI7QUFFQXhGLE9BQUMsQ0FBQ2dGLGNBQUY7QUFFQSxhQUFPaEIsR0FBUDtBQUNILEtBOURROztBQWdFVDs7O0FBR0F3TixZQUFRLEVBQUUsb0JBQVc7QUFDakJwTixZQUFNLENBQUNvQixZQUFQLENBQW9CLFVBQXBCO0FBRUF4RyxZQUFNLENBQUNSLFFBQVAsQ0FBZ0J3RixHQUFHLENBQUMvRCxNQUFwQixFQUE0QitELEdBQUcsQ0FBQ3VOLFdBQWhDOztBQUVBLFVBQUl2TixHQUFHLENBQUNzTixZQUFSLEVBQXNCO0FBQ2xCdFMsY0FBTSxDQUFDUixRQUFQLENBQWdCeUYsT0FBaEIsRUFBeUJELEdBQUcsQ0FBQ3NOLFlBQTdCO0FBQ0g7O0FBRUR0TixTQUFHLENBQUM5QyxLQUFKLEdBQVksSUFBWjtBQUVBa0QsWUFBTSxDQUFDb0IsWUFBUCxDQUFvQixTQUFwQjtBQUVBcEIsWUFBTSxDQUFDb0IsWUFBUCxDQUFvQixRQUFwQjtBQUVBLGFBQU94QixHQUFQO0FBQ0gsS0FuRlE7O0FBcUZUOzs7QUFHQXlOLGFBQVMsRUFBRSxxQkFBVztBQUNsQnJOLFlBQU0sQ0FBQ29CLFlBQVAsQ0FBb0IsV0FBcEI7QUFFQXhHLFlBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJZLEdBQUcsQ0FBQy9ELE1BQXZCLEVBQStCK0QsR0FBRyxDQUFDdU4sV0FBbkM7O0FBRUEsVUFBSXZOLEdBQUcsQ0FBQ3NOLFlBQVIsRUFBc0I7QUFDbEJ0UyxjQUFNLENBQUNvRSxXQUFQLENBQW1CYSxPQUFuQixFQUE0QkQsR0FBRyxDQUFDc04sWUFBaEM7QUFDSDs7QUFFRHROLFNBQUcsQ0FBQzlDLEtBQUosR0FBWSxLQUFaO0FBRUFrRCxZQUFNLENBQUNvQixZQUFQLENBQW9CLFVBQXBCO0FBRUFwQixZQUFNLENBQUNvQixZQUFQLENBQW9CLFFBQXBCO0FBRUEsYUFBT3hCLEdBQVA7QUFDSCxLQXhHUTs7QUEwR1Q7OztBQUdBd0IsZ0JBQVksRUFBRSxzQkFBU2pDLElBQVQsRUFBZTtBQUN6QixXQUFLLElBQUlrQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHekIsR0FBRyxDQUFDUyxNQUFKLENBQVdoRSxNQUEvQixFQUF1Q2dGLENBQUMsRUFBeEMsRUFBNEM7QUFDeEMsWUFBSUMsS0FBSyxHQUFHMUIsR0FBRyxDQUFDUyxNQUFKLENBQVdnQixDQUFYLENBQVo7O0FBRUEsWUFBSUMsS0FBSyxDQUFDbkMsSUFBTixJQUFjQSxJQUFsQixFQUF3QjtBQUNwQixjQUFJbUMsS0FBSyxDQUFDQyxHQUFOLElBQWEsSUFBakIsRUFBdUI7QUFDbkIsZ0JBQUlELEtBQUssQ0FBQ0UsS0FBTixJQUFlLEtBQW5CLEVBQTBCO0FBQ3RCNUIsaUJBQUcsQ0FBQ1MsTUFBSixDQUFXZ0IsQ0FBWCxFQUFjRyxLQUFkLEdBQXNCLElBQXRCO0FBQ0EscUJBQU9GLEtBQUssQ0FBQ0csT0FBTixDQUFjQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCOUIsR0FBekIsQ0FBUDtBQUNIO0FBQ0osV0FMRCxNQUtPO0FBQ0gsbUJBQU8wQixLQUFLLENBQUNHLE9BQU4sQ0FBY0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QjlCLEdBQXpCLENBQVA7QUFDSDtBQUNKO0FBQ0o7QUFDSixLQTVIUTtBQThIVGUsWUFBUSxFQUFFLGtCQUFTeEIsSUFBVCxFQUFlc0MsT0FBZixFQUF3QkYsR0FBeEIsRUFBNkI7QUFDbkMzQixTQUFHLENBQUNTLE1BQUosQ0FBV3NCLElBQVgsQ0FBZ0I7QUFDWnhDLFlBQUksRUFBRUEsSUFETTtBQUVac0MsZUFBTyxFQUFFQSxPQUZHO0FBR1pGLFdBQUcsRUFBRUEsR0FITztBQUlaQyxhQUFLLEVBQUU7QUFKSyxPQUFoQjtBQU9BLGFBQU81QixHQUFQO0FBQ0g7QUF2SVEsR0FBYixDQXZCd0MsQ0FpS3hDO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBQSxLQUFHLENBQUNnQyxXQUFKLEdBQWtCLFVBQVNySCxPQUFULEVBQWtCO0FBQ2hDd0Ysa0JBQWMsR0FBR3hGLE9BQWpCO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBcUYsS0FBRyxDQUFDME4sUUFBSixHQUFlLFlBQVc7QUFDdEIsV0FBTzFOLEdBQUcsQ0FBQzlDLEtBQVg7QUFDSCxHQUZEO0FBSUE7Ozs7O0FBR0E4QyxLQUFHLENBQUNzSyxNQUFKLEdBQWEsWUFBVztBQUNwQixXQUFPbEssTUFBTSxDQUFDa0ssTUFBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7OztBQUdBdEssS0FBRyxDQUFDd04sUUFBSixHQUFlLFlBQVc7QUFDdEIsV0FBT3BOLE1BQU0sQ0FBQ29OLFFBQVAsRUFBUDtBQUNILEdBRkQ7QUFJQTs7Ozs7QUFHQXhOLEtBQUcsQ0FBQ3lOLFNBQUosR0FBZ0IsWUFBVztBQUN2QixXQUFPck4sTUFBTSxDQUFDcU4sU0FBUCxFQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQXpOLEtBQUcsQ0FBQzVGLEVBQUosR0FBUyxVQUFTbUYsSUFBVCxFQUFlc0MsT0FBZixFQUF3QjtBQUM3QixXQUFPekIsTUFBTSxDQUFDVyxRQUFQLENBQWdCeEIsSUFBaEIsRUFBc0JzQyxPQUF0QixDQUFQO0FBQ0gsR0FGRDtBQUlBOzs7Ozs7QUFJQTdCLEtBQUcsQ0FBQzJCLEdBQUosR0FBVSxVQUFTcEMsSUFBVCxFQUFlc0MsT0FBZixFQUF3QjtBQUM5QixXQUFPekIsTUFBTSxDQUFDVyxRQUFQLENBQWdCeEIsSUFBaEIsRUFBc0JzQyxPQUF0QixFQUErQixJQUEvQixDQUFQO0FBQ0gsR0FGRCxDQXJOd0MsQ0F5TnhDOzs7QUFDQXpCLFFBQU0sQ0FBQ0MsU0FBUCxDQUFpQjRCLEtBQWpCLENBQXVCakMsR0FBdkIsRUFBNEIsQ0FBQ3JGLE9BQUQsQ0FBNUI7QUFFQSxTQUFPcUYsR0FBUDtBQUNILENBN05ELEMsQ0ErTkE7OztBQUNBLElBQUksU0FBaUMsT0FBT04sTUFBTSxDQUFDQyxPQUFkLEtBQTBCLFdBQS9ELEVBQTRFO0FBQ3hFRCxRQUFNLENBQUNDLE9BQVAsR0FBaUIwTixRQUFqQjtBQUNILEM7Ozs7Ozs7Ozs7OztBQ3JPWTtBQUNiOzs7QUFJQTs7QUFDQTs7Ozs7OztBQUlBLElBQUksQ0FBQ00sT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUF2QixFQUFnQztBQUMvQkYsU0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixHQUE0QkYsT0FBTyxDQUFDQyxTQUFSLENBQWtCRSxpQkFBbEIsSUFBdUNILE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkcscUJBQXJGO0FBQ0E7QUFFRDs7Ozs7O0FBSUEsSUFBSSxDQUFDSixPQUFPLENBQUNDLFNBQVIsQ0FBa0JwUyxPQUF2QixFQUFnQztBQUMvQixNQUFJLENBQUNtUyxPQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQXZCLEVBQWdDO0FBQy9CRixXQUFPLENBQUNDLFNBQVIsQ0FBa0JDLE9BQWxCLEdBQTRCRixPQUFPLENBQUNDLFNBQVIsQ0FBa0JFLGlCQUFsQixJQUF1Q0gsT0FBTyxDQUFDQyxTQUFSLENBQWtCRyxxQkFBckY7QUFDQTs7QUFDREosU0FBTyxDQUFDQyxTQUFSLENBQWtCcFMsT0FBbEIsR0FBNEIsVUFBVXdTLENBQVYsRUFBYTtBQUN4QyxRQUFJNVUsRUFBRSxHQUFHLElBQVQ7QUFDQSxRQUFJNlUsUUFBUSxHQUFHLElBQWY7QUFDQSxRQUFJLENBQUN2USxRQUFRLENBQUN3USxlQUFULENBQXlCL0YsUUFBekIsQ0FBa0MvTyxFQUFsQyxDQUFMLEVBQTRDLE9BQU8sSUFBUDs7QUFDNUMsT0FBRztBQUNGLFVBQUk2VSxRQUFRLENBQUNKLE9BQVQsQ0FBaUJHLENBQWpCLENBQUosRUFBeUIsT0FBT0MsUUFBUDtBQUN6QkEsY0FBUSxHQUFHQSxRQUFRLENBQUNFLGFBQXBCO0FBQ0EsS0FIRCxRQUdTRixRQUFRLEtBQUssSUFIdEI7O0FBSUEsV0FBTyxJQUFQO0FBQ0EsR0FURDtBQVVBO0FBRUQ7Ozs7Ozs7O0FBTUEsQ0FBQyxVQUFVRyxJQUFWLEVBQWdCO0FBQ2hCLE9BQUssSUFBSTNNLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcyTSxJQUFJLENBQUMzUixNQUF6QixFQUFpQ2dGLENBQUMsRUFBbEMsRUFBc0M7QUFDckMsUUFBSSxDQUFDNEIsTUFBTSxDQUFDK0ssSUFBSSxDQUFDM00sQ0FBRCxDQUFMLENBQVAsSUFBb0IsWUFBWTRCLE1BQU0sQ0FBQytLLElBQUksQ0FBQzNNLENBQUQsQ0FBTCxDQUFOLENBQWdCbU0sU0FBcEQsRUFBK0Q7O0FBQy9EdkssVUFBTSxDQUFDK0ssSUFBSSxDQUFDM00sQ0FBRCxDQUFMLENBQU4sQ0FBZ0JtTSxTQUFoQixDQUEwQjVQLE1BQTFCLEdBQW1DLFlBQVk7QUFDOUMsV0FBSzhMLFVBQUwsQ0FBZ0J1RSxXQUFoQixDQUE0QixJQUE1QjtBQUNBLEtBRkQ7QUFHQTtBQUNELENBUEQsRUFPRyxDQUFDLFNBQUQsRUFBWSxlQUFaLEVBQTZCLGNBQTdCLENBUEgsRSxDQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0MsYUFBVztBQUNSLE1BQUlDLFFBQVEsR0FBRyxDQUFmO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLENBQUMsUUFBRCxFQUFXLEtBQVgsQ0FBZDs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdELE9BQU8sQ0FBQzlSLE1BQVosSUFBc0IsQ0FBQzRHLE1BQU0sQ0FBQ29MLHFCQUE5QyxFQUFxRSxFQUFFRCxDQUF2RSxFQUEwRTtBQUN0RW5MLFVBQU0sQ0FBQ29MLHFCQUFQLEdBQStCcEwsTUFBTSxDQUFDa0wsT0FBTyxDQUFDQyxDQUFELENBQVAsR0FBYSx1QkFBZCxDQUFyQztBQUNBbkwsVUFBTSxDQUFDcUwsb0JBQVAsR0FDSXJMLE1BQU0sQ0FBQ2tMLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFQLEdBQWEsc0JBQWQsQ0FBTixJQUErQ25MLE1BQU0sQ0FBQ2tMLE9BQU8sQ0FBQ0MsQ0FBRCxDQUFQLEdBQWEsNkJBQWQsQ0FEekQ7QUFFSDs7QUFFRCxNQUFJLENBQUNuTCxNQUFNLENBQUNvTCxxQkFBWixFQUNJcEwsTUFBTSxDQUFDb0wscUJBQVAsR0FBK0IsVUFBU0UsUUFBVCxFQUFtQjtBQUM5QyxRQUFJQyxRQUFRLEdBQUcsSUFBSW5HLElBQUosR0FBV0MsT0FBWCxFQUFmO0FBQ0EsUUFBSW1HLFVBQVUsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLE1BQU1ILFFBQVEsR0FBR04sUUFBakIsQ0FBWixDQUFqQjtBQUNBLFFBQUl6RCxFQUFFLEdBQUd4SCxNQUFNLENBQUNvRCxVQUFQLENBQWtCLFlBQVc7QUFDbENrSSxjQUFRLENBQUNDLFFBQVEsR0FBR0MsVUFBWixDQUFSO0FBQ0gsS0FGUSxFQUVOQSxVQUZNLENBQVQ7QUFHQVAsWUFBUSxHQUFHTSxRQUFRLEdBQUdDLFVBQXRCO0FBQ0EsV0FBT2hFLEVBQVA7QUFDSCxHQVJEO0FBVUosTUFBSSxDQUFDeEgsTUFBTSxDQUFDcUwsb0JBQVosRUFDSXJMLE1BQU0sQ0FBQ3FMLG9CQUFQLEdBQThCLFVBQVM3RCxFQUFULEVBQWE7QUFDdkN2RSxnQkFBWSxDQUFDdUUsRUFBRCxDQUFaO0FBQ0gsR0FGRDtBQUdQLENBeEJBLEdBQUQsQyxDQTBCQTs7O0FBQ0EsQ0FBQyxVQUFTbUUsR0FBVCxFQUFjO0FBQ1hBLEtBQUcsQ0FBQ0MsT0FBSixDQUFZLFVBQVM5SSxJQUFULEVBQWU7QUFDdkIsUUFBSUEsSUFBSSxDQUFDK0ksY0FBTCxDQUFvQixTQUFwQixDQUFKLEVBQW9DO0FBQ2hDO0FBQ0g7O0FBQ0RDLFVBQU0sQ0FBQ0MsY0FBUCxDQUFzQmpKLElBQXRCLEVBQTRCLFNBQTVCLEVBQXVDO0FBQ25Da0osa0JBQVksRUFBRSxJQURxQjtBQUVuQ0MsZ0JBQVUsRUFBRSxJQUZ1QjtBQUduQ0MsY0FBUSxFQUFFLElBSHlCO0FBSW5DaE8sV0FBSyxFQUFFLFNBQVMxRCxPQUFULEdBQW1CO0FBQ3RCLFlBQUkyUixNQUFNLEdBQUdDLEtBQUssQ0FBQzdCLFNBQU4sQ0FBZ0I4QixLQUFoQixDQUFzQjVOLElBQXRCLENBQTJCNk4sU0FBM0IsQ0FBYjtBQUFBLFlBQ0lDLE9BQU8sR0FBR2xTLFFBQVEsQ0FBQ21TLHNCQUFULEVBRGQ7QUFHQUwsY0FBTSxDQUFDUCxPQUFQLENBQWUsVUFBU2EsT0FBVCxFQUFrQjtBQUM3QixjQUFJQyxNQUFNLEdBQUdELE9BQU8sWUFBWUUsSUFBaEM7QUFDQUosaUJBQU8sQ0FBQ3ZOLFdBQVIsQ0FBb0IwTixNQUFNLEdBQUdELE9BQUgsR0FBYXBTLFFBQVEsQ0FBQ3VTLGNBQVQsQ0FBd0JDLE1BQU0sQ0FBQ0osT0FBRCxDQUE5QixDQUF2QztBQUNILFNBSEQ7QUFLQSxhQUFLSyxZQUFMLENBQWtCUCxPQUFsQixFQUEyQixLQUFLUSxVQUFoQztBQUNIO0FBZGtDLEtBQXZDO0FBZ0JILEdBcEJEO0FBcUJILENBdEJELEVBc0JHLENBQUN6QyxPQUFPLENBQUNDLFNBQVQsRUFBb0J5QyxRQUFRLENBQUN6QyxTQUE3QixFQUF3QzBDLGdCQUFnQixDQUFDMUMsU0FBekQsQ0F0QkgsRSxDQXdCQTs7O0FBQ0F2SyxNQUFNLENBQUNrTixzQkFBUCxHQUFnQyxFQUFoQztBQUNBbE4sTUFBTSxDQUFDbU4sd0JBQVAsR0FBa0MsQ0FBbEM7QUFDQW5OLE1BQU0sQ0FBQ29OLDRCQUFQLEdBQXNDLEVBQXRDOztBQUVBLElBQUl6VixNQUFNLEdBQUcsWUFBVztBQUNwQixNQUFJMFYsY0FBYyxHQUFHLEVBQXJCO0FBRUE7O0FBQ0EsTUFBSUMsV0FBVyxHQUFHO0FBQ2RDLE1BQUUsRUFBRSxHQURVO0FBQ0w7QUFDVEMsTUFBRSxFQUFFLEdBRlU7QUFFTDtBQUNUQyxNQUFFLEVBQUUsSUFIVTtBQUdKO0FBQ1ZDLE1BQUUsRUFBRSxJQUpVLENBSUw7O0FBSkssR0FBbEI7QUFPQTs7Ozs7QUFJQSxNQUFJQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLEdBQVc7QUFDbEMsUUFBSUMsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixHQUFXO0FBQ2hDO0FBQ0EsV0FBSyxJQUFJeFAsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2lQLGNBQWMsQ0FBQ2pVLE1BQW5DLEVBQTJDZ0YsQ0FBQyxFQUE1QyxFQUFnRDtBQUM1QyxZQUFJMUgsSUFBSSxHQUFHMlcsY0FBYyxDQUFDalAsQ0FBRCxDQUF6QjtBQUNBMUgsWUFBSSxDQUFDK0gsSUFBTDtBQUNIO0FBQ0osS0FORDs7QUFRQSxRQUFJcUMsT0FBTyxHQUFHLEtBQWQsQ0FUa0MsQ0FTYjs7QUFDckIsUUFBSStNLEtBQUssR0FBRyxHQUFaLENBVmtDLENBVWpCOztBQUVqQjdOLFVBQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBa0MsWUFBVztBQUN6Q2dELGtCQUFZLENBQUNuQyxPQUFELENBQVo7QUFDQUEsYUFBTyxHQUFHc0MsVUFBVSxDQUFDLFlBQVc7QUFDNUJ3SywwQkFBa0I7QUFDckIsT0FGbUIsRUFFakJDLEtBRmlCLENBQXBCLENBRnlDLENBSTlCO0FBQ2QsS0FMRDtBQU1ILEdBbEJEOztBQW9CQSxTQUFPO0FBQ0g7Ozs7O0FBS0E7QUFDQXhVLFFBQUksRUFBRSxjQUFTL0IsT0FBVCxFQUFrQjtBQUNwQixVQUFJQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ2dXLFdBQXZCLEVBQW9DO0FBQ2hDQSxtQkFBVyxHQUFHaFcsT0FBTyxDQUFDZ1csV0FBdEI7QUFDSDs7QUFFREssMEJBQW9CO0FBQ3ZCLEtBYkU7O0FBZUg7Ozs7QUFJQW5ILG9CQUFnQixFQUFFLDBCQUFTOEUsUUFBVCxFQUFtQjtBQUNqQytCLG9CQUFjLENBQUMzTyxJQUFmLENBQW9CNE0sUUFBcEI7QUFDSCxLQXJCRTs7QUF1Qkg7Ozs7QUFJQXdDLHVCQUFtQixFQUFFLDZCQUFTeEMsUUFBVCxFQUFtQjtBQUNwQyxXQUFLLElBQUlsTixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHaVAsY0FBYyxDQUFDalUsTUFBbkMsRUFBMkNnRixDQUFDLEVBQTVDLEVBQWdEO0FBQzVDLFlBQUlrTixRQUFRLEtBQUsrQixjQUFjLENBQUNqUCxDQUFELENBQS9CLEVBQW9DO0FBQ2hDLGlCQUFPaVAsY0FBYyxDQUFDalAsQ0FBRCxDQUFyQjtBQUNIO0FBQ0o7QUFDSixLQWpDRTs7QUFtQ0g7OztBQUdBMlAscUJBQWlCLEVBQUUsNkJBQVc7QUFDMUJILHdCQUFrQjtBQUNyQixLQXhDRTtBQTBDSEksVUFBTSxFQUFFLGtCQUFXO0FBQ2YsVUFBSSxPQUFPQyxLQUFQLEtBQWtCLFVBQXRCLEVBQWtDO0FBQzlCO0FBQ0FqTyxjQUFNLENBQUNrTyxhQUFQLENBQXFCLElBQUlELEtBQUosQ0FBVSxRQUFWLENBQXJCO0FBQ0gsT0FIRCxNQUdPO0FBQ0g7QUFDQTtBQUNBLFlBQUlFLEdBQUcsR0FBR25PLE1BQU0sQ0FBQzNGLFFBQVAsQ0FBZ0IrVCxXQUFoQixDQUE0QixVQUE1QixDQUFWO0FBQ0FELFdBQUcsQ0FBQ0UsV0FBSixDQUFnQixRQUFoQixFQUEwQixJQUExQixFQUFnQyxLQUFoQyxFQUF1Q3JPLE1BQXZDLEVBQStDLENBQS9DO0FBQ0FBLGNBQU0sQ0FBQ2tPLGFBQVAsQ0FBcUJDLEdBQXJCO0FBQ0g7QUFDSixLQXJERTs7QUF1REg7Ozs7O0FBS0FHLGVBQVcsRUFBRSxxQkFBU0MsU0FBVCxFQUFvQjtBQUM3QixVQUFJQyxZQUFZLEdBQUd4TyxNQUFNLENBQUN5TyxRQUFQLENBQWdCQyxNQUFoQixDQUF1QkMsU0FBdkIsQ0FBaUMsQ0FBakMsQ0FBbkI7QUFBQSxVQUNJdlEsQ0FESjtBQUFBLFVBQ09uSCxHQURQO0FBQUEsVUFDWTJELE1BQU0sR0FBRzRULFlBQVksQ0FBQ0ksS0FBYixDQUFtQixHQUFuQixDQURyQjs7QUFHQSxXQUFLeFEsQ0FBQyxHQUFHLENBQVQsRUFBWUEsQ0FBQyxHQUFHeEQsTUFBTSxDQUFDeEIsTUFBdkIsRUFBK0JnRixDQUFDLEVBQWhDLEVBQW9DO0FBQ2hDbkgsV0FBRyxHQUFHMkQsTUFBTSxDQUFDd0QsQ0FBRCxDQUFOLENBQVV3USxLQUFWLENBQWdCLEdBQWhCLENBQU47O0FBQ0EsWUFBSTNYLEdBQUcsQ0FBQyxDQUFELENBQUgsSUFBVXNYLFNBQWQsRUFBeUI7QUFDckIsaUJBQU9NLFFBQVEsQ0FBQzVYLEdBQUcsQ0FBQyxDQUFELENBQUosQ0FBZjtBQUNIO0FBQ0o7O0FBRUQsYUFBTyxJQUFQO0FBQ0gsS0F4RUU7O0FBMEVIOzs7O0FBSUE2WCxrQkFBYyxFQUFFLDBCQUFXO0FBQ3ZCLGFBQVEsS0FBS2pQLFdBQUwsR0FBbUIzSixLQUFuQixHQUEyQixLQUFLNlksYUFBTCxDQUFtQixJQUFuQixDQUEzQixHQUFzRCxJQUF0RCxHQUE2RCxLQUFyRTtBQUNILEtBaEZFOztBQWtGSDs7OztBQUlBQyxtQkFBZSxFQUFFLDJCQUFXO0FBQ3hCLGFBQU9yWCxNQUFNLENBQUNtWCxjQUFQLEtBQTBCLEtBQTFCLEdBQWtDLElBQXpDO0FBQ0gsS0F4RkU7O0FBMEZIOzs7OztBQUtBalAsZUFBVyxFQUFFLHVCQUFXO0FBQ3BCLFVBQUlsSCxDQUFDLEdBQUdxSCxNQUFSO0FBQUEsVUFDSWlQLENBQUMsR0FBRyxPQURSOztBQUVBLFVBQUksRUFBRSxnQkFBZ0JqUCxNQUFsQixDQUFKLEVBQStCO0FBQzNCaVAsU0FBQyxHQUFHLFFBQUo7QUFDQXRXLFNBQUMsR0FBRzBCLFFBQVEsQ0FBQ3dRLGVBQVQsSUFBNEJ4USxRQUFRLENBQUN3QyxJQUF6QztBQUNIOztBQUVELGFBQU87QUFDSDNHLGFBQUssRUFBRXlDLENBQUMsQ0FBQ3NXLENBQUMsR0FBRyxPQUFMLENBREw7QUFFSGpYLGNBQU0sRUFBRVcsQ0FBQyxDQUFDc1csQ0FBQyxHQUFHLFFBQUw7QUFGTixPQUFQO0FBSUgsS0EzR0U7O0FBNkdIOzs7Ozs7QUFNQWhYLHVCQUFtQixFQUFFLDZCQUFTdUssSUFBVCxFQUFlO0FBQ2hDLFVBQUkwTSxVQUFVLEdBQUcsS0FBS3JQLFdBQUwsR0FBbUIzSixLQUFwQzs7QUFFQSxVQUFJc00sSUFBSSxJQUFJLFNBQVosRUFBdUI7QUFDbkIsZUFBTyxJQUFQO0FBQ0gsT0FGRCxNQUVPLElBQUlBLElBQUksSUFBSSxTQUFSLElBQXFCME0sVUFBVSxJQUFLLEtBQUtILGFBQUwsQ0FBbUIsSUFBbkIsSUFBMkIsQ0FBbkUsRUFBdUU7QUFDMUUsZUFBTyxJQUFQO0FBQ0gsT0FGTSxNQUVBLElBQUl2TSxJQUFJLElBQUksUUFBUixJQUFxQjBNLFVBQVUsSUFBSyxLQUFLSCxhQUFMLENBQW1CLElBQW5CLElBQTJCLENBQTFDLElBQWdERyxVQUFVLEdBQUcsS0FBS0gsYUFBTCxDQUFtQixJQUFuQixDQUF0RixFQUFpSDtBQUNwSCxlQUFPLElBQVA7QUFDSCxPQUZNLE1BRUEsSUFBSXZNLElBQUksSUFBSSxRQUFSLElBQW9CME0sVUFBVSxJQUFJLEtBQUtILGFBQUwsQ0FBbUIsSUFBbkIsQ0FBdEMsRUFBZ0U7QUFDbkUsZUFBTyxJQUFQO0FBQ0gsT0FGTSxNQUVBLElBQUl2TSxJQUFJLElBQUksb0JBQVIsSUFBZ0MwTSxVQUFVLElBQUssS0FBS0gsYUFBTCxDQUFtQixJQUFuQixJQUEyQixDQUE5RSxFQUFrRjtBQUNyRixlQUFPLElBQVA7QUFDSCxPQUZNLE1BRUEsSUFBSXZNLElBQUksSUFBSSxtQkFBUixJQUErQjBNLFVBQVUsSUFBSSxLQUFLSCxhQUFMLENBQW1CLElBQW5CLENBQWpELEVBQTJFO0FBQzlFLGVBQU8sSUFBUDtBQUNILE9BRk0sTUFFQSxJQUFJdk0sSUFBSSxJQUFJLDJCQUFSLElBQXVDME0sVUFBVSxJQUFJLEtBQUtILGFBQUwsQ0FBbUIsSUFBbkIsQ0FBekQsRUFBbUY7QUFDdEYsZUFBTyxJQUFQO0FBQ0g7O0FBRUQsYUFBTyxLQUFQO0FBQ0gsS0F2SUU7O0FBeUlIOzs7OztBQUtBNU4sZUFBVyxFQUFFLHFCQUFTZ08sTUFBVCxFQUFpQjtBQUMxQixhQUFPQSxNQUFNLEdBQUcxRCxJQUFJLENBQUMyRCxLQUFMLENBQVczRCxJQUFJLENBQUM0RCxNQUFMLEtBQWlCLElBQUlqSyxJQUFKLEVBQUQsQ0FBYUMsT0FBYixFQUEzQixDQUFoQjtBQUNILEtBaEpFOztBQWtKSDs7Ozs7QUFLQTBKLGlCQUFhLEVBQUUsdUJBQVN2TSxJQUFULEVBQWU7QUFDMUIsYUFBTzhLLFdBQVcsQ0FBQzlLLElBQUQsQ0FBbEI7QUFDSCxLQXpKRTs7QUEySkg7Ozs7OztBQU1BSCxTQUFLLEVBQUUsZUFBU2lOLEdBQVQsRUFBY0MsSUFBZCxFQUFvQjtBQUN2QixVQUFJQyxLQUFKO0FBRUFELFVBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7O0FBRUEsVUFBSUEsSUFBSSxDQUFDRSxPQUFMLENBQWEsR0FBYixNQUFzQixDQUFDLENBQTNCLEVBQThCO0FBQzFCLGNBQU0sSUFBSUMsS0FBSixDQUFVLG1DQUFWLENBQU47QUFDSDs7QUFFREgsVUFBSSxHQUFHQSxJQUFJLENBQUNYLEtBQUwsQ0FBVyxHQUFYLENBQVA7O0FBRUEsU0FBRztBQUNDLFlBQUlVLEdBQUcsS0FBS2xRLFNBQVosRUFBdUI7QUFDbkIsaUJBQU8sS0FBUDtBQUNIOztBQUVEb1EsYUFBSyxHQUFHRCxJQUFJLENBQUNJLEtBQUwsRUFBUjs7QUFFQSxZQUFJLENBQUNMLEdBQUcsQ0FBQ3pELGNBQUosQ0FBbUIyRCxLQUFuQixDQUFMLEVBQWdDO0FBQzVCLGlCQUFPLEtBQVA7QUFDSDs7QUFFREYsV0FBRyxHQUFHQSxHQUFHLENBQUNFLEtBQUQsQ0FBVDtBQUVILE9BYkQsUUFhU0QsSUFBSSxDQUFDblcsTUFiZDs7QUFlQSxhQUFPLElBQVA7QUFDSCxLQTVMRTs7QUE4TEg7Ozs7O0FBS0F3VyxvQkFBZ0IsRUFBRSwwQkFBUzdaLEVBQVQsRUFBYTtBQUMzQixVQUFJZ1YsSUFBSSxHQUFHcFQsTUFBTSxDQUFDNEMsR0FBUCxDQUFXeEUsRUFBWCxDQUFYO0FBQUEsVUFDSWtELFFBREo7QUFBQSxVQUNjaUYsS0FEZDs7QUFHQSxhQUFPNk0sSUFBSSxJQUFJQSxJQUFJLEtBQUsxUSxRQUF4QixFQUFrQztBQUM5QjtBQUNBO0FBQ0E7QUFDQXBCLGdCQUFRLEdBQUd0QixNQUFNLENBQUNxQixHQUFQLENBQVcrUixJQUFYLEVBQWlCLFVBQWpCLENBQVg7O0FBRUEsWUFBSTlSLFFBQVEsS0FBSyxVQUFiLElBQTJCQSxRQUFRLEtBQUssVUFBeEMsSUFBc0RBLFFBQVEsS0FBSyxPQUF2RSxFQUFnRjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBaUYsZUFBSyxHQUFHaUosUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXK1IsSUFBWCxFQUFpQixTQUFqQixDQUFELENBQWhCOztBQUVBLGNBQUksQ0FBQzVDLEtBQUssQ0FBQ2pLLEtBQUQsQ0FBTixJQUFpQkEsS0FBSyxLQUFLLENBQS9CLEVBQWtDO0FBQzlCLG1CQUFPQSxLQUFQO0FBQ0g7QUFDSjs7QUFFRDZNLFlBQUksR0FBR0EsSUFBSSxDQUFDdEUsVUFBWjtBQUNIOztBQUVELGFBQU8sSUFBUDtBQUNILEtBN05FOztBQStOSDs7Ozs7QUFLQW9KLDRCQUF3QixFQUFFLGtDQUFTOVosRUFBVCxFQUFhO0FBQ25DLFVBQUlrRCxRQUFKOztBQUVBLGFBQU9sRCxFQUFFLElBQUlBLEVBQUUsS0FBS3NFLFFBQXBCLEVBQThCO0FBQzFCcEIsZ0JBQVEsR0FBR3RCLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZSxVQUFmLENBQVg7O0FBRUEsWUFBSWtELFFBQVEsS0FBSyxPQUFqQixFQUEwQjtBQUN0QixpQkFBTyxJQUFQO0FBQ0g7O0FBRURsRCxVQUFFLEdBQUdBLEVBQUUsQ0FBQzBRLFVBQVI7QUFDSDs7QUFFRCxhQUFPLEtBQVA7QUFDSCxLQWxQRTs7QUFvUEg7OztBQUdBcUosU0FBSyxFQUFFLGVBQVNDLFlBQVQsRUFBdUI7QUFDMUIsVUFBSUMsS0FBSyxHQUFHLElBQUk1SyxJQUFKLEdBQVdDLE9BQVgsRUFBWjs7QUFDQSxXQUFLLElBQUlqSCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEdBQXBCLEVBQXlCQSxDQUFDLEVBQTFCLEVBQThCO0FBQzFCLFlBQUssSUFBSWdILElBQUosR0FBV0MsT0FBWCxLQUF1QjJLLEtBQXhCLEdBQWlDRCxZQUFyQyxFQUFtRDtBQUMvQztBQUNIO0FBQ0o7QUFDSixLQTlQRTs7QUFnUUg7Ozs7OztBQU1BRSxnQkFBWSxFQUFFLHNCQUFTQyxHQUFULEVBQWN4RSxHQUFkLEVBQW1CO0FBQzdCLGFBQU9ELElBQUksQ0FBQzJELEtBQUwsQ0FBVzNELElBQUksQ0FBQzRELE1BQUwsTUFBaUIzRCxHQUFHLEdBQUd3RSxHQUFOLEdBQVksQ0FBN0IsQ0FBWCxJQUE4Q0EsR0FBckQ7QUFDSCxLQXhRRTs7QUEwUUg7Ozs7QUFJQUMsb0JBQWdCLEVBQUUsNEJBQVc7QUFDekIsYUFBT25RLE1BQU0sQ0FBQ29RLElBQVAsS0FBZ0JoUixTQUFoQixHQUE0QixJQUE1QixHQUFtQyxLQUExQztBQUNILEtBaFJFO0FBa1JIO0FBRUE7QUFDQTNCLGNBQVUsRUFBRSxvQkFBUzRTLEdBQVQsRUFBYztBQUN0QkEsU0FBRyxHQUFHQSxHQUFHLElBQUksRUFBYjs7QUFFQSxXQUFLLElBQUlqUyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa08sU0FBUyxDQUFDbFQsTUFBOUIsRUFBc0NnRixDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFlBQUlrUixHQUFHLEdBQUdoRCxTQUFTLENBQUNsTyxDQUFELENBQW5CO0FBRUEsWUFBSSxDQUFDa1IsR0FBTCxFQUNJOztBQUVKLGFBQUssSUFBSWdCLEdBQVQsSUFBZ0JoQixHQUFoQixFQUFxQjtBQUNqQixjQUFJQSxHQUFHLENBQUN6RCxjQUFKLENBQW1CeUUsR0FBbkIsQ0FBSixFQUE2QjtBQUN6QixnQkFBSSxRQUFPaEIsR0FBRyxDQUFDZ0IsR0FBRCxDQUFWLE1BQW9CLFFBQXhCLEVBQ0lELEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVczWSxNQUFNLENBQUM4RixVQUFQLENBQWtCNFMsR0FBRyxDQUFDQyxHQUFELENBQXJCLEVBQTRCaEIsR0FBRyxDQUFDZ0IsR0FBRCxDQUEvQixDQUFYLENBREosS0FHSUQsR0FBRyxDQUFDQyxHQUFELENBQUgsR0FBV2hCLEdBQUcsQ0FBQ2dCLEdBQUQsQ0FBZDtBQUNQO0FBQ0o7QUFDSjs7QUFFRCxhQUFPRCxHQUFQO0FBQ0gsS0F6U0U7QUEyU0g7QUFDQTdXLFVBQU0sRUFBRSxnQkFBUzZXLEdBQVQsRUFBYztBQUNsQkEsU0FBRyxHQUFHQSxHQUFHLElBQUksRUFBYjs7QUFFQSxXQUFLLElBQUlqUyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHa08sU0FBUyxDQUFDbFQsTUFBOUIsRUFBc0NnRixDQUFDLEVBQXZDLEVBQTJDO0FBQ3ZDLFlBQUksQ0FBQ2tPLFNBQVMsQ0FBQ2xPLENBQUQsQ0FBZCxFQUNJOztBQUVKLGFBQUssSUFBSWtTLEdBQVQsSUFBZ0JoRSxTQUFTLENBQUNsTyxDQUFELENBQXpCLEVBQThCO0FBQzFCLGNBQUlrTyxTQUFTLENBQUNsTyxDQUFELENBQVQsQ0FBYXlOLGNBQWIsQ0FBNEJ5RSxHQUE1QixDQUFKLEVBQ0lELEdBQUcsQ0FBQ0MsR0FBRCxDQUFILEdBQVdoRSxTQUFTLENBQUNsTyxDQUFELENBQVQsQ0FBYWtTLEdBQWIsQ0FBWDtBQUNQO0FBQ0o7O0FBRUQsYUFBT0QsR0FBUDtBQUNILEtBMVRFO0FBNFRIOVYsT0FBRyxFQUFFLGFBQVNvSixLQUFULEVBQWdCO0FBQ2pCLFVBQUk1TixFQUFKOztBQUVBLFVBQUk0TixLQUFLLEtBQUt0SixRQUFkLEVBQXdCO0FBQ3BCLGVBQU9BLFFBQVA7QUFDSDs7QUFFRCxVQUFJLENBQUMsRUFBRXNKLEtBQUssSUFBSUEsS0FBSyxDQUFDNE0sUUFBTixLQUFtQixDQUE5QixDQUFMLEVBQXVDO0FBQ25DLGVBQU81TSxLQUFQO0FBQ0g7O0FBRUQsVUFBSTVOLEVBQUUsR0FBR3NFLFFBQVEsQ0FBQ21XLGNBQVQsQ0FBd0I3TSxLQUF4QixDQUFULEVBQXlDO0FBQ3JDLGVBQU81TixFQUFQO0FBQ0gsT0FGRCxNQUVPLElBQUlBLEVBQUUsR0FBR3NFLFFBQVEsQ0FBQ29XLG9CQUFULENBQThCOU0sS0FBOUIsQ0FBVCxFQUErQztBQUNsRCxlQUFPNU4sRUFBRSxDQUFDLENBQUQsQ0FBVDtBQUNILE9BRk0sTUFFQSxJQUFJQSxFQUFFLEdBQUdzRSxRQUFRLENBQUNxVyxzQkFBVCxDQUFnQy9NLEtBQWhDLENBQVQsRUFBaUQ7QUFDcEQsZUFBTzVOLEVBQUUsQ0FBQyxDQUFELENBQVQ7QUFDSCxPQUZNLE1BRUE7QUFDSCxlQUFPLElBQVA7QUFDSDtBQUNKLEtBaFZFO0FBa1ZINGEsV0FBTyxFQUFFLGlCQUFTaE4sS0FBVCxFQUFnQjtBQUNyQixVQUFJLENBQUMsRUFBRUEsS0FBSyxJQUFJQSxLQUFLLENBQUM0TSxRQUFOLEtBQW1CLENBQTlCLENBQUwsRUFBdUM7QUFDbkMsZUFBTzVNLEtBQVA7QUFDSDs7QUFFRCxhQUFPdEosUUFBUSxDQUFDbVcsY0FBVCxDQUF3QjdNLEtBQXhCLENBQVA7QUFDSCxLQXhWRTtBQTBWSGlOLFlBQVEsRUFBRSxrQkFBU2pOLEtBQVQsRUFBZ0I7QUFDdEIsVUFBSTVOLEVBQUo7O0FBRUEsVUFBSUEsRUFBRSxHQUFHc0UsUUFBUSxDQUFDb1csb0JBQVQsQ0FBOEI5TSxLQUE5QixDQUFULEVBQStDO0FBQzNDLGVBQU81TixFQUFFLENBQUMsQ0FBRCxDQUFUO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBTyxJQUFQO0FBQ0g7QUFDSixLQWxXRTtBQW9XSDhhLGNBQVUsRUFBRSxvQkFBU2xOLEtBQVQsRUFBZ0I7QUFDeEIsVUFBSTVOLEVBQUo7O0FBRUEsVUFBSUEsRUFBRSxHQUFHc0UsUUFBUSxDQUFDcVcsc0JBQVQsQ0FBZ0MvTSxLQUFoQyxDQUFULEVBQWlEO0FBQzdDLGVBQU81TixFQUFFLENBQUMsQ0FBRCxDQUFUO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBTyxJQUFQO0FBQ0g7QUFDSixLQTVXRTs7QUE4V0g7Ozs7OztBQU1Bd00sY0FBVSxFQUFFLG9CQUFTeE0sRUFBVCxFQUFhcUUsT0FBYixFQUFzQjtBQUM5QixVQUFJLENBQUNyRSxFQUFMLEVBQVM7QUFDTDtBQUNIOztBQUVELFVBQUkrYSxVQUFVLEdBQUcxVyxPQUFPLENBQUN3VSxLQUFSLENBQWMsR0FBZCxDQUFqQjs7QUFFQSxXQUFLLElBQUl4USxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHMFMsVUFBVSxDQUFDMVgsTUFBL0IsRUFBdUNnRixDQUFDLEVBQXhDLEVBQTRDO0FBQ3hDLFlBQUl6RyxNQUFNLENBQUM0TCxRQUFQLENBQWdCeE4sRUFBaEIsRUFBb0I0QixNQUFNLENBQUNvWixJQUFQLENBQVlELFVBQVUsQ0FBQzFTLENBQUQsQ0FBdEIsQ0FBcEIsS0FBbUQsS0FBdkQsRUFBOEQ7QUFDMUQsaUJBQU8sS0FBUDtBQUNIO0FBQ0o7O0FBRUQsYUFBTyxJQUFQO0FBQ0gsS0FsWUU7QUFvWUhtRixZQUFRLEVBQUUsa0JBQVN4TixFQUFULEVBQWFpYixTQUFiLEVBQXdCO0FBQzlCLFVBQUksQ0FBQ2piLEVBQUwsRUFBUztBQUNMO0FBQ0g7O0FBRUQsYUFBT0EsRUFBRSxDQUFDa2IsU0FBSCxHQUFlbGIsRUFBRSxDQUFDa2IsU0FBSCxDQUFhbk0sUUFBYixDQUFzQmtNLFNBQXRCLENBQWYsR0FBa0QsSUFBSUUsTUFBSixDQUFXLFFBQVFGLFNBQVIsR0FBb0IsS0FBL0IsRUFBc0NHLElBQXRDLENBQTJDcGIsRUFBRSxDQUFDaWIsU0FBOUMsQ0FBekQ7QUFDSCxLQTFZRTtBQTRZSDdaLFlBQVEsRUFBRSxrQkFBU3BCLEVBQVQsRUFBYWliLFNBQWIsRUFBd0I7QUFDOUIsVUFBSSxDQUFDamIsRUFBRCxJQUFPLE9BQU9pYixTQUFQLEtBQXFCLFdBQWhDLEVBQTZDO0FBQ3pDO0FBQ0g7O0FBRUQsVUFBSUksVUFBVSxHQUFHSixTQUFTLENBQUNwQyxLQUFWLENBQWdCLEdBQWhCLENBQWpCOztBQUVBLFVBQUk3WSxFQUFFLENBQUNrYixTQUFQLEVBQWtCO0FBQ2QsYUFBSyxJQUFJN1MsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2dULFVBQVUsQ0FBQ2hZLE1BQS9CLEVBQXVDZ0YsQ0FBQyxFQUF4QyxFQUE0QztBQUN4QyxjQUFJZ1QsVUFBVSxDQUFDaFQsQ0FBRCxDQUFWLElBQWlCZ1QsVUFBVSxDQUFDaFQsQ0FBRCxDQUFWLENBQWNoRixNQUFkLEdBQXVCLENBQTVDLEVBQStDO0FBQzNDckQsY0FBRSxDQUFDa2IsU0FBSCxDQUFhSSxHQUFiLENBQWlCMVosTUFBTSxDQUFDb1osSUFBUCxDQUFZSyxVQUFVLENBQUNoVCxDQUFELENBQXRCLENBQWpCO0FBQ0g7QUFDSjtBQUNKLE9BTkQsTUFNTyxJQUFJLENBQUN6RyxNQUFNLENBQUM0TCxRQUFQLENBQWdCeE4sRUFBaEIsRUFBb0JpYixTQUFwQixDQUFMLEVBQXFDO0FBQ3hDLGFBQUssSUFBSTdGLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdpRyxVQUFVLENBQUNoWSxNQUEvQixFQUF1QytSLENBQUMsRUFBeEMsRUFBNEM7QUFDeENwVixZQUFFLENBQUNpYixTQUFILElBQWdCLE1BQU1yWixNQUFNLENBQUNvWixJQUFQLENBQVlLLFVBQVUsQ0FBQ2pHLENBQUQsQ0FBdEIsQ0FBdEI7QUFDSDtBQUNKO0FBQ0osS0E5WkU7QUFnYUhwUCxlQUFXLEVBQUUscUJBQVNoRyxFQUFULEVBQWFpYixTQUFiLEVBQXdCO0FBQ25DLFVBQUksQ0FBQ2piLEVBQUQsSUFBTyxPQUFPaWIsU0FBUCxLQUFxQixXQUFoQyxFQUE2QztBQUN2QztBQUNIOztBQUVELFVBQUlJLFVBQVUsR0FBR0osU0FBUyxDQUFDcEMsS0FBVixDQUFnQixHQUFoQixDQUFqQjs7QUFFQSxVQUFJN1ksRUFBRSxDQUFDa2IsU0FBUCxFQUFrQjtBQUNkLGFBQUssSUFBSTdTLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdnVCxVQUFVLENBQUNoWSxNQUEvQixFQUF1Q2dGLENBQUMsRUFBeEMsRUFBNEM7QUFDeENySSxZQUFFLENBQUNrYixTQUFILENBQWF0VyxNQUFiLENBQW9CaEQsTUFBTSxDQUFDb1osSUFBUCxDQUFZSyxVQUFVLENBQUNoVCxDQUFELENBQXRCLENBQXBCO0FBQ0g7QUFDSixPQUpELE1BSU8sSUFBSXpHLE1BQU0sQ0FBQzRMLFFBQVAsQ0FBZ0J4TixFQUFoQixFQUFvQmliLFNBQXBCLENBQUosRUFBb0M7QUFDdkMsYUFBSyxJQUFJN0YsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR2lHLFVBQVUsQ0FBQ2hZLE1BQS9CLEVBQXVDK1IsQ0FBQyxFQUF4QyxFQUE0QztBQUN4Q3BWLFlBQUUsQ0FBQ2liLFNBQUgsR0FBZWpiLEVBQUUsQ0FBQ2liLFNBQUgsQ0FBYU0sT0FBYixDQUFxQixJQUFJSixNQUFKLENBQVcsUUFBUXZaLE1BQU0sQ0FBQ29aLElBQVAsQ0FBWUssVUFBVSxDQUFDakcsQ0FBRCxDQUF0QixDQUFSLEdBQXFDLEtBQWhELEVBQXVELEdBQXZELENBQXJCLEVBQWtGLEVBQWxGLENBQWY7QUFDSDtBQUNKO0FBQ0osS0FoYkU7QUFrYkhvRyxzQkFBa0IsRUFBRSw0QkFBU3hiLEVBQVQsRUFBYXliLFNBQWIsRUFBd0J2YixJQUF4QixFQUE4QjtBQUM5QyxVQUFJb0ksS0FBSjs7QUFDQSxVQUFJMkIsTUFBTSxDQUFDeVIsV0FBWCxFQUF3QjtBQUNwQnBULGFBQUssR0FBRyxJQUFJb1QsV0FBSixDQUFnQkQsU0FBaEIsRUFBMkI7QUFDL0JFLGdCQUFNLEVBQUV6YjtBQUR1QixTQUEzQixDQUFSO0FBR0gsT0FKRCxNQUlPO0FBQ0hvSSxhQUFLLEdBQUdoRSxRQUFRLENBQUMrVCxXQUFULENBQXFCLGFBQXJCLENBQVI7QUFDQS9QLGFBQUssQ0FBQ3NULGVBQU4sQ0FBc0JILFNBQXRCLEVBQWlDLElBQWpDLEVBQXVDLElBQXZDLEVBQTZDdmIsSUFBN0M7QUFDSDs7QUFFREYsUUFBRSxDQUFDbVksYUFBSCxDQUFpQjdQLEtBQWpCO0FBQ0gsS0E5YkU7QUFnY0h1VCxnQkFBWSxFQUFFLHNCQUFTQyxJQUFULEVBQWVMLFNBQWYsRUFBMEI7QUFDcEM7QUFDQSxVQUFJTSxHQUFKOztBQUNBLFVBQUlELElBQUksQ0FBQ0UsYUFBVCxFQUF3QjtBQUNwQkQsV0FBRyxHQUFHRCxJQUFJLENBQUNFLGFBQVg7QUFDSCxPQUZELE1BRU8sSUFBSUYsSUFBSSxDQUFDdEIsUUFBTCxJQUFpQixDQUFyQixFQUF3QjtBQUMzQjtBQUNBdUIsV0FBRyxHQUFHRCxJQUFOO0FBQ0gsT0FITSxNQUdBO0FBQ0gsY0FBTSxJQUFJbkMsS0FBSixDQUFVLHVDQUF1Q21DLElBQUksQ0FBQ3JLLEVBQXRELENBQU47QUFDSDs7QUFFRCxVQUFJcUssSUFBSSxDQUFDM0QsYUFBVCxFQUF3QjtBQUNwQjtBQUNBLFlBQUk4RCxVQUFVLEdBQUcsRUFBakIsQ0FGb0IsQ0FJcEI7QUFDQTtBQUNBOztBQUNBLGdCQUFRUixTQUFSO0FBQ0EsZUFBSyxPQUFMLENBREEsQ0FDYzs7QUFDZCxlQUFLLFlBQUw7QUFDQSxlQUFLLFlBQUw7QUFDQSxlQUFLLFdBQUw7QUFDQSxlQUFLLFNBQUw7QUFDSVEsc0JBQVUsR0FBRyxhQUFiO0FBQ0E7O0FBRUosZUFBSyxPQUFMO0FBQ0EsZUFBSyxRQUFMO0FBQ0EsZUFBSyxNQUFMO0FBQ0EsZUFBSyxRQUFMO0FBQ0lBLHNCQUFVLEdBQUcsWUFBYjtBQUNBOztBQUVKO0FBQ0ksa0JBQU0sd0RBQXdEUixTQUF4RCxHQUFvRSxJQUExRTtBQUNBO0FBbEJKOztBQW9CQSxZQUFJblQsS0FBSyxHQUFHeVQsR0FBRyxDQUFDMUQsV0FBSixDQUFnQjRELFVBQWhCLENBQVo7QUFFQSxZQUFJQyxPQUFPLEdBQUdULFNBQVMsSUFBSSxRQUFiLEdBQXdCLEtBQXhCLEdBQWdDLElBQTlDO0FBQ0FuVCxhQUFLLENBQUM2VCxTQUFOLENBQWdCVixTQUFoQixFQUEyQlMsT0FBM0IsRUFBb0MsSUFBcEMsRUE5Qm9CLENBOEJ1Qjs7QUFFM0M1VCxhQUFLLENBQUM4VCxTQUFOLEdBQWtCLElBQWxCLENBaENvQixDQWdDSTtBQUN4Qjs7QUFDQU4sWUFBSSxDQUFDM0QsYUFBTCxDQUFtQjdQLEtBQW5CLEVBQTBCLElBQTFCO0FBQ0gsT0FuQ0QsTUFtQ08sSUFBSXdULElBQUksQ0FBQ08sU0FBVCxFQUFvQjtBQUN2QjtBQUNBLFlBQUkvVCxLQUFLLEdBQUd5VCxHQUFHLENBQUNPLGlCQUFKLEVBQVo7QUFDQWhVLGFBQUssQ0FBQzhULFNBQU4sR0FBa0IsSUFBbEIsQ0FIdUIsQ0FHQzs7QUFDeEJOLFlBQUksQ0FBQ08sU0FBTCxDQUFlLE9BQU9aLFNBQXRCLEVBQWlDblQsS0FBakM7QUFDSDtBQUNKLEtBcmZFO0FBdWZIaVUsU0FBSyxFQUFFLGVBQVVDLEdBQVYsRUFBZTtBQUNsQkEsU0FBRyxHQUFHNWEsTUFBTSxDQUFDNEMsR0FBUCxDQUFXZ1ksR0FBWCxDQUFOO0FBQ0EsVUFBSUMsQ0FBQyxHQUFHRCxHQUFHLENBQUM5TCxVQUFKLENBQWV2QyxRQUF2QjtBQUFBLFVBQWlDOUYsQ0FBQyxHQUFHLENBQXJDOztBQUNBLGFBQU1BLENBQUMsR0FBR29VLENBQUMsQ0FBQ3BaLE1BQVosRUFBb0JnRixDQUFDLEVBQXJCO0FBQ0ksWUFBSW9VLENBQUMsQ0FBQ3BVLENBQUQsQ0FBRCxJQUFRbVUsR0FBWixFQUFrQixPQUFPblUsQ0FBUDtBQUR0QjtBQUVILEtBNWZFO0FBOGZIMlMsUUFBSSxFQUFFLGNBQVMwQixNQUFULEVBQWlCO0FBQ25CLGFBQU9BLE1BQU0sQ0FBQzFCLElBQVAsRUFBUDtBQUNILEtBaGdCRTtBQWtnQkgyQixrQkFBYyxFQUFFLHdCQUFTL1osQ0FBVCxFQUFZO0FBQ3hCLFVBQUlBLENBQUMsQ0FBQ2dhLGFBQUYsQ0FBZ0JDLE9BQWhCLENBQXdCQyxTQUE1QixFQUF1QztBQUNuQyxlQUFPLElBQVA7QUFDSCxPQUZELE1BRU87QUFDSGxhLFNBQUMsQ0FBQ2dhLGFBQUYsQ0FBZ0JDLE9BQWhCLENBQXdCQyxTQUF4QixHQUFvQyxJQUFwQztBQUVBLGVBQU8sS0FBUDtBQUNIO0FBQ0osS0ExZ0JFO0FBNGdCSGxZLFVBQU0sRUFBRSxnQkFBUzVFLEVBQVQsRUFBYTtBQUNqQixVQUFJQSxFQUFFLElBQUlBLEVBQUUsQ0FBQzBRLFVBQWIsRUFBeUI7QUFDckIxUSxVQUFFLENBQUMwUSxVQUFILENBQWN1RSxXQUFkLENBQTBCalYsRUFBMUI7QUFDSDtBQUNKLEtBaGhCRTtBQWtoQkg4QyxRQUFJLEVBQUUsY0FBU2lhLE1BQVQsRUFBaUJuUCxLQUFqQixFQUF3QjtBQUMxQm1QLFlBQU0sR0FBR25iLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3VZLE1BQVgsQ0FBVDs7QUFDQSxVQUFJQSxNQUFKLEVBQVk7QUFDUixlQUFPQSxNQUFNLENBQUNDLGFBQVAsQ0FBcUJwUCxLQUFyQixDQUFQO0FBQ0g7QUFDSixLQXZoQkU7QUF5aEJIaEIsV0FBTyxFQUFFLGlCQUFTbVEsTUFBVCxFQUFpQm5QLEtBQWpCLEVBQXdCO0FBQzdCbVAsWUFBTSxHQUFHbmIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXdVksTUFBWCxDQUFUOztBQUNBLFVBQUlBLE1BQUosRUFBWTtBQUNSLGVBQU9BLE1BQU0sQ0FBQ3BQLGdCQUFQLENBQXdCQyxLQUF4QixDQUFQO0FBQ0g7QUFDSixLQTloQkU7QUFnaUJIMkQsZUFBVyxFQUFFLHFCQUFTdlIsRUFBVCxFQUFhaWQsYUFBYixFQUE0QjtBQUNyQyxhQUFPQSxhQUFhLENBQUN2TSxVQUFkLENBQXlCcUcsWUFBekIsQ0FBc0MvVyxFQUF0QyxFQUEwQ2lkLGFBQWEsQ0FBQ0MsV0FBeEQsQ0FBUDtBQUNILEtBbGlCRTtBQW9pQkgxTixXQUFPLEVBQUUsaUJBQVN3RixJQUFULEVBQWVtSSxRQUFmLEVBQXlCO0FBQzlCO0FBQ0EsVUFBSSxDQUFDNUksT0FBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUF2QixFQUFnQztBQUM1QkYsZUFBTyxDQUFDQyxTQUFSLENBQWtCQyxPQUFsQixHQUNJRixPQUFPLENBQUNDLFNBQVIsQ0FBa0I0SSxlQUFsQixJQUNBN0ksT0FBTyxDQUFDQyxTQUFSLENBQWtCNkksa0JBRGxCLElBRUE5SSxPQUFPLENBQUNDLFNBQVIsQ0FBa0JFLGlCQUZsQixJQUdBSCxPQUFPLENBQUNDLFNBQVIsQ0FBa0I4SSxnQkFIbEIsSUFJQS9JLE9BQU8sQ0FBQ0MsU0FBUixDQUFrQkcscUJBSmxCLElBS0EsVUFBU0MsQ0FBVCxFQUFZO0FBQ1IsY0FBSUgsT0FBTyxHQUFHLENBQUMsS0FBS25RLFFBQUwsSUFBaUIsS0FBSzBYLGFBQXZCLEVBQXNDck8sZ0JBQXRDLENBQXVEaUgsQ0FBdkQsQ0FBZDtBQUFBLGNBQ0l2TSxDQUFDLEdBQUdvTSxPQUFPLENBQUNwUixNQURoQjs7QUFFQSxpQkFBTyxFQUFFZ0YsQ0FBRixJQUFPLENBQVAsSUFBWW9NLE9BQU8sQ0FBQzFILElBQVIsQ0FBYTFFLENBQWIsTUFBb0IsSUFBdkMsRUFBNkMsQ0FBRTs7QUFDL0MsaUJBQU9BLENBQUMsR0FBRyxDQUFDLENBQVo7QUFDSCxTQVhMO0FBWUgsT0FmNkIsQ0FpQjlCOzs7QUFDQSxVQUFJbUgsT0FBTyxHQUFHLEVBQWQsQ0FsQjhCLENBb0I5Qjs7QUFDQSxhQUFRd0YsSUFBSSxJQUFJQSxJQUFJLEtBQUsxUSxRQUF6QixFQUFtQzBRLElBQUksR0FBR0EsSUFBSSxDQUFDdEUsVUFBL0MsRUFBNEQ7QUFDeEQsWUFBSXlNLFFBQUosRUFBYztBQUNWLGNBQUluSSxJQUFJLENBQUNQLE9BQUwsQ0FBYTBJLFFBQWIsQ0FBSixFQUE0QjtBQUN4QjNOLG1CQUFPLENBQUM3RyxJQUFSLENBQWFxTSxJQUFiO0FBQ0g7O0FBQ0Q7QUFDSDs7QUFDRHhGLGVBQU8sQ0FBQzdHLElBQVIsQ0FBYXFNLElBQWI7QUFDSCxPQTdCNkIsQ0ErQjlCOzs7QUFDQSxhQUFPeEYsT0FBUDtBQUNILEtBcmtCRTtBQXVrQkhyQixZQUFRLEVBQUUsa0JBQVNuTyxFQUFULEVBQWFtZCxRQUFiLEVBQXVCSSxHQUF2QixFQUE0QjtBQUNsQyxVQUFJLENBQUN2ZCxFQUFELElBQU8sQ0FBQ0EsRUFBRSxDQUFDd2QsVUFBZixFQUEyQjtBQUN2QjtBQUNIOztBQUVELFVBQUl2VixNQUFNLEdBQUcsRUFBYjtBQUFBLFVBQ0lJLENBQUMsR0FBRyxDQURSO0FBQUEsVUFFSW9WLENBQUMsR0FBR3pkLEVBQUUsQ0FBQ3dkLFVBQUgsQ0FBY25hLE1BRnRCOztBQUlBLFdBQUssSUFBSWdGLENBQVQsRUFBWUEsQ0FBQyxHQUFHb1YsQ0FBaEIsRUFBbUIsRUFBRXBWLENBQXJCLEVBQXdCO0FBQ3BCLFlBQUlySSxFQUFFLENBQUN3ZCxVQUFILENBQWNuVixDQUFkLEVBQWlCbVMsUUFBakIsSUFBNkIsQ0FBN0IsSUFBa0M1WSxNQUFNLENBQUM2UyxPQUFQLENBQWV6VSxFQUFFLENBQUN3ZCxVQUFILENBQWNuVixDQUFkLENBQWYsRUFBaUM4VSxRQUFqQyxFQUEyQ0ksR0FBM0MsQ0FBdEMsRUFBdUY7QUFDbkZ0VixnQkFBTSxDQUFDVSxJQUFQLENBQVkzSSxFQUFFLENBQUN3ZCxVQUFILENBQWNuVixDQUFkLENBQVo7QUFDSDtBQUNKOztBQUVELGFBQU9KLE1BQVA7QUFDSCxLQXZsQkU7QUF5bEJINkYsU0FBSyxFQUFFLGVBQVM5TixFQUFULEVBQWFtZCxRQUFiLEVBQXVCSSxHQUF2QixFQUE0QjtBQUMvQixVQUFJcFAsUUFBUSxHQUFHdk0sTUFBTSxDQUFDdU0sUUFBUCxDQUFnQm5PLEVBQWhCLEVBQW9CbWQsUUFBcEIsRUFBOEJJLEdBQTlCLENBQWY7QUFFQSxhQUFPcFAsUUFBUSxHQUFHQSxRQUFRLENBQUMsQ0FBRCxDQUFYLEdBQWlCLElBQWhDO0FBQ0gsS0E3bEJFO0FBK2xCSHNHLFdBQU8sRUFBRSxpQkFBU3pVLEVBQVQsRUFBYW1kLFFBQWIsRUFBdUJJLEdBQXZCLEVBQTRCO0FBQ2pDLFVBQUlHLENBQUMsR0FBR25KLE9BQU8sQ0FBQ0MsU0FBaEI7O0FBQ0EsVUFBSW1KLENBQUMsR0FBR0QsQ0FBQyxDQUFDakosT0FBRixJQUFhaUosQ0FBQyxDQUFDL0kscUJBQWYsSUFBd0MrSSxDQUFDLENBQUNMLGtCQUExQyxJQUFnRUssQ0FBQyxDQUFDaEosaUJBQWxFLElBQXVGLFVBQVNFLENBQVQsRUFBWTtBQUN2RyxlQUFPLEdBQUc4RSxPQUFILENBQVdoUixJQUFYLENBQWdCcEUsUUFBUSxDQUFDcUosZ0JBQVQsQ0FBMEJpSCxDQUExQixDQUFoQixFQUE4QyxJQUE5QyxNQUF3RCxDQUFDLENBQWhFO0FBQ0gsT0FGRDs7QUFJQSxVQUFJNVUsRUFBRSxJQUFJQSxFQUFFLENBQUM0ZCxPQUFiLEVBQXNCO0FBQ2xCLGVBQU9ELENBQUMsQ0FBQ2pWLElBQUYsQ0FBTzFJLEVBQVAsRUFBV21kLFFBQVgsQ0FBUDtBQUNILE9BRkQsTUFFTztBQUNILGVBQU8sS0FBUDtBQUNIO0FBQ0osS0ExbUJFO0FBNG1CSGpkLFFBQUksRUFBRSxjQUFTMkcsT0FBVCxFQUFrQjtBQUNwQkEsYUFBTyxHQUFHakYsTUFBTSxDQUFDNEMsR0FBUCxDQUFXcUMsT0FBWCxDQUFWO0FBRUEsYUFBTztBQUNITyxXQUFHLEVBQUUsYUFBU2pCLElBQVQsRUFBZWpHLElBQWYsRUFBcUI7QUFDdEIsY0FBSTJHLE9BQU8sS0FBS3dDLFNBQWhCLEVBQTJCO0FBQ3ZCO0FBQ0g7O0FBRUQsY0FBSXhDLE9BQU8sQ0FBQ2dYLGFBQVIsS0FBMEJ4VSxTQUE5QixFQUF5QztBQUNyQ1ksa0JBQU0sQ0FBQ21OLHdCQUFQO0FBQ0F2USxtQkFBTyxDQUFDZ1gsYUFBUixHQUF3QjVULE1BQU0sQ0FBQ21OLHdCQUEvQjtBQUNIOztBQUVELGNBQUluTixNQUFNLENBQUNrTixzQkFBUCxDQUE4QnRRLE9BQU8sQ0FBQ2dYLGFBQXRDLE1BQXlEeFUsU0FBN0QsRUFBd0U7QUFDcEVZLGtCQUFNLENBQUNrTixzQkFBUCxDQUE4QnRRLE9BQU8sQ0FBQ2dYLGFBQXRDLElBQXVELEVBQXZEO0FBQ0g7O0FBRUQ1VCxnQkFBTSxDQUFDa04sc0JBQVAsQ0FBOEJ0USxPQUFPLENBQUNnWCxhQUF0QyxFQUFxRDFYLElBQXJELElBQTZEakcsSUFBN0Q7QUFDSCxTQWhCRTtBQWtCSHNFLFdBQUcsRUFBRSxhQUFTMkIsSUFBVCxFQUFlO0FBQ2hCLGNBQUlVLE9BQU8sS0FBS3dDLFNBQWhCLEVBQTJCO0FBQ3ZCO0FBQ0g7O0FBRUQsY0FBSXhDLE9BQU8sQ0FBQ2dYLGFBQVIsS0FBMEJ4VSxTQUE5QixFQUF5QztBQUNyQyxtQkFBTyxJQUFQO0FBQ0g7O0FBRUQsaUJBQU8sS0FBS25DLEdBQUwsQ0FBU2YsSUFBVCxJQUFpQjhELE1BQU0sQ0FBQ2tOLHNCQUFQLENBQThCdFEsT0FBTyxDQUFDZ1gsYUFBdEMsRUFBcUQxWCxJQUFyRCxDQUFqQixHQUE4RSxJQUFyRjtBQUNILFNBNUJFO0FBOEJIZSxXQUFHLEVBQUUsYUFBU2YsSUFBVCxFQUFlO0FBQ2hCLGNBQUlVLE9BQU8sS0FBS3dDLFNBQWhCLEVBQTJCO0FBQ3ZCLG1CQUFPLEtBQVA7QUFDSDs7QUFFRCxjQUFJeEMsT0FBTyxDQUFDZ1gsYUFBUixLQUEwQnhVLFNBQTlCLEVBQXlDO0FBQ3JDLG1CQUFPLEtBQVA7QUFDSDs7QUFFRCxpQkFBUVksTUFBTSxDQUFDa04sc0JBQVAsQ0FBOEJ0USxPQUFPLENBQUNnWCxhQUF0QyxLQUF3RDVULE1BQU0sQ0FBQ2tOLHNCQUFQLENBQThCdFEsT0FBTyxDQUFDZ1gsYUFBdEMsRUFBcUQxWCxJQUFyRCxDQUF6RCxHQUF1SCxJQUF2SCxHQUE4SCxLQUFySTtBQUNILFNBeENFO0FBMENIdkIsY0FBTSxFQUFFLGdCQUFTdUIsSUFBVCxFQUFlO0FBQ25CLGNBQUlVLE9BQU8sSUFBSSxLQUFLSyxHQUFMLENBQVNmLElBQVQsQ0FBZixFQUErQjtBQUMzQixtQkFBTzhELE1BQU0sQ0FBQ2tOLHNCQUFQLENBQThCdFEsT0FBTyxDQUFDZ1gsYUFBdEMsRUFBcUQxWCxJQUFyRCxDQUFQO0FBQ0g7QUFDSjtBQTlDRSxPQUFQO0FBZ0RILEtBL3BCRTtBQWlxQkgyWCxjQUFVLEVBQUUsb0JBQVM5ZCxFQUFULEVBQWErZCxNQUFiLEVBQXFCO0FBQzdCLFVBQUk1ZCxLQUFKOztBQUVBLFVBQUk0ZCxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNqQjVkLGFBQUssR0FBRzZkLFVBQVUsQ0FBQ2hlLEVBQUUsQ0FBQ2llLFdBQUosQ0FBbEI7QUFDQTlkLGFBQUssSUFBSTZkLFVBQVUsQ0FBQ3BjLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZSxhQUFmLENBQUQsQ0FBVixHQUE0Q2dlLFVBQVUsQ0FBQ3BjLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZSxjQUFmLENBQUQsQ0FBL0Q7QUFFQSxlQUFPZ2UsVUFBVSxDQUFDN2QsS0FBRCxDQUFqQjtBQUNILE9BTEQsTUFLTztBQUNIQSxhQUFLLEdBQUc2ZCxVQUFVLENBQUNoZSxFQUFFLENBQUNpZSxXQUFKLENBQWxCO0FBRUEsZUFBTzlkLEtBQVA7QUFDSDtBQUNKLEtBOXFCRTtBQWdyQkhvSixVQUFNLEVBQUUsZ0JBQVN5TCxJQUFULEVBQWU7QUFDbkIsVUFBSWtKLElBQUosRUFBVUMsR0FBVjtBQUNBbkosVUFBSSxHQUFHcFQsTUFBTSxDQUFDNEMsR0FBUCxDQUFXd1EsSUFBWCxDQUFQOztBQUVBLFVBQUssQ0FBQ0EsSUFBTixFQUFhO0FBQ1Q7QUFDSCxPQU5rQixDQVFuQjtBQUNBO0FBQ0E7QUFDQTs7O0FBRUEsVUFBSyxDQUFDQSxJQUFJLENBQUNvSixjQUFMLEdBQXNCL2EsTUFBNUIsRUFBcUM7QUFDakMsZUFBTztBQUFFeUIsYUFBRyxFQUFFLENBQVA7QUFBVUMsY0FBSSxFQUFFO0FBQWhCLFNBQVA7QUFDSCxPQWZrQixDQWlCbkI7OztBQUNBbVosVUFBSSxHQUFHbEosSUFBSSxDQUFDcUoscUJBQUwsRUFBUDtBQUNBRixTQUFHLEdBQUduSixJQUFJLENBQUNnSCxhQUFMLENBQW1Cc0MsV0FBekI7QUFFQSxhQUFPO0FBQ0h4WixXQUFHLEVBQUVvWixJQUFJLENBQUNwWixHQUFMLEdBQVdxWixHQUFHLENBQUNuSyxXQURqQjtBQUVIalAsWUFBSSxFQUFFbVosSUFBSSxDQUFDblosSUFBTCxHQUFZb1osR0FBRyxDQUFDSTtBQUZuQixPQUFQO0FBSUgsS0F6c0JFO0FBMnNCSHRjLFVBQU0sRUFBRSxnQkFBU2pDLEVBQVQsRUFBYTtBQUNqQixhQUFPNEIsTUFBTSxDQUFDcUIsR0FBUCxDQUFXakQsRUFBWCxFQUFlLFFBQWYsQ0FBUDtBQUNILEtBN3NCRTtBQStzQkh3ZSxXQUFPLEVBQUUsaUJBQVN4ZSxFQUFULEVBQWE7QUFDbEIsYUFBTyxFQUFFQSxFQUFFLENBQUNpZSxXQUFILEtBQW1CLENBQW5CLElBQXdCamUsRUFBRSxDQUFDeWUsWUFBSCxLQUFvQixDQUE5QyxDQUFQO0FBQ0gsS0FqdEJFO0FBbXRCSDFZLFFBQUksRUFBRSxjQUFTL0YsRUFBVCxFQUFhbUcsSUFBYixFQUFtQmdDLEtBQW5CLEVBQTBCO0FBQzVCbkksUUFBRSxHQUFHNEIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXeEUsRUFBWCxDQUFMOztBQUVBLFVBQUlBLEVBQUUsSUFBSXFKLFNBQVYsRUFBcUI7QUFDakI7QUFDSDs7QUFFRCxVQUFJbEIsS0FBSyxLQUFLa0IsU0FBZCxFQUF5QjtBQUNyQnJKLFVBQUUsQ0FBQ3VOLFlBQUgsQ0FBZ0JwSCxJQUFoQixFQUFzQmdDLEtBQXRCO0FBQ0gsT0FGRCxNQUVPO0FBQ0gsZUFBT25JLEVBQUUsQ0FBQ2dOLFlBQUgsQ0FBZ0I3RyxJQUFoQixDQUFQO0FBQ0g7QUFDSixLQS90QkU7QUFpdUJIa0csV0FBTyxFQUFFLGlCQUFTck0sRUFBVCxFQUFhbUcsSUFBYixFQUFtQjtBQUN4Qm5HLFFBQUUsR0FBRzRCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3hFLEVBQVgsQ0FBTDs7QUFFQSxVQUFJQSxFQUFFLElBQUlxSixTQUFWLEVBQXFCO0FBQ2pCO0FBQ0g7O0FBRUQsYUFBT3JKLEVBQUUsQ0FBQ2dOLFlBQUgsQ0FBZ0I3RyxJQUFoQixJQUF3QixJQUF4QixHQUErQixLQUF0QztBQUNILEtBenVCRTtBQTJ1QkhGLGNBQVUsRUFBRSxvQkFBU2pHLEVBQVQsRUFBYW1HLElBQWIsRUFBbUI7QUFDM0JuRyxRQUFFLEdBQUc0QixNQUFNLENBQUM0QyxHQUFQLENBQVd4RSxFQUFYLENBQUw7O0FBRUEsVUFBSUEsRUFBRSxJQUFJcUosU0FBVixFQUFxQjtBQUNqQjtBQUNIOztBQUVEckosUUFBRSxDQUFDaU4sZUFBSCxDQUFtQjlHLElBQW5CO0FBQ0gsS0FudkJFO0FBcXZCSHVZLFdBQU8sRUFBRSxpQkFBU0MsSUFBVCxFQUFlQyxFQUFmLEVBQW1CQyxRQUFuQixFQUE2QnhULE1BQTdCLEVBQXFDeVQsTUFBckMsRUFBNkNDLElBQTdDLEVBQW1EO0FBQ3hEOzs7O0FBSUEsVUFBSUMsT0FBTyxHQUFHLEVBQWQ7QUFDQSxVQUFJRixNQUFKOztBQUVBRSxhQUFPLENBQUNDLE1BQVIsR0FBaUIsVUFBU0MsQ0FBVCxFQUFZQyxDQUFaLEVBQWUxQyxDQUFmLEVBQWtCdEosQ0FBbEIsRUFBcUI7QUFDbEMsZUFBT3NKLENBQUMsR0FBR3lDLENBQUosR0FBUS9MLENBQVIsR0FBWWdNLENBQW5CO0FBQ0gsT0FGRDs7QUFJQUwsWUFBTSxHQUFHRSxPQUFPLENBQUNDLE1BQWpCLENBWndELENBY3hEOztBQUNBLFVBQUksT0FBT04sSUFBUCxLQUFnQixRQUFoQixJQUNBLE9BQU9DLEVBQVAsS0FBYyxRQURkLElBRUEsT0FBT0MsUUFBUCxLQUFvQixRQUZwQixJQUdBLE9BQU94VCxNQUFQLEtBQWtCLFVBSHRCLEVBR2tDO0FBQzlCO0FBQ0gsT0FwQnVELENBc0J4RDs7O0FBQ0EsVUFBSSxPQUFPMFQsSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM1QkEsWUFBSSxHQUFHLGdCQUFXLENBQUUsQ0FBcEI7QUFDSCxPQXpCdUQsQ0EyQnhEOzs7QUFDQSxVQUFJSyxHQUFHLEdBQUduVixNQUFNLENBQUNvTCxxQkFBUCxJQUFnQyxVQUFTRSxRQUFULEVBQW1CO0FBQ3pEdEwsY0FBTSxDQUFDb0QsVUFBUCxDQUFrQmtJLFFBQWxCLEVBQTRCLE9BQU8sRUFBbkM7QUFDSCxPQUZELENBNUJ3RCxDQWdDeEQ7OztBQUNBLFVBQUk4SixRQUFRLEdBQUcsS0FBZjtBQUNBLFVBQUlDLE1BQU0sR0FBR1YsRUFBRSxHQUFHRCxJQUFsQjs7QUFFQSxlQUFTWSxJQUFULENBQWNDLFNBQWQsRUFBeUI7QUFDckIsWUFBSXBTLElBQUksR0FBRyxDQUFDb1MsU0FBUyxJQUFJLENBQUMsSUFBSW5RLElBQUosRUFBZixJQUE2QjRLLEtBQXhDOztBQUVBLFlBQUk3TSxJQUFJLElBQUksQ0FBWixFQUFlO0FBQ1gvQixnQkFBTSxDQUFDeVQsTUFBTSxDQUFDMVIsSUFBRCxFQUFPdVIsSUFBUCxFQUFhVyxNQUFiLEVBQXFCVCxRQUFyQixDQUFQLENBQU47QUFDSDs7QUFDRCxZQUFJelIsSUFBSSxJQUFJLENBQVIsSUFBYUEsSUFBSSxJQUFJeVIsUUFBekIsRUFBbUM7QUFDL0J4VCxnQkFBTSxDQUFDdVQsRUFBRCxDQUFOO0FBQ0FHLGNBQUk7QUFDUCxTQUhELE1BR087QUFDSEssYUFBRyxDQUFDRyxJQUFELENBQUg7QUFDSDtBQUNKOztBQUVEbFUsWUFBTSxDQUFDc1QsSUFBRCxDQUFOLENBbER3RCxDQW9EeEQ7O0FBQ0EsVUFBSTFFLEtBQUssR0FBR2hRLE1BQU0sQ0FBQ3dWLFdBQVAsSUFBc0J4VixNQUFNLENBQUN3VixXQUFQLENBQW1CQyxHQUF6QyxHQUErQ3pWLE1BQU0sQ0FBQ3dWLFdBQVAsQ0FBbUJDLEdBQW5CLEVBQS9DLEdBQTBFLENBQUMsSUFBSXJRLElBQUosRUFBdkY7QUFFQStQLFNBQUcsQ0FBQ0csSUFBRCxDQUFIO0FBQ0gsS0E3eUJFO0FBK3lCSEksYUFBUyxFQUFFLG1CQUFTM2YsRUFBVCxFQUFhNGYsSUFBYixFQUFtQkMsS0FBbkIsRUFBMEI7QUFDakM3ZixRQUFFLEdBQUc0QixNQUFNLENBQUM0QyxHQUFQLENBQVd4RSxFQUFYLENBQUw7QUFDQSxVQUFJaUQsR0FBRyxHQUFHLEVBQVY7O0FBRUEsVUFBSWpELEVBQUUsWUFBWThmLFdBQWQsS0FBOEIsS0FBbEMsRUFBeUM7QUFDckM7QUFDSDs7QUFFRCxVQUFJLENBQUM5ZixFQUFFLENBQUNnTixZQUFILENBQWdCLFlBQVk0UyxJQUE1QixDQUFELElBQXNDQyxLQUFLLEtBQUssS0FBcEQsRUFBMkQ7QUFDdkQsWUFBSTFYLEtBQUosQ0FEdUQsQ0FHdkQ7QUFDQTs7QUFDQWxGLFdBQUcsR0FBR2pELEVBQUUsQ0FBQytmLEtBQUgsQ0FBU0MsT0FBZjtBQUNBaGdCLFVBQUUsQ0FBQytmLEtBQUgsQ0FBU0MsT0FBVCxHQUFtQix5REFBbkI7O0FBRUEsWUFBSUosSUFBSSxJQUFJLE9BQVosRUFBcUI7QUFDakJ6WCxlQUFLLEdBQUduSSxFQUFFLENBQUNpZSxXQUFYO0FBQ0gsU0FGRCxNQUVPLElBQUkyQixJQUFJLElBQUksUUFBWixFQUFzQjtBQUN6QnpYLGVBQUssR0FBR25JLEVBQUUsQ0FBQ3llLFlBQVg7QUFDSDs7QUFFRHplLFVBQUUsQ0FBQytmLEtBQUgsQ0FBU0MsT0FBVCxHQUFtQi9jLEdBQW5CLENBZHVELENBZ0J2RDs7QUFDQWpELFVBQUUsQ0FBQ3VOLFlBQUgsQ0FBZ0IsWUFBWXFTLElBQTVCLEVBQWtDelgsS0FBbEM7QUFFQSxlQUFPNlYsVUFBVSxDQUFDN1YsS0FBRCxDQUFqQjtBQUNILE9BcEJELE1Bb0JPO0FBQ0g7QUFDQSxlQUFPNlYsVUFBVSxDQUFDaGUsRUFBRSxDQUFDZ04sWUFBSCxDQUFnQixZQUFZNFMsSUFBNUIsQ0FBRCxDQUFqQjtBQUNIO0FBQ0osS0EvMEJFO0FBaTFCSEssZ0JBQVksRUFBRSxzQkFBU2pnQixFQUFULEVBQWE2ZixLQUFiLEVBQW9CO0FBQzlCLGFBQU9qZSxNQUFNLENBQUMrZCxTQUFQLENBQWlCM2YsRUFBakIsRUFBcUIsUUFBckIsRUFBK0I2ZixLQUEvQixDQUFQO0FBQ0gsS0FuMUJFO0FBcTFCSGxiLGVBQVcsRUFBRSxxQkFBUzNFLEVBQVQsRUFBYTZmLEtBQWIsRUFBb0I7QUFDN0IsYUFBT2plLE1BQU0sQ0FBQytkLFNBQVAsQ0FBaUIzZixFQUFqQixFQUFxQixPQUFyQixFQUE4QjZmLEtBQTlCLENBQVA7QUFDSCxLQXYxQkU7QUF5MUJISyxhQUFTLEVBQUUsbUJBQVNyWixPQUFULEVBQWtCc1osTUFBbEIsRUFBMEI7QUFDakM7QUFDQUEsWUFBTSxHQUFHLFdBQVdBLE1BQXBCO0FBQ0EsYUFBUXRaLE9BQU8sSUFBSW9ELE1BQVgsSUFBcUJwRCxPQUFPLElBQUl2QyxRQUFqQyxHQUNIOGIsSUFBSSxDQUFFRCxNQUFNLElBQUksV0FBWCxHQUEwQixhQUExQixHQUEwQyxhQUEzQyxDQUFKLElBQ0NFLHVCQUF1QixJQUFJL2IsUUFBUSxDQUFDd1EsZUFBVCxDQUF5QnFMLE1BQXpCLENBRDVCLElBRUE3YixRQUFRLENBQUN3QyxJQUFULENBQWNxWixNQUFkLENBSEcsR0FJSHRaLE9BQU8sQ0FBQ3NaLE1BQUQsQ0FKWDtBQUtILEtBajJCRTtBQW0yQkhsZCxPQUFHLEVBQUUsYUFBU2pELEVBQVQsRUFBYXNnQixTQUFiLEVBQXdCblksS0FBeEIsRUFBK0I7QUFDaENuSSxRQUFFLEdBQUc0QixNQUFNLENBQUM0QyxHQUFQLENBQVd4RSxFQUFYLENBQUw7O0FBRUEsVUFBSSxDQUFDQSxFQUFMLEVBQVM7QUFDTDtBQUNIOztBQUVELFVBQUltSSxLQUFLLEtBQUtrQixTQUFkLEVBQXlCO0FBQ3JCckosVUFBRSxDQUFDK2YsS0FBSCxDQUFTTyxTQUFULElBQXNCblksS0FBdEI7QUFDSCxPQUZELE1BRU87QUFDSCxZQUFJbVcsV0FBVyxHQUFHLENBQUN0ZSxFQUFFLENBQUNnYyxhQUFILElBQW9CMVgsUUFBckIsRUFBK0JnYSxXQUFqRCxDQURHLENBRUg7O0FBQ0EsWUFBSUEsV0FBVyxJQUFJQSxXQUFXLENBQUNpQyxnQkFBL0IsRUFBaUQ7QUFDN0M7QUFDQTtBQUNBRCxtQkFBUyxHQUFHQSxTQUFTLENBQUMvRSxPQUFWLENBQWtCLFVBQWxCLEVBQThCLEtBQTlCLEVBQXFDaUYsV0FBckMsRUFBWjtBQUNBLGlCQUFPbEMsV0FBVyxDQUFDaUMsZ0JBQVosQ0FBNkJ2Z0IsRUFBN0IsRUFBaUMsSUFBakMsRUFBdUN5Z0IsZ0JBQXZDLENBQXdESCxTQUF4RCxDQUFQO0FBQ0gsU0FMRCxNQUtPLElBQUl0Z0IsRUFBRSxDQUFDMGdCLFlBQVAsRUFBcUI7QUFBRTtBQUMxQjtBQUNBSixtQkFBUyxHQUFHQSxTQUFTLENBQUMvRSxPQUFWLENBQWtCLFNBQWxCLEVBQTZCLFVBQVNvRixHQUFULEVBQWNDLE1BQWQsRUFBc0I7QUFDM0QsbUJBQU9BLE1BQU0sQ0FBQ0MsV0FBUCxFQUFQO0FBQ0gsV0FGVyxDQUFaO0FBR0ExWSxlQUFLLEdBQUduSSxFQUFFLENBQUMwZ0IsWUFBSCxDQUFnQkosU0FBaEIsQ0FBUixDQUx3QixDQU14Qjs7QUFDQSxjQUFJLHNCQUFzQmxGLElBQXRCLENBQTJCalQsS0FBM0IsQ0FBSixFQUF1QztBQUNuQyxtQkFBUSxVQUFTQSxLQUFULEVBQWdCO0FBQ3BCLGtCQUFJMlksT0FBTyxHQUFHOWdCLEVBQUUsQ0FBQytmLEtBQUgsQ0FBU2hiLElBQXZCO0FBQUEsa0JBQ0lnYyxTQUFTLEdBQUcvZ0IsRUFBRSxDQUFDZ2hCLFlBQUgsQ0FBZ0JqYyxJQURoQztBQUVBL0UsZ0JBQUUsQ0FBQ2doQixZQUFILENBQWdCamMsSUFBaEIsR0FBdUIvRSxFQUFFLENBQUMwZ0IsWUFBSCxDQUFnQjNiLElBQXZDO0FBQ0EvRSxnQkFBRSxDQUFDK2YsS0FBSCxDQUFTaGIsSUFBVCxHQUFnQm9ELEtBQUssSUFBSSxDQUF6QjtBQUNBQSxtQkFBSyxHQUFHbkksRUFBRSxDQUFDK2YsS0FBSCxDQUFTa0IsU0FBVCxHQUFxQixJQUE3QjtBQUNBamhCLGdCQUFFLENBQUMrZixLQUFILENBQVNoYixJQUFULEdBQWdCK2IsT0FBaEI7QUFDQTlnQixnQkFBRSxDQUFDZ2hCLFlBQUgsQ0FBZ0JqYyxJQUFoQixHQUF1QmdjLFNBQXZCO0FBQ0EscUJBQU81WSxLQUFQO0FBQ0gsYUFUTSxDQVNKQSxLQVRJLENBQVA7QUFVSDs7QUFDRCxpQkFBT0EsS0FBUDtBQUNIO0FBQ0o7QUFDSixLQTE0QkU7QUE0NEJIK1ksU0FBSyxFQUFFLGVBQVNsaEIsRUFBVCxFQUFhbWhCLEdBQWIsRUFBa0JwVCxLQUFsQixFQUF5QndILFFBQXpCLEVBQW1DNkwsZUFBbkMsRUFBb0Q7QUFDdkQsVUFBSSxDQUFDcGhCLEVBQUQsSUFBUW1oQixHQUFHLElBQUksSUFBUCxJQUFldmYsTUFBTSxDQUFDNGMsT0FBUCxDQUFleGUsRUFBZixNQUF1QixLQUE5QyxJQUF5RG1oQixHQUFHLElBQUksTUFBUCxJQUFpQnZmLE1BQU0sQ0FBQzRjLE9BQVAsQ0FBZXhlLEVBQWYsTUFBdUIsSUFBckcsRUFBNEc7QUFDeEc7QUFDSDs7QUFFRCtOLFdBQUssR0FBSUEsS0FBSyxHQUFHQSxLQUFILEdBQVcsR0FBekI7QUFDQSxVQUFJc1QsVUFBVSxHQUFHemYsTUFBTSxDQUFDcWUsWUFBUCxDQUFvQmpnQixFQUFwQixDQUFqQjtBQUNBLFVBQUlzaEIsY0FBYyxHQUFHLEtBQXJCO0FBQ0EsVUFBSUMsaUJBQWlCLEdBQUcsS0FBeEI7O0FBRUEsVUFBSTNmLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZSxhQUFmLEtBQWlDNEIsTUFBTSxDQUFDMUIsSUFBUCxDQUFZRixFQUFaLEVBQWdCa0gsR0FBaEIsQ0FBb0IsbUJBQXBCLE1BQTZDLElBQWxGLEVBQXdGO0FBQ3BGdEYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZRixFQUFaLEVBQWdCb0gsR0FBaEIsQ0FBb0IsbUJBQXBCLEVBQXlDeEYsTUFBTSxDQUFDcUIsR0FBUCxDQUFXakQsRUFBWCxFQUFlLGFBQWYsQ0FBekM7QUFDSDs7QUFFRCxVQUFJNEIsTUFBTSxDQUFDcUIsR0FBUCxDQUFXakQsRUFBWCxFQUFlLGdCQUFmLEtBQW9DNEIsTUFBTSxDQUFDMUIsSUFBUCxDQUFZRixFQUFaLEVBQWdCa0gsR0FBaEIsQ0FBb0Isc0JBQXBCLE1BQWdELElBQXhGLEVBQThGO0FBQzFGdEYsY0FBTSxDQUFDMUIsSUFBUCxDQUFZRixFQUFaLEVBQWdCb0gsR0FBaEIsQ0FBb0Isc0JBQXBCLEVBQTRDeEYsTUFBTSxDQUFDcUIsR0FBUCxDQUFXakQsRUFBWCxFQUFlLGdCQUFmLENBQTVDO0FBQ0g7O0FBRUQsVUFBSTRCLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWUYsRUFBWixFQUFnQmtILEdBQWhCLENBQW9CLG1CQUFwQixDQUFKLEVBQThDO0FBQzFDb2Esc0JBQWMsR0FBR2xRLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWUYsRUFBWixFQUFnQndFLEdBQWhCLENBQW9CLG1CQUFwQixDQUFELENBQXpCO0FBQ0g7O0FBRUQsVUFBSTVDLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWUYsRUFBWixFQUFnQmtILEdBQWhCLENBQW9CLHNCQUFwQixDQUFKLEVBQWlEO0FBQzdDcWEseUJBQWlCLEdBQUduUSxRQUFRLENBQUN4UCxNQUFNLENBQUMxQixJQUFQLENBQVlGLEVBQVosRUFBZ0J3RSxHQUFoQixDQUFvQixzQkFBcEIsQ0FBRCxDQUE1QjtBQUNIOztBQUVELFVBQUkyYyxHQUFHLElBQUksSUFBWCxFQUFpQjtBQUFFO0FBQ2ZuaEIsVUFBRSxDQUFDK2YsS0FBSCxDQUFTQyxPQUFULEdBQW1CLG1DQUFuQjs7QUFFQSxZQUFJc0IsY0FBSixFQUFvQjtBQUNoQjFmLGdCQUFNLENBQUM4YyxPQUFQLENBQWUsQ0FBZixFQUFrQjRDLGNBQWxCLEVBQWtDdlQsS0FBbEMsRUFBeUMsVUFBUzVGLEtBQVQsRUFBZ0I7QUFDckRuSSxjQUFFLENBQUMrZixLQUFILENBQVN5QixVQUFULEdBQXVCRixjQUFjLEdBQUduWixLQUFsQixHQUEyQixJQUFqRDtBQUNILFdBRkQsRUFFRyxRQUZIO0FBR0g7O0FBRUQsWUFBSW9aLGlCQUFKLEVBQXVCO0FBQ25CM2YsZ0JBQU0sQ0FBQzhjLE9BQVAsQ0FBZSxDQUFmLEVBQWtCNkMsaUJBQWxCLEVBQXFDeFQsS0FBckMsRUFBNEMsVUFBUzVGLEtBQVQsRUFBZ0I7QUFDeERuSSxjQUFFLENBQUMrZixLQUFILENBQVMwQixhQUFULEdBQTBCRixpQkFBaUIsR0FBR3BaLEtBQXJCLEdBQThCLElBQXZEO0FBQ0gsV0FGRCxFQUVHLFFBRkg7QUFHSDs7QUFFRHZHLGNBQU0sQ0FBQzhjLE9BQVAsQ0FBZSxDQUFmLEVBQWtCMkMsVUFBbEIsRUFBOEJ0VCxLQUE5QixFQUFxQyxVQUFTNUYsS0FBVCxFQUFnQjtBQUNqRG5JLFlBQUUsQ0FBQytmLEtBQUgsQ0FBUzlkLE1BQVQsR0FBbUJvZixVQUFVLEdBQUdsWixLQUFkLEdBQXVCLElBQXpDO0FBQ0gsU0FGRCxFQUVHLFFBRkgsRUFFYSxZQUFXO0FBQ3BCb04sa0JBQVE7QUFDUnZWLFlBQUUsQ0FBQytmLEtBQUgsQ0FBUzlkLE1BQVQsR0FBa0IsRUFBbEI7QUFDQWpDLFlBQUUsQ0FBQytmLEtBQUgsQ0FBUzJCLE9BQVQsR0FBbUIsTUFBbkI7QUFDSCxTQU5EO0FBU0gsT0F4QkQsTUF3Qk8sSUFBSVAsR0FBRyxJQUFJLE1BQVgsRUFBbUI7QUFBRTtBQUN4Qm5oQixVQUFFLENBQUMrZixLQUFILENBQVNDLE9BQVQsR0FBbUIsbUNBQW5COztBQUVBLFlBQUlzQixjQUFKLEVBQW9CO0FBQ2hCMWYsZ0JBQU0sQ0FBQzhjLE9BQVAsQ0FBZSxDQUFmLEVBQWtCNEMsY0FBbEIsRUFBa0N2VCxLQUFsQyxFQUF5QyxVQUFTNUYsS0FBVCxFQUFnQjtBQUNyRG5JLGNBQUUsQ0FBQytmLEtBQUgsQ0FBU3lCLFVBQVQsR0FBc0JyWixLQUFLLEdBQUcsSUFBOUI7QUFDSCxXQUZELEVBRUcsUUFGSCxFQUVhLFlBQVc7QUFDcEJuSSxjQUFFLENBQUMrZixLQUFILENBQVN5QixVQUFULEdBQXNCLEVBQXRCO0FBQ0gsV0FKRDtBQUtIOztBQUVELFlBQUlELGlCQUFKLEVBQXVCO0FBQ25CM2YsZ0JBQU0sQ0FBQzhjLE9BQVAsQ0FBZSxDQUFmLEVBQWtCNkMsaUJBQWxCLEVBQXFDeFQsS0FBckMsRUFBNEMsVUFBUzVGLEtBQVQsRUFBZ0I7QUFDeERuSSxjQUFFLENBQUMrZixLQUFILENBQVMwQixhQUFULEdBQXlCdFosS0FBSyxHQUFHLElBQWpDO0FBQ0gsV0FGRCxFQUVHLFFBRkgsRUFFYSxZQUFXO0FBQ3BCbkksY0FBRSxDQUFDK2YsS0FBSCxDQUFTMEIsYUFBVCxHQUF5QixFQUF6QjtBQUNILFdBSkQ7QUFLSDs7QUFFRDdmLGNBQU0sQ0FBQzhjLE9BQVAsQ0FBZSxDQUFmLEVBQWtCMkMsVUFBbEIsRUFBOEJ0VCxLQUE5QixFQUFxQyxVQUFTNUYsS0FBVCxFQUFnQjtBQUNqRG5JLFlBQUUsQ0FBQytmLEtBQUgsQ0FBUzlkLE1BQVQsR0FBa0JrRyxLQUFLLEdBQUcsSUFBMUI7QUFDSCxTQUZELEVBRUcsUUFGSCxFQUVhLFlBQVc7QUFDcEJvTixrQkFBUTtBQUNSdlYsWUFBRSxDQUFDK2YsS0FBSCxDQUFTOWQsTUFBVCxHQUFrQixFQUFsQjtBQUNBakMsWUFBRSxDQUFDK2YsS0FBSCxDQUFTMkIsT0FBVCxHQUFtQixFQUFuQjtBQUNBMWhCLFlBQUUsQ0FBQytmLEtBQUgsQ0FBUzRCLFFBQVQsR0FBb0IsRUFBcEI7QUFDSCxTQVBEO0FBUUg7QUFDSixLQTE5QkU7QUE0OUJIclQsV0FBTyxFQUFFLGlCQUFTdE8sRUFBVCxFQUFhK04sS0FBYixFQUFvQndILFFBQXBCLEVBQThCO0FBQ25DM1QsWUFBTSxDQUFDc2YsS0FBUCxDQUFhbGhCLEVBQWIsRUFBaUIsSUFBakIsRUFBdUIrTixLQUF2QixFQUE4QndILFFBQTlCO0FBQ0gsS0E5OUJFO0FBZytCSGhILGFBQVMsRUFBRSxtQkFBU3ZPLEVBQVQsRUFBYStOLEtBQWIsRUFBb0J3SCxRQUFwQixFQUE4QjtBQUNyQzNULFlBQU0sQ0FBQ3NmLEtBQVAsQ0FBYWxoQixFQUFiLEVBQWlCLE1BQWpCLEVBQXlCK04sS0FBekIsRUFBZ0N3SCxRQUFoQztBQUNILEtBbCtCRTtBQW8rQkh4TSxRQUFJLEVBQUUsY0FBUy9JLEVBQVQsRUFBYTBoQixPQUFiLEVBQXNCO0FBQ3hCLFVBQUksT0FBTzFoQixFQUFQLEtBQWMsV0FBbEIsRUFBK0I7QUFDM0JBLFVBQUUsQ0FBQytmLEtBQUgsQ0FBUzJCLE9BQVQsR0FBb0JBLE9BQU8sR0FBR0EsT0FBSCxHQUFhLE9BQXhDO0FBQ0g7QUFDSixLQXgrQkU7QUEwK0JIcmYsUUFBSSxFQUFFLGNBQVNyQyxFQUFULEVBQWE7QUFDZixVQUFJLE9BQU9BLEVBQVAsS0FBYyxXQUFsQixFQUErQjtBQUMzQkEsVUFBRSxDQUFDK2YsS0FBSCxDQUFTMkIsT0FBVCxHQUFtQixNQUFuQjtBQUNIO0FBQ0osS0E5K0JFO0FBZy9CSC9aLFlBQVEsRUFBRSxrQkFBUzNILEVBQVQsRUFBYTRELElBQWIsRUFBbUI2RSxPQUFuQixFQUE0QkYsR0FBNUIsRUFBaUM7QUFDdkN2SSxRQUFFLEdBQUc0QixNQUFNLENBQUM0QyxHQUFQLENBQVd4RSxFQUFYLENBQUw7O0FBQ0EsVUFBSSxPQUFPQSxFQUFQLEtBQWMsV0FBbEIsRUFBK0I7QUFDM0JBLFVBQUUsQ0FBQ2tLLGdCQUFILENBQW9CdEcsSUFBcEIsRUFBMEI2RSxPQUExQjtBQUNIO0FBQ0osS0FyL0JFO0FBdS9CSDRILGVBQVcsRUFBRSxxQkFBU3JRLEVBQVQsRUFBYTRELElBQWIsRUFBbUI2RSxPQUFuQixFQUE0QjtBQUNyQ3pJLFFBQUUsR0FBRzRCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3hFLEVBQVgsQ0FBTDtBQUNBQSxRQUFFLENBQUN1VCxtQkFBSCxDQUF1QjNQLElBQXZCLEVBQTZCNkUsT0FBN0I7QUFDSCxLQTEvQkU7QUE0L0JIekgsTUFBRSxFQUFFLFlBQVM2RixPQUFULEVBQWtCc1csUUFBbEIsRUFBNEI3VSxLQUE1QixFQUFtQ0csT0FBbkMsRUFBNEM7QUFDNUMsVUFBSSxDQUFDMFUsUUFBTCxFQUFlO0FBQ1g7QUFDSDs7QUFFRCxVQUFJeUUsT0FBTyxHQUFHaGdCLE1BQU0sQ0FBQ3dKLFdBQVAsQ0FBbUIsT0FBbkIsQ0FBZDs7QUFFQW5CLFlBQU0sQ0FBQ29OLDRCQUFQLENBQW9DdUssT0FBcEMsSUFBK0MsVUFBU2hmLENBQVQsRUFBWTtBQUN2RCxZQUFJaWYsT0FBTyxHQUFHaGIsT0FBTyxDQUFDOEcsZ0JBQVIsQ0FBeUJ3UCxRQUF6QixDQUFkO0FBQ0EsWUFBSXRhLE1BQU0sR0FBR0QsQ0FBQyxDQUFDQyxNQUFmOztBQUVBLGVBQU9BLE1BQU0sSUFBSUEsTUFBTSxLQUFLZ0UsT0FBNUIsRUFBcUM7QUFDakMsZUFBSyxJQUFJd0IsQ0FBQyxHQUFHLENBQVIsRUFBV3VHLENBQUMsR0FBR2lULE9BQU8sQ0FBQ3hlLE1BQTVCLEVBQW9DZ0YsQ0FBQyxHQUFHdUcsQ0FBeEMsRUFBMkN2RyxDQUFDLEVBQTVDLEVBQWdEO0FBQzVDLGdCQUFJeEYsTUFBTSxLQUFLZ2YsT0FBTyxDQUFDeFosQ0FBRCxDQUF0QixFQUEyQjtBQUN2QkkscUJBQU8sQ0FBQ0MsSUFBUixDQUFhN0YsTUFBYixFQUFxQkQsQ0FBckI7QUFDSDtBQUNKOztBQUVEQyxnQkFBTSxHQUFHQSxNQUFNLENBQUM2TixVQUFoQjtBQUNIO0FBQ0osT0FiRDs7QUFlQTlPLFlBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JkLE9BQWhCLEVBQXlCeUIsS0FBekIsRUFBZ0MyQixNQUFNLENBQUNvTiw0QkFBUCxDQUFvQ3VLLE9BQXBDLENBQWhDO0FBRUEsYUFBT0EsT0FBUDtBQUNILEtBcmhDRTtBQXVoQ0h6WCxPQUFHLEVBQUUsYUFBU3RELE9BQVQsRUFBa0J5QixLQUFsQixFQUF5QnNaLE9BQXpCLEVBQWtDO0FBQ25DLFVBQUksQ0FBQy9hLE9BQUQsSUFBWSxDQUFDb0QsTUFBTSxDQUFDb04sNEJBQVAsQ0FBb0N1SyxPQUFwQyxDQUFqQixFQUErRDtBQUMzRDtBQUNIOztBQUVEaGdCLFlBQU0sQ0FBQ3lPLFdBQVAsQ0FBbUJ4SixPQUFuQixFQUE0QnlCLEtBQTVCLEVBQW1DMkIsTUFBTSxDQUFDb04sNEJBQVAsQ0FBb0N1SyxPQUFwQyxDQUFuQztBQUVBLGFBQU8zWCxNQUFNLENBQUNvTiw0QkFBUCxDQUFvQ3VLLE9BQXBDLENBQVA7QUFDSCxLQS9oQ0U7QUFpaUNIclosT0FBRyxFQUFFLFNBQVN1WixPQUFULENBQWlCOWhCLEVBQWpCLEVBQXFCNEQsSUFBckIsRUFBMkIyUixRQUEzQixFQUFxQztBQUN0Q3ZWLFFBQUUsR0FBRzRCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3hFLEVBQVgsQ0FBTDtBQUVBQSxRQUFFLENBQUNrSyxnQkFBSCxDQUFvQnRHLElBQXBCLEVBQTBCLFNBQVNtZSxNQUFULENBQWdCbmYsQ0FBaEIsRUFBbUI7QUFDekM7QUFDQSxZQUFJQSxDQUFDLENBQUNDLE1BQUYsSUFBWUQsQ0FBQyxDQUFDQyxNQUFGLENBQVMwUSxtQkFBekIsRUFBOEM7QUFDMUMzUSxXQUFDLENBQUNDLE1BQUYsQ0FBUzBRLG1CQUFULENBQTZCM1EsQ0FBQyxDQUFDZ0IsSUFBL0IsRUFBcUNtZSxNQUFyQztBQUNILFNBSndDLENBTXpDOzs7QUFDQSxlQUFPeE0sUUFBUSxDQUFDM1MsQ0FBRCxDQUFmO0FBQ0gsT0FSRDtBQVNILEtBN2lDRTtBQStpQ0hvZixRQUFJLEVBQUUsY0FBU3JCLEdBQVQsRUFBYztBQUNoQixVQUFJcUIsSUFBSSxHQUFHLENBQVg7QUFBQSxVQUNJM1osQ0FESjtBQUFBLFVBQ080WixHQURQO0FBR0EsVUFBSXRCLEdBQUcsQ0FBQ3RkLE1BQUosS0FBZSxDQUFuQixFQUFzQixPQUFPMmUsSUFBUDs7QUFDdEIsV0FBSzNaLENBQUMsR0FBRyxDQUFULEVBQVlBLENBQUMsR0FBR3NZLEdBQUcsQ0FBQ3RkLE1BQXBCLEVBQTRCZ0YsQ0FBQyxFQUE3QixFQUFpQztBQUM3QjRaLFdBQUcsR0FBR3RCLEdBQUcsQ0FBQ3VCLFVBQUosQ0FBZTdaLENBQWYsQ0FBTjtBQUNBMlosWUFBSSxHQUFJLENBQUNBLElBQUksSUFBSSxDQUFULElBQWNBLElBQWYsR0FBdUJDLEdBQTlCO0FBQ0FELFlBQUksSUFBSSxDQUFSLENBSDZCLENBR2xCO0FBQ2Q7O0FBRUQsYUFBT0EsSUFBUDtBQUNILEtBM2pDRTtBQTZqQ0hHLGdCQUFZLEVBQUUsc0JBQVNuaUIsRUFBVCxFQUFhb2lCLGFBQWIsRUFBNEI3TSxRQUE1QixFQUFzQztBQUNoRCxVQUFJOE0sU0FBSjtBQUNBLFVBQUlDLFVBQVUsR0FBRztBQUNiRCxpQkFBUyxFQUFFLGNBREU7QUFFYkUsa0JBQVUsRUFBRSxlQUZDO0FBR2JDLG9CQUFZLEVBQUUsaUJBSEQ7QUFJYkMsdUJBQWUsRUFBRSxvQkFKSjtBQUtiQyxtQkFBVyxFQUFFO0FBTEEsT0FBakI7O0FBUUEsV0FBSyxJQUFJeEQsQ0FBVCxJQUFjb0QsVUFBZCxFQUEwQjtBQUN0QixZQUFJdGlCLEVBQUUsQ0FBQytmLEtBQUgsQ0FBU2IsQ0FBVCxNQUFnQjdWLFNBQXBCLEVBQStCO0FBQzNCZ1osbUJBQVMsR0FBR0MsVUFBVSxDQUFDcEQsQ0FBRCxDQUF0QjtBQUNIO0FBQ0o7O0FBRUR0ZCxZQUFNLENBQUNSLFFBQVAsQ0FBZ0JwQixFQUFoQixFQUFvQixjQUFjb2lCLGFBQWxDO0FBRUF4Z0IsWUFBTSxDQUFDMkcsR0FBUCxDQUFXdkksRUFBWCxFQUFlcWlCLFNBQWYsRUFBMEIsWUFBVztBQUNqQ3pnQixjQUFNLENBQUNvRSxXQUFQLENBQW1CaEcsRUFBbkIsRUFBdUIsY0FBY29pQixhQUFyQztBQUNILE9BRkQ7O0FBSUEsVUFBSTdNLFFBQUosRUFBYztBQUNWM1QsY0FBTSxDQUFDMkcsR0FBUCxDQUFXdkksRUFBWCxFQUFlcWlCLFNBQWYsRUFBMEI5TSxRQUExQjtBQUNIO0FBQ0osS0F0bENFO0FBd2xDSC9ELGlCQUFhLEVBQUUsdUJBQVN4UixFQUFULEVBQWF1VixRQUFiLEVBQXVCO0FBQ2xDLFVBQUlvTixVQUFKO0FBQ0EsVUFBSUMsV0FBVyxHQUFHO0FBQ2RELGtCQUFVLEVBQUUsZUFERTtBQUVkRSxtQkFBVyxFQUFFLGdCQUZDO0FBR2RDLHFCQUFhLEVBQUUsa0JBSEQ7QUFJZEMsd0JBQWdCLEVBQUUscUJBSko7QUFLZEMsb0JBQVksRUFBRTtBQUxBLE9BQWxCOztBQVFBLFdBQUssSUFBSTlELENBQVQsSUFBYzBELFdBQWQsRUFBMkI7QUFDdkIsWUFBSTVpQixFQUFFLENBQUMrZixLQUFILENBQVNiLENBQVQsTUFBZ0I3VixTQUFwQixFQUErQjtBQUMzQnNaLG9CQUFVLEdBQUdDLFdBQVcsQ0FBQzFELENBQUQsQ0FBeEI7QUFDSDtBQUNKOztBQUVEdGQsWUFBTSxDQUFDMkcsR0FBUCxDQUFXdkksRUFBWCxFQUFlMmlCLFVBQWYsRUFBMkJwTixRQUEzQjtBQUNILEtBem1DRTtBQTJtQ0gwTixnQkFBWSxFQUFFLHNCQUFTampCLEVBQVQsRUFBYXVWLFFBQWIsRUFBdUI7QUFDakMsVUFBSThNLFNBQUo7QUFDQSxVQUFJQyxVQUFVLEdBQUc7QUFDYkQsaUJBQVMsRUFBRSxjQURFO0FBRWJFLGtCQUFVLEVBQUUsZUFGQztBQUdiQyxvQkFBWSxFQUFFLGlCQUhEO0FBSWJDLHVCQUFlLEVBQUUsb0JBSko7QUFLYkMsbUJBQVcsRUFBRTtBQUxBLE9BQWpCOztBQVFBLFdBQUssSUFBSXhELENBQVQsSUFBY29ELFVBQWQsRUFBMEI7QUFDdEIsWUFBSXRpQixFQUFFLENBQUMrZixLQUFILENBQVNiLENBQVQsTUFBZ0I3VixTQUFwQixFQUErQjtBQUMzQmdaLG1CQUFTLEdBQUdDLFVBQVUsQ0FBQ3BELENBQUQsQ0FBdEI7QUFDSDtBQUNKOztBQUVEdGQsWUFBTSxDQUFDMkcsR0FBUCxDQUFXdkksRUFBWCxFQUFlcWlCLFNBQWYsRUFBMEI5TSxRQUExQjtBQUNILEtBNW5DRTtBQThuQ0gyTixnQkFBWSxFQUFFLHNCQUFTbGpCLEVBQVQsRUFBYW1JLEtBQWIsRUFBb0I7QUFDOUIsVUFBSWdOLE9BQU8sR0FBRyxDQUFDLFNBQUQsRUFBWSxNQUFaLEVBQW9CLEtBQXBCLEVBQTJCLElBQTNCLEVBQWlDLEVBQWpDLENBQWQ7O0FBQ0EsV0FBSyxJQUFJOU0sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhNLE9BQU8sQ0FBQzlSLE1BQTVCLEVBQW9DZ0YsQ0FBQyxFQUFyQyxFQUF5QztBQUNyQ3pHLGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZW1WLE9BQU8sQ0FBQzlNLENBQUQsQ0FBUCxHQUFhLGlCQUE1QixFQUErQ0YsS0FBL0M7QUFDSDtBQUNKLEtBbm9DRTtBQXFvQ0hnYixtQkFBZSxFQUFFLHlCQUFTbmpCLEVBQVQsRUFBYW1JLEtBQWIsRUFBb0I7QUFDakMsVUFBSWdOLE9BQU8sR0FBRyxDQUFDLFNBQUQsRUFBWSxNQUFaLEVBQW9CLEtBQXBCLEVBQTJCLElBQTNCLEVBQWlDLEVBQWpDLENBQWQ7O0FBQ0EsV0FBSyxJQUFJOU0sQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRzhNLE9BQU8sQ0FBQzlSLE1BQTVCLEVBQW9DZ0YsQ0FBQyxFQUFyQyxFQUF5QztBQUNyQ3pHLGNBQU0sQ0FBQ3FCLEdBQVAsQ0FBV2pELEVBQVgsRUFBZW1WLE9BQU8sQ0FBQzlNLENBQUQsQ0FBUCxHQUFhLG9CQUE1QixFQUFrREYsS0FBbEQ7QUFDSDtBQUNKLEtBMW9DRTtBQTRvQ0hzRyxZQUFRLEVBQUUsa0JBQVM1TCxNQUFULEVBQWlCMEcsTUFBakIsRUFBeUJzVixRQUF6QixFQUFtQztBQUN6QyxVQUFJQSxRQUFRLEdBQUdBLFFBQVEsR0FBR0EsUUFBSCxHQUFjLEdBQXJDO0FBQ0EsVUFBSWhjLE1BQU0sR0FBR2pCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVzNCLE1BQVgsQ0FBYjtBQUNBLFVBQUl1Z0IsU0FBUyxHQUFHdmdCLE1BQU0sR0FBR2pCLE1BQU0sQ0FBQzJILE1BQVAsQ0FBYzFHLE1BQWQsRUFBc0JpQyxHQUF6QixHQUErQixDQUFyRDtBQUNBLFVBQUl1ZSxTQUFTLEdBQUdwWixNQUFNLENBQUMrSixXQUFQLElBQXNCMVAsUUFBUSxDQUFDd1EsZUFBVCxDQUF5QjFJLFNBQS9DLElBQTREOUgsUUFBUSxDQUFDd0MsSUFBVCxDQUFjc0YsU0FBMUUsSUFBdUYsQ0FBdkc7QUFDQSxVQUFJdVMsSUFBSixFQUFVQyxFQUFWOztBQUVBLFVBQUl3RSxTQUFTLEdBQUdDLFNBQWhCLEVBQTJCO0FBQ3ZCMUUsWUFBSSxHQUFHeUUsU0FBUDtBQUNBeEUsVUFBRSxHQUFHeUUsU0FBTDtBQUNILE9BSEQsTUFHTztBQUNIMUUsWUFBSSxHQUFHMEUsU0FBUDtBQUNBekUsVUFBRSxHQUFHd0UsU0FBTDtBQUNIOztBQUVELFVBQUk3WixNQUFKLEVBQVk7QUFDUnFWLFVBQUUsSUFBSXJWLE1BQU47QUFDSDs7QUFFRDNILFlBQU0sQ0FBQzhjLE9BQVAsQ0FBZUMsSUFBZixFQUFxQkMsRUFBckIsRUFBeUJDLFFBQXpCLEVBQW1DLFVBQVMxVyxLQUFULEVBQWdCO0FBQy9DN0QsZ0JBQVEsQ0FBQ3dRLGVBQVQsQ0FBeUIxSSxTQUF6QixHQUFxQ2pFLEtBQXJDO0FBQ0E3RCxnQkFBUSxDQUFDd0MsSUFBVCxDQUFjNEosVUFBZCxDQUF5QnRFLFNBQXpCLEdBQXFDakUsS0FBckM7QUFDQTdELGdCQUFRLENBQUN3QyxJQUFULENBQWNzRixTQUFkLEdBQTBCakUsS0FBMUI7QUFDSCxPQUpELEVBbkJ5QyxDQXVCckM7QUFDUCxLQXBxQ0U7QUFzcUNIaUUsYUFBUyxFQUFFLG1CQUFTN0MsTUFBVCxFQUFpQnNWLFFBQWpCLEVBQTJCO0FBQ2xDamQsWUFBTSxDQUFDNk0sUUFBUCxDQUFnQixJQUFoQixFQUFzQmxGLE1BQXRCLEVBQThCc1YsUUFBOUI7QUFDSCxLQXhxQ0U7QUEwcUNIeUUsV0FBTyxFQUFFLGlCQUFTL0osR0FBVCxFQUFjO0FBQ25CLGFBQU9BLEdBQUcsSUFBSWxELEtBQUssQ0FBQ2lOLE9BQU4sQ0FBYy9KLEdBQWQsQ0FBZDtBQUNILEtBNXFDRTtBQThxQ0g5UyxTQUFLLEVBQUUsZUFBUzhPLFFBQVQsRUFBbUI7QUFDdEIsVUFBSWpSLFFBQVEsQ0FBQ2lmLFdBQVQsR0FBdUJqZixRQUFRLENBQUNrZixVQUFULEtBQXdCLFVBQS9DLEdBQTREbGYsUUFBUSxDQUFDa2YsVUFBVCxLQUF3QixTQUF4RixFQUFtRztBQUMvRmpPLGdCQUFRO0FBQ1gsT0FGRCxNQUVPO0FBQ0hqUixnQkFBUSxDQUFDNEYsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDcUwsUUFBOUM7QUFDSDtBQUNKLEtBcHJDRTtBQXNyQ0hrTyxXQUFPLEVBQUUsaUJBQVNsSyxHQUFULEVBQWM7QUFDbkIsV0FBSyxJQUFJcUcsSUFBVCxJQUFpQnJHLEdBQWpCLEVBQXNCO0FBQ2xCLFlBQUlBLEdBQUcsQ0FBQ3pELGNBQUosQ0FBbUI4SixJQUFuQixDQUFKLEVBQThCO0FBQzFCLGlCQUFPLEtBQVA7QUFDSDtBQUNKOztBQUVELGFBQU8sSUFBUDtBQUNILEtBOXJDRTtBQWdzQ0g4RCxnQkFBWSxFQUFFLHNCQUFTQyxJQUFULEVBQWU7QUFDekJBLFVBQUksSUFBSSxFQUFSO0FBQ0EsVUFBSXZPLENBQUMsR0FBR3VPLElBQUksQ0FBQzlLLEtBQUwsQ0FBVyxHQUFYLENBQVI7QUFDQSxVQUFJK0ssRUFBRSxHQUFHeE8sQ0FBQyxDQUFDLENBQUQsQ0FBVjtBQUNBLFVBQUl5TyxFQUFFLEdBQUd6TyxDQUFDLENBQUMvUixNQUFGLEdBQVcsQ0FBWCxHQUFlLE1BQU0rUixDQUFDLENBQUMsQ0FBRCxDQUF0QixHQUE0QixFQUFyQztBQUNBLFVBQUkwTyxHQUFHLEdBQUcsY0FBVjs7QUFDQSxhQUFPQSxHQUFHLENBQUMxSSxJQUFKLENBQVN3SSxFQUFULENBQVAsRUFBcUI7QUFDakJBLFVBQUUsR0FBR0EsRUFBRSxDQUFDckksT0FBSCxDQUFXdUksR0FBWCxFQUFnQixPQUFPLEdBQVAsR0FBYSxJQUE3QixDQUFMO0FBQ0g7O0FBQ0QsYUFBT0YsRUFBRSxHQUFHQyxFQUFaO0FBQ0gsS0Exc0NFO0FBNHNDSEUsWUFBUSxFQUFFLG9CQUFXO0FBQ2pCLFVBQUlDLEVBQUUsR0FBRy9aLE1BQU0sQ0FBQzBKLFNBQVAsQ0FBaUJDLFNBQTFCLENBRGlCLENBR2pCO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTs7QUFFQSxVQUFJcVEsSUFBSSxHQUFHRCxFQUFFLENBQUN0SyxPQUFILENBQVcsT0FBWCxDQUFYOztBQUNBLFVBQUl1SyxJQUFJLEdBQUcsQ0FBWCxFQUFjO0FBQ1Y7QUFDQSxlQUFPN1MsUUFBUSxDQUFDNFMsRUFBRSxDQUFDcEwsU0FBSCxDQUFhcUwsSUFBSSxHQUFHLENBQXBCLEVBQXVCRCxFQUFFLENBQUN0SyxPQUFILENBQVcsR0FBWCxFQUFnQnVLLElBQWhCLENBQXZCLENBQUQsRUFBZ0QsRUFBaEQsQ0FBZjtBQUNIOztBQUVELFVBQUlDLE9BQU8sR0FBR0YsRUFBRSxDQUFDdEssT0FBSCxDQUFXLFVBQVgsQ0FBZDs7QUFDQSxVQUFJd0ssT0FBTyxHQUFHLENBQWQsRUFBaUI7QUFDYjtBQUNBLFlBQUlDLEVBQUUsR0FBR0gsRUFBRSxDQUFDdEssT0FBSCxDQUFXLEtBQVgsQ0FBVDtBQUNBLGVBQU90SSxRQUFRLENBQUM0UyxFQUFFLENBQUNwTCxTQUFILENBQWF1TCxFQUFFLEdBQUcsQ0FBbEIsRUFBcUJILEVBQUUsQ0FBQ3RLLE9BQUgsQ0FBVyxHQUFYLEVBQWdCeUssRUFBaEIsQ0FBckIsQ0FBRCxFQUE0QyxFQUE1QyxDQUFmO0FBQ0g7O0FBRUQsVUFBSUMsSUFBSSxHQUFHSixFQUFFLENBQUN0SyxPQUFILENBQVcsT0FBWCxDQUFYOztBQUNBLFVBQUkwSyxJQUFJLEdBQUcsQ0FBWCxFQUFjO0FBQ1Y7QUFDQSxlQUFPaFQsUUFBUSxDQUFDNFMsRUFBRSxDQUFDcEwsU0FBSCxDQUFhd0wsSUFBSSxHQUFHLENBQXBCLEVBQXVCSixFQUFFLENBQUN0SyxPQUFILENBQVcsR0FBWCxFQUFnQjBLLElBQWhCLENBQXZCLENBQUQsRUFBZ0QsRUFBaEQsQ0FBZjtBQUNILE9BbENnQixDQW9DakI7OztBQUNBLGFBQU8sS0FBUDtBQUNILEtBbHZDRTtBQW92Q0hDLFNBQUssRUFBRSxpQkFBVztBQUNkLGFBQVF6aUIsTUFBTSxDQUFDbUUsSUFBUCxDQUFZbkUsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLE1BQVgsQ0FBWixFQUFnQyxXQUFoQyxLQUFnRCxLQUF4RDtBQUNILEtBdHZDRTtBQXd2Q0g7QUFFQTtBQUNBM0MsY0FBVSxFQUFFLG9CQUFTZ0YsT0FBVCxFQUFrQnRGLE9BQWxCLEVBQTJCO0FBQ25DLFVBQUcsQ0FBQ3NGLE9BQUosRUFBYSxPQURzQixDQUVuQzs7QUFDQSxlQUFTdkQsSUFBVCxHQUFnQjtBQUNaLFlBQUlnaEIsRUFBSjtBQUNBLFlBQUlyaUIsTUFBSjs7QUFFQSxZQUFJVixPQUFPLENBQUNVLE1BQVIsWUFBMEJzUSxRQUE5QixFQUF3QztBQUNwQ3RRLGdCQUFNLEdBQUdtUCxRQUFRLENBQUM3UCxPQUFPLENBQUNVLE1BQVIsQ0FBZXlHLElBQWYsRUFBRCxDQUFqQjtBQUNILFNBRkQsTUFFTztBQUNIekcsZ0JBQU0sR0FBR21QLFFBQVEsQ0FBQzdQLE9BQU8sQ0FBQ1UsTUFBVCxDQUFqQjtBQUNILFNBUlcsQ0FVWjs7O0FBQ0EsWUFBSSxDQUFDVixPQUFPLENBQUNPLGtCQUFSLElBQThCUCxPQUFPLENBQUNnakIsZ0JBQXZDLEtBQTREM2lCLE1BQU0sQ0FBQ00sbUJBQVAsQ0FBMkIsbUJBQTNCLENBQWhFLEVBQWlIO0FBQzdHb2lCLFlBQUUsR0FBRzFpQixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCckMsR0FBckIsQ0FBeUIsSUFBekIsQ0FBTDs7QUFDQSxjQUFJOGYsRUFBSixFQUFRO0FBQ0osZ0JBQUkvaUIsT0FBTyxDQUFDMkssb0JBQVosRUFBa0M7QUFDOUJ0SyxvQkFBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixRQUFwQixFQUE4QixNQUE5QjtBQUNILGFBRkQsTUFFTztBQUNIakYsb0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzRELE9BQVgsRUFBb0IsVUFBcEIsRUFBZ0MsTUFBaEM7O0FBQ0Esa0JBQUk1RSxNQUFNLEdBQUcsQ0FBYixFQUFnQjtBQUNaTCxzQkFBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixRQUFwQixFQUE4QjVFLE1BQU0sR0FBRyxJQUF2QztBQUNIO0FBQ0o7O0FBRURxaUIsY0FBRSxDQUFDRSxPQUFIO0FBQ0FGLGNBQUUsR0FBRzFpQixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCakMsTUFBckIsQ0FBNEIsSUFBNUIsQ0FBTDtBQUNILFdBWkQsTUFZTyxJQUFJM0MsTUFBTSxHQUFHLENBQWIsRUFBZTtBQUNsQkwsa0JBQU0sQ0FBQ3FCLEdBQVAsQ0FBVzRELE9BQVgsRUFBb0IsVUFBcEIsRUFBZ0MsTUFBaEM7QUFDQWpGLGtCQUFNLENBQUNxQixHQUFQLENBQVc0RCxPQUFYLEVBQW9CLFFBQXBCLEVBQThCNUUsTUFBTSxHQUFHLElBQXZDO0FBQ0g7O0FBRUQ7QUFDSDs7QUFFRCxZQUFJQSxNQUFNLEdBQUcsQ0FBYixFQUFnQjtBQUNaTCxnQkFBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixRQUFwQixFQUE4QjVFLE1BQU0sR0FBRyxJQUF2QztBQUNIOztBQUVELFlBQUlWLE9BQU8sQ0FBQ2tqQixtQkFBWixFQUFpQztBQUM3QjdpQixnQkFBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixVQUFwQixFQUFnQyxNQUFoQztBQUNBO0FBQ0gsU0F4Q1csQ0EwQ1o7OztBQUNBakYsY0FBTSxDQUFDcUIsR0FBUCxDQUFXNEQsT0FBWCxFQUFvQixVQUFwQixFQUFnQyxRQUFoQztBQUVBeWQsVUFBRSxHQUFHMWlCLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJyQyxHQUFyQixDQUF5QixJQUF6QixDQUFMOztBQUNBLFlBQUk4ZixFQUFKLEVBQVE7QUFDSkEsWUFBRSxDQUFDalosTUFBSDtBQUNILFNBRkQsTUFFTztBQUNIekosZ0JBQU0sQ0FBQ1IsUUFBUCxDQUFnQnlGLE9BQWhCLEVBQXlCLFFBQXpCO0FBQ0F5ZCxZQUFFLEdBQUcsSUFBSUksZ0JBQUosQ0FBcUI3ZCxPQUFyQixFQUE4QjtBQUMvQjhkLHNCQUFVLEVBQUUsR0FEbUI7QUFFL0JDLHVCQUFXLEVBQUUsSUFGa0I7QUFHL0JDLDRCQUFnQixFQUFHdGpCLE9BQU8sQ0FBQzBLLFlBQVIsS0FBeUIsS0FBekIsR0FBaUMsS0FBakMsR0FBeUMsSUFIN0I7QUFJL0I2WSw4QkFBa0IsRUFBRSxFQUpXO0FBSy9CQyw4QkFBa0IsRUFBRSxHQUxXO0FBTS9CQywyQkFBZSxFQUFFcGpCLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWWMsT0FBWixFQUFxQixlQUFyQixLQUF5QyxNQUF6QyxHQUFrRCxJQUFsRCxHQUF5RDtBQU4zQyxXQUE5QixDQUFMO0FBU0FqRixnQkFBTSxDQUFDMUIsSUFBUCxDQUFZMkcsT0FBWixFQUFxQk8sR0FBckIsQ0FBeUIsSUFBekIsRUFBK0JrZCxFQUEvQjtBQUNILFNBNURXLENBOERaOzs7QUFDQSxZQUFJblosR0FBRyxHQUFHdkosTUFBTSxDQUFDbUUsSUFBUCxDQUFZYyxPQUFaLEVBQXFCLElBQXJCLENBQVY7O0FBRUEsWUFBSXRGLE9BQU8sQ0FBQ1MsZ0JBQVIsS0FBNkIsSUFBN0IsSUFBcUNpakIsT0FBckMsSUFBZ0Q5WixHQUFwRCxFQUF5RDtBQUNyRCxjQUFJOFosT0FBTyxDQUFDemdCLEdBQVIsQ0FBWTJHLEdBQVosQ0FBSixFQUFzQjtBQUNsQixnQkFBSTRJLEdBQUcsR0FBRzNDLFFBQVEsQ0FBQzZULE9BQU8sQ0FBQ3pnQixHQUFSLENBQVkyRyxHQUFaLENBQUQsQ0FBbEI7O0FBRUEsZ0JBQUk0SSxHQUFHLEdBQUcsQ0FBVixFQUFhO0FBQ1RsTixxQkFBTyxDQUFDdUYsU0FBUixHQUFvQjJILEdBQXBCO0FBQ0g7QUFDSjs7QUFFRGxOLGlCQUFPLENBQUNxRCxnQkFBUixDQUF5QixhQUF6QixFQUF3QyxZQUFXO0FBQy9DK2EsbUJBQU8sQ0FBQzdkLEdBQVIsQ0FBWStELEdBQVosRUFBaUJ0RSxPQUFPLENBQUN1RixTQUF6QjtBQUNILFdBRkQ7QUFHSDtBQUNKLE9BakZrQyxDQW1GbkM7OztBQUNBOUksVUFBSSxHQXBGK0IsQ0FzRm5DOztBQUNBLFVBQUkvQixPQUFPLENBQUNRLGtCQUFaLEVBQWdDO0FBQzVCSCxjQUFNLENBQUM2TyxnQkFBUCxDQUF3QixZQUFXO0FBQy9Cbk4sY0FBSTtBQUNQLFNBRkQ7QUFHSDtBQUNKLEtBdjFDRTtBQXkxQ0g2SSxnQkFBWSxFQUFFLHNCQUFTdEYsT0FBVCxFQUFrQjtBQUM1QixVQUFJeWQsRUFBRSxHQUFHMWlCLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJyQyxHQUFyQixDQUF5QixJQUF6QixDQUFUOztBQUNBLFVBQUk4ZixFQUFKLEVBQVE7QUFDSkEsVUFBRSxDQUFDalosTUFBSDtBQUNIO0FBQ0osS0E5MUNFO0FBZzJDSDZaLG1CQUFlLEVBQUUseUJBQVNuSSxNQUFULEVBQWlCO0FBQzlCLFVBQUlvSSxTQUFTLEdBQUd2akIsTUFBTSxDQUFDZ0wsT0FBUCxDQUFlbVEsTUFBZixFQUF1QixLQUF2QixDQUFoQjs7QUFDQSxXQUFLLElBQUkxVSxDQUFDLEdBQUcsQ0FBUixFQUFXd0UsR0FBRyxHQUFHc1ksU0FBUyxDQUFDOWhCLE1BQWhDLEVBQXdDZ0YsQ0FBQyxHQUFHd0UsR0FBNUMsRUFBaUR4RSxDQUFDLEVBQWxELEVBQXNEO0FBQ2xEekcsY0FBTSxDQUFDd2pCLGNBQVAsQ0FBc0JELFNBQVMsQ0FBQzljLENBQUQsQ0FBL0I7QUFDSDtBQUNKLEtBcjJDRTtBQXUyQ0gyRCxpQkFBYSxFQUFFLHVCQUFTbkYsT0FBVCxFQUFrQjtBQUM3QixVQUFJeWQsRUFBRSxHQUFHMWlCLE1BQU0sQ0FBQzFCLElBQVAsQ0FBWTJHLE9BQVosRUFBcUJyQyxHQUFyQixDQUF5QixJQUF6QixDQUFUOztBQUNBLFVBQUk4ZixFQUFKLEVBQVE7QUFDSkEsVUFBRSxDQUFDRSxPQUFIO0FBQ0FGLFVBQUUsR0FBRzFpQixNQUFNLENBQUMxQixJQUFQLENBQVkyRyxPQUFaLEVBQXFCakMsTUFBckIsQ0FBNEIsSUFBNUIsQ0FBTDtBQUNIO0FBQ0osS0E3MkNFO0FBKzJDSG9FLFdBQU8sRUFBRSxpQkFBU2hKLEVBQVQsRUFBYXFCLElBQWIsRUFBbUI7QUFDeEIsVUFBSU8sTUFBTSxDQUFDNEMsR0FBUCxDQUFXeEUsRUFBWCxDQUFKLEVBQW9CO0FBQ2hCNEIsY0FBTSxDQUFDNEMsR0FBUCxDQUFXeEUsRUFBWCxFQUFlMEUsU0FBZixHQUEyQnJELElBQTNCO0FBQ0g7QUFDSixLQW4zQ0U7QUFxM0NIZ2tCLFdBQU8sRUFBRSxpQkFBU3JsQixFQUFULEVBQWE7QUFDbEIsVUFBSTRCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBV3hFLEVBQVgsQ0FBSixFQUFvQjtBQUNoQixlQUFPNEIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXeEUsRUFBWCxFQUFlMEUsU0FBdEI7QUFDSDtBQUNKLEtBejNDRTtBQTIzQ0hzRixxQkFBaUIsRUFBRSw2QkFBVztBQUMxQixVQUFJbEQsSUFBSSxHQUFHeEMsUUFBUSxDQUFDd0MsSUFBcEI7QUFDQSxVQUFJekYsSUFBSSxHQUFHaUQsUUFBUSxDQUFDd1EsZUFBcEI7QUFFQSxhQUFPWSxJQUFJLENBQUNDLEdBQUwsQ0FBVTdPLElBQUksQ0FBQ3dlLFlBQWYsRUFBNkJ4ZSxJQUFJLENBQUMyWCxZQUFsQyxFQUFnRHBkLElBQUksQ0FBQ2trQixZQUFyRCxFQUFtRWxrQixJQUFJLENBQUNpa0IsWUFBeEUsRUFBc0Zqa0IsSUFBSSxDQUFDb2QsWUFBM0YsQ0FBUDtBQUNILEtBaDRDRTtBQWs0Q0hwVSxnQkFBWSxFQUFFLHdCQUFXO0FBQ3JCLGFBQVEsQ0FBQy9GLFFBQVEsQ0FBQ2toQixnQkFBVCxJQUE2QmxoQixRQUFRLENBQUN3USxlQUF2QyxFQUF3RDFJLFNBQWhFO0FBQ0g7QUFwNENFLEdBQVA7QUFzNENILENBejZDWSxFQUFiLEMsQ0EyNkNBOzs7QUFDQSxJQUFJLFNBQWlDLE9BQU85RixNQUFNLENBQUNDLE9BQWQsS0FBMEIsV0FBL0QsRUFBNEU7QUFDeEVELFFBQU0sQ0FBQ0MsT0FBUCxHQUFpQjNFLE1BQWpCO0FBQ0gsQyxDQUVEOzs7QUFDQUEsTUFBTSxDQUFDNkUsS0FBUCxDQUFhLFlBQVc7QUFDcEI3RSxRQUFNLENBQUMwQixJQUFQO0FBQ0gsQ0FGRCxFLENBSUE7O0FBQ0EyRyxNQUFNLENBQUNqQyxNQUFQLEdBQWdCLFlBQVc7QUFDdkJwRyxRQUFNLENBQUNvRSxXQUFQLENBQW1CcEUsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLE1BQVgsQ0FBbkIsRUFBdUMsZUFBdkM7QUFDSCxDQUZELEM7Ozs7Ozs7Ozs7OztBQ3hpRGE7O0FBRWIsSUFBSWloQixRQUFRLEdBQUcsWUFBVztBQUN4QixNQUFJM2UsSUFBSjtBQUVBLE1BQUk0ZSxLQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBLE1BQUlDLGtCQUFKO0FBRUEsTUFBSXhaLFNBQUo7QUFFQSxNQUFJeVosaUJBQUosQ0FUd0IsQ0FXeEI7O0FBQ0EsTUFBSUMsVUFBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUN6QkosU0FBSyxHQUFHOWpCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxPQUFYLENBQVIsQ0FEeUIsQ0FHekI7O0FBQ0FvaEIsc0JBQWtCLEdBQUcsSUFBSWpWLFdBQUosQ0FBZ0IsT0FBaEIsRUFBeUI7QUFDNUNHLGVBQVMsRUFBRSxPQURpQztBQUU1Q0YsYUFBTyxFQUFFLElBRm1DO0FBRzVDTyxhQUFPLEVBQUUsaUJBSG1DO0FBSTVDRixjQUFRLEVBQUU7QUFDUnBPLGNBQU0sRUFBRSxzQkFEQTtBQUVSaUIsYUFBSyxFQUFFO0FBRkM7QUFKa0MsS0FBekIsQ0FBckIsQ0FKeUIsQ0FjekI7O0FBQ0EsUUFBSWlpQixJQUFJLEdBQUdua0IsTUFBTSxDQUFDZ1osT0FBUCxDQUFlLFlBQWYsQ0FBWDtBQUNBLFFBQUlvTCxlQUFlLEdBQUlwa0IsTUFBTSxDQUFDbUUsSUFBUCxDQUFZZ2dCLElBQVosRUFBa0Isc0JBQWxCLE1BQThDLEdBQTlDLEdBQW9ELFVBQXBELEdBQWlFLFdBQXhGLENBaEJ5QixDQWtCekI7O0FBQ0EsUUFBSXZiLE1BQUo7O0FBQ0EsUUFBSTVJLE1BQU0sQ0FBQ21FLElBQVAsQ0FBWWdnQixJQUFaLEVBQWtCLG9CQUFsQixNQUE0QyxHQUFoRCxFQUFxRDtBQUNuRHZiLFlBQU0sR0FBRztBQUNQeEksd0JBQWdCLEVBQUUsSUFEWDtBQUNpQjtBQUN4QkMsY0FBTSxFQUFFLGtCQUFXO0FBQUc7QUFDcEI7QUFDQSxjQUFJQSxNQUFKLENBRmlCLENBSWpCOztBQUNBLGNBQUlna0IsWUFBWSxHQUFHN1UsUUFBUSxDQUFDeFAsTUFBTSxDQUFDa0ksV0FBUCxHQUFxQjdILE1BQXRCLENBQTNCLENBTGlCLENBT2pCOztBQUNBLGNBQUlpa0IsU0FBUyxHQUFHdGtCLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWTRpQixLQUFaLEVBQW1CLG1CQUFuQixDQUFoQjtBQUNBLGNBQUlTLG1CQUFtQixHQUFHL1UsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXaWpCLFNBQVgsRUFBc0IsYUFBdEIsQ0FBRCxDQUFsQztBQUNBLGNBQUlFLHNCQUFzQixHQUFHaFYsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXaWpCLFNBQVgsRUFBc0IsZ0JBQXRCLENBQUQsQ0FBckMsQ0FWaUIsQ0FZakI7O0FBQ0EsY0FBSXBoQixHQUFHLEdBQUdsRCxNQUFNLENBQUNrQixJQUFQLENBQVk0aUIsS0FBWixFQUFtQix1QkFBbkIsQ0FBVjtBQUNBLGNBQUlXLFNBQVMsR0FBR2pWLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ0ssTUFBUCxDQUFjNkMsR0FBZCxDQUFELENBQXhCLENBZGlCLENBZ0JqQjs7QUFDQSxjQUFJd2hCLE1BQU0sR0FBRzFrQixNQUFNLENBQUNrQixJQUFQLENBQVk0aUIsS0FBWixFQUFtQiwwQkFBbkIsQ0FBYjtBQUNBLGNBQUlhLGdCQUFnQixHQUFHblYsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXcWpCLE1BQVgsRUFBbUIsYUFBbkIsQ0FBRCxDQUEvQjtBQUNBLGNBQUlFLG1CQUFtQixHQUFHcFYsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXcWpCLE1BQVgsRUFBbUIsZ0JBQW5CLENBQUQsQ0FBbEMsQ0FuQmlCLENBcUJqQjs7QUFDQXJrQixnQkFBTSxHQUFHZ2tCLFlBQVksR0FBR0ksU0FBZixHQUEyQkUsZ0JBQTNCLEdBQThDQyxtQkFBOUMsR0FBb0VMLG1CQUFwRSxHQUEwRkMsc0JBQW5HO0FBRUEsaUJBQU9ua0IsTUFBUDtBQUNEO0FBM0JNLE9BQVQ7QUE2QkQsS0FsRHdCLENBb0R6Qjs7O0FBQ0EwakIsYUFBUyxHQUFHLElBQUlwYixNQUFKLENBQVcsWUFBWCxFQUF5QjtBQUNuQztBQUNBQyxZQUFNLEVBQUVBLE1BRjJCO0FBSW5DO0FBQ0ErQixhQUFPLEVBQUU7QUFDUDlDLGVBQU8sRUFBRTtBQUNQO0FBQ0EscUJBQVN1YyxlQUZGO0FBR1A7QUFDQWxpQixlQUFLLEVBQUU7QUFDTGdELGdCQUFJLEVBQUUsaUJBREQ7QUFFTDJGLGdCQUFJLEVBQUU7QUFGRDtBQUpBLFNBREY7QUFVUEMsY0FBTSxFQUFFLFdBVkQ7QUFVYztBQUNyQmxELGNBQU0sRUFBRSxXQVhELENBV2E7O0FBWGIsT0FMMEI7QUFtQm5DO0FBQ0FpQixlQUFTLEVBQUU7QUFDVEksaUJBQVMsRUFBRSxLQURGLENBQ1E7O0FBRFI7QUFwQndCLEtBQXpCLENBQVo7QUF3QkQsR0E3RUQsQ0Fad0IsQ0EyRnhCOzs7QUFDQSxNQUFNNGIsY0FBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFXO0FBQy9CLFFBQU1DLFNBQVMsR0FBRyxJQUFJalQsV0FBSixDQUFnQixXQUFoQixFQUE2QjtBQUM3Q2xLLFlBQU0sRUFBRSxHQURxQztBQUU3Q3dFLFdBQUssRUFBRTtBQUZzQyxLQUE3QixDQUFsQjtBQUlELEdBTEQsQ0E1RndCLENBbUd4Qjs7O0FBQ0EsTUFBTTRZLHNCQUFxQixHQUFHLFNBQXhCQSxxQkFBd0IsR0FBVztBQUN2QyxRQUFNQyxpQkFBaUIsR0FBRyxFQUExQjtBQUNBLFFBQU1DLG1CQUFtQixHQUFHLEdBQTVCO0FBRUEsV0FBTyxJQUFJcGxCLFNBQUosQ0FBYyxjQUFkLEVBQThCO0FBQ25DYyxZQUFNLEVBQUU7QUFDTmdILGNBQU0sRUFBRSxFQURGO0FBRU5sRSxjQUFNLEVBQUUsRUFGRjtBQUdObkMsZ0JBQVEsRUFBRTtBQUNSNEIsYUFBRyxFQUFFLGVBQVc7QUFDZCxnQkFBSWlQLEdBQUcsR0FBRyxDQUFWOztBQUVBLGdCQUFJblMsTUFBTSxDQUFDTSxtQkFBUCxDQUEyQixTQUEzQixDQUFKLEVBQTJDO0FBQ3pDLGtCQUFJTixNQUFNLENBQUM0TCxRQUFQLENBQWdCMUcsSUFBaEIsRUFBc0Isa0JBQXRCLENBQUosRUFBK0M7QUFDN0NpTixtQkFBRyxHQUFHQSxHQUFHLEdBQUczQyxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVlyQixNQUFNLENBQUM0QyxHQUFQLENBQVcsV0FBWCxDQUFaLEVBQXFDLFFBQXJDLENBQUQsQ0FBcEI7QUFDRDtBQUNGLGFBSkQsTUFJTztBQUNMLGtCQUFJNUMsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjFHLElBQWhCLEVBQXNCLHNCQUF0QixDQUFKLEVBQW1EO0FBQ2pEaU4sbUJBQUcsR0FBR0EsR0FBRyxHQUFHM0MsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFZckIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLGVBQVgsQ0FBWixFQUF5QyxRQUF6QyxDQUFELENBQXBCO0FBQ0Q7QUFDRjs7QUFFRCxtQkFBT3VQLEdBQVA7QUFDRCxXQWZPO0FBZ0JSaFAsY0FBSSxFQUFFLGNBQVN2RCxPQUFULEVBQWtCO0FBQ3RCLGdCQUFJc2xCLFFBQVEsR0FBR3RsQixPQUFPLENBQUNvUixPQUFSLEVBQWY7QUFFQSxtQkFBT2hSLE1BQU0sQ0FBQzJILE1BQVAsQ0FBY3VkLFFBQWQsRUFBd0IvaEIsSUFBL0I7QUFDRCxXQXBCTztBQXFCUnlOLGVBQUssRUFBRSxlQUFTaFIsT0FBVCxFQUFrQjtBQUN2QixnQkFBSXNsQixRQUFRLEdBQUd0bEIsT0FBTyxDQUFDb1IsT0FBUixFQUFmO0FBRUEsZ0JBQUltVSxZQUFZLEdBQUczVixRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVc2akIsUUFBWCxFQUFxQixPQUFyQixDQUFELENBQTNCO0FBQ0EsZ0JBQUlFLFNBQVMsR0FBRzVWLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV3JCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxNQUFYLENBQVgsRUFBK0IsT0FBL0IsQ0FBRCxDQUF4QjtBQUNBLGdCQUFJeWlCLGlCQUFpQixHQUFHcmxCLE1BQU0sQ0FBQzJILE1BQVAsQ0FBY3VkLFFBQWQsRUFBd0IvaEIsSUFBaEQ7QUFFQSxtQkFBT2lpQixTQUFTLEdBQUdELFlBQVosR0FBMkJFLGlCQUFsQztBQUNEO0FBN0JPO0FBSEo7QUFEMkIsS0FBOUIsQ0FBUDtBQXFDRCxHQXpDRDs7QUEyQ0EsU0FBTztBQUNMM2pCLFFBQUksRUFBRSxnQkFBVztBQUNmd0QsVUFBSSxHQUFHbEYsTUFBTSxDQUFDaVosUUFBUCxDQUFnQixNQUFoQixDQUFQO0FBRUEsV0FBS2lMLFNBQUw7QUFDQSxXQUFLVyxhQUFMO0FBQ0EsV0FBS0UscUJBQUwsR0FMZSxDQU9mOztBQUNBam1CLE9BQUMsQ0FBQywyQkFBRCxDQUFELENBQStCTSxFQUEvQixDQUFrQyxPQUFsQyxFQUEyQywwQ0FBM0MsRUFBdUYsVUFBUzRCLENBQVQsRUFBWTtBQUNqR3NrQixnQkFBUSxDQUFDQyxNQUFULENBQWdCQyxPQUFoQixDQUF3QixrREFBeEI7QUFFQXhrQixTQUFDLENBQUNnRixjQUFGO0FBQ0QsT0FKRDtBQUtELEtBZEk7QUFnQkxrZSxhQUFTLEVBQUUscUJBQVc7QUFDcEJBLGdCQUFTO0FBQ1YsS0FsQkk7QUFvQkxXLGlCQUFhLEVBQUUseUJBQVc7QUFDeEJBLG9CQUFhO0FBQ2QsS0F0Qkk7QUF3QkxFLHlCQUFxQixFQUFFLGlDQUFXO0FBQ2hDLFVBQUksQ0FBQy9rQixNQUFNLENBQUM0QyxHQUFQLENBQVcsY0FBWCxDQUFMLEVBQWlDO0FBQy9CO0FBQ0Q7O0FBRURxaEIsdUJBQWlCLEdBQUdjLHNCQUFxQixFQUF6QztBQUNBZCx1QkFBaUIsQ0FBQ3ZqQixVQUFsQjtBQUVBVixZQUFNLENBQUM2TyxnQkFBUCxDQUF3QixZQUFVO0FBQ2hDb1YseUJBQWlCLENBQUN4VCxZQUFsQjtBQUNELE9BRkQ7O0FBSUFzVSw0QkFBcUI7QUFDdEIsS0FyQ0k7QUF1Q0xVLGdCQUFZLEVBQUUsd0JBQVc7QUFDdkIsYUFBTzFCLFNBQVA7QUFDRCxLQXpDSTtBQTJDTDJCLGlDQUE2QixFQUFFLHlDQUFXO0FBQ3hDLFVBQUkxbEIsTUFBTSxDQUFDbVgsY0FBUCxFQUFKLEVBQTZCO0FBQzNCNk0sMEJBQWtCLENBQUN2akIsSUFBbkI7QUFDRDtBQUNGLEtBL0NJO0FBaURMa2xCLGtDQUE4QixFQUFFLDBDQUFXO0FBQ3pDLFVBQUkzbEIsTUFBTSxDQUFDbVgsY0FBUCxFQUFKLEVBQTZCO0FBQzNCeU8sMkJBQW1CLENBQUNubEIsSUFBcEI7QUFDRDtBQUNGO0FBckRJLEdBQVA7QUF1REQsQ0F0TWMsRUFBZixDLENBd01BOzs7QUFDQSxJQUFJLElBQUosRUFBbUM7QUFDakNpRSxRQUFNLENBQUNDLE9BQVAsR0FBaUJrZixRQUFqQjtBQUNELEMsQ0FFRDs7O0FBQ0E3akIsTUFBTSxDQUFDNkUsS0FBUCxDQUFhLFlBQVc7QUFDdEJnZixVQUFRLENBQUNuaUIsSUFBVDtBQUNELENBRkQsRTs7Ozs7Ozs7Ozs7QUNoTkE7QUFDQSxJQUFJbWtCLEtBQUssR0FBRyxZQUFXO0FBRW5CLFNBQU87QUFDSEMsaUJBQWEsRUFBRSx1QkFBU2pnQixHQUFULEVBQWN2SCxJQUFkLEVBQW9CeW5CLEtBQXBCLEVBQTJCM2lCLE1BQTNCLEVBQW1DNGlCLElBQW5DLEVBQXlDdG5CLE9BQXpDLEVBQWtEO0FBQzdELFVBQUltSCxHQUFHLENBQUNwRSxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDbEI7QUFDSCxPQUg0RCxDQUs3RDs7O0FBQ0F1a0IsVUFBSSxHQUFJLE9BQU9BLElBQVAsS0FBZ0IsV0FBakIsR0FBZ0NBLElBQWhDLEdBQXVDLEtBQTlDO0FBQ0F0bkIsYUFBTyxHQUFJLE9BQU9BLE9BQVAsS0FBbUIsV0FBcEIsR0FBbUNBLE9BQW5DLEdBQTZDLEtBQXZEO0FBRUEsVUFBSXVuQixNQUFNLEdBQUc7QUFDVGprQixZQUFJLEVBQUUsTUFERztBQUVUMUQsWUFBSSxFQUFFO0FBQ0Y0bkIsZ0JBQU0sRUFBRSxDQUFDLFNBQUQsRUFBWSxVQUFaLEVBQXdCLE9BQXhCLEVBQWlDLE9BQWpDLEVBQTBDLEtBQTFDLEVBQWlELE1BQWpELEVBQXlELE1BQXpELEVBQWlFLFFBQWpFLEVBQTJFLFdBQTNFLEVBQXdGLFNBQXhGLENBRE47QUFFRkMsa0JBQVEsRUFBRSxDQUFDO0FBQ1BDLGlCQUFLLEVBQUUsRUFEQTtBQUVQQyx1QkFBVyxFQUFFTixLQUZOO0FBR1BPLHVCQUFXLEVBQUVsakIsTUFITjtBQUlQbWpCLDRCQUFnQixFQUFFLENBSlg7QUFLUEMsaUNBQXFCLEVBQUUsQ0FMaEI7QUFNUEMsZ0NBQW9CLEVBQUVDLEtBQUssQ0FBQ0MsT0FBTixDQUFjWixLQUFkLENBQW9CLFNBQXBCLEVBQStCYSxLQUEvQixDQUFxQyxDQUFyQyxFQUF3Q0MsU0FBeEMsRUFOZjtBQU9QQyw0QkFBZ0IsRUFBRUosS0FBSyxDQUFDQyxPQUFOLENBQWNaLEtBQWQsQ0FBb0IsU0FBcEIsRUFBK0JhLEtBQS9CLENBQXFDLENBQXJDLEVBQXdDQyxTQUF4QyxFQVBYO0FBUVBFLHFDQUF5QixFQUFFOW9CLEtBQUssQ0FBQ3FHLGFBQU4sQ0FBb0IsT0FBcEIsQ0FScEI7QUFTUDBpQixpQ0FBcUIsRUFBRU4sS0FBSyxDQUFDQyxPQUFOLENBQWNaLEtBQWQsQ0FBb0IsU0FBcEIsRUFBK0JhLEtBQS9CLENBQXFDLEdBQXJDLEVBQTBDQyxTQUExQyxFQVRoQjtBQVVQYixnQkFBSSxFQUFFQSxJQVZDO0FBV1AxaUIsMkJBQWUsRUFBRXlpQixLQVhWO0FBWVB6bkIsZ0JBQUksRUFBRUE7QUFaQyxXQUFEO0FBRlIsU0FGRztBQW1CVHFCLGVBQU8sRUFBRTtBQUNMeU8sZUFBSyxFQUFFO0FBQ0gwUixtQkFBTyxFQUFFO0FBRE4sV0FERjtBQUlML1Asa0JBQVEsRUFBR3JSLE9BQU8sR0FBRztBQUNqQnVvQixtQkFBTyxFQUFFLElBRFE7QUFFakJDLHFCQUFTLEVBQUUsS0FGTTtBQUdqQnJjLGdCQUFJLEVBQUUsU0FIVztBQUlqQnNjLHVCQUFXLEVBQUUsQ0FKSTtBQUtqQkMsb0JBQVEsRUFBRSxFQUxPO0FBTWpCQyxvQkFBUSxFQUFFLEVBTk87QUFPakJDLHdCQUFZLEVBQUUsQ0FQRztBQVFqQkMseUJBQWEsRUFBRSxLQVJFO0FBU2pCamtCLDJCQUFlLEVBQUVyRixLQUFLLENBQUNxRyxhQUFOLENBQW9CLE9BQXBCLENBVEE7QUFVakJrakIsMEJBQWMsRUFBRSxTQVZDO0FBV2pCQyx3QkFBWSxFQUFFLENBWEc7QUFZakJDLHlCQUFhLEVBQUUsQ0FaRTtBQWFqQkMsd0JBQVksRUFBRTtBQWJHLFdBQUgsR0FjZCxLQWxCQztBQW1CTEMsZ0JBQU0sRUFBRTtBQUNKOUgsbUJBQU8sRUFBRSxLQURMO0FBRUpvRyxrQkFBTSxFQUFFO0FBQ0oyQiwyQkFBYSxFQUFFO0FBRFg7QUFGSixXQW5CSDtBQXlCTEMsb0JBQVUsRUFBRSxLQXpCUDtBQTBCTEMsNkJBQW1CLEVBQUUsSUExQmhCO0FBMkJMQyxlQUFLLEVBQUU7QUFDSG5kLGdCQUFJLEVBQUU7QUFESCxXQTNCRjtBQThCTG9kLGdCQUFNLEVBQUU7QUFDSkMsaUJBQUssRUFBRSxDQUFDO0FBQ0pwSSxxQkFBTyxFQUFFLEtBREw7QUFFSnFJLHVCQUFTLEVBQUUsS0FGUDtBQUdKQyx3QkFBVSxFQUFFO0FBQ1J0SSx1QkFBTyxFQUFFLEtBREQ7QUFFUnVJLDJCQUFXLEVBQUU7QUFGTDtBQUhSLGFBQUQsQ0FESDtBQVNKQyxpQkFBSyxFQUFFLENBQUM7QUFDSnhJLHFCQUFPLEVBQUUsS0FETDtBQUVKcUksdUJBQVMsRUFBRSxLQUZQO0FBR0pDLHdCQUFVLEVBQUU7QUFDUnRJLHVCQUFPLEVBQUUsS0FERDtBQUVSdUksMkJBQVcsRUFBRTtBQUZMO0FBSFIsYUFBRDtBQVRILFdBOUJIO0FBaURMRSxrQkFBUSxFQUFFO0FBQ05DLGdCQUFJLEVBQUU7QUFDRkMscUJBQU8sRUFBRTtBQURQLGFBREE7QUFJTkMsaUJBQUssRUFBRTtBQUNIQyxvQkFBTSxFQUFFLENBREw7QUFFSHJDLHlCQUFXLEVBQUU7QUFGVjtBQUpELFdBakRMO0FBMkRMc0MsZ0JBQU0sRUFBRTtBQUNKdmxCLG1CQUFPLEVBQUU7QUFDTEYsa0JBQUksRUFBRSxDQUREO0FBRUx5TixtQkFBSyxFQUFFLENBRkY7QUFHTDFOLGlCQUFHLEVBQUUsQ0FIQTtBQUlMd2hCLG9CQUFNLEVBQUU7QUFKSDtBQURMO0FBM0RIO0FBbkJBLE9BQWI7QUF5RkEsVUFBSW1FLEtBQUssR0FBRyxJQUFJbkMsS0FBSixDQUFVN2dCLEdBQVYsRUFBZW9nQixNQUFmLENBQVo7QUFDSCxLQXBHRTtBQXNHSDZDLG1CQUFlLEVBQUUseUJBQVNqakIsR0FBVCxFQUFjdkgsSUFBZCxFQUFvQnlWLEdBQXBCLEVBQXlCZ1MsS0FBekIsRUFBZ0MzaUIsTUFBaEMsRUFBd0M7QUFDckQsVUFBSSxDQUFDVixRQUFRLENBQUNtVyxjQUFULENBQXdCaFQsR0FBeEIsQ0FBTCxFQUFtQztBQUMvQjtBQUNIOztBQUVELFVBQUl6QyxNQUFNLEdBQUdBLE1BQU0sR0FBR0EsTUFBSCxHQUFZLENBQS9CLENBTHFELENBT3JEOztBQUNBLFVBQUkybEIsR0FBRyxHQUFHcm1CLFFBQVEsQ0FBQ21XLGNBQVQsQ0FBd0JoVCxHQUF4QixFQUE2Qm1qQixVQUE3QixDQUF3QyxJQUF4QyxDQUFWO0FBRUEsVUFBSUMsUUFBUSxHQUFHRixHQUFHLENBQUNHLG9CQUFKLENBQXlCLENBQXpCLEVBQTRCLENBQTVCLEVBQStCLENBQS9CLEVBQWtDLEdBQWxDLENBQWY7QUFDQUQsY0FBUSxDQUFDRSxZQUFULENBQXNCLENBQXRCLEVBQXlCekMsS0FBSyxDQUFDQyxPQUFOLENBQWNaLEtBQWQsQ0FBb0JBLEtBQXBCLEVBQTJCYSxLQUEzQixDQUFpQyxHQUFqQyxFQUFzQ0MsU0FBdEMsRUFBekI7QUFDQW9DLGNBQVEsQ0FBQ0UsWUFBVCxDQUFzQixDQUF0QixFQUF5QnpDLEtBQUssQ0FBQ0MsT0FBTixDQUFjWixLQUFkLENBQW9CQSxLQUFwQixFQUEyQmEsS0FBM0IsQ0FBaUMsQ0FBakMsRUFBb0NDLFNBQXBDLEVBQXpCO0FBRUEsVUFBSXVDLFVBQVUsR0FBRztBQUNicG5CLFlBQUksRUFBRSxNQURPO0FBRWIxRCxZQUFJLEVBQUU7QUFDRjRuQixnQkFBTSxFQUFFLENBQUMsU0FBRCxFQUFZLFVBQVosRUFBd0IsT0FBeEIsRUFBaUMsT0FBakMsRUFBMEMsS0FBMUMsRUFBaUQsTUFBakQsRUFBeUQsTUFBekQsRUFBaUUsUUFBakUsRUFBMkUsV0FBM0UsRUFBd0YsU0FBeEYsQ0FETjtBQUVGQyxrQkFBUSxFQUFFLENBQUM7QUFDUEMsaUJBQUssRUFBRSxRQURBO0FBRVBDLHVCQUFXLEVBQUVOLEtBRk47QUFHUE8sdUJBQVcsRUFBRWxqQixNQUhOO0FBSVBFLDJCQUFlLEVBQUUybEIsUUFKVjtBQUtQeEMsZ0NBQW9CLEVBQUV4b0IsS0FBSyxDQUFDcUcsYUFBTixDQUFvQixPQUFwQixDQUxmO0FBTVBoRyxnQkFBSSxFQUFFQTtBQU5DLFdBQUQ7QUFGUixTQUZPO0FBYWJxQixlQUFPLEVBQUU7QUFDTG1vQixvQkFBVSxFQUFFLElBRFA7QUFFTEMsNkJBQW1CLEVBQUUsS0FGaEI7QUFHTDNaLGVBQUssRUFBRTtBQUNIMFIsbUJBQU8sRUFBRSxLQUROO0FBRUgzUixnQkFBSSxFQUFFO0FBRkgsV0FIRjtBQU9MNEIsa0JBQVEsRUFBRTtBQUNOa1gsbUJBQU8sRUFBRSxJQURIO0FBRU5DLHFCQUFTLEVBQUUsS0FGTDtBQUdOcmMsZ0JBQUksRUFBRSxTQUhBO0FBSU5zYyx1QkFBVyxFQUFFLENBSlA7QUFLTkMsb0JBQVEsRUFBRSxFQUxKO0FBTU5DLG9CQUFRLEVBQUUsRUFOSjtBQU9OQyx3QkFBWSxFQUFFLENBUFI7QUFRTkMseUJBQWEsRUFBRSxLQVJUO0FBU05qa0IsMkJBQWUsRUFBRXJGLEtBQUssQ0FBQ3FHLGFBQU4sQ0FBb0IsT0FBcEIsQ0FUWDtBQVVOa2pCLDBCQUFjLEVBQUUsU0FWVjtBQVdOQyx3QkFBWSxFQUFFLENBWFI7QUFZTkMseUJBQWEsRUFBRSxDQVpUO0FBYU5DLHdCQUFZLEVBQUU7QUFiUixXQVBMO0FBc0JMQyxnQkFBTSxFQUFFO0FBQ0o5SCxtQkFBTyxFQUFFLEtBREw7QUFFSm9HLGtCQUFNLEVBQUU7QUFDSjJCLDJCQUFhLEVBQUU7QUFEWDtBQUZKLFdBdEJIO0FBNEJMRyxlQUFLLEVBQUU7QUFDSG5kLGdCQUFJLEVBQUU7QUFESCxXQTVCRjtBQStCTG9kLGdCQUFNLEVBQUU7QUFDSkMsaUJBQUssRUFBRSxDQUFDO0FBQ0pwSSxxQkFBTyxFQUFFLEtBREw7QUFFSnNJLHdCQUFVLEVBQUU7QUFDUnRJLHVCQUFPLEVBQUUsS0FERDtBQUVSdUksMkJBQVcsRUFBRTtBQUZMLGVBRlI7QUFNSmdCLG1CQUFLLEVBQUU7QUFDSHZKLHVCQUFPLEVBQUUsS0FETjtBQUVId0osMkJBQVcsRUFBRTtBQUZWO0FBTkgsYUFBRCxDQURIO0FBWUpoQixpQkFBSyxFQUFFLENBQUM7QUFDSnhJLHFCQUFPLEVBQUUsS0FETDtBQUVKc0ksd0JBQVUsRUFBRTtBQUNSdEksdUJBQU8sRUFBRSxLQUREO0FBRVJ1SSwyQkFBVyxFQUFFO0FBRkwsZUFGUjtBQU1KRix1QkFBUyxFQUFFO0FBQ1BwQyxxQkFBSyxFQUFFLFNBREE7QUFFUHdELDBCQUFVLEVBQUUsS0FGTDtBQUdQQywrQkFBZSxFQUFFLElBSFY7QUFJUEMseUJBQVMsRUFBRTtBQUpKLGVBTlA7QUFZSkosbUJBQUssRUFBRTtBQUNIdFYsbUJBQUcsRUFBRUEsR0FERjtBQUVIK0wsdUJBQU8sRUFBRSxLQUZOO0FBR0h3SiwyQkFBVyxFQUFFO0FBSFY7QUFaSCxhQUFEO0FBWkgsV0EvQkg7QUE4RExmLGtCQUFRLEVBQUU7QUFDTkcsaUJBQUssRUFBRTtBQUNIQyxvQkFBTSxFQUFFLENBREw7QUFFSHJDLHlCQUFXLEVBQUUsQ0FGVjtBQUdIb0QseUJBQVcsRUFBRSxDQUhWO0FBSUhDLDhCQUFnQixFQUFFO0FBSmY7QUFERCxXQTlETDtBQXNFTGYsZ0JBQU0sRUFBRTtBQUNKdmxCLG1CQUFPLEVBQUU7QUFDTEYsa0JBQUksRUFBRSxDQUREO0FBRUx5TixtQkFBSyxFQUFFLENBRkY7QUFHTDFOLGlCQUFHLEVBQUUsQ0FIQTtBQUlMd2hCLG9CQUFNLEVBQUU7QUFKSDtBQURMO0FBdEVIO0FBYkksT0FBakI7QUE4RkEsVUFBSW1FLEtBQUssR0FBRyxJQUFJbkMsS0FBSixDQUFVcUMsR0FBVixFQUFlSyxVQUFmLENBQVosQ0E1R3FELENBOEdyRDs7QUFDQXBwQixZQUFNLENBQUM2TyxnQkFBUCxDQUF3QixZQUFXO0FBQy9CZ2EsYUFBSyxDQUFDcGYsTUFBTjtBQUNILE9BRkQ7QUFHSDtBQXhORSxHQUFQO0FBME5ILENBNU5XLEVBQVosQyxDQThOQTs7O0FBQ0EsSUFBSSxJQUFKLEVBQW1DO0FBQy9CL0UsUUFBTSxDQUFDQyxPQUFQLEdBQWlCa2hCLEtBQWpCO0FBQ0gsQzs7Ozs7Ozs7Ozs7O0FDbE9ZOztBQUViLElBQUkrRCxnQkFBZ0IsR0FBRyxZQUFXO0FBQzlCLE1BQUlDLGlCQUFpQixHQUFHN3BCLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxpQ0FBWCxDQUF4QjtBQUNBLE1BQUlrbkIsaUJBQWlCLEdBQUc5cEIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLGlDQUFYLENBQXhCO0FBQ0EsTUFBSW1uQixZQUFZLEdBQUcvcEIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLDJCQUFYLENBQW5CO0FBQ0EsTUFBSW9uQixXQUFXLEdBQUdocUIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLDBCQUFYLENBQWxCOztBQUVBLE1BQUlxbkIsaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixHQUFXO0FBQy9CLFFBQUk3WixJQUFJLEdBQUdwUSxNQUFNLENBQUNrQixJQUFQLENBQVkyb0IsaUJBQVosRUFBK0Isd0JBQS9CLENBQVg7QUFDQSxRQUFJM2tCLElBQUksR0FBR2xGLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWTJvQixpQkFBWixFQUErQix3QkFBL0IsQ0FBWDtBQUVBLFFBQUlLLFNBQVMsR0FBRyxJQUFJbmIsV0FBSixDQUFnQjhhLGlCQUFoQixFQUFtQztBQUMvQzdhLGFBQU8sRUFBRSxJQURzQztBQUUvQ0UsZUFBUyxFQUFFLGlCQUZvQztBQUcvQ0ssYUFBTyxFQUFFLHVDQUhzQztBQUkvQ0YsY0FBUSxFQUFFO0FBSnFDLEtBQW5DLENBQWhCO0FBT0FyUCxVQUFNLENBQUNDLFVBQVAsQ0FBa0JpRixJQUFsQixFQUF3QjtBQUNwQnlkLHNCQUFnQixFQUFFLElBREU7QUFFcEJyWSwwQkFBb0IsRUFBRSxJQUZGO0FBR3BCbkssd0JBQWtCLEVBQUUsSUFIQTtBQUlwQkUsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDa0ksV0FBUCxHQUFxQjdILE1BQXRCLENBQXJCOztBQUVBLFlBQUkrUCxJQUFKLEVBQVU7QUFDTi9QLGdCQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FlLFlBQVAsQ0FBb0JqTyxJQUFwQixDQUFELENBQTFCO0FBQ0EvUCxnQkFBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVcrTyxJQUFYLEVBQWlCLGNBQWpCLENBQUQsQ0FBMUI7QUFDSDs7QUFFRC9QLGNBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXd29CLGlCQUFYLEVBQThCLFlBQTlCLENBQUQsQ0FBMUI7QUFDQXhwQixjQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV3dvQixpQkFBWCxFQUE4QixlQUE5QixDQUFELENBQTFCO0FBRUEsZUFBT3hwQixNQUFQO0FBQ0g7QUFoQm1CLEtBQXhCO0FBa0JILEdBN0JEOztBQStCQSxNQUFJOHBCLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsR0FBVztBQUM5QixRQUFJL1osSUFBSSxHQUFHcFEsTUFBTSxDQUFDa0IsSUFBUCxDQUFZNG9CLGlCQUFaLEVBQStCLHdCQUEvQixDQUFYO0FBQ0EsUUFBSTVrQixJQUFJLEdBQUdsRixNQUFNLENBQUNrQixJQUFQLENBQVk0b0IsaUJBQVosRUFBK0Isd0JBQS9CLENBQVg7QUFFQSxRQUFJSSxTQUFTLEdBQUcsSUFBSW5iLFdBQUosQ0FBZ0IrYSxpQkFBaEIsRUFBbUM7QUFDL0M5YSxhQUFPLEVBQUUsSUFEc0M7QUFFL0NFLGVBQVMsRUFBRSxpQkFGb0M7QUFHL0NLLGFBQU8sRUFBRSx1Q0FIc0M7QUFJL0NGLGNBQVEsRUFBRTtBQUpxQyxLQUFuQyxDQUFoQjtBQU9BclAsVUFBTSxDQUFDQyxVQUFQLENBQWtCaUYsSUFBbEIsRUFBd0I7QUFDcEJ5ZCxzQkFBZ0IsRUFBRSxJQURFO0FBRXBCclksMEJBQW9CLEVBQUUsSUFGRjtBQUdwQm5LLHdCQUFrQixFQUFFLElBSEE7QUFJcEJFLFlBQU0sRUFBRSxrQkFBVztBQUNmLFlBQUlBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ2tJLFdBQVAsR0FBcUI3SCxNQUF0QixDQUFyQjs7QUFFQSxZQUFJK1AsSUFBSixFQUFVO0FBQ04vUCxnQkFBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxZSxZQUFQLENBQW9Cak8sSUFBcEIsQ0FBRCxDQUExQjtBQUNBL1AsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXK08sSUFBWCxFQUFpQixjQUFqQixDQUFELENBQTFCO0FBQ0g7O0FBRUQvUCxjQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV3lvQixpQkFBWCxFQUE4QixZQUE5QixDQUFELENBQTFCO0FBQ0F6cEIsY0FBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVd5b0IsaUJBQVgsRUFBOEIsZUFBOUIsQ0FBRCxDQUExQjtBQUVBLGVBQU96cEIsTUFBUDtBQUNIO0FBaEJtQixLQUF4QjtBQWtCSCxHQTdCRDs7QUErQkEsTUFBSStwQixXQUFXLEdBQUcsU0FBZEEsV0FBYyxHQUFXO0FBQ3pCLFFBQUloYSxJQUFJLEdBQUdwUSxNQUFNLENBQUNrQixJQUFQLENBQVk2b0IsWUFBWixFQUEwQix3QkFBMUIsQ0FBWDtBQUNBLFFBQUk3a0IsSUFBSSxHQUFHbEYsTUFBTSxDQUFDa0IsSUFBUCxDQUFZNm9CLFlBQVosRUFBMEIsd0JBQTFCLENBQVg7QUFFQSxRQUFJRyxTQUFTLEdBQUcsSUFBSW5iLFdBQUosQ0FBZ0JnYixZQUFoQixFQUE4QjtBQUMxQy9hLGFBQU8sRUFBRSxJQURpQztBQUUxQ0UsZUFBUyxFQUFFLGlCQUYrQjtBQUcxQ0ssYUFBTyxFQUFFLGlDQUhpQztBQUkxQ0YsY0FBUSxFQUFFO0FBSmdDLEtBQTlCLENBQWhCO0FBT0FyUCxVQUFNLENBQUNDLFVBQVAsQ0FBa0JpRixJQUFsQixFQUF3QjtBQUNwQnlkLHNCQUFnQixFQUFFLElBREU7QUFFcEJyWSwwQkFBb0IsRUFBRSxJQUZGO0FBR3BCbkssd0JBQWtCLEVBQUUsSUFIQTtBQUlwQkUsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDa0ksV0FBUCxHQUFxQjdILE1BQXRCLENBQXJCOztBQUVBLFlBQUkrUCxJQUFKLEVBQVU7QUFDTi9QLGdCQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FlLFlBQVAsQ0FBb0JqTyxJQUFwQixDQUFELENBQTFCO0FBQ0EvUCxnQkFBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVcrTyxJQUFYLEVBQWlCLGNBQWpCLENBQUQsQ0FBMUI7QUFDSDs7QUFFRC9QLGNBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXMG9CLFlBQVgsRUFBeUIsWUFBekIsQ0FBRCxDQUExQjtBQUNBMXBCLGNBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXMG9CLFlBQVgsRUFBeUIsZUFBekIsQ0FBRCxDQUExQjtBQUVBLGVBQU8xcEIsTUFBUDtBQUNIO0FBaEJtQixLQUF4QjtBQWtCSCxHQTdCRDs7QUErQkEsTUFBSWdxQixVQUFVLEdBQUcsU0FBYkEsVUFBYSxHQUFXO0FBQ3hCLFFBQUlqYSxJQUFJLEdBQUdwUSxNQUFNLENBQUNrQixJQUFQLENBQVk4b0IsV0FBWixFQUF5Qix3QkFBekIsQ0FBWDtBQUNBLFFBQUk5a0IsSUFBSSxHQUFHbEYsTUFBTSxDQUFDa0IsSUFBUCxDQUFZOG9CLFdBQVosRUFBeUIsd0JBQXpCLENBQVg7QUFDQSxRQUFJalQsTUFBTSxHQUFHL1csTUFBTSxDQUFDNEMsR0FBUCxDQUFXLHdCQUFYLENBQWI7QUFDQSxRQUFJMG5CLElBQUksR0FBR3RxQixNQUFNLENBQUNrQixJQUFQLENBQVk2VixNQUFaLEVBQW9CLHFCQUFwQixDQUFYO0FBQ0EsUUFBSXdULE9BQU8sR0FBR3ZxQixNQUFNLENBQUNrQixJQUFQLENBQVk2VixNQUFaLEVBQW9CLHdCQUFwQixDQUFkO0FBRUEsUUFBSW1ULFNBQVMsR0FBRyxJQUFJbmIsV0FBSixDQUFnQmliLFdBQWhCLEVBQTZCO0FBQ3pDaGIsYUFBTyxFQUFFLElBRGdDO0FBRXpDRSxlQUFTLEVBQUUsaUJBRjhCO0FBR3pDSyxhQUFPLEVBQUUsZ0NBSGdDO0FBSXpDRixjQUFRLEVBQUU7QUFKK0IsS0FBN0IsQ0FBaEI7QUFPQXJQLFVBQU0sQ0FBQ0MsVUFBUCxDQUFrQnNxQixPQUFsQixFQUEyQjtBQUN2QjVILHNCQUFnQixFQUFFLElBREs7QUFFdkJyWSwwQkFBb0IsRUFBRSxJQUZDO0FBR3ZCbkssd0JBQWtCLEVBQUUsSUFIRztBQUl2QkUsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsWUFBSUEsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDa0ksV0FBUCxHQUFxQjdILE1BQXRCLENBQXJCO0FBRUFBLGNBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcWUsWUFBUCxDQUFvQmlNLElBQXBCLENBQUQsQ0FBMUI7QUFDQWpxQixjQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV2lwQixJQUFYLEVBQWlCLGNBQWpCLENBQUQsQ0FBMUI7O0FBRUEsWUFBSWxhLElBQUosRUFBVTtBQUNOL1AsZ0JBQU0sR0FBR0EsTUFBTSxHQUFHbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcWUsWUFBUCxDQUFvQmpPLElBQXBCLENBQUQsQ0FBMUI7QUFDQS9QLGdCQUFNLEdBQUdBLE1BQU0sR0FBR21QLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBVytPLElBQVgsRUFBaUIsY0FBakIsQ0FBRCxDQUExQjtBQUNIOztBQUVEL1AsY0FBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVcyb0IsV0FBWCxFQUF3QixZQUF4QixDQUFELENBQTFCO0FBQ0EzcEIsY0FBTSxHQUFHQSxNQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNxQixHQUFQLENBQVcyb0IsV0FBWCxFQUF3QixlQUF4QixDQUFELENBQTFCO0FBRUEsZUFBTzNwQixNQUFQO0FBQ0g7QUFuQnNCLEtBQTNCO0FBcUJILEdBbkNEOztBQXFDQSxTQUFPO0FBQ0hxQixRQUFJLEVBQUUsZ0JBQVc7QUFDYnVvQix1QkFBaUI7QUFDakJFLHNCQUFnQjtBQUNoQkMsaUJBQVc7QUFDWEMsZ0JBQVU7QUFDYjtBQU5FLEdBQVA7QUFRSCxDQWhKc0IsRUFBdkIsQyxDQWtKQTs7O0FBQ0FycUIsTUFBTSxDQUFDNkUsS0FBUCxDQUFhLFlBQVc7QUFDcEIra0Isa0JBQWdCLENBQUNsb0IsSUFBakI7QUFDSCxDQUZELEU7Ozs7Ozs7Ozs7OztBQ3JKYTs7QUFFYixJQUFJOG9CLFlBQVksR0FBRyxZQUFXO0FBQzFCLE1BQUlDLEtBQUssR0FBR3pxQixNQUFNLENBQUM0QyxHQUFQLENBQVcsYUFBWCxDQUFaO0FBQ0EsTUFBSWluQixpQkFBaUIsR0FBRzdwQixNQUFNLENBQUM0QyxHQUFQLENBQVcsK0JBQVgsQ0FBeEI7QUFDQSxNQUFJOG5CLFlBQVksR0FBRzFxQixNQUFNLENBQUM0QyxHQUFQLENBQVcseUJBQVgsQ0FBbkI7QUFDQSxNQUFJK25CLGFBQWEsR0FBRzNxQixNQUFNLENBQUM0QyxHQUFQLENBQVcsMEJBQVgsQ0FBcEI7O0FBRUEsTUFBSWdvQixnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLEdBQVc7QUFDOUIsUUFBSXZxQixNQUFKO0FBQ0EsUUFBSXdxQixHQUFHLEdBQUc3cUIsTUFBTSxDQUFDa0IsSUFBUCxDQUFZdXBCLEtBQVosRUFBbUIsdUJBQW5CLENBQVY7QUFDQSxRQUFJSyxPQUFPLEdBQUc5cUIsTUFBTSxDQUFDa0IsSUFBUCxDQUFZdXBCLEtBQVosRUFBbUIsd0JBQW5CLENBQWQ7QUFFQXBxQixVQUFNLEdBQUdtUCxRQUFRLENBQUN4UCxNQUFNLENBQUNrSSxXQUFQLEdBQXFCN0gsTUFBdEIsQ0FBUixHQUNBbVAsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcWUsWUFBUCxDQUFvQndNLEdBQXBCLENBQUQsQ0FEUixHQUVBcmIsUUFBUSxDQUFDeFAsTUFBTSxDQUFDcUIsR0FBUCxDQUFXd3BCLEdBQVgsRUFBZ0IsZUFBaEIsQ0FBRCxDQUZSLEdBR0MsSUFBSXJiLFFBQVEsQ0FBQ3hQLE1BQU0sQ0FBQ3FCLEdBQVAsQ0FBV3dwQixHQUFYLEVBQWdCLGFBQWhCLENBQUQsQ0FIYixHQUlBLEVBSlQ7QUFNQSxXQUFPeHFCLE1BQVA7QUFDSCxHQVpEOztBQWNBLE1BQUkwcUIsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFXO0FBQzNCLFFBQUliLFNBQVMsR0FBRyxJQUFJbmIsV0FBSixDQUFnQjBiLEtBQWhCLEVBQXVCO0FBQ25DemIsYUFBTyxFQUFFLElBRDBCO0FBRW5DRSxlQUFTLEVBQUUsaUJBRndCO0FBR25DSyxhQUFPLEVBQUUsdUJBSDBCO0FBSW5DRixjQUFRLEVBQUU7QUFKeUIsS0FBdkIsQ0FBaEI7QUFNSCxHQVBEOztBQVNBLE1BQUk0YSxpQkFBaUIsR0FBRyxTQUFwQkEsaUJBQW9CLEdBQVc7QUFDL0JqcUIsVUFBTSxDQUFDQyxVQUFQLENBQWtCNHBCLGlCQUFsQixFQUFxQztBQUNqQ2xILHNCQUFnQixFQUFFLElBRGU7QUFFakNyWSwwQkFBb0IsRUFBRSxJQUZXO0FBR2pDbkssd0JBQWtCLEVBQUUsSUFIYTtBQUlqQ0UsWUFBTSxFQUFFLGtCQUFXO0FBQ2YsZUFBT3VxQixnQkFBZ0IsRUFBdkI7QUFDSDtBQU5nQyxLQUFyQztBQVFILEdBVEQ7O0FBV0EsTUFBSUksV0FBVyxHQUFHLFNBQWRBLFdBQWMsR0FBVztBQUN6QmhyQixVQUFNLENBQUNDLFVBQVAsQ0FBa0J5cUIsWUFBbEIsRUFBZ0M7QUFDNUIvSCxzQkFBZ0IsRUFBRSxJQURVO0FBRTVCclksMEJBQW9CLEVBQUUsSUFGTTtBQUc1Qm5LLHdCQUFrQixFQUFFLElBSFE7QUFJNUJFLFlBQU0sRUFBRSxrQkFBVztBQUNmLGVBQU91cUIsZ0JBQWdCLEVBQXZCO0FBQ0g7QUFOMkIsS0FBaEM7QUFRSCxHQVREOztBQVdBLE1BQUlLLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQVc7QUFDMUJqckIsVUFBTSxDQUFDQyxVQUFQLENBQWtCMHFCLGFBQWxCLEVBQWlDO0FBQzdCaEksc0JBQWdCLEVBQUUsSUFEVztBQUU3QnJZLDBCQUFvQixFQUFFLElBRk87QUFHN0JuSyx3QkFBa0IsRUFBRSxJQUhTO0FBSTdCRSxZQUFNLEVBQUUsa0JBQVc7QUFDZixlQUFPdXFCLGdCQUFnQixFQUF2QjtBQUNIO0FBTjRCLEtBQWpDO0FBUUgsR0FURDs7QUFXQSxNQUFJTSx1QkFBdUIsR0FBRyxTQUExQkEsdUJBQTBCLEdBQVc7QUFDckNwc0IsS0FBQyxDQUFDMnJCLEtBQUQsQ0FBRCxDQUFTdnBCLElBQVQsQ0FBYyxzQkFBZCxFQUFzQzlCLEVBQXRDLENBQXlDLGNBQXpDLEVBQXlELFVBQVU0QixDQUFWLEVBQWE7QUFDbEVoQixZQUFNLENBQUN1SyxZQUFQLENBQW9Cc2YsaUJBQXBCO0FBQ0E3cEIsWUFBTSxDQUFDdUssWUFBUCxDQUFvQm1nQixZQUFwQjtBQUNBMXFCLFlBQU0sQ0FBQ3VLLFlBQVAsQ0FBb0JvZ0IsYUFBcEI7QUFDSCxLQUpEO0FBS0gsR0FORDs7QUFRQSxTQUFPO0FBQ0hqcEIsUUFBSSxFQUFFLGdCQUFXO0FBQ2JxcEIsbUJBQWE7QUFDYmQsdUJBQWlCO0FBQ2pCZSxpQkFBVztBQUNYQyxrQkFBWTtBQUNaQyw2QkFBdUI7QUFDMUI7QUFQRSxHQUFQO0FBU0gsQ0EvRWtCLEVBQW5CLEMsQ0FpRkE7OztBQUNBbHJCLE1BQU0sQ0FBQzZFLEtBQVAsQ0FBYSxZQUFXO0FBQ3BCMmxCLGNBQVksQ0FBQzlvQixJQUFiO0FBQ0gsQ0FGRCxFOzs7Ozs7Ozs7Ozs7QUNwRmE7O0FBRWIsSUFBSXlwQixhQUFhLEdBQUcsU0FBaEJBLGFBQWdCLEdBQVc7QUFDM0IsTUFBSWxxQixNQUFKO0FBQ0EsTUFBSXFwQixJQUFKO0FBQ0EsTUFBSTVrQixLQUFKO0FBQ0EsTUFBSTBsQixTQUFKO0FBQ0EsTUFBSUMsYUFBSjtBQUNBLE1BQUlDLGNBQUo7QUFDQSxNQUFJQyxvQkFBSjtBQUNBLE1BQUlDLFVBQUo7QUFDQSxNQUFJeGYsS0FBSyxHQUFHLEVBQVo7QUFFQSxNQUFJeWYsU0FBUyxHQUFHLEtBQWhCO0FBQ0EsTUFBSXRpQixPQUFPLEdBQUcsS0FBZDtBQUNBLE1BQUl1aUIsWUFBWSxHQUFHLEtBQW5CO0FBQ0EsTUFBSUMsY0FBYyxHQUFHLEdBQXJCLENBZDJCLENBY0Q7O0FBQzFCLE1BQUlDLFlBQVksR0FBRyxrRUFBbkI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsMEJBQWxCO0FBQ0EsTUFBSUMsU0FBUyxHQUFHLENBQWhCOztBQUVBLE1BQUlDLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQVc7QUFDMUJMLGdCQUFZLEdBQUcsSUFBZjtBQUNBMXJCLFVBQU0sQ0FBQ1IsUUFBUCxDQUFnQmdzQixVQUFoQixFQUE0QkksWUFBNUI7O0FBRUEsUUFBSVIsU0FBSixFQUFlO0FBQ1hwckIsWUFBTSxDQUFDUyxJQUFQLENBQVkycUIsU0FBWjtBQUNIO0FBQ0osR0FQRDs7QUFTQSxNQUFJWSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFXO0FBQzFCTixnQkFBWSxHQUFHLEtBQWY7QUFDQTFyQixVQUFNLENBQUNvRSxXQUFQLENBQW1Cb25CLFVBQW5CLEVBQStCSSxZQUEvQjs7QUFFQSxRQUFJUixTQUFKLEVBQWU7QUFDWCxVQUFJMWxCLEtBQUssQ0FBQ2EsS0FBTixDQUFZOUUsTUFBWixHQUFxQnFxQixTQUF6QixFQUFvQztBQUNoQzlyQixjQUFNLENBQUNTLElBQVAsQ0FBWTJxQixTQUFaO0FBQ0gsT0FGRCxNQUVPO0FBQ0hwckIsY0FBTSxDQUFDbUgsSUFBUCxDQUFZaWtCLFNBQVosRUFBdUIsTUFBdkI7QUFDSDtBQUNKO0FBQ0osR0FYRDs7QUFhQSxNQUFJYSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFXO0FBQzFCLFFBQUlWLG9CQUFvQixJQUFJLENBQUN2ckIsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjBmLGNBQWhCLEVBQWdDLE1BQWhDLENBQTdCLEVBQXNFO0FBQ2xFeHNCLE9BQUMsQ0FBQ3lzQixvQkFBRCxDQUFELENBQXdCcmlCLFFBQXhCLENBQWlDLFFBQWpDO0FBQ0FwSyxPQUFDLENBQUN5c0Isb0JBQUQsQ0FBRCxDQUF3QnJpQixRQUF4QixDQUFpQyxRQUFqQztBQUNIO0FBQ0osR0FMRDs7QUFPQSxNQUFJeUYsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVztBQUMxQixRQUFJNGMsb0JBQW9CLElBQUl2ckIsTUFBTSxDQUFDNEwsUUFBUCxDQUFnQjBmLGNBQWhCLEVBQWdDLE1BQWhDLENBQTVCLEVBQXFFO0FBQ2pFeHNCLE9BQUMsQ0FBQ3lzQixvQkFBRCxDQUFELENBQXdCcmlCLFFBQXhCLENBQWlDLFFBQWpDO0FBQ0g7QUFDSixHQUpEOztBQU1BLE1BQUlnakIsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixHQUFXO0FBQzNCLFFBQUlULFNBQVMsSUFBSXpmLEtBQUssS0FBS3RHLEtBQUssQ0FBQ2EsS0FBakMsRUFBd0M7QUFDcEN5bEIsa0JBQVk7QUFDWmhzQixZQUFNLENBQUNSLFFBQVAsQ0FBZ0J5QixNQUFoQixFQUF3QjRxQixXQUF4QjtBQUNBSSxrQkFBWTtBQUNaanNCLFlBQU0sQ0FBQ3VLLFlBQVAsQ0FBb0I4Z0IsYUFBcEI7QUFFQTtBQUNIOztBQUVEcmYsU0FBSyxHQUFHdEcsS0FBSyxDQUFDYSxLQUFkO0FBRUF2RyxVQUFNLENBQUNvRSxXQUFQLENBQW1CbkQsTUFBbkIsRUFBMkI0cUIsV0FBM0I7QUFDQUUsZ0JBQVk7QUFDWnBkLGdCQUFZO0FBRVpsRCxjQUFVLENBQUMsWUFBVztBQUNsQjNNLE9BQUMsQ0FBQ3F0QixJQUFGLENBQU87QUFDSEMsV0FBRyxFQUFFLG9FQURGO0FBRUg5dEIsWUFBSSxFQUFFO0FBQ0YwTixlQUFLLEVBQUVBO0FBREwsU0FGSDtBQUtIcWdCLGdCQUFRLEVBQUUsTUFMUDtBQU1IQyxlQUFPLEVBQUUsaUJBQVNDLEdBQVQsRUFBYztBQUNuQmQsbUJBQVMsR0FBRyxJQUFaO0FBQ0FPLHNCQUFZO0FBQ1poc0IsZ0JBQU0sQ0FBQ1IsUUFBUCxDQUFnQnlCLE1BQWhCLEVBQXdCNHFCLFdBQXhCO0FBQ0E3ckIsZ0JBQU0sQ0FBQ29ILE9BQVAsQ0FBZWlrQixhQUFmLEVBQThCa0IsR0FBOUI7QUFDQU4sc0JBQVk7QUFDWmpzQixnQkFBTSxDQUFDdUssWUFBUCxDQUFvQjhnQixhQUFwQjtBQUNILFNBYkU7QUFjSG1CLGFBQUssRUFBRSxlQUFTRCxHQUFULEVBQWM7QUFDakJkLG1CQUFTLEdBQUcsS0FBWjtBQUNBTyxzQkFBWTtBQUNaaHNCLGdCQUFNLENBQUNSLFFBQVAsQ0FBZ0J5QixNQUFoQixFQUF3QjRxQixXQUF4QjtBQUNBN3JCLGdCQUFNLENBQUNvSCxPQUFQLENBQWVpa0IsYUFBZixFQUE4QixvRkFBOUI7QUFDQVksc0JBQVk7QUFDWmpzQixnQkFBTSxDQUFDdUssWUFBUCxDQUFvQjhnQixhQUFwQjtBQUNIO0FBckJFLE9BQVA7QUF1QkgsS0F4QlMsRUF3QlAsSUF4Qk8sQ0FBVjtBQXlCSCxHQXpDRDs7QUEyQ0EsTUFBSW9CLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVN6ckIsQ0FBVCxFQUFZO0FBQzNCMEUsU0FBSyxDQUFDYSxLQUFOLEdBQWMsRUFBZDtBQUNBeUYsU0FBSyxHQUFHLEVBQVI7QUFDQXlmLGFBQVMsR0FBRyxLQUFaO0FBQ0F6ckIsVUFBTSxDQUFDUyxJQUFQLENBQVkycUIsU0FBWjtBQUNBcHJCLFVBQU0sQ0FBQ29FLFdBQVAsQ0FBbUJuRCxNQUFuQixFQUEyQjRxQixXQUEzQjtBQUNBbGQsZ0JBQVk7QUFDZixHQVBEOztBQVNBLE1BQUkrZCxZQUFZLEdBQUcsU0FBZkEsWUFBZSxHQUFXO0FBQzFCLFFBQUlobkIsS0FBSyxDQUFDYSxLQUFOLENBQVk5RSxNQUFaLEdBQXFCcXFCLFNBQXpCLEVBQW9DO0FBQ2hDRSxrQkFBWTtBQUNacmQsa0JBQVk7QUFFWjtBQUNIOztBQUVELFFBQUkrYyxZQUFZLElBQUksSUFBcEIsRUFBMEI7QUFDdEI7QUFDSDs7QUFFRCxRQUFJdmlCLE9BQUosRUFBYTtBQUNUbUMsa0JBQVksQ0FBQ25DLE9BQUQsQ0FBWjtBQUNIOztBQUVEQSxXQUFPLEdBQUdzQyxVQUFVLENBQUMsWUFBVztBQUM1QnlnQixtQkFBYTtBQUNoQixLQUZtQixFQUVqQlAsY0FGaUIsQ0FBcEI7QUFHSCxHQW5CRDs7QUFxQkEsU0FBTztBQUNIanFCLFFBQUksRUFBRSxjQUFTdUQsT0FBVCxFQUFrQjtBQUNwQjtBQUNBaEUsWUFBTSxHQUFHZ0UsT0FBVDtBQUNBcWxCLFVBQUksR0FBR3RxQixNQUFNLENBQUNrQixJQUFQLENBQVlELE1BQVosRUFBb0IscUJBQXBCLENBQVA7QUFDQXlFLFdBQUssR0FBRzFGLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWUQsTUFBWixFQUFvQixzQkFBcEIsQ0FBUjtBQUNBbXFCLGVBQVMsR0FBR3ByQixNQUFNLENBQUNrQixJQUFQLENBQVlELE1BQVosRUFBb0Isc0JBQXBCLENBQVo7QUFDQW9xQixtQkFBYSxHQUFHcnJCLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWUQsTUFBWixFQUFvQix3QkFBcEIsQ0FBaEI7QUFDQXFxQixvQkFBYyxHQUFHdHJCLE1BQU0sQ0FBQ2tCLElBQVAsQ0FBWUQsTUFBWixFQUFvQixnQkFBcEIsQ0FBakI7QUFDQXNxQiwwQkFBb0IsR0FBR3ZyQixNQUFNLENBQUNrQixJQUFQLENBQVlELE1BQVosRUFBb0IsMEJBQXBCLENBQXZCO0FBQ0F1cUIsZ0JBQVUsR0FBR3hyQixNQUFNLENBQUNrQixJQUFQLENBQVlELE1BQVosRUFBb0IsY0FBcEIsQ0FBYixDQVRvQixDQVdwQjs7QUFDQWpCLFlBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JMLEtBQWhCLEVBQXVCLE9BQXZCLEVBQWdDZ25CLFlBQWhDO0FBQ0Exc0IsWUFBTSxDQUFDK0YsUUFBUCxDQUFnQkwsS0FBaEIsRUFBdUIsT0FBdkIsRUFBZ0NnbkIsWUFBaEMsRUFib0IsQ0FlcEI7O0FBQ0FwQyxVQUFJLENBQUNxQyxVQUFMLEdBQWtCLFVBQVMzckIsQ0FBVCxFQUFZO0FBQzFCLFlBQUkyWCxHQUFHLEdBQUczWCxDQUFDLENBQUM0ckIsUUFBRixJQUFjNXJCLENBQUMsQ0FBQzZyQixPQUFoQixJQUEyQixDQUFyQzs7QUFDQSxZQUFJbFUsR0FBRyxJQUFJLEVBQVgsRUFBZTtBQUNYM1gsV0FBQyxDQUFDZ0YsY0FBRjtBQUNIO0FBQ0osT0FMRDs7QUFPQWhHLFlBQU0sQ0FBQytGLFFBQVAsQ0FBZ0JxbEIsU0FBaEIsRUFBMkIsT0FBM0IsRUFBb0NxQixZQUFwQztBQUNIO0FBekJFLEdBQVA7QUEyQkgsQ0ExSkQ7O0FBNEpBLElBQUlLLG1CQUFtQixHQUFHM0IsYUFBMUIsQyxDQUVBOztBQUNBbnJCLE1BQU0sQ0FBQzZFLEtBQVAsQ0FBYSxZQUFXO0FBQ3BCLE1BQUk3RSxNQUFNLENBQUM0QyxHQUFQLENBQVcsdUJBQVgsQ0FBSixFQUF5QztBQUNyQ3VvQixpQkFBYSxHQUFHenBCLElBQWhCLENBQXFCMUIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLHVCQUFYLENBQXJCO0FBQ0g7O0FBRUQsTUFBSTVDLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyxxQkFBWCxDQUFKLEVBQXVDO0FBQ25Da3FCLHVCQUFtQixHQUFHcHJCLElBQXRCLENBQTJCMUIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLHFCQUFYLENBQTNCO0FBQ0g7O0FBRUQsTUFBSTVDLE1BQU0sQ0FBQzRDLEdBQVAsQ0FBVyx3QkFBWCxDQUFKLEVBQTBDO0FBQ3RDa3FCLHVCQUFtQixHQUFHcHJCLElBQXRCLENBQTJCMUIsTUFBTSxDQUFDNEMsR0FBUCxDQUFXLHdCQUFYLENBQTNCO0FBQ0g7QUFDSixDQVpELEU7Ozs7Ozs7Ozs7OztBQ2pLQTtBQUFBO0FBQUE7QUFBYTs7QUFFYjtBQUNBO0FBRUE7Ozs7O0FBTUE7O0FBQ0FtcUIsbUJBQU8sQ0FBQywrR0FBRCxDQUFQOztBQUVBMWtCLE1BQU0sQ0FBQzJrQixLQUFQLEdBQWVELG1CQUFPLENBQUMsNENBQUQsQ0FBdEI7QUFDQTFrQixNQUFNLENBQUN6SCxNQUFQLEdBQWdCbXNCLG1CQUFPLENBQUMsb0RBQUQsQ0FBdkI7QUFDQTFrQixNQUFNLENBQUN5YSxnQkFBUCxHQUEwQmlLLG1CQUFPLENBQUMsNEdBQUQsQ0FBakM7QUFDQTFrQixNQUFNLENBQUNnYixPQUFQLEdBQWlCMEosbUJBQU8sQ0FBQyw0REFBRCxDQUF4QjtBQUNBMWtCLE1BQU0sQ0FBQytJLE9BQVAsR0FBaUJBLGtEQUFqQjtBQUNBL0ksTUFBTSxDQUFDaWQsUUFBUCxHQUFrQkEsc0RBQWxCO0FBRUFBLHNEQUFRLENBQUNDLE1BQVQsQ0FBZ0IwSCxJQUFoQixDQUFxQjtBQUNuQjlqQixTQUFPLEVBQUU7QUFEVSxDQUFyQixFLENBSUE7O0FBQ0FkLE1BQU0sQ0FBQ3JJLE1BQVAsR0FBZ0Irc0IsbUJBQU8sQ0FBQyxvRkFBRCxDQUF2QjtBQUNBMWtCLE1BQU0sQ0FBQ3BLLEtBQVAsR0FBZTh1QixtQkFBTyxDQUFDLGtGQUFELENBQXRCO0FBQ0Exa0IsTUFBTSxDQUFDdkQsUUFBUCxHQUFrQmlvQixtQkFBTyxDQUFDLHdGQUFELENBQXpCO0FBQ0Exa0IsTUFBTSxDQUFDbkIsUUFBUCxHQUFrQjZsQixtQkFBTyxDQUFDLHdGQUFELENBQXpCO0FBQ0Exa0IsTUFBTSxDQUFDYixRQUFQLEdBQWtCdWxCLG1CQUFPLENBQUMsd0ZBQUQsQ0FBekI7QUFDQTFrQixNQUFNLENBQUNNLE1BQVAsR0FBZ0Jva0IsbUJBQU8sQ0FBQyxvRkFBRCxDQUF2QjtBQUNBMWtCLE1BQU0sQ0FBQzBHLFdBQVAsR0FBcUJnZSxtQkFBTyxDQUFDLDhGQUFELENBQTVCO0FBQ0Exa0IsTUFBTSxDQUFDeEksU0FBUCxHQUFtQmt0QixtQkFBTyxDQUFDLDBGQUFELENBQTFCO0FBQ0Exa0IsTUFBTSxDQUFDd0osV0FBUCxHQUFxQmtiLG1CQUFPLENBQUMsOEZBQUQsQ0FBNUI7QUFDQTFrQixNQUFNLENBQUNnSyxRQUFQLEdBQWtCMGEsbUJBQU8sQ0FBQyx3RkFBRCxDQUF6QixDLENBRUE7O0FBQ0Exa0IsTUFBTSxDQUFDd2IsUUFBUCxHQUFrQmtKLG1CQUFPLENBQUMsc0VBQUQsQ0FBekI7QUFDQTFrQixNQUFNLENBQUN3ZCxLQUFQLEdBQWVrSCxtQkFBTyxDQUFDLGdFQUFELENBQXRCOztBQUNBQSxtQkFBTyxDQUFDLHdGQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsZ0ZBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQyxrRkFBRCxDQUFQLEMiLCJmaWxlIjoiL2pzL3RlbXBsYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKlxcbiAqIENvbnRhaW5lciBzdHlsZVxcbiAqL1xcbi5wcyB7XFxuICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdy1hbmNob3I6IG5vbmU7XFxuICAtbXMtb3ZlcmZsb3ctc3R5bGU6IG5vbmU7XFxuICB0b3VjaC1hY3Rpb246IGF1dG87XFxuICAtbXMtdG91Y2gtYWN0aW9uOiBhdXRvO1xcbn1cXG5cXG4vKlxcbiAqIFNjcm9sbGJhciByYWlsIHN0eWxlc1xcbiAqL1xcbi5wc19fcmFpbC14IHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBvcGFjaXR5OiAwO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgbGluZWFyLCBvcGFjaXR5IC4ycyBsaW5lYXI7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhciwgb3BhY2l0eSAuMnMgbGluZWFyO1xcbiAgaGVpZ2h0OiAxNXB4O1xcbiAgLyogdGhlcmUgbXVzdCBiZSAnYm90dG9tJyBvciAndG9wJyBmb3IgcHNfX3JhaWwteCAqL1xcbiAgYm90dG9tOiAwcHg7XFxuICAvKiBwbGVhc2UgZG9uJ3QgY2hhbmdlICdwb3NpdGlvbicgKi9cXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLnBzX19yYWlsLXkge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4ycyBsaW5lYXIsIG9wYWNpdHkgLjJzIGxpbmVhcjtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgbGluZWFyLCBvcGFjaXR5IC4ycyBsaW5lYXI7XFxuICB3aWR0aDogMTVweDtcXG4gIC8qIHRoZXJlIG11c3QgYmUgJ3JpZ2h0JyBvciAnbGVmdCcgZm9yIHBzX19yYWlsLXkgKi9cXG4gIHJpZ2h0OiAwO1xcbiAgLyogcGxlYXNlIGRvbid0IGNoYW5nZSAncG9zaXRpb24nICovXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxufVxcblxcbi5wcy0tYWN0aXZlLXggPiAucHNfX3JhaWwteCxcXG4ucHMtLWFjdGl2ZS15ID4gLnBzX19yYWlsLXkge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnBzOmhvdmVyID4gLnBzX19yYWlsLXgsXFxuLnBzOmhvdmVyID4gLnBzX19yYWlsLXksXFxuLnBzLS1mb2N1cyA+IC5wc19fcmFpbC14LFxcbi5wcy0tZm9jdXMgPiAucHNfX3JhaWwteSxcXG4ucHMtLXNjcm9sbGluZy14ID4gLnBzX19yYWlsLXgsXFxuLnBzLS1zY3JvbGxpbmcteSA+IC5wc19fcmFpbC15IHtcXG4gIG9wYWNpdHk6IDAuNjtcXG59XFxuXFxuLnBzIC5wc19fcmFpbC14OmhvdmVyLFxcbi5wcyAucHNfX3JhaWwteTpob3ZlcixcXG4ucHMgLnBzX19yYWlsLXg6Zm9jdXMsXFxuLnBzIC5wc19fcmFpbC15OmZvY3VzLFxcbi5wcyAucHNfX3JhaWwteC5wcy0tY2xpY2tpbmcsXFxuLnBzIC5wc19fcmFpbC15LnBzLS1jbGlja2luZyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xcbiAgb3BhY2l0eTogMC45O1xcbn1cXG5cXG4vKlxcbiAqIFNjcm9sbGJhciB0aHVtYiBzdHlsZXNcXG4gKi9cXG4ucHNfX3RodW1iLXgge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2FhYTtcXG4gIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgLjJzIGxpbmVhciwgaGVpZ2h0IC4ycyBlYXNlLWluLW91dDtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgbGluZWFyLCBoZWlnaHQgLjJzIGVhc2UtaW4tb3V0O1xcbiAgaGVpZ2h0OiA2cHg7XFxuICAvKiB0aGVyZSBtdXN0IGJlICdib3R0b20nIGZvciBwc19fdGh1bWIteCAqL1xcbiAgYm90dG9tOiAycHg7XFxuICAvKiBwbGVhc2UgZG9uJ3QgY2hhbmdlICdwb3NpdGlvbicgKi9cXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuLnBzX190aHVtYi15IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNhYWE7XFxuICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIC4ycyBsaW5lYXIsIHdpZHRoIC4ycyBlYXNlLWluLW91dDtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAuMnMgbGluZWFyLCB3aWR0aCAuMnMgZWFzZS1pbi1vdXQ7XFxuICB3aWR0aDogNnB4O1xcbiAgLyogdGhlcmUgbXVzdCBiZSAncmlnaHQnIGZvciBwc19fdGh1bWIteSAqL1xcbiAgcmlnaHQ6IDJweDtcXG4gIC8qIHBsZWFzZSBkb24ndCBjaGFuZ2UgJ3Bvc2l0aW9uJyAqL1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbn1cXG5cXG4ucHNfX3JhaWwteDpob3ZlciA+IC5wc19fdGh1bWIteCxcXG4ucHNfX3JhaWwteDpmb2N1cyA+IC5wc19fdGh1bWIteCxcXG4ucHNfX3JhaWwteC5wcy0tY2xpY2tpbmcgLnBzX190aHVtYi14IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM5OTk7XFxuICBoZWlnaHQ6IDExcHg7XFxufVxcblxcbi5wc19fcmFpbC15OmhvdmVyID4gLnBzX190aHVtYi15LFxcbi5wc19fcmFpbC15OmZvY3VzID4gLnBzX190aHVtYi15LFxcbi5wc19fcmFpbC15LnBzLS1jbGlja2luZyAucHNfX3RodW1iLXkge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzk5OTtcXG4gIHdpZHRoOiAxMXB4O1xcbn1cXG5cXG4vKiBNUyBzdXBwb3J0cyAqL1xcbkBzdXBwb3J0cyAoLW1zLW92ZXJmbG93LXN0eWxlOiBub25lKSB7XFxuICAucHMge1xcbiAgICBvdmVyZmxvdzogYXV0byAhaW1wb3J0YW50O1xcbiAgfVxcbn1cXG5cXG5AbWVkaWEgc2NyZWVuIGFuZCAoLW1zLWhpZ2gtY29udHJhc3Q6IGFjdGl2ZSksICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSkge1xcbiAgLnBzIHtcXG4gICAgb3ZlcmZsb3c6IGF1dG8gIWltcG9ydGFudDtcXG4gIH1cXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIiwiLyohXG4gKiBKYXZhU2NyaXB0IENvb2tpZSB2Mi4yLjFcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcy1jb29raWUvanMtY29va2llXG4gKlxuICogQ29weXJpZ2h0IDIwMDYsIDIwMTUgS2xhdXMgSGFydGwgJiBGYWduZXIgQnJhY2tcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG47KGZ1bmN0aW9uIChmYWN0b3J5KSB7XG5cdHZhciByZWdpc3RlcmVkSW5Nb2R1bGVMb2FkZXI7XG5cdGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcblx0XHRkZWZpbmUoZmFjdG9yeSk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdFx0cmVnaXN0ZXJlZEluTW9kdWxlTG9hZGVyID0gdHJ1ZTtcblx0fVxuXHRpZiAoIXJlZ2lzdGVyZWRJbk1vZHVsZUxvYWRlcikge1xuXHRcdHZhciBPbGRDb29raWVzID0gd2luZG93LkNvb2tpZXM7XG5cdFx0dmFyIGFwaSA9IHdpbmRvdy5Db29raWVzID0gZmFjdG9yeSgpO1xuXHRcdGFwaS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0d2luZG93LkNvb2tpZXMgPSBPbGRDb29raWVzO1xuXHRcdFx0cmV0dXJuIGFwaTtcblx0XHR9O1xuXHR9XG59KGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gZXh0ZW5kICgpIHtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xuXHRcdGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgYXR0cmlidXRlcyA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdFx0Zm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFx0cmVzdWx0W2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHRmdW5jdGlvbiBkZWNvZGUgKHMpIHtcblx0XHRyZXR1cm4gcy5yZXBsYWNlKC8oJVswLTlBLVpdezJ9KSsvZywgZGVjb2RlVVJJQ29tcG9uZW50KTtcblx0fVxuXG5cdGZ1bmN0aW9uIGluaXQgKGNvbnZlcnRlcikge1xuXHRcdGZ1bmN0aW9uIGFwaSgpIHt9XG5cblx0XHRmdW5jdGlvbiBzZXQgKGtleSwgdmFsdWUsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0YXR0cmlidXRlcyA9IGV4dGVuZCh7XG5cdFx0XHRcdHBhdGg6ICcvJ1xuXHRcdFx0fSwgYXBpLmRlZmF1bHRzLCBhdHRyaWJ1dGVzKTtcblxuXHRcdFx0aWYgKHR5cGVvZiBhdHRyaWJ1dGVzLmV4cGlyZXMgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdGF0dHJpYnV0ZXMuZXhwaXJlcyA9IG5ldyBEYXRlKG5ldyBEYXRlKCkgKiAxICsgYXR0cmlidXRlcy5leHBpcmVzICogODY0ZSs1KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2UncmUgdXNpbmcgXCJleHBpcmVzXCIgYmVjYXVzZSBcIm1heC1hZ2VcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IElFXG5cdFx0XHRhdHRyaWJ1dGVzLmV4cGlyZXMgPSBhdHRyaWJ1dGVzLmV4cGlyZXMgPyBhdHRyaWJ1dGVzLmV4cGlyZXMudG9VVENTdHJpbmcoKSA6ICcnO1xuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXHRcdFx0XHRpZiAoL15bXFx7XFxbXS8udGVzdChyZXN1bHQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSByZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cblx0XHRcdHZhbHVlID0gY29udmVydGVyLndyaXRlID9cblx0XHRcdFx0Y29udmVydGVyLndyaXRlKHZhbHVlLCBrZXkpIDpcblx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpXG5cdFx0XHRcdFx0LnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8M0F8M0N8M0V8M0R8MkZ8M0Z8NDB8NUJ8NUR8NUV8NjB8N0J8N0R8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudCk7XG5cblx0XHRcdGtleSA9IGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoa2V5KSlcblx0XHRcdFx0LnJlcGxhY2UoLyUoMjN8MjR8MjZ8MkJ8NUV8NjB8N0MpL2csIGRlY29kZVVSSUNvbXBvbmVudClcblx0XHRcdFx0LnJlcGxhY2UoL1tcXChcXCldL2csIGVzY2FwZSk7XG5cblx0XHRcdHZhciBzdHJpbmdpZmllZEF0dHJpYnV0ZXMgPSAnJztcblx0XHRcdGZvciAodmFyIGF0dHJpYnV0ZU5hbWUgaW4gYXR0cmlidXRlcykge1xuXHRcdFx0XHRpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0pIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRzdHJpbmdpZmllZEF0dHJpYnV0ZXMgKz0gJzsgJyArIGF0dHJpYnV0ZU5hbWU7XG5cdFx0XHRcdGlmIChhdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdID09PSB0cnVlKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDb25zaWRlcnMgUkZDIDYyNjUgc2VjdGlvbiA1LjI6XG5cdFx0XHRcdC8vIC4uLlxuXHRcdFx0XHQvLyAzLiAgSWYgdGhlIHJlbWFpbmluZyB1bnBhcnNlZC1hdHRyaWJ1dGVzIGNvbnRhaW5zIGEgJXgzQiAoXCI7XCIpXG5cdFx0XHRcdC8vICAgICBjaGFyYWN0ZXI6XG5cdFx0XHRcdC8vIENvbnN1bWUgdGhlIGNoYXJhY3RlcnMgb2YgdGhlIHVucGFyc2VkLWF0dHJpYnV0ZXMgdXAgdG8sXG5cdFx0XHRcdC8vIG5vdCBpbmNsdWRpbmcsIHRoZSBmaXJzdCAleDNCIChcIjtcIikgY2hhcmFjdGVyLlxuXHRcdFx0XHQvLyAuLi5cblx0XHRcdFx0c3RyaW5naWZpZWRBdHRyaWJ1dGVzICs9ICc9JyArIGF0dHJpYnV0ZXNbYXR0cmlidXRlTmFtZV0uc3BsaXQoJzsnKVswXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIChkb2N1bWVudC5jb29raWUgPSBrZXkgKyAnPScgKyB2YWx1ZSArIHN0cmluZ2lmaWVkQXR0cmlidXRlcyk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZ2V0IChrZXksIGpzb24pIHtcblx0XHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGphciA9IHt9O1xuXHRcdFx0Ly8gVG8gcHJldmVudCB0aGUgZm9yIGxvb3AgaW4gdGhlIGZpcnN0IHBsYWNlIGFzc2lnbiBhbiBlbXB0eSBhcnJheVxuXHRcdFx0Ly8gaW4gY2FzZSB0aGVyZSBhcmUgbm8gY29va2llcyBhdCBhbGwuXG5cdFx0XHR2YXIgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZSA/IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOyAnKSA6IFtdO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRmb3IgKDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcnRzID0gY29va2llc1tpXS5zcGxpdCgnPScpO1xuXHRcdFx0XHR2YXIgY29va2llID0gcGFydHMuc2xpY2UoMSkuam9pbignPScpO1xuXG5cdFx0XHRcdGlmICghanNvbiAmJiBjb29raWUuY2hhckF0KDApID09PSAnXCInKSB7XG5cdFx0XHRcdFx0Y29va2llID0gY29va2llLnNsaWNlKDEsIC0xKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0dmFyIG5hbWUgPSBkZWNvZGUocGFydHNbMF0pO1xuXHRcdFx0XHRcdGNvb2tpZSA9IChjb252ZXJ0ZXIucmVhZCB8fCBjb252ZXJ0ZXIpKGNvb2tpZSwgbmFtZSkgfHxcblx0XHRcdFx0XHRcdGRlY29kZShjb29raWUpO1xuXG5cdFx0XHRcdFx0aWYgKGpzb24pIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvb2tpZSA9IEpTT04ucGFyc2UoY29va2llKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0amFyW25hbWVdID0gY29va2llO1xuXG5cdFx0XHRcdFx0aWYgKGtleSA9PT0gbmFtZSkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ga2V5ID8gamFyW2tleV0gOiBqYXI7XG5cdFx0fVxuXG5cdFx0YXBpLnNldCA9IHNldDtcblx0XHRhcGkuZ2V0ID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGdldChrZXksIGZhbHNlIC8qIHJlYWQgYXMgcmF3ICovKTtcblx0XHR9O1xuXHRcdGFwaS5nZXRKU09OID0gZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cmV0dXJuIGdldChrZXksIHRydWUgLyogcmVhZCBhcyBqc29uICovKTtcblx0XHR9O1xuXHRcdGFwaS5yZW1vdmUgPSBmdW5jdGlvbiAoa2V5LCBhdHRyaWJ1dGVzKSB7XG5cdFx0XHRzZXQoa2V5LCAnJywgZXh0ZW5kKGF0dHJpYnV0ZXMsIHtcblx0XHRcdFx0ZXhwaXJlczogLTFcblx0XHRcdH0pKTtcblx0XHR9O1xuXG5cdFx0YXBpLmRlZmF1bHRzID0ge307XG5cblx0XHRhcGkud2l0aENvbnZlcnRlciA9IGluaXQ7XG5cblx0XHRyZXR1cm4gYXBpO1xuXHR9XG5cblx0cmV0dXJuIGluaXQoZnVuY3Rpb24gKCkge30pO1xufSkpO1xuIiwiLyohXHJcbiogTm90aWZsaXggUmVhY3QgKCdodHRwczovL3d3dy5ub3RpZmxpeC5jb20vcmVhY3QnKVxyXG4qIFZlcnNpb246IDEuNC4wXHJcbiogQXV0aG9yOiBGdXJrYW4gTVQgKCdodHRwczovL2dpdGh1Yi5jb20vZnVyY2FuJylcclxuKiBDb3B5cmlnaHQgMjAxOSBOb3RpZmxpeCwgTUlUIExpY2VuY2UgKCdodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVCcpXHJcbiovXHJcblxyXG4vLyBJbnRlcm5hbCBDU1MgQ29kZXMgb25cclxuY29uc3Qgbm90aWZsaXhJbnRlcm5hbENTU0NvZGVzID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGNzcyA9IGBbaWRePU5vdGlmbGl4Tm90aWZ5V3JhcF17cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDAxO29wYWNpdHk6MTtyaWdodDoxMHB4O3RvcDoxMHB4O3dpZHRoOjI4MHB4O21heC13aWR0aDo5NiU7Ym94LXNpemluZzpib3JkZXItYm94O2JhY2tncm91bmQ6MCAwfVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXSAqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2ey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtmb250LWZhbWlseTpRdWlja3NhbmQsc2Fucy1zZXJpZjt3aWR0aDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjowIDAgMTBweDtib3JkZXItcmFkaXVzOjVweDtiYWNrZ3JvdW5kOiMxZTFlMWU7Y29sb3I6I2ZmZjtwYWRkaW5nOjEwcHggMTJweDtmb250LXNpemU6MTRweDtsaW5lLWhlaWdodDoxLjR9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdjpsYXN0LWNoaWxke21hcmdpbjowfVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1jYWxsYmFja3tjdXJzb3I6cG9pbnRlcn1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0gOjpzZWxlY3Rpb257YmFja2dyb3VuZDppbmhlcml0fVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1pY29ue3BhZGRpbmc6OHB4fVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1jbG9zZXtwYWRkaW5nOjEwcHggMzBweCAxMHB4IDEycHh9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWljb24ud2l0aC1jbG9zZXtwYWRkaW5nOjZweCAzMHB4IDZweCA2cHh9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdj5zcGFuLnRoZS1tZXNzYWdle2ZvbnQtd2VpZ2h0OjUwMDtmb250LWZhbWlseTppbmhlcml0IWltcG9ydGFudDt3b3JkLWJyZWFrOmJyZWFrLWFsbDt3b3JkLWJyZWFrOmJyZWFrLXdvcmR9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdj5zcGFuLmNsaWNrLXRvLWNsb3Nle2N1cnNvcjpwb2ludGVyO3RyYW5zaXRpb246YWxsIC4ycyBlYXNlLWluLW91dDtwb3NpdGlvbjphYnNvbHV0ZTtyaWdodDo4cHg7dG9wOjA7Ym90dG9tOjA7bWFyZ2luOmF1dG87Y29sb3I6aW5oZXJpdDt3aWR0aDoxNnB4O2hlaWdodDoxNnB4fVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXY+c3Bhbi5jbGljay10by1jbG9zZTpob3Zlcnt0cmFuc2Zvcm06cm90YXRlKDkwZGVnKX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2PnNwYW4uY2xpY2stdG8tY2xvc2U+c3Zne3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjE2cHg7aGVpZ2h0OjE2cHg7cmlnaHQ6MDt0b3A6MH1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2Pi5ubWl7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtmb250LXNpemU6MzBweDtsaW5lLWhlaWdodDo0MHB4O3RleHQtYWxpZ246Y2VudGVyO2xlZnQ6OHB4O3RvcDowO2JvdHRvbTowO21hcmdpbjphdXRvO2JvcmRlci1yYWRpdXM6aW5oZXJpdH1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2Pi53ZmEuc2hhZG93e2NvbG9yOmluaGVyaXQ7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC4xNSk7Ym94LXNoYWRvdzppbnNldCAwIDAgMzRweCByZ2JhKDAsMCwwLC4yKTt0ZXh0LXNoYWRvdzowIDAgMTBweCByZ2JhKDAsMCwwLC4zKX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2PnNwYW4ud2l0aC1pY29ue3Bvc2l0aW9uOnJlbGF0aXZlO2Zsb2F0OmxlZnQ7d2lkdGg6Y2FsYygxMDAlIC0gNDBweCk7bWFyZ2luOjAgMCAwIDQwcHg7cGFkZGluZzowIDAgMCAxMHB4O2JveC1zaXppbmc6Ym9yZGVyLWJveH1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LnJ0bC1vbj4ubm1pe2xlZnQ6YXV0bztyaWdodDo4cHh9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi5ydGwtb24+c3Bhbi53aXRoLWljb257cGFkZGluZzowIDEwcHggMCAwO21hcmdpbjowIDQwcHggMCAwfVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYucnRsLW9uPnNwYW4uY2xpY2stdG8tY2xvc2V7cmlnaHQ6YXV0bztsZWZ0OjhweH1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtaWNvbi53aXRoLWNsb3NlLnJ0bC1vbntwYWRkaW5nOjZweCA2cHggNnB4IDMwcHh9W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWNsb3NlLnJ0bC1vbntwYWRkaW5nOjEwcHggMTJweCAxMHB4IDMwcHh9W2lkXj1Ob3RpZmxpeE5vdGlmeU92ZXJsYXldLndpdGgtYW5pbWF0aW9uLFtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1hbmltYXRpb24ubngtZmFkZXthbmltYXRpb246bm90aWZ5LWFuaW1hdGlvbi1mYWRlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246bm90aWZ5LWFuaW1hdGlvbi1mYWRlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyBub3RpZnktYW5pbWF0aW9uLWZhZGV7MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LWFuaW1hdGlvbi1mYWRlezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWFuaW1hdGlvbi5ueC16b29te2FuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLXpvb20gLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLXpvb20gLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIG5vdGlmeS1hbmltYXRpb24tem9vbXswJXt0cmFuc2Zvcm06c2NhbGUoMCl9NTAle3RyYW5zZm9ybTpzY2FsZSgxLjA1KX0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKX19QC13ZWJraXQta2V5ZnJhbWVzIG5vdGlmeS1hbmltYXRpb24tem9vbXswJXt0cmFuc2Zvcm06c2NhbGUoMCl9NTAle3RyYW5zZm9ybTpzY2FsZSgxLjA1KX0xMDAle3RyYW5zZm9ybTpzY2FsZSgxKX19W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWFuaW1hdGlvbi5ueC1mcm9tLXJpZ2h0e2FuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLWZyb20tcmlnaHQgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLWZyb20tcmlnaHQgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIG5vdGlmeS1hbmltYXRpb24tZnJvbS1yaWdodHswJXtyaWdodDotMzAwcHg7b3BhY2l0eTowfTUwJXtyaWdodDo4cHg7b3BhY2l0eToxfTEwMCV7cmlnaHQ6MDtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBub3RpZnktYW5pbWF0aW9uLWZyb20tcmlnaHR7MCV7cmlnaHQ6LTMwMHB4O29wYWNpdHk6MH01MCV7cmlnaHQ6OHB4O29wYWNpdHk6MX0xMDAle3JpZ2h0OjA7b3BhY2l0eToxfX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtYW5pbWF0aW9uLm54LWZyb20tbGVmdHthbmltYXRpb246bm90aWZ5LWFuaW1hdGlvbi1mcm9tLWxlZnQgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLWZyb20tbGVmdCAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgbm90aWZ5LWFuaW1hdGlvbi1mcm9tLWxlZnR7MCV7bGVmdDotMzAwcHg7b3BhY2l0eTowfTUwJXtsZWZ0OjhweDtvcGFjaXR5OjF9MTAwJXtsZWZ0OjA7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LWFuaW1hdGlvbi1mcm9tLWxlZnR7MCV7bGVmdDotMzAwcHg7b3BhY2l0eTowfTUwJXtsZWZ0OjhweDtvcGFjaXR5OjF9MTAwJXtsZWZ0OjA7b3BhY2l0eToxfX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtYW5pbWF0aW9uLm54LWZyb20tdG9we2FuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLWZyb20tdG9wIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246bm90aWZ5LWFuaW1hdGlvbi1mcm9tLXRvcCAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgbm90aWZ5LWFuaW1hdGlvbi1mcm9tLXRvcHswJXt0b3A6LTUwcHg7b3BhY2l0eTowfTUwJXt0b3A6OHB4O29wYWNpdHk6MX0xMDAle3RvcDowO29wYWNpdHk6MX19QC13ZWJraXQta2V5ZnJhbWVzIG5vdGlmeS1hbmltYXRpb24tZnJvbS10b3B7MCV7dG9wOi01MHB4O29wYWNpdHk6MH01MCV7dG9wOjhweDtvcGFjaXR5OjF9MTAwJXt0b3A6MDtvcGFjaXR5OjF9fVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1hbmltYXRpb24ubngtZnJvbS1ib3R0b217YW5pbWF0aW9uOm5vdGlmeS1hbmltYXRpb24tZnJvbS1ib3R0b20gLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpub3RpZnktYW5pbWF0aW9uLWZyb20tYm90dG9tIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyBub3RpZnktYW5pbWF0aW9uLWZyb20tYm90dG9tezAle2JvdHRvbTotNTBweDtvcGFjaXR5OjB9NTAle2JvdHRvbTo4cHg7b3BhY2l0eToxfTEwMCV7Ym90dG9tOjA7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LWFuaW1hdGlvbi1mcm9tLWJvdHRvbXswJXtib3R0b206LTUwcHg7b3BhY2l0eTowfTUwJXtib3R0b206OHB4O29wYWNpdHk6MX0xMDAle2JvdHRvbTowO29wYWNpdHk6MX19W2lkXj1Ob3RpZmxpeE5vdGlmeU92ZXJsYXldLndpdGgtYW5pbWF0aW9uLnJlbW92ZSxbaWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtYW5pbWF0aW9uLm54LWZhZGUucmVtb3Zle29wYWNpdHk6MDthbmltYXRpb246bm90aWZ5LXJlbW92ZS1mYWRlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246bm90aWZ5LXJlbW92ZS1mYWRlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyBub3RpZnktcmVtb3ZlLWZhZGV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LXJlbW92ZS1mYWRlezAle29wYWNpdHk6MX0xMDAle29wYWNpdHk6MH19W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWFuaW1hdGlvbi5ueC16b29tLnJlbW92ZXt0cmFuc2Zvcm06c2NhbGUoMCk7YW5pbWF0aW9uOm5vdGlmeS1yZW1vdmUtem9vbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOm5vdGlmeS1yZW1vdmUtem9vbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgbm90aWZ5LXJlbW92ZS16b29tezAle3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LXJlbW92ZS16b29tezAle3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7dHJhbnNmb3JtOnNjYWxlKDApfX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtYW5pbWF0aW9uLm54LWZyb20tdG9wLnJlbW92ZXtvcGFjaXR5OjA7YW5pbWF0aW9uOm5vdGlmeS1yZW1vdmUtdG8tdG9wIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246bm90aWZ5LXJlbW92ZS10by10b3AgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIG5vdGlmeS1yZW1vdmUtdG8tdG9wezAle3RvcDowO29wYWNpdHk6MX01MCV7dG9wOjhweDtvcGFjaXR5OjF9MTAwJXt0b3A6LTUwcHg7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgbm90aWZ5LXJlbW92ZS10by10b3B7MCV7dG9wOjA7b3BhY2l0eToxfTUwJXt0b3A6OHB4O29wYWNpdHk6MX0xMDAle3RvcDotNTBweDtvcGFjaXR5OjB9fVtpZF49Tm90aWZsaXhOb3RpZnlXcmFwXT5kaXYud2l0aC1hbmltYXRpb24ubngtZnJvbS1yaWdodC5yZW1vdmV7b3BhY2l0eTowO2FuaW1hdGlvbjpub3RpZnktcmVtb3ZlLXRvLXJpZ2h0IC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246bm90aWZ5LXJlbW92ZS10by1yaWdodCAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgbm90aWZ5LXJlbW92ZS10by1yaWdodHswJXtyaWdodDowO29wYWNpdHk6MX01MCV7cmlnaHQ6OHB4O29wYWNpdHk6MX0xMDAle3JpZ2h0Oi0zMDBweDtvcGFjaXR5OjB9fUAtd2Via2l0LWtleWZyYW1lcyBub3RpZnktcmVtb3ZlLXRvLXJpZ2h0ezAle3JpZ2h0OjA7b3BhY2l0eToxfTUwJXtyaWdodDo4cHg7b3BhY2l0eToxfTEwMCV7cmlnaHQ6LTMwMHB4O29wYWNpdHk6MH19W2lkXj1Ob3RpZmxpeE5vdGlmeVdyYXBdPmRpdi53aXRoLWFuaW1hdGlvbi5ueC1mcm9tLWJvdHRvbS5yZW1vdmV7b3BhY2l0eTowO2FuaW1hdGlvbjpub3RpZnktcmVtb3ZlLXRvLWJvdHRvbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOm5vdGlmeS1yZW1vdmUtdG8tYm90dG9tIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyBub3RpZnktcmVtb3ZlLXRvLWJvdHRvbXswJXtib3R0b206MDtvcGFjaXR5OjF9NTAle2JvdHRvbTo4cHg7b3BhY2l0eToxfTEwMCV7Ym90dG9tOi01MHB4O29wYWNpdHk6MH19QC13ZWJraXQta2V5ZnJhbWVzIG5vdGlmeS1yZW1vdmUtdG8tYm90dG9tezAle2JvdHRvbTowO29wYWNpdHk6MX01MCV7Ym90dG9tOjhweDtvcGFjaXR5OjF9MTAwJXtib3R0b206LTUwcHg7b3BhY2l0eTowfX1baWRePU5vdGlmbGl4Tm90aWZ5V3JhcF0+ZGl2LndpdGgtYW5pbWF0aW9uLm54LWZyb20tbGVmdC5yZW1vdmV7b3BhY2l0eTowO2FuaW1hdGlvbjpub3RpZnktcmVtb3ZlLXRvLWxlZnQgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpub3RpZnktcmVtb3ZlLXRvLWxlZnQgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIG5vdGlmeS1yZW1vdmUtdG8tbGVmdHswJXtsZWZ0OjA7b3BhY2l0eToxfTUwJXtsZWZ0OjhweDtvcGFjaXR5OjF9MTAwJXtsZWZ0Oi0zMDBweDtvcGFjaXR5OjB9fUAtd2Via2l0LWtleWZyYW1lcyBub3RpZnktcmVtb3ZlLXRvLWxlZnR7MCV7bGVmdDowO29wYWNpdHk6MX01MCV7bGVmdDo4cHg7b3BhY2l0eToxfTEwMCV7bGVmdDotMzAwcHg7b3BhY2l0eTowfX1baWRePU5vdGlmbGl4UmVwb3J0V3JhcF17cG9zaXRpb246Zml4ZWQ7ei1pbmRleDoxMDAwO3dpZHRoOjMyMHB4O21heC13aWR0aDo5NiU7Ym94LXNpemluZzpib3JkZXItYm94O2ZvbnQtZmFtaWx5OlF1aWNrc2FuZCxzYW5zLXNlcmlmO2xlZnQ6MDtyaWdodDowO3RvcDoyMHB4O2NvbG9yOiMxZTFlMWU7Ym9yZGVyLXJhZGl1czoyNXB4O2JhY2tncm91bmQ6MCAwO21hcmdpbjphdXRvfVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXSAqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1baWRePU5vdGlmbGl4UmVwb3J0V3JhcF0+ZGl2W2NsYXNzKj1cIi1vdmVybGF5XCJde3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bGVmdDowO3RvcDowO2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwuNSk7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDowfVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl17d2lkdGg6MTAwJTtmbG9hdDpsZWZ0O2JvcmRlci1yYWRpdXM6aW5oZXJpdDtwYWRkaW5nOjEwcHg7ZmlsdGVyOmRyb3Atc2hhZG93KDAgMCA1cHggcmdiYSgwLDAsMCwuMSkpO2JvcmRlcjoxcHggc29saWQgcmdiYSgwLDAsMCwuMDMpO2JhY2tncm91bmQ6I2Y4ZjhmODtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjF9W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdPmRpdltjbGFzcyo9XCItY29udGVudFwiXT5kaXZbY2xhc3MkPVwiLWljb25cIl17LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO3dpZHRoOjExMHB4O2hlaWdodDoxMTBweDtkaXNwbGF5OmJsb2NrO21hcmdpbjo2cHggYXV0byAxMnB4fVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzJD1cIi1pY29uXCJdIHN2Z3ttaW4td2lkdGg6MTAwJTttYXgtd2lkdGg6MTAwJTtoZWlnaHQ6YXV0b31baWRePU5vdGlmbGl4UmVwb3J0V3JhcF0+Kj5oNXt3b3JkLWJyZWFrOmJyZWFrLWFsbDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Zm9udC1mYW1pbHk6aW5oZXJpdCFpbXBvcnRhbnQ7Zm9udC1zaXplOjE2cHg7Zm9udC13ZWlnaHQ6NTAwO2xpbmUtaGVpZ2h0OjEuNDttYXJnaW46MCAwIDEwcHg7cGFkZGluZzowIDAgMTBweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xKTtmbG9hdDpsZWZ0O3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpjZW50ZXJ9W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdPio+cHt3b3JkLWJyZWFrOmJyZWFrLWFsbDt3b3JkLWJyZWFrOmJyZWFrLXdvcmQ7Zm9udC1mYW1pbHk6aW5oZXJpdCFpbXBvcnRhbnQ7Zm9udC1zaXplOjEzcHg7bGluZS1oZWlnaHQ6MS40O2Zsb2F0OmxlZnQ7d2lkdGg6MTAwJTtwYWRkaW5nOjAgMTBweDttYXJnaW46MCAwIDEwcHh9W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdIGEjTlhSZXBvcnRCdXR0b257d29yZC1icmVhazpicmVhay1hbGw7d29yZC1icmVhazpicmVhay13b3JkOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtmb250LWZhbWlseTppbmhlcml0IWltcG9ydGFudDt0cmFuc2l0aW9uOmFsbCAuMjVzIGVhc2UtaW4tb3V0O2N1cnNvcjpwb2ludGVyO2Zsb2F0OnJpZ2h0O3BhZGRpbmc6N3B4IDE3cHg7YmFja2dyb3VuZDojMDBiNDYyO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjEuNDtmb250LXdlaWdodDo1MDA7Ym9yZGVyLXJhZGl1czppbmhlcml0IWltcG9ydGFudDtjb2xvcjojZmZmfVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXSBhI05YUmVwb3J0QnV0dG9uOmhvdmVye3BhZGRpbmc6N3B4IDIwcHh9W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdLnJ0bC1vbiBhI05YUmVwb3J0QnV0dG9ue2Zsb2F0OmxlZnR9W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdPmRpdltjbGFzcyo9XCItb3ZlcmxheVwiXS53aXRoLWFuaW1hdGlvbnthbmltYXRpb246cmVwb3J0LW92ZXJsYXktYW5pbWF0aW9uIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246cmVwb3J0LW92ZXJsYXktYW5pbWF0aW9uIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyByZXBvcnQtb3ZlcmxheS1hbmltYXRpb257MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgcmVwb3J0LW92ZXJsYXktYW5pbWF0aW9uezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdPmRpdltjbGFzcyo9XCItY29udGVudFwiXS53aXRoLWFuaW1hdGlvbi5ueC1mYWRle2FuaW1hdGlvbjpyZXBvcnQtYW5pbWF0aW9uLWZhZGUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpyZXBvcnQtYW5pbWF0aW9uLWZhZGUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIHJlcG9ydC1hbmltYXRpb24tZmFkZXswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyByZXBvcnQtYW5pbWF0aW9uLWZhZGV7MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1baWRePU5vdGlmbGl4UmVwb3J0V3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdLndpdGgtYW5pbWF0aW9uLm54LXpvb217YW5pbWF0aW9uOnJlcG9ydC1hbmltYXRpb24tem9vbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOnJlcG9ydC1hbmltYXRpb24tem9vbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgcmVwb3J0LWFuaW1hdGlvbi16b29tezAle29wYWNpdHk6MDt0cmFuc2Zvcm06c2NhbGUoLjUpfTUwJXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxKX19QC13ZWJraXQta2V5ZnJhbWVzIHJlcG9ydC1hbmltYXRpb24tem9vbXswJXtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKC41KX01MCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjA1KX0xMDAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSl9fVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXS5yZW1vdmU+ZGl2W2NsYXNzKj1cIi1vdmVybGF5XCJdLndpdGgtYW5pbWF0aW9ue29wYWNpdHk6MDthbmltYXRpb246cmVwb3J0LW92ZXJsYXktYW5pbWF0aW9uLXJlbW92ZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOnJlcG9ydC1vdmVybGF5LWFuaW1hdGlvbi1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIHJlcG9ydC1vdmVybGF5LWFuaW1hdGlvbi1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgcmVwb3J0LW92ZXJsYXktYW5pbWF0aW9uLXJlbW92ZXswJXtvcGFjaXR5OjF9MTAwJXtvcGFjaXR5OjB9fVtpZF49Tm90aWZsaXhSZXBvcnRXcmFwXS5yZW1vdmU+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdLndpdGgtYW5pbWF0aW9uLm54LWZhZGV7b3BhY2l0eTowO2FuaW1hdGlvbjpyZXBvcnQtYW5pbWF0aW9uLWZhZGUtcmVtb3ZlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246cmVwb3J0LWFuaW1hdGlvbi1mYWRlLXJlbW92ZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgcmVwb3J0LWFuaW1hdGlvbi1mYWRlLXJlbW92ZXswJXtvcGFjaXR5OjF9MTAwJXtvcGFjaXR5OjB9fUAtd2Via2l0LWtleWZyYW1lcyByZXBvcnQtYW5pbWF0aW9uLWZhZGUtcmVtb3ZlezAle29wYWNpdHk6MX0xMDAle29wYWNpdHk6MH19W2lkXj1Ob3RpZmxpeFJlcG9ydFdyYXBdLnJlbW92ZT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0ud2l0aC1hbmltYXRpb24ubngtem9vbXtvcGFjaXR5OjA7YW5pbWF0aW9uOnJlcG9ydC1hbmltYXRpb24tem9vbS1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpyZXBvcnQtYW5pbWF0aW9uLXpvb20tcmVtb3ZlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWx9QGtleWZyYW1lcyByZXBvcnQtYW5pbWF0aW9uLXpvb20tcmVtb3ZlezAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6LjU7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKX19QC13ZWJraXQta2V5ZnJhbWVzIHJlcG9ydC1hbmltYXRpb24tem9vbS1yZW1vdmV7MCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxKX01MCV7b3BhY2l0eTouNTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9MTAwJXtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKDApfX1baWRePU5vdGlmbGl4TG9hZGluZ1dyYXBdey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtwb3NpdGlvbjpmaXhlZDt6LWluZGV4OjEwMDQ7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtsZWZ0OjA7dG9wOjA7cmlnaHQ6MDtib3R0b206MDttYXJnaW46YXV0bzt0ZXh0LWFsaWduOmNlbnRlcjtib3gtc2l6aW5nOmJvcmRlci1ib3g7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLC44KTtmb250LWZhbWlseTpRdWlja3NhbmQsc2Fucy1zZXJpZn1baWRePU5vdGlmbGl4TG9hZGluZ1dyYXBdICp7Ym94LXNpemluZzpib3JkZXItYm94fVtpZF49Tm90aWZsaXhMb2FkaW5nV3JhcF0uY2xpY2stdG8tY2xvc2V7Y3Vyc29yOnBvaW50ZXJ9W2lkXj1Ob3RpZmxpeExvYWRpbmdXcmFwXT5kaXZbY2xhc3MqPVwiLWljb25cIl17d2lkdGg6NjBweDtoZWlnaHQ6NjBweDtwb3NpdGlvbjpmaXhlZDt0cmFuc2l0aW9uOnRvcCAuMnMgZWFzZS1pbi1vdXQ7bGVmdDowO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bWFyZ2luOmF1dG99W2lkXj1Ob3RpZmxpeExvYWRpbmdXcmFwXT5kaXZbY2xhc3MqPVwiLWljb25cIl0gaW1nLFtpZF49Tm90aWZsaXhMb2FkaW5nV3JhcF0+ZGl2W2NsYXNzKj1cIi1pY29uXCJdIHN2Z3ttYXgtd2lkdGg6dW5zZXQ7bWF4LWhlaWdodDp1bnNldDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MH1baWRePU5vdGlmbGl4TG9hZGluZ1dyYXBdPmRpdltjbGFzcyo9XCItaWNvblwiXS53aXRoLW1lc3NhZ2V7dG9wOi00MnB4fVtpZF49Tm90aWZsaXhMb2FkaW5nV3JhcF0+cHtwb3NpdGlvbjpmaXhlZDtsZWZ0OjA7cmlnaHQ6MDt0b3A6NDJweDtib3R0b206MDttYXJnaW46YXV0bztmb250LWZhbWlseTppbmhlcml0IWltcG9ydGFudDtmb250LXdlaWdodDo1MDA7bGluZS1oZWlnaHQ6MS40O3BhZGRpbmc6MCAxMHB4O3dpZHRoOjEwMCU7Zm9udC1zaXplOjE1cHg7aGVpZ2h0OjE4cHh9W2lkXj1Ob3RpZmxpeExvYWRpbmdXcmFwXS53aXRoLWFuaW1hdGlvbnthbmltYXRpb246bG9hZGluZy1hbmltYXRpb24tZmFkZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOmxvYWRpbmctYW5pbWF0aW9uLWZhZGUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIGxvYWRpbmctYW5pbWF0aW9uLWZhZGV7MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZy1hbmltYXRpb24tZmFkZXswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fVtpZF49Tm90aWZsaXhMb2FkaW5nV3JhcF0ud2l0aC1hbmltYXRpb24ucmVtb3Zle29wYWNpdHk6MDthbmltYXRpb246bG9hZGluZy1hbmltYXRpb24tZmFkZS1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpsb2FkaW5nLWFuaW1hdGlvbi1mYWRlLXJlbW92ZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgbG9hZGluZy1hbmltYXRpb24tZmFkZS1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgbG9hZGluZy1hbmltYXRpb24tZmFkZS1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1baWRePU5vdGlmbGl4TG9hZGluZ1dyYXBdPnAubmV3e2FuaW1hdGlvbjpsb2FkaW5nLW5ldy1tZXNzYWdlLWZhZGUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpsb2FkaW5nLW5ldy1tZXNzYWdlLWZhZGUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIGxvYWRpbmctbmV3LW1lc3NhZ2UtZmFkZXswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBsb2FkaW5nLW5ldy1tZXNzYWdlLWZhZGV7MCV7b3BhY2l0eTowfTEwMCV7b3BhY2l0eToxfX1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBde3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6MTAwMzt3aWR0aDoyODBweDttYXgtd2lkdGg6OTglO2xlZnQ6MTBweDtyaWdodDoxMHB4O3RvcDoxMHB4O21hcmdpbjphdXRvO3RleHQtYWxpZ246Y2VudGVyO2JveC1zaXppbmc6Ym9yZGVyLWJveDtiYWNrZ3JvdW5kOjAgMDtmb250LWZhbWlseTpRdWlja3NhbmQsc2Fucy1zZXJpZn1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBdICp7Ym94LXNpemluZzpib3JkZXItYm94fVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1vdmVybGF5XCJde3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bGVmdDowO3RvcDowO2JhY2tncm91bmQ6cmdiYSgyNTUsMjU1LDI1NSwuNSk7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDowfVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJde3dpZHRoOjEwMCU7ZmxvYXQ6bGVmdDtib3JkZXItcmFkaXVzOjI1cHg7cGFkZGluZzoxMHB4O21hcmdpbjowO2ZpbHRlcjpkcm9wLXNoYWRvdygwIDAgNXB4IHJnYmEoMCwwLDAsLjEpKTtiYWNrZ3JvdW5kOiNmOGY4Zjg7Y29sb3I6IzFlMWUxZTtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjF9W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzKj1cIi1oZWFkXCJde2Zsb2F0OmxlZnQ7d2lkdGg6MTAwJX1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBdPmRpdltjbGFzcyo9XCItY29udGVudFwiXT5kaXZbY2xhc3MqPVwiLWhlYWRcIl0+aDV7ZmxvYXQ6bGVmdDt3aWR0aDoxMDAlO21hcmdpbjowO3BhZGRpbmc6MCAwIDEwcHg7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgcmdiYSgwLDAsMCwuMSk7Y29sb3I6IzAwYjQ2Mjtmb250LWZhbWlseTppbmhlcml0IWltcG9ydGFudDtmb250LXNpemU6MTZweDtsaW5lLWhlaWdodDoxLjQ7Zm9udC13ZWlnaHQ6NTAwfVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdPmRpdltjbGFzcyo9XCItaGVhZFwiXT5we2ZvbnQtZmFtaWx5OmluaGVyaXQhaW1wb3J0YW50O21hcmdpbjoxNXB4IDAgMjBweDtwYWRkaW5nOjAgMTBweDtmbG9hdDpsZWZ0O3dpZHRoOjEwMCU7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MS40O2NvbG9yOmluaGVyaXR9W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzKj1cIi1idXR0b25zXCJdey13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtib3JkZXItcmFkaXVzOmluaGVyaXQ7ZmxvYXQ6bGVmdDt3aWR0aDoxMDAlfVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdPmRpdltjbGFzcyo9XCItYnV0dG9uc1wiXT5he2N1cnNvcjpwb2ludGVyO2ZvbnQtZmFtaWx5OmluaGVyaXQhaW1wb3J0YW50O3RyYW5zaXRpb246YWxsIC4yNXMgZWFzZS1pbi1vdXQ7ZmxvYXQ6bGVmdDt3aWR0aDo0OCU7cGFkZGluZzo5cHggNXB4O2JvcmRlci1yYWRpdXM6aW5oZXJpdCFpbXBvcnRhbnQ7Zm9udC13ZWlnaHQ6NTAwO2ZvbnQtc2l6ZToxNXB4O2xpbmUtaGVpZ2h0OjEuNDtjb2xvcjojZjhmOGY4fVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdPmRpdltjbGFzcyo9XCItYnV0dG9uc1wiXT5hLmNvbmZpcm0tYnV0dG9uLW9re21hcmdpbjowIDIlIDAgMDtiYWNrZ3JvdW5kOiMwMGI0NjJ9W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzKj1cIi1idXR0b25zXCJdPmEuY29uZmlybS1idXR0b24tY2FuY2Vse21hcmdpbjowIDAgMCAyJTtiYWNrZ3JvdW5kOiNhOWE5YTl9W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXT5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzKj1cIi1idXR0b25zXCJdPmEuZnVsbHttYXJnaW46MDt3aWR0aDoxMDAlfVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJdPmRpdltjbGFzcyo9XCItYnV0dG9uc1wiXT5hOmhvdmVye2JveC1zaGFkb3c6aW5zZXQgMCAtNjBweCA1cHggLTVweCByZ2JhKDAsMCwwLC4yKX1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBdLnJ0bC1vbj5kaXZbY2xhc3MqPVwiLWNvbnRlbnRcIl0+ZGl2W2NsYXNzKj1cIi1idXR0b25zXCJdLFtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0ucnRsLW9uPmRpdltjbGFzcyo9XCItY29udGVudFwiXT5kaXZbY2xhc3MqPVwiLWJ1dHRvbnNcIl0+YXt0cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpfVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0+ZGl2W2NsYXNzKj1cIi1vdmVybGF5XCJdLndpdGgtYW5pbWF0aW9ue2FuaW1hdGlvbjpjb25maXJtLW92ZXJsYXktYW5pbWF0aW9uIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246Y29uZmlybS1vdmVybGF5LWFuaW1hdGlvbiAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgY29uZmlybS1vdmVybGF5LWFuaW1hdGlvbnswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBjb25maXJtLW92ZXJsYXktYW5pbWF0aW9uezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXS5yZW1vdmU+ZGl2W2NsYXNzKj1cIi1vdmVybGF5XCJdLndpdGgtYW5pbWF0aW9ue29wYWNpdHk6MDthbmltYXRpb246Y29uZmlybS1vdmVybGF5LWFuaW1hdGlvbi1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpjb25maXJtLW92ZXJsYXktYW5pbWF0aW9uLXJlbW92ZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgY29uZmlybS1vdmVybGF5LWFuaW1hdGlvbi1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgY29uZmlybS1vdmVybGF5LWFuaW1hdGlvbi1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBdLndpdGgtYW5pbWF0aW9uLm54LWZhZGU+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJde2FuaW1hdGlvbjpjb25maXJtLWFuaW1hdGlvbi1mYWRlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246Y29uZmlybS1hbmltYXRpb24tZmFkZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgY29uZmlybS1hbmltYXRpb24tZmFkZXswJXtvcGFjaXR5OjB9MTAwJXtvcGFjaXR5OjF9fUAtd2Via2l0LWtleWZyYW1lcyBjb25maXJtLWFuaW1hdGlvbi1mYWRlezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19W2lkXj1Ob3RpZmxpeENvbmZpcm1XcmFwXS53aXRoLWFuaW1hdGlvbi5ueC16b29tPmRpdltjbGFzcyo9XCItY29udGVudFwiXXthbmltYXRpb246Y29uZmlybS1hbmltYXRpb24tem9vbSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsOy13ZWJraXQtYW5pbWF0aW9uOmNvbmZpcm0tYW5pbWF0aW9uLXpvb20gLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIGNvbmZpcm0tYW5pbWF0aW9uLXpvb217MCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSguNSl9NTAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMS4wNSl9MTAwJXtvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEpfX1ALXdlYmtpdC1rZXlmcmFtZXMgY29uZmlybS1hbmltYXRpb24tem9vbXswJXtvcGFjaXR5OjA7dHJhbnNmb3JtOnNjYWxlKC41KX01MCV7b3BhY2l0eToxO3RyYW5zZm9ybTpzY2FsZSgxLjA1KX0xMDAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSl9fVtpZF49Tm90aWZsaXhDb25maXJtV3JhcF0ud2l0aC1hbmltYXRpb24ubngtZmFkZS5yZW1vdmU+ZGl2W2NsYXNzKj1cIi1jb250ZW50XCJde29wYWNpdHk6MDthbmltYXRpb246Y29uZmlybS1hbmltYXRpb24tZmFkZS1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbDstd2Via2l0LWFuaW1hdGlvbjpjb25maXJtLWFuaW1hdGlvbi1mYWRlLXJlbW92ZSAuM3MgZWFzZS1pbi1vdXQgMHMgbm9ybWFsfUBrZXlmcmFtZXMgY29uZmlybS1hbmltYXRpb24tZmFkZS1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1ALXdlYmtpdC1rZXlmcmFtZXMgY29uZmlybS1hbmltYXRpb24tZmFkZS1yZW1vdmV7MCV7b3BhY2l0eToxfTEwMCV7b3BhY2l0eTowfX1baWRePU5vdGlmbGl4Q29uZmlybVdyYXBdLndpdGgtYW5pbWF0aW9uLm54LXpvb20ucmVtb3ZlPmRpdltjbGFzcyo9XCItY29udGVudFwiXXtvcGFjaXR5OjA7YW5pbWF0aW9uOmNvbmZpcm0tYW5pbWF0aW9uLXpvb20tcmVtb3ZlIC4zcyBlYXNlLWluLW91dCAwcyBub3JtYWw7LXdlYmtpdC1hbmltYXRpb246Y29uZmlybS1hbmltYXRpb24tem9vbS1yZW1vdmUgLjNzIGVhc2UtaW4tb3V0IDBzIG5vcm1hbH1Aa2V5ZnJhbWVzIGNvbmZpcm0tYW5pbWF0aW9uLXpvb20tcmVtb3ZlezAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6LjU7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKX19QC13ZWJraXQta2V5ZnJhbWVzIGNvbmZpcm0tYW5pbWF0aW9uLXpvb20tcmVtb3ZlezAle29wYWNpdHk6MTt0cmFuc2Zvcm06c2NhbGUoMSl9NTAle29wYWNpdHk6LjU7dHJhbnNmb3JtOnNjYWxlKDEuMDUpfTEwMCV7b3BhY2l0eTowO3RyYW5zZm9ybTpzY2FsZSgwKX19YDtcclxuXHJcbiAgICByZXR1cm4gY3NzO1xyXG59XHJcbi8vIEludGVybmFsIENTUyBDb2RlcyBvZmZcclxuXHJcbi8vIEludGVybmFsIENTUyBGdW5jIG9uXHJcbmNvbnN0IG5vdGlmbGl4SW50ZXJuYWxDU1MgPSAoKSA9PiB7XHJcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdOb3RpZmxpeEludGVybmFsQ1NTJykpIHtcclxuICAgICAgICBjb25zdCBpbnRlcm5hbENTUyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XHJcbiAgICAgICAgaW50ZXJuYWxDU1MuaWQgPSAnTm90aWZsaXhJbnRlcm5hbENTUyc7XHJcbiAgICAgICAgLy8gaW50ZXJuYWxDU1MudHlwZSA9ICd0ZXh0L2Nzcyc7IC8vID0+IG5vdCBuZWNlc3NhcnlcclxuICAgICAgICBpbnRlcm5hbENTUy5pbm5lckhUTUwgPSBub3RpZmxpeEludGVybmFsQ1NTQ29kZXMoKTtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGludGVybmFsQ1NTKTtcclxuICAgIH1cclxufVxyXG4vLyBJbnRlcm5hbCBDU1MgRnVuYyBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBFeHRlbmQgb25cclxuY29uc3QgZXh0ZW5kTm90aWZsaXggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgZXh0ZW5kZWQgPSB7fTtcclxuICAgIGxldCBkZWVwID0gZmFsc2U7XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZ3VtZW50c1swXSkgPT09ICdbb2JqZWN0IEJvb2xlYW5dJykge1xyXG4gICAgICAgIGRlZXAgPSBhcmd1bWVudHNbMF07XHJcbiAgICAgICAgaSsrO1xyXG4gICAgfVxyXG4gICAgbGV0IG1lcmdlID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHByb3BlcnR5IGlzIGFuIG9iamVjdCwgbWVyZ2UgcHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZXAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9ialtwcm9wXSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBleHRlbmROb3RpZmxpeChleHRlbmRlZFtwcm9wXSwgb2JqW3Byb3BdKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRbcHJvcF0gPSBvYmpbcHJvcF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICg7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBtZXJnZShhcmd1bWVudHNbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGV4dGVuZGVkO1xyXG59O1xyXG4vLyBOb3RpZmxpeDogRXh0ZW5kIG9mZlxyXG5cclxuLy8gTm90aWZsaXg6IFBsYWludGV4dCBvblxyXG5jb25zdCBub3RpZmxpeFBsYWludGV4dCA9IGZ1bmN0aW9uIChodG1sKSB7XHJcbiAgICBjb25zdCBodG1sUG9vbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgaHRtbFBvb2wuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIHJldHVybiBodG1sUG9vbC50ZXh0Q29udGVudCB8fCBodG1sUG9vbC5pbm5lclRleHQgfHwgJyc7XHJcbn1cclxuLy8gTm90aWZsaXg6IFBsYWludGV4dCBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBHb29nbGVGb250IG9uXHJcbmNvbnN0IG5vdGlmbGl4R29vZ2xlRm9udCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ05vdGlmbGl4UXVpY2tzYW5kJykpIHtcclxuICAgICAgICAvLyBnb29nbGUgZm9udHMgZG5zIHByZWZldGNoIG9uXHJcbiAgICAgICAgY29uc3QgZG5zID0gJzxsaW5rIGlkPVwiTm90aWZsaXhHb29nbGVETlNcIiByZWw9XCJkbnMtcHJlZmV0Y2hcIiBocmVmPVwiLy9mb250cy5nb29nbGVhcGlzLmNvbVwiPic7XHJcbiAgICAgICAgY29uc3QgZG5zUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgIGRuc1JhbmdlLnNlbGVjdE5vZGUoZG9jdW1lbnQuaGVhZCk7XHJcbiAgICAgICAgY29uc3QgZG5zRnJhZ21lbnQgPSBkbnNSYW5nZS5jcmVhdGVDb250ZXh0dWFsRnJhZ21lbnQoZG5zKTtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGRuc0ZyYWdtZW50KTtcclxuICAgICAgICAvLyBnb29nbGUgZm9udHMgZG5zIHByZWZldGNoIG9mZlxyXG5cclxuICAgICAgICAvLyBnb29nbGUgZm9udHMgc3R5bGUgb25cclxuICAgICAgICBjb25zdCBmb250ID0gJzxsaW5rIGlkPVwiTm90aWZsaXhRdWlja3NhbmRcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVF1aWNrc2FuZDozMDAsNDAwLDUwMCw3MDAmYW1wO3N1YnNldD1sYXRpbi1leHRcIiByZWw9XCJzdHlsZXNoZWV0XCIgLz4nO1xyXG4gICAgICAgIGNvbnN0IGZvbnRSYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgZm9udFJhbmdlLnNlbGVjdE5vZGUoZG9jdW1lbnQuaGVhZCk7XHJcbiAgICAgICAgY29uc3QgZm9udEZyYWdtZW50ID0gZm9udFJhbmdlLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChmb250KTtcclxuICAgICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGZvbnRGcmFnbWVudCk7XHJcbiAgICAgICAgLy8gZ29vZ2xlIGZvbnRzIHN0eWxlIG9mZlxyXG4gICAgfVxyXG59XHJcbi8vIE5vdGlmbGl4OiBHb29nbGVGb250IG9mZlxyXG5cclxuLy8gTm90aWZsaXg6IENvbnNvbGUgRXJyb3Igb25cclxuY29uc3Qgbm90aWZsaXhDb25zb2xlRXJyb3IgPSBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBjb25zb2xlLmVycm9yKCclYyAnICsgdGl0bGUgKyAnICcsICdwYWRkaW5nOjJweDtib3JkZXItcmFkaXVzOjIwcHg7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kOiNmNDQzMzYnLCAnXFxuJyArIG1lc3NhZ2UgKyAnXFxuVmlzaXQgZG9jdW1lbnRhdGlvbiBwYWdlIHRvIGxlYXJuIG1vcmU6IGh0dHBzOi8vd3d3Lm5vdGlmbGl4LmNvbS9kb2N1bWVudGF0aW9uJyk7XHJcbn1cclxuLy8gTm90aWZsaXg6IENvbnNvbGUgRXJyb3Igb2ZmXHJcblxyXG5cclxuLy8gTm90aWZsaXg6IE5vdGlmeSBEZWZhdWx0IFNldHRpbmdzIG9uXHJcbmxldCBub3RpZnlTZXR0aW5ncyA9IHtcclxuICAgIHdyYXBJRDogJ05vdGlmbGl4Tm90aWZ5V3JhcCcsIC8vIGNhbiBub3QgY3VzdG9taXphYmxlXHJcbiAgICB3aWR0aDogJzI4MHB4JyxcclxuICAgIHBvc2l0aW9uOiAncmlnaHQtdG9wJywgLy8gJ3JpZ2h0LXRvcCcgLSAncmlnaHQtYm90dG9tJyAtICdsZWZ0LXRvcCcgLSAnbGVmdC1ib3R0b20nXHJcbiAgICBkaXN0YW5jZTogJzEwcHgnLFxyXG4gICAgb3BhY2l0eTogMSxcclxuICAgIGJvcmRlclJhZGl1czogJzVweCcsXHJcbiAgICBydGw6IGZhbHNlLFxyXG4gICAgdGltZW91dDogMzAwMCxcclxuICAgIG1lc3NhZ2VNYXhMZW5ndGg6IDExMCxcclxuICAgIGJhY2tPdmVybGF5OiBmYWxzZSxcclxuICAgIGJhY2tPdmVybGF5Q29sb3I6ICdyZ2JhKDAsMCwwLDAuNSknLFxyXG5cclxuICAgIElEOiAnTm90aWZsaXhOb3RpZnknLFxyXG4gICAgY2xhc3NOYW1lOiAnbm90aWZsaXgtbm90aWZ5JyxcclxuICAgIHppbmRleDogNDAwMSxcclxuICAgIHVzZUdvb2dsZUZvbnQ6IHRydWUsXHJcbiAgICBmb250RmFtaWx5OiAnUXVpY2tzYW5kJyxcclxuICAgIGZvbnRTaXplOiAnMTNweCcsXHJcbiAgICBjc3NBbmltYXRpb246IHRydWUsXHJcbiAgICBjc3NBbmltYXRpb25EdXJhdGlvbjogNDAwLFxyXG4gICAgY3NzQW5pbWF0aW9uU3R5bGU6ICdmYWRlJywgLy8gJ2ZhZGUnIC0gJ3pvb20nIC0gJ2Zyb20tcmlnaHQnIC0gJ2Zyb20tdG9wJyAtICdmcm9tLWJvdHRvbScgLSAnZnJvbS1sZWZ0J1xyXG4gICAgY2xvc2VCdXR0b246IGZhbHNlLFxyXG4gICAgdXNlSWNvbjogdHJ1ZSxcclxuICAgIHVzZUZvbnRBd2Vzb21lOiBmYWxzZSxcclxuICAgIGZvbnRBd2Vzb21lSWNvblN0eWxlOiAnYmFzaWMnLCAvLyAnYmFzaWMnIC0gJ3NoYWRvdydcclxuICAgIGZvbnRBd2Vzb21lSWNvblNpemU6ICczNHB4JyxcclxuXHJcbiAgICBwbGFpblRleHQ6IHRydWUsXHJcblxyXG4gICAgc3VjY2Vzczoge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICcjMDBiNDYyJyxcclxuICAgICAgICB0ZXh0Q29sb3I6ICcjZmZmJyxcclxuICAgICAgICBjaGlsZENsYXNzTmFtZTogJ3N1Y2Nlc3MnLFxyXG4gICAgICAgIG5vdGlmbGl4SWNvbkNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjI1KScsXHJcbiAgICAgICAgZm9udEF3ZXNvbWVDbGFzc05hbWU6ICdmYXMgZmEtY2hlY2stY2lyY2xlJyxcclxuICAgICAgICBmb250QXdlc29tZUljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICB9LFxyXG5cclxuICAgIGZhaWx1cmU6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2Y0NDMzNicsXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgY2hpbGRDbGFzc05hbWU6ICdmYWlsdXJlJyxcclxuICAgICAgICBub3RpZmxpeEljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICAgICAgZm9udEF3ZXNvbWVDbGFzc05hbWU6ICdmYXMgZmEtdGltZXMtY2lyY2xlJyxcclxuICAgICAgICBmb250QXdlc29tZUljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICB9LFxyXG5cclxuICAgIHdhcm5pbmc6IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAnI2YyYmQxZCcsXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgY2hpbGRDbGFzc05hbWU6ICd3YXJuaW5nJyxcclxuICAgICAgICBub3RpZmxpeEljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICAgICAgZm9udEF3ZXNvbWVDbGFzc05hbWU6ICdmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlJyxcclxuICAgICAgICBmb250QXdlc29tZUljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICB9LFxyXG5cclxuICAgIGluZm86IHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAnIzAwYmNkNCcsXHJcbiAgICAgICAgdGV4dENvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgY2hpbGRDbGFzc05hbWU6ICdpbmZvJyxcclxuICAgICAgICBub3RpZmxpeEljb25Db2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4yKScsXHJcbiAgICAgICAgZm9udEF3ZXNvbWVDbGFzc05hbWU6ICdmYXMgZmEtaW5mby1jaXJjbGUnLFxyXG4gICAgICAgIGZvbnRBd2Vzb21lSWNvbkNvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjIpJyxcclxuICAgIH0sXHJcbn07XHJcbi8vIE5vdGlmbGl4OiBOb3RpZnkgRGVmYXVsdCBTZXR0aW5ncyBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBSZXBvcnQgRGVmYXVsdCBTZXR0aW5ncyBvblxyXG5sZXQgcmVwb3J0U2V0dGluZ3MgPSB7XHJcbiAgICBJRDogJ05vdGlmbGl4UmVwb3J0V3JhcCcsIC8vIGNhbiBub3QgY3VzdG9taXphYmxlXHJcbiAgICBjbGFzc05hbWU6ICdub3RpZmxpeC1yZXBvcnQnLFxyXG4gICAgd2lkdGg6ICczMjBweCcsXHJcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZjhmOGY4JyxcclxuICAgIGJvcmRlclJhZGl1czogJzI1cHgnLFxyXG4gICAgcnRsOiBmYWxzZSxcclxuICAgIHppbmRleDogNDAwMixcclxuICAgIGJhY2tPdmVybGF5OiB0cnVlLFxyXG4gICAgYmFja092ZXJsYXlDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC41KScsXHJcbiAgICB1c2VHb29nbGVGb250OiB0cnVlLFxyXG4gICAgZm9udEZhbWlseTogJ1F1aWNrc2FuZCcsXHJcbiAgICBzdmdTaXplOiAnMTEwcHgnLFxyXG4gICAgcGxhaW5UZXh0OiB0cnVlLFxyXG4gICAgdGl0bGVGb250U2l6ZTogJzE2cHgnLFxyXG4gICAgdGl0bGVNYXhMZW5ndGg6IDM0LFxyXG4gICAgbWVzc2FnZUZvbnRTaXplOiAnMTNweCcsXHJcbiAgICBtZXNzYWdlTWF4TGVuZ3RoOiA0MDAsXHJcbiAgICBidXR0b25Gb250U2l6ZTogJzE0cHgnLFxyXG4gICAgYnV0dG9uTWF4TGVuZ3RoOiAzNCxcclxuICAgIGNzc0FuaW1hdGlvbjogdHJ1ZSxcclxuICAgIGNzc0FuaW1hdGlvbkR1cmF0aW9uOiAzNjAsXHJcbiAgICBjc3NBbmltYXRpb25TdHlsZTogJ2ZhZGUnLCAvLyAnZmFkZScgLSAnem9vbSdcclxuXHJcbiAgICBzdWNjZXNzOiB7XHJcbiAgICAgICAgc3ZnQ29sb3I6ICcjMDBiNDYyJyxcclxuICAgICAgICB0aXRsZUNvbG9yOiAnIzFlMWUxZScsXHJcbiAgICAgICAgbWVzc2FnZUNvbG9yOiAnIzI0MjQyNCcsXHJcbiAgICAgICAgYnV0dG9uQmFja2dyb3VuZDogJyMwMGI0NjInLFxyXG4gICAgICAgIGJ1dHRvbkNvbG9yOiAnI2ZmZicsXHJcbiAgICB9LFxyXG5cclxuICAgIGZhaWx1cmU6IHtcclxuICAgICAgICBzdmdDb2xvcjogJyNmNDQzMzYnLFxyXG4gICAgICAgIHRpdGxlQ29sb3I6ICcjMWUxZTFlJyxcclxuICAgICAgICBtZXNzYWdlQ29sb3I6ICcjMjQyNDI0JyxcclxuICAgICAgICBidXR0b25CYWNrZ3JvdW5kOiAnI2Y0NDMzNicsXHJcbiAgICAgICAgYnV0dG9uQ29sb3I6ICcjZmZmJyxcclxuICAgIH0sXHJcblxyXG4gICAgd2FybmluZzoge1xyXG4gICAgICAgIHN2Z0NvbG9yOiAnI2YyYmQxZCcsXHJcbiAgICAgICAgdGl0bGVDb2xvcjogJyMxZTFlMWUnLFxyXG4gICAgICAgIG1lc3NhZ2VDb2xvcjogJyMyNDI0MjQnLFxyXG4gICAgICAgIGJ1dHRvbkJhY2tncm91bmQ6ICcjZjJiZDFkJyxcclxuICAgICAgICBidXR0b25Db2xvcjogJyNmZmYnLFxyXG4gICAgfSxcclxuXHJcbiAgICBpbmZvOiB7XHJcbiAgICAgICAgc3ZnQ29sb3I6ICcjMDBiY2Q0JyxcclxuICAgICAgICB0aXRsZUNvbG9yOiAnIzFlMWUxZScsXHJcbiAgICAgICAgbWVzc2FnZUNvbG9yOiAnIzI0MjQyNCcsXHJcbiAgICAgICAgYnV0dG9uQmFja2dyb3VuZDogJyMwMGJjZDQnLFxyXG4gICAgICAgIGJ1dHRvbkNvbG9yOiAnI2ZmZicsXHJcbiAgICB9LFxyXG5cclxufTtcclxuLy8gTm90aWZsaXg6IFJlcG9ydCBEZWZhdWx0IFNldHRpbmdzIG9mZlxyXG5cclxuLy8gTm90aWZsaXg6IENvbmZpcm0gRGVmYXVsdCBTZXR0aW5ncyBvblxyXG5sZXQgY29uZmlybVNldHRpbmdzID0ge1xyXG4gICAgSUQ6ICdOb3RpZmxpeENvbmZpcm1XcmFwJywgLy8gY2FuIG5vdCBjdXN0b21pemFibGVcclxuICAgIGNsYXNzTmFtZTogJ25vdGlmbGl4LWNvbmZpcm0nLFxyXG4gICAgd2lkdGg6ICcyODBweCcsXHJcbiAgICB6aW5kZXg6IDQwMDMsXHJcbiAgICBwb3NpdGlvbjogJ2NlbnRlcicsIC8vICdjZW50ZXInIC0gJ2NlbnRlci10b3AnIC0gICdyaWdodC10b3AnIC0gJ3JpZ2h0LWJvdHRvbScgLSAnbGVmdC10b3AnIC0gJ2xlZnQtYm90dG9tJ1xyXG4gICAgZGlzdGFuY2U6ICcxMHB4JyxcclxuICAgIGJhY2tncm91bmRDb2xvcjogJyNmOGY4ZjgnLFxyXG4gICAgYm9yZGVyUmFkaXVzOiAnMjVweCcsXHJcbiAgICBiYWNrT3ZlcmxheTogdHJ1ZSxcclxuICAgIGJhY2tPdmVybGF5Q29sb3I6ICdyZ2JhKDAsMCwwLDAuNSknLFxyXG4gICAgcnRsOiBmYWxzZSxcclxuICAgIHVzZUdvb2dsZUZvbnQ6IHRydWUsXHJcbiAgICBmb250RmFtaWx5OiAnUXVpY2tzYW5kJyxcclxuICAgIGNzc0FuaW1hdGlvbjogdHJ1ZSxcclxuICAgIGNzc0FuaW1hdGlvblN0eWxlOiAnZmFkZScsIC8vICd6b29tJyAtICdmYWRlJ1xyXG4gICAgY3NzQW5pbWF0aW9uRHVyYXRpb246IDMwMCxcclxuXHJcbiAgICB0aXRsZUNvbG9yOiAnIzAwYjQ2MicsXHJcbiAgICB0aXRsZUZvbnRTaXplOiAnMTZweCcsXHJcbiAgICB0aXRsZU1heExlbmd0aDogMzQsXHJcblxyXG4gICAgbWVzc2FnZUNvbG9yOiAnIzFlMWUxZScsXHJcbiAgICBtZXNzYWdlRm9udFNpemU6ICcxNHB4JyxcclxuICAgIG1lc3NhZ2VNYXhMZW5ndGg6IDExMCxcclxuXHJcbiAgICBidXR0b25zRm9udFNpemU6ICcxNXB4JyxcclxuICAgIGJ1dHRvbnNNYXhMZW5ndGg6IDM0LFxyXG4gICAgb2tCdXR0b25Db2xvcjogJyNmOGY4ZjgnLFxyXG4gICAgb2tCdXR0b25CYWNrZ3JvdW5kOiAnIzAwYjQ2MicsXHJcbiAgICBjYW5jZWxCdXR0b25Db2xvcjogJyNmOGY4ZjgnLFxyXG4gICAgY2FuY2VsQnV0dG9uQmFja2dyb3VuZDogJyNhOWE5YTknLFxyXG5cclxuICAgIHBsYWluVGV4dDogdHJ1ZSxcclxufVxyXG4vLyBOb3RpZmxpeDogQ29uZmlybSBEZWZhdWx0IFNldHRpbmdzIG9mZlxyXG5cclxuLy8gTm90aWZsaXg6IExvYWRpbmcgRGVmYXVsdCBTZXR0aW5ncyBvblxyXG5sZXQgbG9hZGluZ1NldHRpbmdzID0ge1xyXG4gICAgSUQ6ICdOb3RpZmxpeExvYWRpbmdXcmFwJywgLy8gY2FuIG5vdCBjdXN0b21pemFibGVcclxuICAgIGNsYXNzTmFtZTogJ25vdGlmbGl4LWxvYWRpbmcnLFxyXG4gICAgemluZGV4OiA0MDAwLFxyXG4gICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwLjgpJyxcclxuICAgIHJ0bDogZmFsc2UsXHJcbiAgICB1c2VHb29nbGVGb250OiB0cnVlLFxyXG4gICAgZm9udEZhbWlseTogJ1F1aWNrc2FuZCcsXHJcbiAgICBjc3NBbmltYXRpb246IHRydWUsXHJcbiAgICBjc3NBbmltYXRpb25EdXJhdGlvbjogNDAwLFxyXG4gICAgY2xpY2tUb0Nsb3NlOiBmYWxzZSxcclxuICAgIGN1c3RvbVN2Z1VybDogbnVsbCxcclxuICAgIHN2Z1NpemU6ICc4MHB4JyxcclxuICAgIHN2Z0NvbG9yOiAnIzAwYjQ2MicsXHJcbiAgICBtZXNzYWdlSUQ6ICdOb3RpZmxpeExvYWRpbmdNZXNzYWdlJyxcclxuICAgIG1lc3NhZ2VGb250U2l6ZTogJzE1cHgnLFxyXG4gICAgbWVzc2FnZU1heExlbmd0aDogMzQsXHJcbiAgICBtZXNzYWdlQ29sb3I6ICcjZGNkY2RjJyxcclxufTtcclxuLy8gTm90aWZsaXg6IExvYWRpbmcgRGVmYXVsdCBTZXR0aW5ncyBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBOWCBSZWFjdCBvblxyXG5sZXQgbmV3Tm90aWZ5U2V0dGluZ3M7XHJcbmxldCBuZXdSZXBvcnRTZXR0aW5ncztcclxubGV0IG5ld0NvbmZpcm1TZXR0aW5ncztcclxubGV0IG5ld0xvYWRpbmdTZXR0aW5ncztcclxuY29uc3QgTm90aWZsaXggPSB7XHJcblxyXG4gICAgLy8gTm90aWZ5IG9uXHJcbiAgICBOb3RpZnk6IHtcclxuXHJcbiAgICAgICAgLy8gSW5pdFxyXG4gICAgICAgIEluaXQ6IGZ1bmN0aW9uICh1c2VyTm90aWZ5T3B0KSB7XHJcbiAgICAgICAgICAgIG5ld05vdGlmeVNldHRpbmdzID0gZXh0ZW5kTm90aWZsaXgodHJ1ZSwgbm90aWZ5U2V0dGluZ3MsIHVzZXJOb3RpZnlPcHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb25cclxuICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLnVzZUdvb2dsZUZvbnQgJiYgbmV3Tm90aWZ5U2V0dGluZ3MuZm9udEZhbWlseSA9PT0gJ1F1aWNrc2FuZCcpIHtcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4R29vZ2xlRm9udCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVzZSBHb29nbGVGb250cyBpZiBcIlF1aWNrc2FuZFwiIG9mZlxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGNzcyBjb2RlcyBvblxyXG4gICAgICAgICAgICBub3RpZmxpeEludGVybmFsQ1NTKCk7XHJcbiAgICAgICAgICAgIC8vIGFkZCBjc3MgY29kZXMgb2ZmXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gTWVyZ2UgRmlyc3QgSW5pdFxyXG4gICAgICAgIE1lcmdlOiBmdW5jdGlvbiAodXNlck5vdGlmeUV4dGVuZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzKSB7IC8vIGlmIGluaXRpYWxpemVkIGFscmVhZHlcclxuICAgICAgICAgICAgICAgIG5ld05vdGlmeVNldHRpbmdzID0gZXh0ZW5kTm90aWZsaXgodHJ1ZSwgbmV3Tm90aWZ5U2V0dGluZ3MsIHVzZXJOb3RpZnlFeHRlbmQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvclxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ1lvdSBoYXZlIHRvIGluaXRpYWxpemUgdGhlIE5vdGlmeSBtb2R1bGUgYmVmb3JlIGNhbGwgTWVyZ2UgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IE5vdGlmaWNhdGlvbjogU3VjY2Vzc1xyXG4gICAgICAgIFN1Y2Nlc3M6IGZ1bmN0aW9uIChtZXNzYWdlLCBjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3Tm90aWZ5U2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIE5vdGlmbGl4Lk5vdGlmeS5Jbml0KHt9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRoZVR5cGUgPSBuZXdOb3RpZnlTZXR0aW5ncy5zdWNjZXNzO1xyXG4gICAgICAgICAgICBOb3RpZmxpeE5vdGlmeShtZXNzYWdlLCBjYWxsYmFjaywgdGhlVHlwZSwgJ1N1Y2Nlc3MnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IE5vdGlmaWNhdGlvbjogRmFpbHVyZVxyXG4gICAgICAgIEZhaWx1cmU6IGZ1bmN0aW9uIChtZXNzYWdlLCBjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3Tm90aWZ5U2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIE5vdGlmbGl4Lk5vdGlmeS5Jbml0KHt9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRoZVR5cGUgPSBuZXdOb3RpZnlTZXR0aW5ncy5mYWlsdXJlO1xyXG4gICAgICAgICAgICBOb3RpZmxpeE5vdGlmeShtZXNzYWdlLCBjYWxsYmFjaywgdGhlVHlwZSwgJ0ZhaWx1cmUnKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBOb3RpZmljYXRpb246IFdhcm5pbmdcclxuICAgICAgICBXYXJuaW5nOiBmdW5jdGlvbiAobWVzc2FnZSwgY2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld05vdGlmeVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Ob3RpZnkuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aGVUeXBlID0gbmV3Tm90aWZ5U2V0dGluZ3Mud2FybmluZztcclxuICAgICAgICAgICAgTm90aWZsaXhOb3RpZnkobWVzc2FnZSwgY2FsbGJhY2ssIHRoZVR5cGUsICdXYXJuaW5nJyk7XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgTm90aWZpY2F0aW9uOiBJbmZvXHJcbiAgICAgICAgSW5mbzogZnVuY3Rpb24gKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub3QgaW5pdGlhbGl6ZWQgcHJldGVuZCBsaWtlIGluaXRcclxuICAgICAgICAgICAgaWYgKCFuZXdOb3RpZnlTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgTm90aWZsaXguTm90aWZ5LkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhlVHlwZSA9IG5ld05vdGlmeVNldHRpbmdzLmluZm87XHJcbiAgICAgICAgICAgIE5vdGlmbGl4Tm90aWZ5KG1lc3NhZ2UsIGNhbGxiYWNrLCB0aGVUeXBlLCAnSW5mbycpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgIH0sXHJcbiAgICAvLyBOb3RpZnkgb2ZmXHJcblxyXG4gICAgLy8gUmVwb3J0IG9uXHJcbiAgICBSZXBvcnQ6IHtcclxuXHJcbiAgICAgICAgLy8gSW5pdFxyXG4gICAgICAgIEluaXQ6IGZ1bmN0aW9uICh1c2VyUmVwb3J0T3B0KSB7XHJcbiAgICAgICAgICAgIG5ld1JlcG9ydFNldHRpbmdzID0gZXh0ZW5kTm90aWZsaXgodHJ1ZSwgcmVwb3J0U2V0dGluZ3MsIHVzZXJSZXBvcnRPcHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb25cclxuICAgICAgICAgICAgaWYgKG5ld1JlcG9ydFNldHRpbmdzLnVzZUdvb2dsZUZvbnQgJiYgbmV3UmVwb3J0U2V0dGluZ3MuZm9udEZhbWlseSA9PT0gJ1F1aWNrc2FuZCcpIHtcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4R29vZ2xlRm9udCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIHVzZSBHb29nbGVGb250cyBpZiBcIlF1aWNrc2FuZFwiIG9mZlxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGNzcyBjb2RlcyBvblxyXG4gICAgICAgICAgICBub3RpZmxpeEludGVybmFsQ1NTKCk7XHJcbiAgICAgICAgICAgIC8vIGFkZCBjc3MgY29kZXMgb2ZmXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gTWVyZ2UgRmlyc3QgSW5pdFxyXG4gICAgICAgIE1lcmdlOiBmdW5jdGlvbiAodXNlclJlcG9ydEV4dGVuZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld1JlcG9ydFNldHRpbmdzKSB7IC8vIGlmIGluaXRpYWxpemVkIGFscmVhZHlcclxuICAgICAgICAgICAgICAgIG5ld1JlcG9ydFNldHRpbmdzID0gZXh0ZW5kTm90aWZsaXgodHJ1ZSwgbmV3UmVwb3J0U2V0dGluZ3MsIHVzZXJSZXBvcnRFeHRlbmQpO1xyXG4gICAgICAgICAgICB9IGVsc2UgeyAvLyBlcnJvclxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ1lvdSBoYXZlIHRvIGluaXRpYWxpemUgdGhlIFJlcG9ydCBtb2R1bGUgYmVmb3JlIGNhbGwgTWVyZ2UgZnVuY3Rpb24uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IFJlcG9ydDogU3VjY2Vzc1xyXG4gICAgICAgIFN1Y2Nlc3M6IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgYnV0dG9uVGV4dCwgYnV0dG9uQ2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld1JlcG9ydFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5SZXBvcnQuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1swXS5sZW5ndGggPD0gMCkgeyAvLyB0aXRsZVxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gJ05vdGlmbGl4IFN1Y2Nlc3MnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgfHwgYXJndW1lbnRzWzFdLmxlbmd0aCA8PSAwKSB7IC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxXSA9IGBcIkRvIG5vdCB0cnkgdG8gYmVjb21lIGEgcGVyc29uIG9mIHN1Y2Nlc3MgYnV0IHRyeSB0byBiZWNvbWUgYSBwZXJzb24gb2YgdmFsdWUuXCIgPGJyPjxicj4tIEFsYmVydCBFaW5zdGVpbmA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCB8fCBhcmd1bWVudHNbMl0ubGVuZ3RoIDw9IDApIHsgLy8gYnV0dG9uVGV4dFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzJdID0gJ09rYXknO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQpIHsgLy8gYnV0dG9uQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1szXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhlVHlwZSA9IG5ld1JlcG9ydFNldHRpbmdzLnN1Y2Nlc3M7XHJcbiAgICAgICAgICAgIE5vdGlmbGl4UmVwb3J0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgdGhlVHlwZSwgJ3N1Y2Nlc3MnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IFJlcG9ydDogRmFpbHVyZVxyXG4gICAgICAgIEZhaWx1cmU6IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgYnV0dG9uVGV4dCwgYnV0dG9uQ2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld1JlcG9ydFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5SZXBvcnQuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1swXS5sZW5ndGggPD0gMCkgeyAvLyB0aXRsZVxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gJ05vdGlmbGl4IEZhaWx1cmUnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgfHwgYXJndW1lbnRzWzFdLmxlbmd0aCA8PSAwKSB7IC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxXSA9IGBcIkZhaWx1cmUgaXMgc2ltcGx5IHRoZSBvcHBvcnR1bml0eSB0byBiZWdpbiBhZ2FpbiwgdGhpcyB0aW1lIG1vcmUgaW50ZWxsaWdlbnRseS5cIiA8YnI+PGJyPi0gSGVucnkgRm9yZGA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCB8fCBhcmd1bWVudHNbMl0ubGVuZ3RoIDw9IDApIHsgLy8gYnV0dG9uVGV4dFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzJdID0gJ09rYXknO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQpIHsgLy8gYnV0dG9uQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1szXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhlVHlwZSA9IG5ld1JlcG9ydFNldHRpbmdzLmZhaWx1cmU7XHJcbiAgICAgICAgICAgIE5vdGlmbGl4UmVwb3J0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgdGhlVHlwZSwgJ2ZhaWx1cmUnKTtcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBSZXBvcnQ6IFdhcm5pbmdcclxuICAgICAgICBXYXJuaW5nOiBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UsIGJ1dHRvblRleHQsIGJ1dHRvbkNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub3QgaW5pdGlhbGl6ZWQgcHJldGVuZCBsaWtlIGluaXRcclxuICAgICAgICAgICAgaWYgKCFuZXdSZXBvcnRTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgTm90aWZsaXguUmVwb3J0LkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCB8fCBhcmd1bWVudHNbMF0ubGVuZ3RoIDw9IDApIHsgLy8gdGl0bGVcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9ICdOb3RpZmxpeCBXYXJuaW5nJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1sxXS5sZW5ndGggPD0gMCkgeyAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMV0gPSBgXCJUaGUgcGVvcGxlcyB3aG8gd2FudCB0byBsaXZlIGNvbWZvcnRhYmx5IHdpdGhvdXQgcHJvZHVjaW5nIGFuZCBmYXRpZ3VlOyB0aGV5IGFyZSBkb29tZWQgdG8gbG9zZSB0aGVpciBkaWduaXR5LCB0aGVuIGxpYmVydHksIGFuZCB0aGVuIGluZGVwZW5kZW5jZSBhbmQgZGVzdGlueS5cIiA8YnI+PGJyPi0gTXVzdGFmYSBLZW1hbCBBdGF0dXJrYDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1syXS5sZW5ndGggPD0gMCkgeyAvLyBidXR0b25UZXh0XHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMl0gPSAnT2theSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCkgeyAvLyBidXR0b25DYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzNdID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aGVUeXBlID0gbmV3UmVwb3J0U2V0dGluZ3Mud2FybmluZztcclxuICAgICAgICAgICAgTm90aWZsaXhSZXBvcnQoYXJndW1lbnRzWzBdLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSwgYXJndW1lbnRzWzNdLCB0aGVUeXBlLCAnd2FybmluZycpO1xyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IFJlcG9ydDogSW5mb1xyXG4gICAgICAgIEluZm86IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgYnV0dG9uVGV4dCwgYnV0dG9uQ2FsbGJhY2spIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld1JlcG9ydFNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5SZXBvcnQuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gNCkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1swXS5sZW5ndGggPD0gMCkgeyAvLyB0aXRsZVxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gJ05vdGlmbGl4IEluZm8nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzFdID09PSB1bmRlZmluZWQgfHwgYXJndW1lbnRzWzFdLmxlbmd0aCA8PSAwKSB7IC8vIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1sxXSA9IGBcIktub3dsZWRnZSByZXN0cyBub3QgdXBvbiB0cnV0aCBhbG9uZSwgYnV0IHVwb24gZXJyb3IgYWxzby5cIiA8YnI+PGJyPi0gQ2FybCBHdXN0YXYgSnVuZ2A7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMl0gPT09IHVuZGVmaW5lZCB8fCBhcmd1bWVudHNbMl0ubGVuZ3RoIDw9IDApIHsgLy8gYnV0dG9uVGV4dFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzJdID0gJ09rYXknO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQpIHsgLy8gYnV0dG9uQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1szXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgdGhlVHlwZSA9IG5ld1JlcG9ydFNldHRpbmdzLmluZm87XHJcbiAgICAgICAgICAgIE5vdGlmbGl4UmVwb3J0KGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0sIGFyZ3VtZW50c1szXSwgdGhlVHlwZSwgJ2luZm8nKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgIH0sXHJcbiAgICAvLyBSZXBvcnQgb2ZmXHJcblxyXG4gICAgLy8gQ29uZmlybSBvblxyXG4gICAgQ29uZmlybToge1xyXG5cclxuICAgICAgICAvLyBJbml0XHJcbiAgICAgICAgSW5pdDogZnVuY3Rpb24gKHVzZXJDb25maXJtT3B0KSB7XHJcbiAgICAgICAgICAgIG5ld0NvbmZpcm1TZXR0aW5ncyA9IGV4dGVuZE5vdGlmbGl4KHRydWUsIGNvbmZpcm1TZXR0aW5ncywgdXNlckNvbmZpcm1PcHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb25cclxuICAgICAgICAgICAgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncy51c2VHb29nbGVGb250ICYmIG5ld0NvbmZpcm1TZXR0aW5ncy5mb250RmFtaWx5ID09PSAnUXVpY2tzYW5kJykge1xyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhHb29nbGVGb250KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb2ZmXHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgY3NzIGNvZGVzIG9uXHJcbiAgICAgICAgICAgIG5vdGlmbGl4SW50ZXJuYWxDU1MoKTtcclxuICAgICAgICAgICAgLy8gYWRkIGNzcyBjb2RlcyBvZmZcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBNZXJnZSBGaXJzdCBJbml0XHJcbiAgICAgICAgTWVyZ2U6IGZ1bmN0aW9uICh1c2VyQ29uZmlybUV4dGVuZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncykgeyAvLyBpZiBpbml0aWFsaXplZCBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICBuZXdDb25maXJtU2V0dGluZ3MgPSBleHRlbmROb3RpZmxpeCh0cnVlLCBuZXdDb25maXJtU2V0dGluZ3MsIHVzZXJDb25maXJtRXh0ZW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4Q29uc29sZUVycm9yKCdOb3RpZmxpeCBFcnJvcicsICdZb3UgaGF2ZSB0byBpbml0aWFsaXplIHRoZSBDb25maXJtIG1vZHVsZSBiZWZvcmUgY2FsbCBNZXJnZSBmdW5jdGlvbi4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgQ29uZmlybTogU2hvd1xyXG4gICAgICAgIFNob3c6IGZ1bmN0aW9uICh0aXRsZSwgbWVzc2FnZSwgb2tUZXh0LCBjYW5jZWxUZXh0LCBva0NhbGxiYWNrLCBjYW5jZWxDYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3Q29uZmlybVNldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Db25maXJtLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDYpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCB8fCBhcmd1bWVudHNbMF0ubGVuZ3RoIDw9IDApIHsgLy8gdGl0bGVcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9ICdOb3RpZmxpeCBDb25maXJtJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1sxXS5sZW5ndGggPD0gMCkgeyAvLyBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMV0gPSAnRG8geW91IGFncmVlIHdpdGggbWU/JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1syXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1syXS5sZW5ndGggPD0gMCkgeyAvLyBvayBidXR0b25UZXh0XHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbMl0gPSAnWWVzJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1szXSA9PT0gdW5kZWZpbmVkIHx8IGFyZ3VtZW50c1szXS5sZW5ndGggPD0gMCkgeyAvLyBjYW5jZWwgYnV0dG9uVGV4dFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRzWzNdID0gJ05vJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1s0XSA9PT0gdW5kZWZpbmVkKSB7IC8vIG9rQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIGFyZ3VtZW50c1s0XSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50c1s1XSA9PT0gdW5kZWZpbmVkKSB7IC8vIGNhbmNlbENhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudHNbNV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE5vdGlmbGl4Q29uZmlybShhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10sIGFyZ3VtZW50c1s0XSwgYXJndW1lbnRzWzVdKTtcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIC8vIENvbmZpcm0gb2ZmXHJcblxyXG4gICAgLy8gTG9hZGluZyBvblxyXG4gICAgTG9hZGluZzoge1xyXG5cclxuICAgICAgICAvLyBJbml0XHJcbiAgICAgICAgSW5pdDogZnVuY3Rpb24gKHVzZXJMb2FkaW5nT3B0KSB7XHJcbiAgICAgICAgICAgIG5ld0xvYWRpbmdTZXR0aW5ncyA9IGV4dGVuZE5vdGlmbGl4KHRydWUsIGxvYWRpbmdTZXR0aW5ncywgdXNlckxvYWRpbmdPcHQpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb25cclxuICAgICAgICAgICAgaWYgKG5ld0xvYWRpbmdTZXR0aW5ncy51c2VHb29nbGVGb250ICYmIG5ld0xvYWRpbmdTZXR0aW5ncy5mb250RmFtaWx5ID09PSAnUXVpY2tzYW5kJykge1xyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhHb29nbGVGb250KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdXNlIEdvb2dsZUZvbnRzIGlmIFwiUXVpY2tzYW5kXCIgb2ZmXHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgY3NzIGNvZGVzIG9uXHJcbiAgICAgICAgICAgIG5vdGlmbGl4SW50ZXJuYWxDU1MoKTtcclxuICAgICAgICAgICAgLy8gYWRkIGNzcyBjb2RlcyBvZmZcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBNZXJnZSBGaXJzdCBJbml0XHJcbiAgICAgICAgTWVyZ2U6IGZ1bmN0aW9uICh1c2VyTG9hZGluZ0V4dGVuZCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKG5ld0xvYWRpbmdTZXR0aW5ncykgeyAvLyBpZiBpbml0aWFsaXplZCBhbHJlYWR5XHJcbiAgICAgICAgICAgICAgICBuZXdMb2FkaW5nU2V0dGluZ3MgPSBleHRlbmROb3RpZmxpeCh0cnVlLCBuZXdMb2FkaW5nU2V0dGluZ3MsIHVzZXJMb2FkaW5nRXh0ZW5kKTtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gZXJyb3JcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4Q29uc29sZUVycm9yKCdOb3RpZmxpeCBFcnJvcicsICdZb3UgaGF2ZSB0byBpbml0aWFsaXplIHRoZSBMb2FkaW5nIG1vZHVsZSBiZWZvcmUgY2FsbCBNZXJnZSBmdW5jdGlvbi4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgTG9hZGluZzogU3RhbmRhcmRcclxuICAgICAgICBTdGFuZGFyZDogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld0xvYWRpbmdTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgTm90aWZsaXguTG9hZGluZy5Jbml0KHt9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7IC8vIE1vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWRcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4Q29uc29sZUVycm9yKCdOb3RpZmxpeCBFcnJvcicsICdNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTm90aWZsaXhMb2FkaW5nKG1lc3NhZ2UsICdzdGFuZGFyZCcsIHRydWUsIDApOyAvLyB0cnVlID0gZGlzcGxheVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IExvYWRpbmc6IEhvdXJnbGFzc1xyXG4gICAgICAgIEhvdXJnbGFzczogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBpbml0aWFsaXplZCBwcmV0ZW5kIGxpa2UgaW5pdFxyXG4gICAgICAgICAgICBpZiAoIW5ld0xvYWRpbmdTZXR0aW5ncykge1xyXG4gICAgICAgICAgICAgICAgTm90aWZsaXguTG9hZGluZy5Jbml0KHt9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7IC8vIE1vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWRcclxuICAgICAgICAgICAgICAgIG5vdGlmbGl4Q29uc29sZUVycm9yKCdOb3RpZmxpeCBFcnJvcicsICdNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTm90aWZsaXhMb2FkaW5nKG1lc3NhZ2UsICdob3VyZ2xhc3MnLCB0cnVlLCAwKTsgLy8gdHJ1ZSA9IGRpc3BsYXlcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBMb2FkaW5nOiBDaXJjbGVcclxuICAgICAgICBDaXJjbGU6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub3QgaW5pdGlhbGl6ZWQgcHJldGVuZCBsaWtlIGluaXRcclxuICAgICAgICAgICAgaWYgKCFuZXdMb2FkaW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIE5vdGlmbGl4LkxvYWRpbmcuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE5vdGlmbGl4TG9hZGluZyhtZXNzYWdlLCAnY2lyY2xlJywgdHJ1ZSwgMCk7IC8vIHRydWUgPSBkaXNwbGF5XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgTG9hZGluZzogQXJyb3dzXHJcbiAgICAgICAgQXJyb3dzOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Mb2FkaW5nLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBOb3RpZmxpeExvYWRpbmcobWVzc2FnZSwgJ2Fycm93cycsIHRydWUsIDApOyAvLyB0cnVlID0gZGlzcGxheVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IExvYWRpbmc6IERvdHNcclxuICAgICAgICBEb3RzOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Mb2FkaW5nLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBOb3RpZmxpeExvYWRpbmcobWVzc2FnZSwgJ2RvdHMnLCB0cnVlLCAwKTsgLy8gdHJ1ZSA9IGRpc3BsYXlcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gRGlzcGxheSBMb2FkaW5nOiBQdWxzZVxyXG4gICAgICAgIFB1bHNlOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Mb2FkaW5nLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBOb3RpZmxpeExvYWRpbmcobWVzc2FnZSwgJ3B1bHNlJywgdHJ1ZSwgMCk7IC8vIHRydWUgPSBkaXNwbGF5XHJcblxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIERpc3BsYXkgTG9hZGluZzogQ3VzdG9tXHJcbiAgICAgICAgQ3VzdG9tOiBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Mb2FkaW5nLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBOb3RpZmxpeExvYWRpbmcobWVzc2FnZSwgJ2N1c3RvbScsIHRydWUsIDApOyAvLyB0cnVlID0gZGlzcGxheVxyXG5cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBEaXNwbGF5IExvYWRpbmc6IE5vdGlmbGl4XHJcbiAgICAgICAgTm90aWZsaXg6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub3QgaW5pdGlhbGl6ZWQgcHJldGVuZCBsaWtlIGluaXRcclxuICAgICAgICAgICAgaWYgKCFuZXdMb2FkaW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIE5vdGlmbGl4LkxvYWRpbmcuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE5vdGlmbGl4TG9hZGluZyhtZXNzYWdlLCAnbm90aWZsaXgnLCB0cnVlLCAwKTsgLy8gdHJ1ZSA9IGRpc3BsYXlcclxuXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIExvYWRpbmdcclxuICAgICAgICBSZW1vdmU6IGZ1bmN0aW9uICh0aGVEZWxheSkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm90IGluaXRpYWxpemVkIHByZXRlbmQgbGlrZSBpbml0XHJcbiAgICAgICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBOb3RpZmxpeC5Mb2FkaW5nLkluaXQoe30pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHsgLy8gTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZFxyXG4gICAgICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ01vcmUgcGFyYW1ldGVycyB0aGFuIGFsbG93ZWQuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghdGhlRGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIHRoZURlbGF5ID0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgTm90aWZsaXhMb2FkaW5nKGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRoZURlbGF5KTsgLy8gZmFsc2UgPSBSZW1vdmVcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDaGFuZ2UgVGhlIE1lc3NhZ2VcclxuICAgICAgICBDaGFuZ2U6IGZ1bmN0aW9uIChuZXdNZXNzYWdlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub3QgaW5pdGlhbGl6ZWQgcHJldGVuZCBsaWtlIGluaXRcclxuICAgICAgICAgICAgaWYgKCFuZXdMb2FkaW5nU2V0dGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIE5vdGlmbGl4LkxvYWRpbmcuSW5pdCh7fSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgeyAvLyBNb3JlIHBhcmFtZXRlcnMgdGhhbiBhbGxvd2VkXHJcbiAgICAgICAgICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnTW9yZSBwYXJhbWV0ZXJzIHRoYW4gYWxsb3dlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFuZXdNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIE5vdGlmbGl4TG9hZGluZ0NoYW5nZShuZXdNZXNzYWdlKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgIH0sXHJcbiAgICAvLyBMb2FkaW5nIG9mZlxyXG5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBOb3RpZmxpeDtcclxuLy8gTm90aWZsaXg6IE5YIFJlYWN0IG9mZlxyXG5cclxuXHJcbi8vIE5vdGlmbGl4OiBOb3RpZnkgU2luZ2xlIG9uXHJcbmxldCBub3RpZmxpeE5vdGlmeUNvdW50ID0gMDtcclxuY29uc3QgTm90aWZsaXhOb3RpZnkgPSBmdW5jdGlvbiAobWVzc2FnZSwgY2FsbGJhY2ssIHRoZVR5cGUsIHN0YXRpY1R5cGUpIHtcclxuXHJcbiAgICBpZiAoYXJndW1lbnRzICE9PSB1bmRlZmluZWQgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gNCkge1xyXG5cclxuICAgICAgICAvLyBubyBtZXNzYWdlIG9uXHJcbiAgICAgICAgaWYgKCFtZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgTm90aWZsaXggJHtzdGF0aWNUeXBlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIG5vIG1lc3NhZ2Ugb2ZmXHJcblxyXG4gICAgICAgIC8vIEZvbnRBd2Vzb21lIGlmIFNoYWRvdyBvblxyXG4gICAgICAgIGlmIChuZXdOb3RpZnlTZXR0aW5ncy5mb250QXdlc29tZUljb25TdHlsZSA9PT0gJ3NoYWRvdycpIHtcclxuICAgICAgICAgICAgdGhlVHlwZS5mb250QXdlc29tZUljb25Db2xvciA9IHRoZVR5cGUuYmFja2dyb3VuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRm9udEF3ZXNvbWUgaWYgU2hhZG93IG9mZlxyXG5cclxuICAgICAgICAvLyBpZiBwbGFpblRleHQgdHJ1ZSA9IEhUTUwgdGFncyBub3QgYWxsb3dlZCBvbiAgICAgIFxyXG4gICAgICAgIGlmIChuZXdOb3RpZnlTZXR0aW5ncy5wbGFpblRleHQpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IG5vdGlmbGl4UGxhaW50ZXh0KG1lc3NhZ2UpOyAvLyBtZXNzYWdlIHBsYWluIHRleHRcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgcGxhaW5UZXh0IHRydWUgPSBIVE1MIHRhZ3Mgbm90IGFsbG93ZWQgb2ZmXHJcblxyXG4gICAgICAgIC8vIGlmIHBsYWluVGV4dCBmYWxzZSBidXQgdGhlIG1lc3NhZ2UgbGVuZ3RoIG1vcmUgdGhhbiBtZXNzYWdlTWF4TGVuZ3RoID0gSFRNTCB0YWdzIGVycm9yIG9uXHJcbiAgICAgICAgaWYgKCFuZXdOb3RpZnlTZXR0aW5ncy5wbGFpblRleHQgJiYgbWVzc2FnZS5sZW5ndGggPiBuZXdOb3RpZnlTZXR0aW5ncy5tZXNzYWdlTWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIE5vdGlmbGl4Lk5vdGlmeS5NZXJnZSh7IGNsb3NlQnV0dG9uOiB0cnVlLCB9KTtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGA8Yj5IVE1MIFRhZ3MgRXJyb3I6PC9iPiBZb3VyIGNvbnRlbnQgbGVuZ3RoIGlzIG1vcmUgdGhhbiBcIm1lc3NhZ2VNYXhMZW5ndGhcIiBvcHRpb24uYDsgLy8gbWVzc2FnZSBodG1sIGVycm9yXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHBsYWluVGV4dCBmYWxzZSBidXQgdGhlIG1lc3NhZ2UgbGVuZ3RoIG1vcmUgdGhhbiBtZXNzYWdlTWF4TGVuZ3RoID0gSFRNTCB0YWdzIGVycm9yIG9mZlxyXG5cclxuXHJcbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gbmV3Tm90aWZ5U2V0dGluZ3MubWVzc2FnZU1heExlbmd0aCkge1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gYCR7bWVzc2FnZS5zdWJzdHJpbmcoMCwgbmV3Tm90aWZ5U2V0dGluZ3MubWVzc2FnZU1heExlbmd0aCl9Li4uYDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIG5vdGlmeSBjb3VudGVyIG9uXHJcbiAgICAgICAgbm90aWZsaXhOb3RpZnlDb3VudCsrO1xyXG4gICAgICAgIC8vIG5vdGlmeSBjb3VudGVyIG9mZlxyXG5cclxuICAgICAgICAvLyBpZiBjc3NBbmltYWlvbiBmYWxzZSAtPiBkdXJhdGlvbiBvblxyXG4gICAgICAgIGlmICghbmV3Tm90aWZ5U2V0dGluZ3MuY3NzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIG5ld05vdGlmeVNldHRpbmdzLmNzc0FuaW1hdGlvbkR1cmF0aW9uID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgY3NzQW5pbWFpb24gZmFsc2UgLT4gZHVyYXRpb24gb2ZmXHJcblxyXG4gICAgICAgIC8vIG5vdGlmeSB3cmFwIG9uXHJcbiAgICAgICAgbGV0IGRvY0JvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAgICAgICBsZXQgbnRmbHhOb3RpZnlXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbnRmbHhOb3RpZnlXcmFwLmlkID0gbm90aWZ5U2V0dGluZ3Mud3JhcElEO1xyXG4gICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS53aWR0aCA9IG5ld05vdGlmeVNldHRpbmdzLndpZHRoO1xyXG4gICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS56SW5kZXggPSBuZXdOb3RpZnlTZXR0aW5ncy56aW5kZXg7XHJcbiAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLm9wYWNpdHkgPSBuZXdOb3RpZnlTZXR0aW5ncy5vcGFjaXR5O1xyXG5cclxuICAgICAgICAvLyB3cmFwIHBvc2l0aW9uIG9uXHJcbiAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLnBvc2l0aW9uID09PSAncmlnaHQtYm90dG9tJykge1xyXG5cclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLnJpZ2h0ID0gbmV3Tm90aWZ5U2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS5ib3R0b20gPSBuZXdOb3RpZnlTZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLnRvcCA9ICdhdXRvJztcclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLmxlZnQgPSAnYXV0byc7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAobmV3Tm90aWZ5U2V0dGluZ3MucG9zaXRpb24gPT09ICdsZWZ0LXRvcCcpIHtcclxuXHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS5sZWZ0ID0gbmV3Tm90aWZ5U2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS50b3AgPSBuZXdOb3RpZnlTZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICBudGZseE5vdGlmeVdyYXAuc3R5bGUuYm90dG9tID0gJ2F1dG8nO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKG5ld05vdGlmeVNldHRpbmdzLnBvc2l0aW9uID09PSAnbGVmdC1ib3R0b20nKSB7XHJcblxyXG4gICAgICAgICAgICBudGZseE5vdGlmeVdyYXAuc3R5bGUubGVmdCA9IG5ld05vdGlmeVNldHRpbmdzLmRpc3RhbmNlO1xyXG4gICAgICAgICAgICBudGZseE5vdGlmeVdyYXAuc3R5bGUuYm90dG9tID0gbmV3Tm90aWZ5U2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS50b3AgPSAnYXV0byc7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS5yaWdodCA9ICdhdXRvJztcclxuXHJcbiAgICAgICAgfSBlbHNlIHsgLy8gJ3JpZ2h0LXRvcCcgb3IgZWxzZVxyXG5cclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLnJpZ2h0ID0gbmV3Tm90aWZ5U2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS50b3AgPSBuZXdOb3RpZnlTZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhOb3RpZnlXcmFwLnN0eWxlLmxlZnQgPSAnYXV0byc7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5V3JhcC5zdHlsZS5ib3R0b20gPSAnYXV0byc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHdyYXAgcG9zaXRpb24gb2ZmXHJcblxyXG4gICAgICAgIC8vIGlmIGJhY2tncm91bmQgb3ZlcmxheSB0cnVlIG9uXHJcbiAgICAgICAgbGV0IG5vdGlmeU92ZXJsYXk7XHJcbiAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5KSB7XHJcblxyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIG5vdGlmeU92ZXJsYXkuaWQgPSBgJHtuZXdOb3RpZnlTZXR0aW5ncy5JRH1PdmVybGF5YDtcclxuICAgICAgICAgICAgbm90aWZ5T3ZlcmxheS5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgbm90aWZ5T3ZlcmxheS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIG5vdGlmeU92ZXJsYXkuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5LnN0eWxlLnpJbmRleCA9IG5ld05vdGlmeVNldHRpbmdzLnppbmRleDtcclxuICAgICAgICAgICAgbm90aWZ5T3ZlcmxheS5zdHlsZS5sZWZ0ID0gMDtcclxuICAgICAgICAgICAgbm90aWZ5T3ZlcmxheS5zdHlsZS50b3AgPSAwO1xyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5LnN0eWxlLnJpZ2h0ID0gMDtcclxuICAgICAgICAgICAgbm90aWZ5T3ZlcmxheS5zdHlsZS5ib3R0b20gPSAwO1xyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5LnN0eWxlLmJhY2tncm91bmQgPSBuZXdOb3RpZnlTZXR0aW5ncy5iYWNrT3ZlcmxheUNvbG9yO1xyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5LmNsYXNzTmFtZSA9IChuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb24gPyAnd2l0aC1hbmltYXRpb24nIDogJycpO1xyXG4gICAgICAgICAgICBub3RpZnlPdmVybGF5LnN0eWxlLmFuaW1hdGlvbkR1cmF0aW9uID0gKG5ld05vdGlmeVNldHRpbmdzLmNzc0FuaW1hdGlvbikgPyBgJHtuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbn1tc2AgOiAnJztcclxuXHJcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm90aWZ5T3ZlcmxheS5pZCkpIHtcclxuICAgICAgICAgICAgICAgIGRvY0JvZHkuYXBwZW5kQ2hpbGQobm90aWZ5T3ZlcmxheSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIGJhY2tncm91bmQgb3ZlcmxheSB0cnVlIG9mZlxyXG5cclxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5V3JhcC5pZCkpIHtcclxuICAgICAgICAgICAgZG9jQm9keS5hcHBlbmRDaGlsZChudGZseE5vdGlmeVdyYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBub3RpZnkgd3JhcCBvZmZcclxuXHJcblxyXG4gICAgICAgIC8vIG5vdGlmeSBjb250ZW50IG9uXHJcbiAgICAgICAgbGV0IG50Zmx4Tm90aWZ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbnRmbHhOb3RpZnkuaWQgPSBgJHtuZXdOb3RpZnlTZXR0aW5ncy5JRH0tJHtub3RpZmxpeE5vdGlmeUNvdW50fWA7XHJcbiAgICAgICAgbnRmbHhOb3RpZnkuY2xhc3NOYW1lID0gYCR7bmV3Tm90aWZ5U2V0dGluZ3MuY2xhc3NOYW1lfSAke3RoZVR5cGUuY2hpbGRDbGFzc05hbWV9ICR7KG5ld05vdGlmeVNldHRpbmdzLmNzc0FuaW1hdGlvbiA/ICd3aXRoLWFuaW1hdGlvbicgOiAnJyl9ICR7KG5ld05vdGlmeVNldHRpbmdzLnVzZUljb24gPyAnd2l0aC1pY29uJyA6ICcnKX0gbngtJHtuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb25TdHlsZX0gJHsobmV3Tm90aWZ5U2V0dGluZ3MuY2xvc2VCdXR0b24gJiYgIWNhbGxiYWNrID8gJ3dpdGgtY2xvc2UnIDogJycpfSAkeyhjYWxsYmFjayA/ICd3aXRoLWNhbGxiYWNrJyA6ICcnKX1gO1xyXG4gICAgICAgIG50Zmx4Tm90aWZ5LnN0eWxlLmZvbnRTaXplID0gbmV3Tm90aWZ5U2V0dGluZ3MuZm9udFNpemU7XHJcbiAgICAgICAgbnRmbHhOb3RpZnkuc3R5bGUuY29sb3IgPSB0aGVUeXBlLnRleHRDb2xvcjtcclxuICAgICAgICBudGZseE5vdGlmeS5zdHlsZS5iYWNrZ3JvdW5kID0gdGhlVHlwZS5iYWNrZ3JvdW5kO1xyXG4gICAgICAgIG50Zmx4Tm90aWZ5LnN0eWxlLmJvcmRlclJhZGl1cyA9IG5ld05vdGlmeVNldHRpbmdzLmJvcmRlclJhZGl1cztcclxuXHJcbiAgICAgICAgLy8gcnRsIG9uXHJcbiAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLnJ0bCkge1xyXG4gICAgICAgICAgICBudGZseE5vdGlmeS5zZXRBdHRyaWJ1dGUoJ2RpcicsICdydGwnKTtcclxuICAgICAgICAgICAgbnRmbHhOb3RpZnkuY2xhc3NMaXN0LmFkZCgncnRsLW9uJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJ0bCBvZmZcclxuXHJcbiAgICAgICAgLy8gZm9udC1mYW1pbHkgb25cclxuICAgICAgICBudGZseE5vdGlmeS5zdHlsZS5mb250RmFtaWx5ID0gYFwiJHtuZXdOb3RpZnlTZXR0aW5ncy5mb250RmFtaWx5fVwiLCBzYW5zLXNlcmlmYDtcclxuICAgICAgICAvLyBmb250LWZhbWlseSBvZmZcclxuXHJcbiAgICAgICAgLy8gdXNlIGNzcyBhbmltYXRpb24gb25cclxuICAgICAgICBpZiAobmV3Tm90aWZ5U2V0dGluZ3MuY3NzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5LnN0eWxlLmFuaW1hdGlvbkR1cmF0aW9uID0gYCR7bmV3Tm90aWZ5U2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb259bXNgO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyB1c2UgY3NzIGFuaW1hdGlvbiBvZmZcclxuXHJcbiAgICAgICAgLy8gY2xpY2sgdG8gY2xvc2Ugb25cclxuICAgICAgICBsZXQgY2xvc2VCdXR0b25IVE1MID0gJyc7XHJcbiAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmNsb3NlQnV0dG9uICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCJjbGljay10by1jbG9zZVwiPjxzdmcgY2xhc3M9XCJjbGNrMmNsc1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHdpZHRoPVwiMjBweFwiIGhlaWdodD1cIjIwcHhcIiB2ZXJzaW9uPVwiMS4xXCIgc3R5bGU9XCJzaGFwZS1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyB0ZXh0LXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IGltYWdlLXJlbmRlcmluZzpvcHRpbWl6ZVF1YWxpdHk7IGZpbGwtcnVsZTpldmVub2RkOyBjbGlwLXJ1bGU6ZXZlbm9kZFwidmlld0JveD1cIjAgMCAyMCAyMFwieG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PGRlZnM+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPi5jbGljazJjbG9zZXtmaWxsOiR7dGhlVHlwZS5ub3RpZmxpeEljb25Db2xvcn07fTwvc3R5bGU+PC9kZWZzPjxnPjxwYXRoIGNsYXNzPVwiY2xpY2syY2xvc2VcIiBkPVwiTTAuMzggMi4xOWw3LjggNy44MSAtNy44IDcuODFjLTAuNTEsMC41IC0wLjUxLDEuMzEgLTAuMDEsMS44MSAwLjI1LDAuMjUgMC41NywwLjM4IDAuOTEsMC4zOCAwLjM0LDAgMC42NywtMC4xNCAwLjkxLC0wLjM4bDcuODEgLTcuODEgNy44MSA3LjgxYzAuMjQsMC4yNCAwLjU3LDAuMzggMC45MSwwLjM4IDAuMzQsMCAwLjY2LC0wLjE0IDAuOSwtMC4zOCAwLjUxLC0wLjUgMC41MSwtMS4zMSAwLC0xLjgxbC03LjgxIC03LjgxIDcuODEgLTcuODFjMC41MSwtMC41IDAuNTEsLTEuMzEgMCwtMS44MiAtMC41LC0wLjUgLTEuMzEsLTAuNSAtMS44MSwwbC03LjgxIDcuODEgLTcuODEgLTcuODFjLTAuNSwtMC41IC0xLjMxLC0wLjUgLTEuODEsMCAtMC41MSwwLjUxIC0wLjUxLDEuMzIgMCwxLjgyelwiLz48L2c+PC9zdmc+PC9zcGFuPmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNsaWNrIHRvIGNsb3NlIG9mZlxyXG5cclxuICAgICAgICAvLyB1c2UgaWNvbiBvblxyXG4gICAgICAgIGlmIChuZXdOb3RpZnlTZXR0aW5ncy51c2VJY29uKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAobmV3Tm90aWZ5U2V0dGluZ3MudXNlRm9udEF3ZXNvbWUpIHsgLy8gdXNlIGZvbnQgYXdlc29tZVxyXG5cclxuICAgICAgICAgICAgICAgIG50Zmx4Tm90aWZ5LmlubmVySFRNTCA9IGA8aSBzdHlsZT1cImNvbG9yOiR7dGhlVHlwZS5mb250QXdlc29tZUljb25Db2xvcn07IGZvbnQtc2l6ZToke25ld05vdGlmeVNldHRpbmdzLmZvbnRBd2Vzb21lSWNvblNpemV9O1wiIGNsYXNzPVwibm1pIHdmYSAke3RoZVR5cGUuZm9udEF3ZXNvbWVDbGFzc05hbWV9ICR7KG5ld05vdGlmeVNldHRpbmdzLmZvbnRBd2Vzb21lSWNvblN0eWxlID09PSAnc2hhZG93JyA/ICdzaGFkb3cnIDogJ2Jhc2ljJyl9XCI+PC9pPjxzcGFuIGNsYXNzPVwidGhlLW1lc3NhZ2Ugd2l0aC1pY29uXCI+JHttZXNzYWdlfTwvc3Bhbj4keyhuZXdOb3RpZnlTZXR0aW5ncy5jbG9zZUJ1dHRvbiA/IGNsb3NlQnV0dG9uSFRNTCA6ICcnKX1gO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gdXNlIG5vdGlmbGl4IGljb25cclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgc3ZnSWNvbiA9ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0aWNUeXBlID09PSAnU3VjY2VzcycpIHsgIC8vIHN1Y2Nlc3NcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3ZnSWNvbiA9IGA8c3ZnIGNsYXNzPVwibm1pXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgd2lkdGg9XCI0MHB4XCIgaGVpZ2h0PVwiNDBweFwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCJ2aWV3Qm94PVwiMCAwIDQwIDQwXCJ4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48ZGVmcz48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+I05vdGlmbGl4LUljb24tU3VjY2Vzc3tmaWxsOiR7dGhlVHlwZS5ub3RpZmxpeEljb25Db2xvcn07fTwvc3R5bGU+PC9kZWZzPjxnPjxwYXRoIGlkPVwiTm90aWZsaXgtSWNvbi1TdWNjZXNzXCIgY2xhc3M9XCJmaWwwXCIgZD1cIk0yMCAwYzExLjAzLDAgMjAsOC45NyAyMCwyMCAwLDExLjAzIC04Ljk3LDIwIC0yMCwyMCAtMTEuMDMsMCAtMjAsLTguOTcgLTIwLC0yMCAwLC0xMS4wMyA4Ljk3LC0yMCAyMCwtMjB6bTAgMzcuOThjOS45MiwwIDE3Ljk4LC04LjA2IDE3Ljk4LC0xNy45OCAwLC05LjkyIC04LjA2LC0xNy45OCAtMTcuOTgsLTE3Ljk4IC05LjkyLDAgLTE3Ljk4LDguMDYgLTE3Ljk4LDE3Ljk4IDAsOS45MiA4LjA2LDE3Ljk4IDE3Ljk4LDE3Ljk4em0tMi40IC0xMy4yOWwxMS41MiAtMTIuOTZjMC4zNywtMC40MSAxLjAxLC0wLjQ1IDEuNDIsLTAuMDggMC40MiwwLjM3IDAuNDYsMSAwLjA5LDEuNDJsLTEyLjE2IDEzLjY3Yy0wLjE5LDAuMjIgLTAuNDYsMC4zNCAtMC43NSwwLjM0IC0wLjIzLDAgLTAuNDUsLTAuMDcgLTAuNjMsLTAuMjJsLTcuNiAtNi4wN2MtMC40MywtMC4zNSAtMC41LC0wLjk5IC0wLjE2LC0xLjQyIDAuMzUsLTAuNDMgMC45OSwtMC41IDEuNDIsLTAuMTZsNi44NSA1LjQ4elwiLz48L2c+PC9zdmc+YDtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRpY1R5cGUgPT09ICdGYWlsdXJlJykgeyAvLyBmYWlsdXJlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN2Z0ljb24gPSBgPHN2ZyBjbGFzcz1cIm5taVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHdpZHRoPVwiNDBweFwiIGhlaWdodD1cIjQwcHhcIiB2ZXJzaW9uPVwiMS4xXCIgc3R5bGU9XCJzaGFwZS1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyB0ZXh0LXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IGltYWdlLXJlbmRlcmluZzpvcHRpbWl6ZVF1YWxpdHk7IGZpbGwtcnVsZTpldmVub2RkOyBjbGlwLXJ1bGU6ZXZlbm9kZFwidmlld0JveD1cIjAgMCA0MCA0MFwieG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PGRlZnM+PHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPiNOb3RpZmxpeC1JY29uLUZhaWx1cmV7ZmlsbDoke3RoZVR5cGUubm90aWZsaXhJY29uQ29sb3J9O308L3N0eWxlPjwvZGVmcz48Zz48cGF0aCBpZD1cIk5vdGlmbGl4LUljb24tRmFpbHVyZVwiIGNsYXNzPVwiZmlsMFwiIGQ9XCJNMjAgMGMxMS4wMywwIDIwLDguOTcgMjAsMjAgMCwxMS4wMyAtOC45NywyMCAtMjAsMjAgLTExLjAzLDAgLTIwLC04Ljk3IC0yMCwtMjAgMCwtMTEuMDMgOC45NywtMjAgMjAsLTIwem0wIDM3Ljk4YzkuOTIsMCAxNy45OCwtOC4wNiAxNy45OCwtMTcuOTggMCwtOS45MiAtOC4wNiwtMTcuOTggLTE3Ljk4LC0xNy45OCAtOS45MiwwIC0xNy45OCw4LjA2IC0xNy45OCwxNy45OCAwLDkuOTIgOC4wNiwxNy45OCAxNy45OCwxNy45OHptMS40MiAtMTcuOThsNi4xMyA2LjEyYzAuMzksMC40IDAuMzksMS4wNCAwLDEuNDMgLTAuMTksMC4xOSAtMC40NSwwLjI5IC0wLjcxLDAuMjkgLTAuMjcsMCAtMC41MywtMC4xIC0wLjcyLC0wLjI5bC02LjEyIC02LjEzIC02LjEzIDYuMTNjLTAuMTksMC4xOSAtMC40NCwwLjI5IC0wLjcxLDAuMjkgLTAuMjcsMCAtMC41MiwtMC4xIC0wLjcxLC0wLjI5IC0wLjM5LC0wLjM5IC0wLjM5LC0xLjAzIDAsLTEuNDNsNi4xMyAtNi4xMiAtNi4xMyAtNi4xM2MtMC4zOSwtMC4zOSAtMC4zOSwtMS4wMyAwLC0xLjQyIDAuMzksLTAuMzkgMS4wMywtMC4zOSAxLjQyLDBsNi4xMyA2LjEyIDYuMTIgLTYuMTJjMC40LC0wLjM5IDEuMDQsLTAuMzkgMS40MywwIDAuMzksMC4zOSAwLjM5LDEuMDMgMCwxLjQybC02LjEzIDYuMTN6XCIvPjwvZz48L3N2Zz5gO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGljVHlwZSA9PT0gJ1dhcm5pbmcnKSB7IC8vIHdhcm5pbmdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3ZnSWNvbiA9IGA8c3ZnIGNsYXNzPVwibm1pXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgd2lkdGg9XCI0MHB4XCIgaGVpZ2h0PVwiNDBweFwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCJ2aWV3Qm94PVwiMCAwIDQwIDQwXCJ4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48ZGVmcz48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+I05vdGlmbGl4LUljb24tV2FybmluZ3tmaWxsOiR7dGhlVHlwZS5ub3RpZmxpeEljb25Db2xvcn07fTwvc3R5bGU+PC9kZWZzPjxnPjxwYXRoIGlkPVwiTm90aWZsaXgtSWNvbi1XYXJuaW5nXCIgY2xhc3M9XCJmaWwwXCIgZD1cIk0yMS45MSAzLjQ4bDE3LjggMzAuODljMC44NCwxLjQ2IC0wLjIzLDMuMjUgLTEuOTEsMy4yNWwtMzUuNiAwYy0xLjY4LDAgLTIuNzUsLTEuNzkgLTEuOTEsLTMuMjVsMTcuOCAtMzAuODljMC44NSwtMS40NyAyLjk3LC0xLjQ3IDMuODIsMHptMTYuMTUgMzEuODRsLTE3LjggLTMwLjg5Yy0wLjExLC0wLjIgLTAuNDEsLTAuMiAtMC41MiwwbC0xNy44IDMwLjg5Yy0wLjEyLDAuMiAwLjA1LDAuNCAwLjI2LDAuNGwzNS42IDBjMC4yMSwwIDAuMzgsLTAuMiAwLjI2LC0wLjR6bS0xOS4wMSAtNC4xMmwwIC0xLjA1YzAsLTAuNTMgMC40MiwtMC45NSAwLjk1LC0wLjk1IDAuNTMsMCAwLjk1LDAuNDIgMC45NSwwLjk1bDAgMS4wNWMwLDAuNTMgLTAuNDIsMC45NSAtMC45NSwwLjk1IC0wLjUzLDAgLTAuOTUsLTAuNDIgLTAuOTUsLTAuOTV6bTAgLTQuNjZsMCAtMTMuMzljMCwtMC41MiAwLjQyLC0wLjk1IDAuOTUsLTAuOTUgMC41MywwIDAuOTUsMC40MyAwLjk1LDAuOTVsMCAxMy4zOWMwLDAuNTMgLTAuNDIsMC45NiAtMC45NSwwLjk2IC0wLjUzLDAgLTAuOTUsLTAuNDMgLTAuOTUsLTAuOTZ6XCIvPjwvZz48L3N2Zz5gO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGljVHlwZSA9PT0gJ0luZm8nKSB7IC8vIGluZm9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3ZnSWNvbiA9IGA8c3ZnIGNsYXNzPVwibm1pXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgd2lkdGg9XCI0MHB4XCIgaGVpZ2h0PVwiNDBweFwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCJ2aWV3Qm94PVwiMCAwIDQwIDQwXCJ4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48ZGVmcz48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+I05vdGlmbGl4LUljb24tSW5mb3tmaWxsOiR7dGhlVHlwZS5ub3RpZmxpeEljb25Db2xvcn07fTwvc3R5bGU+PC9kZWZzPjxnPjxwYXRoIGlkPVwiTm90aWZsaXgtSWNvbi1JbmZvXCIgY2xhc3M9XCJmaWwwXCIgZD1cIk0yMCAwYzExLjAzLDAgMjAsOC45NyAyMCwyMCAwLDExLjAzIC04Ljk3LDIwIC0yMCwyMCAtMTEuMDMsMCAtMjAsLTguOTcgLTIwLC0yMCAwLC0xMS4wMyA4Ljk3LC0yMCAyMCwtMjB6bTAgMzcuOThjOS45MiwwIDE3Ljk4LC04LjA2IDE3Ljk4LC0xNy45OCAwLC05LjkyIC04LjA2LC0xNy45OCAtMTcuOTgsLTE3Ljk4IC05LjkyLDAgLTE3Ljk4LDguMDYgLTE3Ljk4LDE3Ljk4IDAsOS45MiA4LjA2LDE3Ljk4IDE3Ljk4LDE3Ljk4em0tMC45OSAtMjMuM2MwLC0wLjU0IDAuNDQsLTAuOTggMC45OSwtMC45OCAwLjU1LDAgMC45OSwwLjQ0IDAuOTksMC45OGwwIDE1Ljg2YzAsMC41NSAtMC40NCwwLjk5IC0wLjk5LDAuOTkgLTAuNTUsMCAtMC45OSwtMC40NCAtMC45OSwtMC45OWwwIC0xNS44NnptMCAtNS4yMmMwLC0wLjU1IDAuNDQsLTAuOTkgMC45OSwtMC45OSAwLjU1LDAgMC45OSwwLjQ0IDAuOTksMC45OWwwIDEuMDljMCwwLjU0IC0wLjQ0LDAuOTkgLTAuOTksMC45OSAtMC41NSwwIC0wLjk5LC0wLjQ1IC0wLjk5LC0wLjk5bDAgLTEuMDl6XCIvPjwvZz48L3N2Zz5gO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBudGZseE5vdGlmeS5pbm5lckhUTUwgPSBgJHtzdmdJY29ufTxzcGFuIGNsYXNzPVwidGhlLW1lc3NhZ2Ugd2l0aC1pY29uXCI+JHttZXNzYWdlfTwvc3Bhbj4keyhuZXdOb3RpZnlTZXR0aW5ncy5jbG9zZUJ1dHRvbiA/IGNsb3NlQnV0dG9uSFRNTCA6ICcnKX1gO1xyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2UgeyAvLyB3aXRob3V0IGljb25cclxuXHJcbiAgICAgICAgICAgIG50Zmx4Tm90aWZ5LmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz1cInRoZS1tZXNzYWdlXCI+JHttZXNzYWdlfTwvc3Bhbj4gJHsobmV3Tm90aWZ5U2V0dGluZ3MuY2xvc2VCdXR0b24gPyBjbG9zZUJ1dHRvbkhUTUwgOiAnJyl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdXNlIGljb24gb2ZmXHJcbiAgICAgICAgLy8gbm90aWZ5IGNvbnRlbnQgb2ZmXHJcblxyXG5cclxuICAgICAgICAvLyBub3RpZnkgYXBwZW5kIG9yIHByZXBlbmQgb25cclxuICAgICAgICBjb25zdCBub3RpZnlXcmFwRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5V3JhcC5pZCk7XHJcbiAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLnBvc2l0aW9uID09PSAnbGVmdC1ib3R0b20nIHx8IG5ld05vdGlmeVNldHRpbmdzLnBvc2l0aW9uID09PSAncmlnaHQtYm90dG9tJykgeyAvLyB0aGUgbmV3IG9uZSB3aWxsIGJlIGZpcnN0XHJcblxyXG4gICAgICAgICAgICBub3RpZnlXcmFwRWxlbWVudC5pbnNlcnRCZWZvcmUobnRmbHhOb3RpZnksIG5vdGlmeVdyYXBFbGVtZW50LmZpcnN0Q2hpbGQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBub3RpZnlXcmFwRWxlbWVudC5hcHBlbmRDaGlsZChudGZseE5vdGlmeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmV3Tm90aWZ5U2V0dGluZ3MudXNlSWNvbikgeyAvLyBpZiB1c2VJY29uLCBkeW5hbWljYWxseSB2ZXJ0aWNhbCBhbGlnbiB0aGUgY29udGVudHNcclxuXHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlSWNvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5LmlkKS5xdWVyeVNlbGVjdG9yQWxsKCcubm1pJylbMF07XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlSWNvbkggPSA0MDtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZXdOb3RpZnlTZXR0aW5ncy51c2VGb250QXdlc29tZSkgeyAvLyBpZiBmb250IGF3ZXNvbWVcclxuXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWNvbkggPSBNYXRoLnJvdW5kKHBhcnNlSW50KG1lc3NhZ2VJY29uLm9mZnNldEhlaWdodCkpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgbm90aWZsaXggU1ZHXHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IFN2Z0JCb3ggPSBtZXNzYWdlSWNvbi5nZXRCQm94KCk7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWNvbkggPSBNYXRoLnJvdW5kKHBhcnNlSW50KFN2Z0JCb3gud2lkdGgpKTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVGV4dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5LmlkKS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuJylbMF07XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVGV4dEggPSBNYXRoLnJvdW5kKG1lc3NhZ2VUZXh0Lm9mZnNldEhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBpZiAobWVzc2FnZVRleHRIIDw9IG1lc3NhZ2VJY29uSCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHBhZGRpbmdWYWwgPSBgJHtwYXJzZUludCgobWVzc2FnZUljb25IIC0gbWVzc2FnZVRleHRIKSAvIDIpLnRvU3RyaW5nKCl9cHhgO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZVRleHQuc3R5bGUucGFkZGluZ1RvcCA9IHBhZGRpbmdWYWw7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlVGV4dC5zdHlsZS5wYWRkaW5nQm90dG9tID0gcGFkZGluZ1ZhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbm90aWZ5IGFwcGVuZCBvciBwcmVwZW5kIG9mZlxyXG5cclxuXHJcbiAgICAgICAgLy8gcmVtb3ZlIGJ5IHRpbWVvdXQgb3IgY2xpY2sgb25cclxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobnRmbHhOb3RpZnkuaWQpKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBzZXQgZWxlbWVudHMgb25cclxuICAgICAgICAgICAgbGV0IHJlbW92ZURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5LmlkKTtcclxuICAgICAgICAgICAgbGV0IHJlbW92ZVdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChudGZseE5vdGlmeVdyYXAuaWQpO1xyXG4gICAgICAgICAgICBsZXQgcmVtb3ZlT3ZlcmxheTtcclxuICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVPdmVybGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobm90aWZ5T3ZlcmxheS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gc2V0IGVsZW1lbnRzIG9uXHJcblxyXG4gICAgICAgICAgICAvLyB0aW1lb3V0IHZhcnMgb25cclxuICAgICAgICAgICAgbGV0IHRpbWVvdXRBZGRDbGFzcztcclxuICAgICAgICAgICAgbGV0IHRpbWVvdXRSZW1vdmU7XHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgdmFycyBvZmZcclxuXHJcbiAgICAgICAgICAgIC8vIHRpbWVvdXQgaWYgY2xpY2sgdG8gY2xvc2UgZmFsc2UgYW5kIGNhbGxiYWNrIHVuZGVmaW5lZCBvblxyXG4gICAgICAgICAgICBpZiAoIW5ld05vdGlmeVNldHRpbmdzLmNsb3NlQnV0dG9uICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGltZW91dEFkZENsYXNzID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZURpdi5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5ICYmIHJlbW92ZVdyYXAuY2hpbGRFbGVtZW50Q291bnQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ3JlbW92ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCBuZXdOb3RpZnlTZXR0aW5ncy50aW1lb3V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aW1lb3V0UmVtb3ZlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlRGl2KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlV3JhcC5jaGlsZEVsZW1lbnRDb3VudCA8PSAwKSB7IC8vIGlmIGNoaWxkcyBjb3VudCA9PT0gMCByZW1vdmUgd3JhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVXcmFwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlV3JhcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm90aWZ5U2V0dGluZ3MuYmFja092ZXJsYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU92ZXJsYXkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZW1vdmVPdmVybGF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIG5ld05vdGlmeVNldHRpbmdzLnRpbWVvdXQgKyBuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gdGltZW91dCBpZiBjbGljayB0byBjbG9zZSBmYWxzZSBhbmQgY2FsbGJhY2sgdW5kZWZpbmVkIG9mZlxyXG5cclxuICAgICAgICAgICAgLy8gaWYgY2xpY2sgdG8gY2xvc2Ugb24gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmNsb3NlQnV0dG9uICYmICFjYWxsYmFjaykge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBjbG9zZUJ1dHRvbkVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Tm90aWZ5LmlkKS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLmNsaWNrLXRvLWNsb3NlJylbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgY2xvc2VCdXR0b25FbG0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZURpdi5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEFkZENsYXNzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5ICYmIHJlbW92ZVdyYXAuY2hpbGRFbGVtZW50Q291bnQgPD0gMSkgeyAvLyBpZiBsYXN0IGNoaWxkIC0gYWRkQ2xhc3MgUmVtb3ZlIHRvIE92ZXJsYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT3ZlcmxheS5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVEaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZW1vdmVEaXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dFJlbW92ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlV3JhcC5jaGlsZEVsZW1lbnRDb3VudCA8PSAwKSB7IC8vIGlmIGNoaWxkcyBjb3VudCA9PT0gMCByZW1vdmUgd3JhcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlV3JhcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlbW92ZVdyYXApOyAvLyByZW1vdmUgd3JhcFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdOb3RpZnlTZXR0aW5ncy5iYWNrT3ZlcmxheSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZU92ZXJsYXkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChyZW1vdmVPdmVybGF5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIGNsaWNrIHRvIGNsb3NlIG9mZlxyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIGNhbGxiYWNrIG9uXHJcbiAgICAgICAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuXHJcbiAgICAgICAgICAgICAgICByZW1vdmVEaXYuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpOyAvLyBjYWxsYmFja1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZW1vdmUgZWxlbWVudCBvblxyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZURpdi5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5ICYmIHJlbW92ZVdyYXAuY2hpbGRFbGVtZW50Q291bnQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVPdmVybGF5LmNsYXNzTGlzdC5hZGQoJ3JlbW92ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRBZGRDbGFzcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlRGl2KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVXcmFwLmNoaWxkRWxlbWVudENvdW50IDw9IDApIHsgLy8gaWYgY2hpbGRzIGNvdW50ID09PSAwIHJlbW92ZSB3cmFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVXcmFwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVtb3ZlV3JhcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld05vdGlmeVNldHRpbmdzLmJhY2tPdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlT3ZlcmxheS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlbW92ZU92ZXJsYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0UmVtb3ZlKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBuZXdOb3RpZnlTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGVsZW1lbnQgb2ZmXHJcblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGNhbGxiYWNrIG9mZlxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcmVtb3ZlIGJ5IHRpbWVvdXQgb3IgY2xpY2sgb2ZmXHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBub3RpZmxpeENvbnNvbGVFcnJvcignTm90aWZsaXggRXJyb3InLCAnV2hlcmUgaXMgdGhlIGFyZ3VtZW50cz8nKTtcclxuICAgIH1cclxuXHJcbn1cclxuLy8gTm90aWZsaXg6IE5vdGlmeSBTaW5nbGUgb2ZmXHJcblxyXG5cclxuLy8gTm90aWZsaXg6IFJlcG9ydCBTaW5nbGUgb25cclxuY29uc3QgTm90aWZsaXhSZXBvcnQgPSBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UsIGJ1dHRvblRleHQsIGJ1dHRvbkNhbGxiYWNrLCB0aGVUeXBlLCBzdGF0aWNUeXBlKSB7XHJcblxyXG4gICAgLy8gaWYgcGxhaW5UZXh0IHRydWUgPSBIVE1MIHRhZ3Mgbm90IGFsbG93ZWQgb25cclxuICAgIGlmIChuZXdSZXBvcnRTZXR0aW5ncy5wbGFpblRleHQpIHtcclxuICAgICAgICB0aXRsZSA9IG5vdGlmbGl4UGxhaW50ZXh0KHRpdGxlKTtcclxuICAgICAgICBtZXNzYWdlID0gbm90aWZsaXhQbGFpbnRleHQobWVzc2FnZSk7XHJcbiAgICAgICAgYnV0dG9uVGV4dCA9IG5vdGlmbGl4UGxhaW50ZXh0KGJ1dHRvblRleHQpO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgcGxhaW5UZXh0IHRydWUgPSBIVE1MIHRhZ3Mgbm90IGFsbG93ZWQgb2ZmXHJcblxyXG4gICAgLy8gaWYgcGxhaW5UZXh0IGZhbHNlIGJ1dCB0aGUgY29udGVudHMgbGVuZ3RoIG1vcmUgdGhhbiAqTWF4TGVuZ3RoID0gSFRNTCB0YWdzIGVycm9yIG9uXHJcbiAgICBpZiAoIW5ld1JlcG9ydFNldHRpbmdzLnBsYWluVGV4dCkge1xyXG4gICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiBuZXdSZXBvcnRTZXR0aW5ncy50aXRsZU1heExlbmd0aCkge1xyXG4gICAgICAgICAgICB0aXRsZSA9ICdIVE1MIFRhZ3MgRXJyb3InOyAvLyB0aXRsZSBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnWW91ciBUaXRsZSBjb250ZW50IGxlbmd0aCBpcyBtb3JlIHRoYW4gXCJ0aXRsZU1heExlbmd0aFwiIG9wdGlvbi4nOyAvLyBtZXNzYWdlIGh0bWwgZXJyb3JcclxuICAgICAgICAgICAgYnV0dG9uVGV4dCA9ICdPa2F5JzsgLy8gYnV0dG9uIGh0bWwgZXJyb3JcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChtZXNzYWdlLmxlbmd0aCA+IG5ld1JlcG9ydFNldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgdGl0bGUgPSAnSFRNTCBUYWdzIEVycm9yJzsgLy8gdGl0bGUgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ1lvdXIgTWVzc2FnZSBjb250ZW50IGxlbmd0aCBpcyBtb3JlIHRoYW4gXCJtZXNzYWdlTWF4TGVuZ3RoXCIgb3B0aW9uLic7IC8vIG1lc3NhZ2UgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBidXR0b25UZXh0ID0gJ09rYXknOyAvLyBidXR0b24gaHRtbCBlcnJvclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGJ1dHRvblRleHQubGVuZ3RoID4gbmV3UmVwb3J0U2V0dGluZ3MuYnV0dG9uTWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRpdGxlID0gJ0hUTUwgVGFncyBFcnJvcic7IC8vIHRpdGxlIGh0bWwgZXJyb3JcclxuICAgICAgICAgICAgbWVzc2FnZSA9ICdZb3VyIEJ1dHRvbiBjb250ZW50IGxlbmd0aCBpcyBtb3JlIHRoYW4gXCJidXR0b25NYXhMZW5ndGhcIiBvcHRpb24uJzsgLy8gbWVzc2FnZSBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIGJ1dHRvblRleHQgPSAnT2theSc7IC8vIGJ1dHRvbiBodG1sIGVycm9yXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gaWYgcGxhaW5UZXh0IGZhbHNlIGJ1dCB0aGUgY29udGVudHMgbGVuZ3RoIG1vcmUgdGhhbiAqTWF4TGVuZ3RoID0gSFRNTCB0YWdzIGVycm9yIG9mZlxyXG5cclxuXHJcbiAgICAvLyBtYXggbGVuZ3RoIG9uXHJcbiAgICBpZiAodGl0bGUubGVuZ3RoID4gbmV3UmVwb3J0U2V0dGluZ3MudGl0bGVNYXhMZW5ndGgpIHtcclxuICAgICAgICB0aXRsZSA9IGAke3RpdGxlLnN1YnN0cmluZygwLCBuZXdSZXBvcnRTZXR0aW5ncy50aXRsZU1heExlbmd0aCl9Li4uYDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobWVzc2FnZS5sZW5ndGggPiBuZXdSZXBvcnRTZXR0aW5ncy5tZXNzYWdlTWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgbWVzc2FnZSA9IGAke21lc3NhZ2Uuc3Vic3RyaW5nKDAsIG5ld1JlcG9ydFNldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpfS4uLmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGJ1dHRvblRleHQubGVuZ3RoID4gbmV3UmVwb3J0U2V0dGluZ3MuYnV0dG9uTWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgYnV0dG9uVGV4dCA9IGAke2J1dHRvblRleHQuc3Vic3RyaW5nKDAsIG5ld1JlcG9ydFNldHRpbmdzLmJ1dHRvbk1heExlbmd0aCl9Li4uYDtcclxuICAgIH1cclxuICAgIC8vIG1heCBsZW5ndGggb2ZmXHJcblxyXG4gICAgLy8gaWYgY3NzQW5pbWFpb24gZmFsc2UgLT4gZHVyYXRpb24gb25cclxuICAgIGlmICghbmV3UmVwb3J0U2V0dGluZ3MuY3NzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgbmV3UmVwb3J0U2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb24gPSAwO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgY3NzQW5pbWFpb24gZmFsc2UgLT4gZHVyYXRpb24gb2ZmXHJcblxyXG4gICAgLy8gcmVwb3J0IHdyYXAgb25cclxuICAgIGNvbnN0IGRvY0JvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAgIGNvbnN0IG50Zmx4UmVwb3J0V3JhcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgbnRmbHhSZXBvcnRXcmFwLmlkID0gcmVwb3J0U2V0dGluZ3MuSUQ7XHJcbiAgICBudGZseFJlcG9ydFdyYXAuY2xhc3NOYW1lID0gbmV3UmVwb3J0U2V0dGluZ3MuY2xhc3NOYW1lO1xyXG4gICAgbnRmbHhSZXBvcnRXcmFwLnN0eWxlLndpZHRoID0gbmV3UmVwb3J0U2V0dGluZ3Mud2lkdGg7XHJcbiAgICBudGZseFJlcG9ydFdyYXAuc3R5bGUuekluZGV4ID0gbmV3UmVwb3J0U2V0dGluZ3MuemluZGV4O1xyXG4gICAgbnRmbHhSZXBvcnRXcmFwLnN0eWxlLmJvcmRlclJhZGl1cyA9IG5ld1JlcG9ydFNldHRpbmdzLmJvcmRlclJhZGl1cztcclxuXHJcbiAgICAvLyBmb250LWZhbWlseSBvblxyXG4gICAgbnRmbHhSZXBvcnRXcmFwLnN0eWxlLmZvbnRGYW1pbHkgPSBgXCIke25ld1JlcG9ydFNldHRpbmdzLmZvbnRGYW1pbHl9XCIsIHNhbnMtc2VyaWZgO1xyXG4gICAgLy8gZm9udC1mYW1pbHkgb2ZmXHJcblxyXG4gICAgLy8gcnRsIG9uXHJcbiAgICBpZiAobmV3UmVwb3J0U2V0dGluZ3MucnRsKSB7XHJcbiAgICAgICAgbnRmbHhSZXBvcnRXcmFwLnNldEF0dHJpYnV0ZSgnZGlyJywgJ3J0bCcpO1xyXG4gICAgICAgIG50Zmx4UmVwb3J0V3JhcC5jbGFzc0xpc3QuYWRkKCdydGwtb24nKTtcclxuICAgIH1cclxuICAgIC8vIHJ0bCBvZmZcclxuXHJcbiAgICAvLyBvdmVybGF5IG9uXHJcbiAgICBsZXQgcmVwb3J0T3ZlcmxheSA9ICcnO1xyXG4gICAgaWYgKG5ld1JlcG9ydFNldHRpbmdzLmJhY2tPdmVybGF5KSB7XHJcbiAgICAgICAgcmVwb3J0T3ZlcmxheSA9IGA8ZGl2IGNsYXNzPVwiJHtuZXdSZXBvcnRTZXR0aW5ncy5jbGFzc05hbWV9LW92ZXJsYXkgJHsobmV3UmVwb3J0U2V0dGluZ3MuY3NzQW5pbWF0aW9uID8gJ3dpdGgtYW5pbWF0aW9uJyA6ICcnKX1cIiBzdHlsZT1cImJhY2tncm91bmQ6JHtuZXdSZXBvcnRTZXR0aW5ncy5iYWNrT3ZlcmxheUNvbG9yfTsgYW5pbWF0aW9uLWR1cmF0aW9uOiR7bmV3UmVwb3J0U2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb259bXM7XCI+PC9kaXY+YDtcclxuICAgIH1cclxuICAgIC8vIG92ZXJsYXkgb2ZmXHJcblxyXG5cclxuICAgIC8vIHN2ZyBpY29uIG9uXHJcbiAgICBsZXQgc3ZnSWNvbiA9ICcnO1xyXG4gICAgaWYgKHN0YXRpY1R5cGUgPT09ICdzdWNjZXNzJykge1xyXG4gICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeFJlcG9ydFN2Z1N1Y2Nlc3MobmV3UmVwb3J0U2V0dGluZ3Muc3ZnU2l6ZSwgdGhlVHlwZS5zdmdDb2xvcik7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRpY1R5cGUgPT09ICdmYWlsdXJlJykge1xyXG4gICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeFJlcG9ydFN2Z0ZhaWx1cmUobmV3UmVwb3J0U2V0dGluZ3Muc3ZnU2l6ZSwgdGhlVHlwZS5zdmdDb2xvcik7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRpY1R5cGUgPT09ICd3YXJuaW5nJykge1xyXG4gICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeFJlcG9ydFN2Z1dhcm5pbmcobmV3UmVwb3J0U2V0dGluZ3Muc3ZnU2l6ZSwgdGhlVHlwZS5zdmdDb2xvcik7XHJcbiAgICB9IGVsc2UgaWYgKHN0YXRpY1R5cGUgPT09ICdpbmZvJykge1xyXG4gICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeFJlcG9ydFN2Z0luZm8obmV3UmVwb3J0U2V0dGluZ3Muc3ZnU2l6ZSwgdGhlVHlwZS5zdmdDb2xvcik7XHJcbiAgICB9XHJcbiAgICAvLyBzdmcgaWNvbiBvZmZcclxuXHJcbiAgICAvLyByZXBvcnQgaHRtbCBvblxyXG4gICAgbnRmbHhSZXBvcnRXcmFwLmlubmVySFRNTCA9IGAke3JlcG9ydE92ZXJsYXl9XHJcbiAgICA8ZGl2IGNsYXNzPVwiJHtuZXdSZXBvcnRTZXR0aW5ncy5jbGFzc05hbWV9LWNvbnRlbnQgJHsobmV3UmVwb3J0U2V0dGluZ3MuY3NzQW5pbWF0aW9uID8gJ3dpdGgtYW5pbWF0aW9uJyA6ICcnKX0gbngtJHtuZXdSZXBvcnRTZXR0aW5ncy5jc3NBbmltYXRpb25TdHlsZX1cIiBzdHlsZT1cImJhY2tncm91bmQ6JHtuZXdSZXBvcnRTZXR0aW5ncy5iYWNrZ3JvdW5kQ29sb3J9OyBhbmltYXRpb24tZHVyYXRpb246JHtuZXdSZXBvcnRTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbn1tcztcIj5cclxuICAgIDxkaXYgc3R5bGU9XCJ3aWR0aDoke25ld1JlcG9ydFNldHRpbmdzLnN2Z1NpemV9OyBoZWlnaHQ6JHtuZXdSZXBvcnRTZXR0aW5ncy5zdmdTaXplfTtcIiBjbGFzcz1cIiR7bmV3UmVwb3J0U2V0dGluZ3MuY2xhc3NOYW1lfS1pY29uXCI+JHtzdmdJY29ufTwvZGl2PlxyXG4gICAgPGg1IGNsYXNzPVwiJHtuZXdSZXBvcnRTZXR0aW5ncy5jbGFzc05hbWV9LXRpdGxlXCIgc3R5bGU9XCJmb250LXdlaWdodDo1MDA7IGZvbnQtc2l6ZToke25ld1JlcG9ydFNldHRpbmdzLnRpdGxlRm9udFNpemV9OyBjb2xvcjoke3RoZVR5cGUudGl0bGVDb2xvcn07XCI+JHt0aXRsZX08L2g1PlxyXG4gICAgPHAgY2xhc3M9XCIke25ld1JlcG9ydFNldHRpbmdzLmNsYXNzTmFtZX0tbWVzc2FnZVwiIHN0eWxlPVwiZm9udC1zaXplOiR7bmV3UmVwb3J0U2V0dGluZ3MubWVzc2FnZUZvbnRTaXplfTsgY29sb3I6JHt0aGVUeXBlLm1lc3NhZ2VDb2xvcn07XCI+JHttZXNzYWdlfTwvcD5cclxuICAgIDxhIGlkPVwiTlhSZXBvcnRCdXR0b25cIiBjbGFzcz1cIiR7bmV3UmVwb3J0U2V0dGluZ3MuY2xhc3NOYW1lfS1idXR0b25cIiBzdHlsZT1cImZvbnQtd2VpZ2h0OjUwMDsgZm9udC1zaXplOiR7bmV3UmVwb3J0U2V0dGluZ3MuYnV0dG9uRm9udFNpemV9OyBiYWNrZ3JvdW5kOiR7dGhlVHlwZS5idXR0b25CYWNrZ3JvdW5kfTsgY29sb3I6JHt0aGVUeXBlLmJ1dHRvbkNvbG9yfTtcIj4ke2J1dHRvblRleHR9PC9hPlxyXG4gICAgPC9kaXY+YDtcclxuICAgIC8vIHJlcG9ydCBodG1sIG9mZlxyXG5cclxuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobnRmbHhSZXBvcnRXcmFwLmlkKSkgeyAvLyBpZiBubyByZXBvcnRcclxuXHJcbiAgICAgICAgZG9jQm9keS5hcHBlbmRDaGlsZChudGZseFJlcG9ydFdyYXApOyAvLyBhcHBlbmRcclxuXHJcbiAgICAgICAgLy8gdmVydGljYWwgYWxpZ24gb24gICAgICAgICAgICBcclxuICAgICAgICBsZXQgd2luZG93SCA9IE1hdGgucm91bmQod2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgICAgICBsZXQgcmVwb3J0SCA9IE1hdGgucm91bmQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobnRmbHhSZXBvcnRXcmFwLmlkKS5vZmZzZXRIZWlnaHQpO1xyXG4gICAgICAgIG50Zmx4UmVwb3J0V3JhcC5zdHlsZS50b3AgPSBgJHtwYXJzZUludCgod2luZG93SCAtIHJlcG9ydEgpIC8gMikudG9TdHJpbmcoKX1weGA7XHJcbiAgICAgICAgLy8gdmVydGljYWwgYWxpZ24gb2ZmXHJcblxyXG4gICAgICAgIC8vIGNhbGxiYWNrIG9uXHJcbiAgICAgICAgbGV0IGdldFJlcG9ydFdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChudGZseFJlcG9ydFdyYXAuaWQpO1xyXG4gICAgICAgIGxldCByZXBvcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnTlhSZXBvcnRCdXR0b24nKTtcclxuICAgICAgICByZXBvcnRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBjYWxsYmFjayBvblxyXG4gICAgICAgICAgICBpZiAoYnV0dG9uQ2FsbGJhY2sgJiYgdHlwZW9mIGJ1dHRvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGlmIGNhbGxiYWNrIG9mZlxyXG5cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGVsZW1lbnQgb25cclxuICAgICAgICAgICAgZ2V0UmVwb3J0V3JhcC5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZ2V0UmVwb3J0V3JhcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGdldFJlcG9ydFdyYXApO1xyXG4gICAgICAgICAgICB9LCBuZXdSZXBvcnRTZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBlbGVtZW50IG9mZlxyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBjYWxsYmFjayBvZmZcclxuXHJcbiAgICB9XHJcbiAgICAvLyByZXBvcnQgd3JhcCBvZmZcclxuXHJcbn1cclxuLy8gTm90aWZsaXg6IFJlcG9ydCBTaW5nbGUgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogUmVwb3J0IFNWRyBTdWNjZXNzIG9uXHJcbmNvbnN0IG5vdGlmbGl4UmVwb3J0U3ZnU3VjY2VzcyA9IGZ1bmN0aW9uICh3aWR0aCwgY29sb3IpIHtcclxuXHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzExMHB4JzsgfVxyXG4gICAgaWYgKCFjb2xvcikgeyBjb2xvciA9ICcjMDBiNDYyJzsgfVxyXG5cclxuICAgIGNvbnN0IHJlcG9ydFN2Z1N1Y2Nlc3MgPSBgPHN2ZyBpZD1cIk5YUmVwb3J0U3VjY2Vzc1wiIGZpbGw9XCIke2NvbG9yfVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCIgdmlld0JveD1cIjAgMCAxMjAgMTIwXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PHN0eWxlPkAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydFN1Y2Nlc3M1LWFuaW1hdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTU3LjdweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt9NTAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgwLjk1LCAwLjk1KSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt9MTAwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA1Ny43cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTU3LjdweCk7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0U3VjY2VzczUtYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA1Ny43cHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA1Ny43cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTU3LjdweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO302MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA1Ny43cHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTU3LjdweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgwLjk1LCAwLjk1KSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTt9fUAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydFN1Y2Nlc3M2LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO301MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QGtleWZyYW1lcyBOWFJlcG9ydFN1Y2Nlc3M2LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO301MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QC13ZWJraXQta2V5ZnJhbWVzIE5YUmVwb3J0U3VjY2VzczQtYW5pbWF0aW9uezAle29wYWNpdHk6IDA7fTQwJXtvcGFjaXR5OiAxO30xMDAle29wYWNpdHk6IDE7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0U3VjY2VzczQtYW5pbWF0aW9uezAle29wYWNpdHk6IDA7fTQwJXtvcGFjaXR5OiAxO30xMDAle29wYWNpdHk6IDE7fX1ALXdlYmtpdC1rZXlmcmFtZXMgTlhSZXBvcnRTdWNjZXNzMy1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO300MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fUBrZXlmcmFtZXMgTlhSZXBvcnRTdWNjZXNzMy1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO300MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fSNOWFJlcG9ydFN1Y2Nlc3MgKnstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMS4yczthbmltYXRpb24tZHVyYXRpb246IDEuMnM7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDEsIDEpO30jTlhSZXBvcnRTdWNjZXNzNHtmaWxsOiBpbmhlcml0Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0U3VjY2VzczQtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFN1Y2Nlc3M0LWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7b3BhY2l0eTogMTt9I05YUmVwb3J0U3VjY2VzczZ7ZmlsbDogaW5oZXJpdDstd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFN1Y2Nlc3M2LWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhSZXBvcnRTdWNjZXNzNi1hbmltYXRpb247b3BhY2l0eTogMTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7fSNOWFJlcG9ydFN1Y2Nlc3Mzey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0U3VjY2VzczMtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFN1Y2Nlc3MzLWFuaW1hdGlvbjstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTt9I05YUmVwb3J0U3VjY2VzczV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTogTlhSZXBvcnRTdWNjZXNzNS1hbmltYXRpb247YW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0U3VjY2VzczUtYW5pbWF0aW9uOy13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNTcuN3B4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC01Ny43cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDU3LjdweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNTcuN3B4KTstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7fTwvc3R5bGU+PGcgaWQ9XCJOWFJlcG9ydFN1Y2Nlc3MxXCI+PGcgaWQ9XCJOWFJlcG9ydFN1Y2Nlc3MyXCI+PGcgaWQ9XCJOWFJlcG9ydFN1Y2Nlc3MzXCIgZGF0YS1hbmltYXRvci1ncm91cD1cInRydWVcIiBkYXRhLWFuaW1hdG9yLXR5cGU9XCIyXCI+PHBhdGggZD1cIk02MCAxMTUuMzhjLTMwLjU0LDAgLTU1LjM4LC0yNC44NCAtNTUuMzgsLTU1LjM4IDAsLTMwLjU0IDI0Ljg0LC01NS4zOCA1NS4zOCwtNTUuMzggMzAuNTQsMCA1NS4zOCwyNC44NCA1NS4zOCw1NS4zOCAwLDMwLjU0IC0yNC44NCw1NS4zOCAtNTUuMzgsNTUuMzh6bTAgLTExNS4zOGMtMzMuMDgsMCAtNjAsMjYuOTIgLTYwLDYwIDAsMzMuMDggMjYuOTIsNjAgNjAsNjAgMzMuMDgsMCA2MCwtMjYuOTIgNjAsLTYwIDAsLTMzLjA4IC0yNi45MiwtNjAgLTYwLC02MHpcIiBpZD1cIk5YUmVwb3J0U3VjY2VzczRcIi8+PC9nPjxnIGlkPVwiTlhSZXBvcnRTdWNjZXNzNVwiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwYXRoIGQ9XCJNODguMjcgMzUuMzlsLTM1LjQ3IDM5LjkgLTIxLjM3IC0xNy4wOWMtMC45OCwtMC44MSAtMi40NCwtMC42MyAtMy4yNCwwLjM2IC0wLjc5LDAuOTkgLTAuNjMsMi40NCAwLjM2LDMuMjRsMjMuMDggMTguNDZjMC40MywwLjM0IDAuOTMsMC41MSAxLjQ0LDAuNTEgMC42NCwwIDEuMjcsLTAuMjYgMS43NCwtMC43OGwzNi45MSAtNDEuNTNjMC44NiwtMC45NiAwLjc2LC0yLjQyIC0wLjE5LC0zLjI2IC0wLjk1LC0wLjg2IC0yLjQxLC0wLjc3IC0zLjI2LDAuMTl6XCIgaWQ9XCJOWFJlcG9ydFN1Y2Nlc3M2XCIvPjwvZz48L2c+PC9nPjwvc3ZnPmA7XHJcblxyXG4gICAgcmV0dXJuIHJlcG9ydFN2Z1N1Y2Nlc3M7XHJcblxyXG59XHJcbi8vIE5vdGlmbGl4OiBSZXBvcnQgU1ZHIFN1Y2Nlc3Mgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogUmVwb3J0IFNWRyBGYWlsdXJlIG9uXHJcbmNvbnN0IG5vdGlmbGl4UmVwb3J0U3ZnRmFpbHVyZSA9IGZ1bmN0aW9uICh3aWR0aCwgY29sb3IpIHtcclxuXHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzExMHB4JzsgfVxyXG4gICAgaWYgKCFjb2xvcikgeyBjb2xvciA9ICcjZjQ0MzM2JzsgfVxyXG5cclxuICAgIGNvbnN0IHJlcG9ydFN2Z0ZhaWx1cmUgPSBgPHN2ZyBpZD1cIk5YUmVwb3J0RmFpbHVyZVwiIGZpbGw9XCIke2NvbG9yfVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCIgdmlld0JveD1cIjAgMCAxMjAgMTIwXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PHN0eWxlPkAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydEZhaWx1cmU0LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QGtleWZyYW1lcyBOWFJlcG9ydEZhaWx1cmU0LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QC13ZWJraXQta2V5ZnJhbWVzIE5YUmVwb3J0RmFpbHVyZTMtYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0RmFpbHVyZTMtYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX1ALXdlYmtpdC1rZXlmcmFtZXMgTlhSZXBvcnRGYWlsdXJlNS1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fUBrZXlmcmFtZXMgTlhSZXBvcnRGYWlsdXJlNS1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fUAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydEZhaWx1cmU2LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO301MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QGtleWZyYW1lcyBOWFJlcG9ydEZhaWx1cmU2LWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO301MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319I05YUmVwb3J0RmFpbHVyZSAqey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOiAxLjJzO2FuaW1hdGlvbi1kdXJhdGlvbjogMS4yczstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAxLCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMSwgMSk7fSNOWFJlcG9ydEZhaWx1cmU2e2ZpbGw6aW5oZXJpdDstd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydEZhaWx1cmU2LWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhSZXBvcnRGYWlsdXJlNi1hbmltYXRpb247LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO29wYWNpdHk6IDE7fSNOWFJlcG9ydEZhaWx1cmU1ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0RmFpbHVyZTUtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydEZhaWx1cmU1LWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9I05YUmVwb3J0RmFpbHVyZTN7LXdlYmtpdC1hbmltYXRpb24tbmFtZTogTlhSZXBvcnRGYWlsdXJlMy1hbmltYXRpb247YW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0RmFpbHVyZTMtYW5pbWF0aW9uOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30jTlhSZXBvcnRGYWlsdXJlNHtmaWxsOmluaGVyaXQ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTogTlhSZXBvcnRGYWlsdXJlNC1hbmltYXRpb247YW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0RmFpbHVyZTQtYW5pbWF0aW9uOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTtvcGFjaXR5OiAxO308L3N0eWxlPjxnIGlkPVwiTlhSZXBvcnRGYWlsdXJlMVwiPjxnIGlkPVwiTlhSZXBvcnRGYWlsdXJlMlwiPjxnIGlkPVwiTlhSZXBvcnRGYWlsdXJlM1wiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwYXRoIGQ9XCJNNC4zNSAzNC45NWMwLC0xNi44MiAxMy43OCwtMzAuNiAzMC42LC0zMC42bDUwLjEgMGMxNi44MiwwIDMwLjYsMTMuNzggMzAuNiwzMC42bDAgNTAuMWMwLDE2LjgyIC0xMy43OCwzMC42IC0zMC42LDMwLjZsLTUwLjEgMGMtMTYuODIsMCAtMzAuNiwtMTMuNzggLTMwLjYsLTMwLjZsMCAtNTAuMXptMzAuNiA4NS4wNWw1MC4xIDBjMTkuMjIsMCAzNC45NSwtMTUuNzMgMzQuOTUsLTM0Ljk1bDAgLTUwLjFjMCwtMTkuMjIgLTE1LjczLC0zNC45NSAtMzQuOTUsLTM0Ljk1bC01MC4xIDBjLTE5LjIyLDAgLTM0Ljk1LDE1LjczIC0zNC45NSwzNC45NWwwIDUwLjFjMCwxOS4yMiAxNS43MywzNC45NSAzNC45NSwzNC45NXpcIiBpZD1cIk5YUmVwb3J0RmFpbHVyZTRcIi8+PC9nPjxnIGlkPVwiTlhSZXBvcnRGYWlsdXJlNVwiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwYXRoIGQ9XCJNODIuNCAzNy42Yy0wLjksLTAuOSAtMi4zNywtMC45IC0zLjI3LDBsLTE5LjEzIDE5LjEzIC0xOS4xNCAtMTkuMTNjLTAuOSwtMC45IC0yLjM2LC0wLjkgLTMuMjYsMCAtMC45LDAuOSAtMC45LDIuMzUgMCwzLjI2bDE5LjEzIDE5LjE0IC0xOS4xMyAxOS4xM2MtMC45LDAuOSAtMC45LDIuMzcgMCwzLjI3IDAuNDUsMC40NSAxLjA0LDAuNjggMS42MywwLjY4IDAuNTksMCAxLjE4LC0wLjIzIDEuNjMsLTAuNjhsMTkuMTQgLTE5LjE0IDE5LjEzIDE5LjE0YzAuNDUsMC40NSAxLjA1LDAuNjggMS42NCwwLjY4IDAuNTgsMCAxLjE4LC0wLjIzIDEuNjMsLTAuNjggMC45LC0wLjkgMC45LC0yLjM3IDAsLTMuMjdsLTE5LjE0IC0xOS4xMyAxOS4xNCAtMTkuMTRjMC45LC0wLjkxIDAuOSwtMi4zNiAwLC0zLjI2elwiIGlkPVwiTlhSZXBvcnRGYWlsdXJlNlwiLz48L2c+PC9nPjwvZz48L3N2Zz5gO1xyXG5cclxuICAgIHJldHVybiByZXBvcnRTdmdGYWlsdXJlO1xyXG59XHJcbi8vIE5vdGlmbGl4OiBSZXBvcnQgU1ZHIEZhaWx1cmUgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogUmVwb3J0IFNWRyBXYXJuaW5nIG9uXHJcbmNvbnN0IG5vdGlmbGl4UmVwb3J0U3ZnV2FybmluZyA9IGZ1bmN0aW9uICh3aWR0aCwgY29sb3IpIHtcclxuXHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzExMHB4JzsgfVxyXG4gICAgaWYgKCFjb2xvcikgeyBjb2xvciA9ICcjZjJiZDFkJzsgfVxyXG5cclxuICAgIGNvbnN0IHJlcG9ydFN2Z1dhcm5pbmcgPSBgPHN2ZyBpZD1cIk5YUmVwb3J0V2FybmluZ1wiIGZpbGw9XCIke2NvbG9yfVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHZlcnNpb249XCIxLjFcIiBzdHlsZT1cInNoYXBlLXJlbmRlcmluZzpnZW9tZXRyaWNQcmVjaXNpb247IHRleHQtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgaW1hZ2UtcmVuZGVyaW5nOm9wdGltaXplUXVhbGl0eTsgZmlsbC1ydWxlOmV2ZW5vZGQ7IGNsaXAtcnVsZTpldmVub2RkXCIgdmlld0JveD1cIjAgMCAxMjAgMTIwXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCI+PHN0eWxlPkAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydFdhcm5pbmczLWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QGtleWZyYW1lcyBOWFJlcG9ydFdhcm5pbmczLWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QC13ZWJraXQta2V5ZnJhbWVzIE5YUmVwb3J0V2FybmluZzItYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0V2FybmluZzItYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX1ALXdlYmtpdC1rZXlmcmFtZXMgTlhSZXBvcnRXYXJuaW5nNC1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02Ni42cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7fTUwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjYuNnB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02Ni42cHgpO319QGtleWZyYW1lcyBOWFJlcG9ydFdhcm5pbmc0LWFuaW1hdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjYuNnB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt9NTAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjYuNnB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02Ni42cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjYuNnB4KSBzY2FsZSgwLjk1LCAwLjk1KSB0cmFuc2xhdGUoLTYwcHgsIC02Ni42cHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt9MTAwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDY2LjZweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjYuNnB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7fX1ALXdlYmtpdC1rZXlmcmFtZXMgTlhSZXBvcnRXYXJuaW5nNS1hbmltYXRpb257MCV7b3BhY2l0eTogMDt9NTAle29wYWNpdHk6IDE7fTEwMCV7b3BhY2l0eTogMTt9fUBrZXlmcmFtZXMgTlhSZXBvcnRXYXJuaW5nNS1hbmltYXRpb257MCV7b3BhY2l0eTogMDt9NTAle29wYWNpdHk6IDE7fTEwMCV7b3BhY2l0eTogMTt9fSNOWFJlcG9ydFdhcm5pbmcgKnstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjogMS4yczthbmltYXRpb24tZHVyYXRpb246IDEuMnM7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDEsIDEpO30jTlhSZXBvcnRXYXJuaW5nM3tmaWxsOiBpbmhlcml0Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0V2FybmluZzMtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFdhcm5pbmczLWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7b3BhY2l0eTogMTt9I05YUmVwb3J0V2FybmluZzV7ZmlsbDogaW5oZXJpdDstd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFdhcm5pbmc1LWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhSZXBvcnRXYXJuaW5nNS1hbmltYXRpb247LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO29wYWNpdHk6IDE7fSNOWFJlcG9ydFdhcm5pbmc0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0V2FybmluZzQtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFdhcm5pbmc0LWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2Ni42cHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTY2LjZweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjYuNnB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02Ni42cHgpO30jTlhSZXBvcnRXYXJuaW5nMnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydFdhcm5pbmcyLWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhSZXBvcnRXYXJuaW5nMi1hbmltYXRpb247LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpOy13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTwvc3R5bGU+PGcgaWQ9XCJOWFJlcG9ydFdhcm5pbmcxXCI+PGcgaWQ9XCJOWFJlcG9ydFdhcm5pbmcyXCIgZGF0YS1hbmltYXRvci1ncm91cD1cInRydWVcIiBkYXRhLWFuaW1hdG9yLXR5cGU9XCIyXCI+PHBhdGggZD1cIk0xMTUuNDYgMTA2LjE1bC01NC4wNCAtOTMuOGMtMC42MSwtMS4wNiAtMi4yMywtMS4wNiAtMi44NCwwbC01NC4wNCA5My44Yy0wLjYyLDEuMDcgMC4yMSwyLjI5IDEuNDIsMi4yOWwxMDguMDggMGMxLjIxLDAgMi4wNCwtMS4yMiAxLjQyLC0yLjI5em0tNTAuMjkgLTk1Ljk1bDU0LjA0IDkzLjhjMi4yOCwzLjk2IC0wLjY1LDguNzggLTUuMTcsOC43OGwtMTA4LjA4IDBjLTQuNTIsMCAtNy40NSwtNC44MiAtNS4xNywtOC43OGw1NC4wNCAtOTMuOGMyLjI4LC0zLjk1IDguMDMsLTQgMTAuMzQsMHpcIiBpZD1cIk5YUmVwb3J0V2FybmluZzNcIi8+PC9nPjxnIGlkPVwiTlhSZXBvcnRXYXJuaW5nNFwiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwYXRoIGQ9XCJNNTcuODMgOTQuMDFjMCwxLjIgMC45NywyLjE3IDIuMTcsMi4xNyAxLjIsMCAyLjE3LC0wLjk3IDIuMTcsLTIuMTdsMCAtMy4yYzAsLTEuMiAtMC45NywtMi4xNyAtMi4xNywtMi4xNyAtMS4yLDAgLTIuMTcsMC45NyAtMi4xNywyLjE3bDAgMy4yem0wIC0xNC4xNWMwLDEuMiAwLjk3LDIuMTcgMi4xNywyLjE3IDEuMiwwIDIuMTcsLTAuOTcgMi4xNywtMi4xN2wwIC00MC42NWMwLC0xLjIgLTAuOTcsLTIuMTcgLTIuMTcsLTIuMTcgLTEuMiwwIC0yLjE3LDAuOTcgLTIuMTcsMi4xN2wwIDQwLjY1elwiIGlkPVwiTlhSZXBvcnRXYXJuaW5nNVwiLz48L2c+PC9nPjwvc3ZnPmA7XHJcblxyXG4gICAgcmV0dXJuIHJlcG9ydFN2Z1dhcm5pbmc7XHJcbn1cclxuLy8gTm90aWZsaXg6IFJlcG9ydCBTVkcgV2FybmluZyBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBSZXBvcnQgU1ZHIEluZm8gb25cclxuY29uc3Qgbm90aWZsaXhSZXBvcnRTdmdJbmZvID0gZnVuY3Rpb24gKHdpZHRoLCBjb2xvcikge1xyXG5cclxuICAgIGlmICghd2lkdGgpIHsgd2lkdGggPSAnMTEwcHgnOyB9XHJcbiAgICBpZiAoIWNvbG9yKSB7IGNvbG9yID0gJyMwMGJjZDQnOyB9XHJcblxyXG4gICAgY29uc3QgcmVwb3J0U3ZnSW5mbyA9IGA8c3ZnIGlkPVwiTlhSZXBvcnRJbmZvXCIgZmlsbD1cIiR7Y29sb3J9XCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgdmVyc2lvbj1cIjEuMVwiIHN0eWxlPVwic2hhcGUtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgdGV4dC1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyBpbWFnZS1yZW5kZXJpbmc6b3B0aW1pemVRdWFsaXR5OyBmaWxsLXJ1bGU6ZXZlbm9kZDsgY2xpcC1ydWxlOmV2ZW5vZGRcIiB2aWV3Qm94PVwiMCAwIDEyMCAxMjBcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48c3R5bGU+QC13ZWJraXQta2V5ZnJhbWVzIE5YUmVwb3J0SW5mbzUtYW5pbWF0aW9uezAle29wYWNpdHk6IDA7fTUwJXtvcGFjaXR5OiAxO30xMDAle29wYWNpdHk6IDE7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0SW5mbzUtYW5pbWF0aW9uezAle29wYWNpdHk6IDA7fTUwJXtvcGFjaXR5OiAxO30xMDAle29wYWNpdHk6IDE7fX1ALXdlYmtpdC1rZXlmcmFtZXMgTlhSZXBvcnRJbmZvNC1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fUBrZXlmcmFtZXMgTlhSZXBvcnRJbmZvNC1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgwLjUsIDAuNSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NjAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC45NSwgMC45NSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt0cmFuc2Zvcm06IHRyYW5zbGF0ZSg2MHB4LCA2MHB4KSBzY2FsZSgxLCAxKSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9fUAtd2Via2l0LWtleWZyYW1lcyBOWFJlcG9ydEluZm8zLWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QGtleWZyYW1lcyBOWFJlcG9ydEluZm8zLWFuaW1hdGlvbnswJXtvcGFjaXR5OiAwO300MCV7b3BhY2l0eTogMTt9MTAwJXtvcGFjaXR5OiAxO319QC13ZWJraXQta2V5ZnJhbWVzIE5YUmVwb3J0SW5mbzItYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX1Aa2V5ZnJhbWVzIE5YUmVwb3J0SW5mbzItYW5pbWF0aW9uezAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMC41LCAwLjUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuNSwgMC41KSB0cmFuc2xhdGUoLTYwcHgsIC02MHB4KTt9NDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTYwJXstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDAuOTUsIDAuOTUpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fX0jTlhSZXBvcnRJbmZvICp7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDEuMnM7YW5pbWF0aW9uLWR1cmF0aW9uOiAxLjJzOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDEsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLCAwLCAxLCAxKTt9I05YUmVwb3J0SW5mbzN7ZmlsbDppbmhlcml0Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0SW5mbzMtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydEluZm8zLWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7b3BhY2l0eTogMTt9I05YUmVwb3J0SW5mbzV7ZmlsbDppbmhlcml0Oy13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0SW5mbzUtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydEluZm81LWFuaW1hdGlvbjstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7b3BhY2l0eTogMTt9I05YUmVwb3J0SW5mbzJ7LXdlYmtpdC1hbmltYXRpb24tbmFtZTogTlhSZXBvcnRJbmZvMi1hbmltYXRpb247YW5pbWF0aW9uLW5hbWU6IE5YUmVwb3J0SW5mbzItYW5pbWF0aW9uOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTstd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO3RyYW5zZm9ybTogdHJhbnNsYXRlKDYwcHgsIDYwcHgpIHNjYWxlKDEsIDEpIHRyYW5zbGF0ZSgtNjBweCwgLTYwcHgpO30jTlhSZXBvcnRJbmZvNHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWFJlcG9ydEluZm80LWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhSZXBvcnRJbmZvNC1hbmltYXRpb247LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40MiwgMCwgMC41OCwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpOy13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7dHJhbnNmb3JtOiB0cmFuc2xhdGUoNjBweCwgNjBweCkgc2NhbGUoMSwgMSkgdHJhbnNsYXRlKC02MHB4LCAtNjBweCk7fTwvc3R5bGU+PGcgaWQ9XCJOWFJlcG9ydEluZm8xXCI+PGcgaWQ9XCJOWFJlcG9ydEluZm8yXCIgZGF0YS1hbmltYXRvci1ncm91cD1cInRydWVcIiBkYXRhLWFuaW1hdG9yLXR5cGU9XCIyXCI+PHBhdGggZD1cIk02MCAxMTUuMzhjLTMwLjU0LDAgLTU1LjM4LC0yNC44NCAtNTUuMzgsLTU1LjM4IDAsLTMwLjU0IDI0Ljg0LC01NS4zOCA1NS4zOCwtNTUuMzggMzAuNTQsMCA1NS4zOCwyNC44NCA1NS4zOCw1NS4zOCAwLDMwLjU0IC0yNC44NCw1NS4zOCAtNTUuMzgsNTUuMzh6bTAgLTExNS4zOGMtMzMuMDgsMCAtNjAsMjYuOTIgLTYwLDYwIDAsMzMuMDggMjYuOTIsNjAgNjAsNjAgMzMuMDgsMCA2MCwtMjYuOTIgNjAsLTYwIDAsLTMzLjA4IC0yNi45MiwtNjAgLTYwLC02MHpcIiBpZD1cIk5YUmVwb3J0SW5mbzNcIi8+PC9nPjxnIGlkPVwiTlhSZXBvcnRJbmZvNFwiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwYXRoIGQ9XCJNNTcuNzUgNDMuODVjMCwtMS4yNCAxLjAxLC0yLjI1IDIuMjUsLTIuMjUgMS4yNCwwIDIuMjUsMS4wMSAyLjI1LDIuMjVsMCA0OC4xOGMwLDEuMjQgLTEuMDEsMi4yNSAtMi4yNSwyLjI1IC0xLjI0LDAgLTIuMjUsLTEuMDEgLTIuMjUsLTIuMjVsMCAtNDguMTh6bTAgLTE1Ljg4YzAsLTEuMjQgMS4wMSwtMi4yNSAyLjI1LC0yLjI1IDEuMjQsMCAyLjI1LDEuMDEgMi4yNSwyLjI1bDAgMy4zMmMwLDEuMjUgLTEuMDEsMi4yNSAtMi4yNSwyLjI1IC0xLjI0LDAgLTIuMjUsLTEgLTIuMjUsLTIuMjVsMCAtMy4zMnpcIiBpZD1cIk5YUmVwb3J0SW5mbzVcIi8+PC9nPjwvZz48L3N2Zz5gO1xyXG5cclxuICAgIHJldHVybiByZXBvcnRTdmdJbmZvO1xyXG5cclxufVxyXG4vLyBOb3RpZmxpeDogUmVwb3J0IFNWRyBJbmZvIG9mZlxyXG5cclxuXHJcbi8vIE5vdGlmbGl4OiBDb25maXJtIFNpbmdsZSBvblxyXG5jb25zdCBOb3RpZmxpeENvbmZpcm0gPSBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UsIG9rQnV0dG9uVGV4dCwgY2FuY2VsQnV0dG9uVGV4dCwgb2tCdXR0b25DYWxsYmFjaywgY2FuY2VsQnV0dG9uQ2FsbGJhY2spIHtcclxuXHJcbiAgICAvLyBpZiBwbGFpblRleHQgdHJ1ZSA9IEhUTUwgdGFncyBub3QgYWxsb3dlZCBvblxyXG4gICAgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncy5wbGFpblRleHQpIHtcclxuICAgICAgICB0aXRsZSA9IG5vdGlmbGl4UGxhaW50ZXh0KHRpdGxlKTtcclxuICAgICAgICBtZXNzYWdlID0gbm90aWZsaXhQbGFpbnRleHQobWVzc2FnZSk7XHJcbiAgICAgICAgb2tCdXR0b25UZXh0ID0gbm90aWZsaXhQbGFpbnRleHQob2tCdXR0b25UZXh0KTtcclxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0ID0gbm90aWZsaXhQbGFpbnRleHQoY2FuY2VsQnV0dG9uVGV4dCk7XHJcbiAgICB9XHJcbiAgICAvLyBpZiBwbGFpblRleHQgdHJ1ZSA9IEhUTUwgdGFncyBub3QgYWxsb3dlZCBvZmZcclxuXHJcbiAgICAvLyBpZiBwbGFpblRleHQgZmFsc2UgYnV0IHRoZSBjb250ZW50cyBsZW5ndGggbW9yZSB0aGFuICpNYXhMZW5ndGggPSBIVE1MIHRhZ3MgZXJyb3Igb25cclxuICAgIGlmICghbmV3Q29uZmlybVNldHRpbmdzLnBsYWluVGV4dCkge1xyXG4gICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiBuZXdDb25maXJtU2V0dGluZ3MudGl0bGVNYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgdGl0bGUgPSAnSFRNTCBUYWdzIEVycm9yJzsgLy8gdGl0bGUgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ1lvdXIgVGl0bGUgY29udGVudCBsZW5ndGggaXMgbW9yZSB0aGFuIFwidGl0bGVNYXhMZW5ndGhcIiBvcHRpb24uJzsgLy8gbWVzc2FnZSBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIG9rQnV0dG9uVGV4dCA9ICdPa2F5JzsgLy8gYnV0dG9uIGh0bWwgZXJyb3JcclxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dCA9ICcuLi4nOyAvLyBidXR0b24gaHRtbCBlcnJvclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gbmV3Q29uZmlybVNldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgdGl0bGUgPSAnSFRNTCBUYWdzIEVycm9yJzsgLy8gdGl0bGUgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ1lvdXIgTWVzc2FnZSBjb250ZW50IGxlbmd0aCBpcyBtb3JlIHRoYW4gXCJtZXNzYWdlTWF4TGVuZ3RoXCIgb3B0aW9uLic7IC8vIG1lc3NhZ2UgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBva0J1dHRvblRleHQgPSAnT2theSc7IC8vIGJ1dHRvbiBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQgPSAnLi4uJzsgLy8gYnV0dG9uIGh0bWwgZXJyb3JcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgob2tCdXR0b25UZXh0Lmxlbmd0aCB8fCBjYW5jZWxCdXR0b25UZXh0Lmxlbmd0aCkgPiBuZXdDb25maXJtU2V0dGluZ3MuYnV0dG9uc01heExlbmd0aCkge1xyXG4gICAgICAgICAgICB0aXRsZSA9ICdIVE1MIFRhZ3MgRXJyb3InOyAvLyB0aXRsZSBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSAnWW91ciBCdXR0b25zIGNvbnRlbnRzIGxlbmd0aCBpcyBtb3JlIHRoYW4gXCJidXR0b25zTWF4TGVuZ3RoXCIgb3B0aW9uLic7IC8vIG1lc3NhZ2UgaHRtbCBlcnJvclxyXG4gICAgICAgICAgICBva0J1dHRvblRleHQgPSAnT2theSc7IC8vIGJ1dHRvbiBodG1sIGVycm9yXHJcbiAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQgPSAnLi4uJzsgLy8gYnV0dG9uIGh0bWwgZXJyb3JcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBpZiBwbGFpblRleHQgZmFsc2UgYnV0IHRoZSBjb250ZW50cyBsZW5ndGggbW9yZSB0aGFuICpNYXhMZW5ndGggPSBIVE1MIHRhZ3MgZXJyb3Igb2ZmXHJcblxyXG5cclxuICAgIC8vIG1heCBsZW5ndGggb25cclxuICAgIGlmICh0aXRsZS5sZW5ndGggPiBuZXdDb25maXJtU2V0dGluZ3MudGl0bGVNYXhMZW5ndGgpIHtcclxuICAgICAgICB0aXRsZSA9IGAke3RpdGxlLnN1YnN0cmluZygwLCBuZXdDb25maXJtU2V0dGluZ3MudGl0bGVNYXhMZW5ndGgpfS4uLmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gbmV3Q29uZmlybVNldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpIHtcclxuICAgICAgICBtZXNzYWdlID0gYCR7bWVzc2FnZS5zdWJzdHJpbmcoMCwgbmV3Q29uZmlybVNldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpfS4uLmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9rQnV0dG9uVGV4dC5sZW5ndGggPiBuZXdDb25maXJtU2V0dGluZ3MuYnV0dG9uc01heExlbmd0aCkge1xyXG4gICAgICAgIG9rQnV0dG9uVGV4dCA9IGAke29rQnV0dG9uVGV4dC5zdWJzdHJpbmcoMCwgbmV3Q29uZmlybVNldHRpbmdzLmJ1dHRvbnNNYXhMZW5ndGgpfS4uLmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNhbmNlbEJ1dHRvblRleHQubGVuZ3RoID4gbmV3Q29uZmlybVNldHRpbmdzLmJ1dHRvbnNNYXhMZW5ndGgpIHtcclxuICAgICAgICBjYW5jZWxCdXR0b25UZXh0ID0gYCR7Y2FuY2VsQnV0dG9uVGV4dC5zdWJzdHJpbmcoMCwgbmV3Q29uZmlybVNldHRpbmdzLmJ1dHRvbnNNYXhMZW5ndGgpfS4uLmA7XHJcbiAgICB9XHJcbiAgICAvLyBtYXggbGVuZ3RoIG9mZlxyXG5cclxuXHJcbiAgICAvLyBpZiBjc3NBbmltYWlvbiBmYWxzZSAtPiBkdXJhdGlvbiBvblxyXG4gICAgaWYgKCFuZXdDb25maXJtU2V0dGluZ3MuY3NzQW5pbWF0aW9uKSB7XHJcbiAgICAgICAgbmV3Q29uZmlybVNldHRpbmdzLmNzc0FuaW1hdGlvbkR1cmF0aW9uID0gMDtcclxuICAgIH1cclxuICAgIC8vIGlmIGNzc0FuaW1haW9uIGZhbHNlIC0+IGR1cmF0aW9uIG9mZlxyXG5cclxuXHJcbiAgICAvLyBjb25maXJtIHdyYXAgb25cclxuICAgIGNvbnN0IGRvY0JvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAgIGNvbnN0IG50Zmx4Q29uZmlybVdyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgIG50Zmx4Q29uZmlybVdyYXAuaWQgPSBjb25maXJtU2V0dGluZ3MuSUQ7XHJcbiAgICBudGZseENvbmZpcm1XcmFwLmNsYXNzTmFtZSA9IGAke25ld0NvbmZpcm1TZXR0aW5ncy5jbGFzc05hbWV9ICR7KG5ld0NvbmZpcm1TZXR0aW5ncy5jc3NBbmltYXRpb24gPyAnd2l0aC1hbmltYXRpb24gbngtJyArIG5ld0NvbmZpcm1TZXR0aW5ncy5jc3NBbmltYXRpb25TdHlsZSA6ICcnKX1gO1xyXG4gICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS53aWR0aCA9IG5ld0NvbmZpcm1TZXR0aW5ncy53aWR0aDtcclxuICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUuekluZGV4ID0gbmV3Q29uZmlybVNldHRpbmdzLnppbmRleDtcclxuICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUubWFyZ2luID0gJ2F1dG8nO1xyXG5cclxuICAgIC8vIHJ0bCBvblxyXG4gICAgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncy5ydGwpIHtcclxuICAgICAgICBudGZseENvbmZpcm1XcmFwLnNldEF0dHJpYnV0ZSgnZGlyJywgJ3J0bCcpO1xyXG4gICAgICAgIG50Zmx4Q29uZmlybVdyYXAuY2xhc3NMaXN0LmFkZCgncnRsLW9uJyk7XHJcbiAgICB9XHJcbiAgICAvLyBydGwgb2ZmXHJcblxyXG4gICAgLy8gZm9udC1mYW1pbHkgb25cclxuICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUuZm9udEZhbWlseSA9IGBcIiR7bmV3Q29uZmlybVNldHRpbmdzLmZvbnRGYW1pbHl9XCIsIHNhbnMtc2VyaWZgO1xyXG4gICAgLy8gZm9udC1mYW1pbHkgb2ZmXHJcblxyXG4gICAgLy8gaWYgYmFja2dyb3VuZCBvdmVybGF5IHRydWUgb25cclxuICAgIGxldCBjb25maXJtT3ZlcmxheSA9ICcnO1xyXG4gICAgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncy5iYWNrT3ZlcmxheSkge1xyXG4gICAgICAgIGNvbmZpcm1PdmVybGF5ID0gYDxkaXYgY2xhc3M9XCIke25ld0NvbmZpcm1TZXR0aW5ncy5jbGFzc05hbWV9LW92ZXJsYXkgJHsobmV3Q29uZmlybVNldHRpbmdzLmNzc0FuaW1hdGlvbiA/ICd3aXRoLWFuaW1hdGlvbicgOiAnJyl9XCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiR7bmV3Q29uZmlybVNldHRpbmdzLmJhY2tPdmVybGF5Q29sb3J9O2FuaW1hdGlvbi1kdXJhdGlvbjoke25ld0NvbmZpcm1TZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbn1tcztcIj48L2Rpdj5gO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgYmFja2dyb3VuZCBvdmVybGF5IHRydWUgb2ZmXHJcblxyXG5cclxuICAgIC8vIGlmIGhhdmUgYSBjYWxsYmFjayAtIGNhbmNlbCBidXR0b24gb25cclxuICAgIGxldCBjYW5jZWxCdXR0b25IVE1MID0gJyc7XHJcbiAgICBpZiAob2tCdXR0b25DYWxsYmFjaykge1xyXG4gICAgICAgIGNhbmNlbEJ1dHRvbkhUTUwgPSBgPGEgaWQ9XCJOWENvbmZpcm1CdXR0b25DYW5jZWxcIiBjbGFzcz1cImNvbmZpcm0tYnV0dG9uLWNhbmNlbFwiIHN0eWxlPVwiY29sb3I6JHtuZXdDb25maXJtU2V0dGluZ3MuY2FuY2VsQnV0dG9uQ29sb3J9O2JhY2tncm91bmQ6JHtuZXdDb25maXJtU2V0dGluZ3MuY2FuY2VsQnV0dG9uQmFja2dyb3VuZH07Zm9udC1zaXplOiR7bmV3Q29uZmlybVNldHRpbmdzLmJ1dHRvbnNGb250U2l6ZX07XCI+JHtjYW5jZWxCdXR0b25UZXh0fTwvYT5gO1xyXG4gICAgfVxyXG4gICAgLy8gaWYgaGF2ZSBhIGNhbGxiYWNrIC0gY2FuY2VsIGJ1dHRvbiBvZmZcclxuXHJcbiAgICBudGZseENvbmZpcm1XcmFwLmlubmVySFRNTCA9IGAke2NvbmZpcm1PdmVybGF5fVxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCIke25ld0NvbmZpcm1TZXR0aW5ncy5jbGFzc05hbWV9LWNvbnRlbnRcIiBzdHlsZT1cImJhY2tncm91bmQ6JHtuZXdDb25maXJtU2V0dGluZ3MuYmFja2dyb3VuZENvbG9yfTsgYW5pbWF0aW9uLWR1cmF0aW9uOiR7bmV3Q29uZmlybVNldHRpbmdzLmNzc0FuaW1hdGlvbkR1cmF0aW9ufW1zOyBib3JkZXItcmFkaXVzOiR7bmV3Q29uZmlybVNldHRpbmdzLmJvcmRlclJhZGl1c307XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke25ld0NvbmZpcm1TZXR0aW5ncy5jbGFzc05hbWV9LWhlYWRcIj5cclxuICAgICAgICAgICAgICAgIDxoNSBzdHlsZT1cImNvbG9yOiR7bmV3Q29uZmlybVNldHRpbmdzLnRpdGxlQ29sb3J9O2ZvbnQtc2l6ZToke25ld0NvbmZpcm1TZXR0aW5ncy50aXRsZUZvbnRTaXplfTtcIj4ke3RpdGxlfTwvaDU+XHJcbiAgICAgICAgICAgICAgICA8cCBzdHlsZT1cImNvbG9yOiR7bmV3Q29uZmlybVNldHRpbmdzLm1lc3NhZ2VDb2xvcn07Zm9udC1zaXplOiR7bmV3Q29uZmlybVNldHRpbmdzLm1lc3NhZ2VGb250U2l6ZX07XCI+JHttZXNzYWdlfTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke25ld0NvbmZpcm1TZXR0aW5ncy5jbGFzc05hbWV9LWJ1dHRvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxhIGlkPVwiTlhDb25maXJtQnV0dG9uT2tcIiBjbGFzcz1cImNvbmZpcm0tYnV0dG9uLW9rICR7KG9rQnV0dG9uQ2FsbGJhY2sgPyAnJyA6ICdmdWxsJyl9XCIgc3R5bGU9XCJjb2xvcjoke25ld0NvbmZpcm1TZXR0aW5ncy5va0J1dHRvbkNvbG9yfTtiYWNrZ3JvdW5kOiR7bmV3Q29uZmlybVNldHRpbmdzLm9rQnV0dG9uQmFja2dyb3VuZH07Zm9udC1zaXplOiR7bmV3Q29uZmlybVNldHRpbmdzLmJ1dHRvbnNGb250U2l6ZX07XCI+JHtva0J1dHRvblRleHR9PC9hPlxyXG4gICAgICAgICAgICAgICAgJHtjYW5jZWxCdXR0b25IVE1MfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5gO1xyXG4gICAgLy8gY29uZmlybSB3cmFwIG9mZlxyXG5cclxuICAgIC8vIGlmIHRoZXJlIGlzIG5vIGNvbmZpcm0gYm94IG9uXHJcbiAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Q29uZmlybVdyYXAuaWQpKSB7XHJcbiAgICAgICAgZG9jQm9keS5hcHBlbmRDaGlsZChudGZseENvbmZpcm1XcmFwKTtcclxuXHJcbiAgICAgICAgLy8gcG9zaXRpb24gb24gICAgICAgICAgICAgICAgICBcclxuICAgICAgICBpZiAobmV3Q29uZmlybVNldHRpbmdzLnBvc2l0aW9uID09PSAnY2VudGVyJykgeyAvLyBpZiBjZW50ZXJcclxuXHJcbiAgICAgICAgICAgIGxldCB3aW5kb3dIID0gTWF0aC5yb3VuZCh3aW5kb3cuaW5uZXJIZWlnaHQpO1xyXG4gICAgICAgICAgICBsZXQgY29uZmlybUggPSBNYXRoLnJvdW5kKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Q29uZmlybVdyYXAuaWQpLm9mZnNldEhlaWdodCk7XHJcblxyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnRvcCA9IGAke3BhcnNlSW50KCh3aW5kb3dIIC0gY29uZmlybUgpIC8gMil9cHhgO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLmxlZnQgPSBuZXdDb25maXJtU2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUucmlnaHQgPSBuZXdDb25maXJtU2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUuYm90dG9tID0gJ2F1dG8nO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKG5ld0NvbmZpcm1TZXR0aW5ncy5wb3NpdGlvbiA9PT0gJ3JpZ2h0LXRvcCcpIHsgLy8gaWYgcmlnaHQtdG9wXHJcblxyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnJpZ2h0ID0gbmV3Q29uZmlybVNldHRpbmdzLmRpc3RhbmNlO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnRvcCA9IG5ld0NvbmZpcm1TZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS5ib3R0b20gPSAnYXV0byc7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUubGVmdCA9ICdhdXRvJztcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXdDb25maXJtU2V0dGluZ3MucG9zaXRpb24gPT09ICdyaWdodC1ib3R0b20nKSB7IC8vIGlmIHJpZ2h0LWJvdHRvbVxyXG5cclxuICAgICAgICAgICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS5yaWdodCA9IG5ld0NvbmZpcm1TZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS5ib3R0b20gPSBuZXdDb25maXJtU2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUudG9wID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLmxlZnQgPSAnYXV0byc7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAobmV3Q29uZmlybVNldHRpbmdzLnBvc2l0aW9uID09PSAnbGVmdC10b3AnKSB7IC8vIGlmIGxlZnQtdG9wXHJcblxyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLmxlZnQgPSBuZXdDb25maXJtU2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUudG9wID0gbmV3Q29uZmlybVNldHRpbmdzLmRpc3RhbmNlO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLmJvdHRvbSA9ICdhdXRvJztcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChuZXdDb25maXJtU2V0dGluZ3MucG9zaXRpb24gPT09ICdsZWZ0LWJvdHRvbScpIHsgLy8gaWYgbGVmdC1ib3R0b21cclxuXHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUubGVmdCA9IG5ld0NvbmZpcm1TZXR0aW5ncy5kaXN0YW5jZTtcclxuICAgICAgICAgICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS5ib3R0b20gPSBuZXdDb25maXJtU2V0dGluZ3MuZGlzdGFuY2U7XHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUudG9wID0gJ2F1dG8nO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnJpZ2h0ID0gJ2F1dG8nO1xyXG5cclxuICAgICAgICB9IGVsc2UgeyAvLyBpZiBjZW50ZXItdG9wIG9yIGVsc2VcclxuXHJcbiAgICAgICAgICAgIG50Zmx4Q29uZmlybVdyYXAuc3R5bGUudG9wID0gbmV3Q29uZmlybVNldHRpbmdzLmRpc3RhbmNlO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLmxlZnQgPSAwO1xyXG4gICAgICAgICAgICBudGZseENvbmZpcm1XcmFwLnN0eWxlLnJpZ2h0ID0gMDtcclxuICAgICAgICAgICAgbnRmbHhDb25maXJtV3JhcC5zdHlsZS5ib3R0b20gPSAnYXV0byc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHBvc2l0aW9uIG9mZlxyXG5cclxuICAgICAgICAvLyBidXR0b25zIGxpc3RlbmVyIG9uXHJcbiAgICAgICAgY29uc3QgY29uZmlybUNsb3NlV3JhcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4Q29uZmlybVdyYXAuaWQpO1xyXG4gICAgICAgIGNvbnN0IG9rQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ05YQ29uZmlybUJ1dHRvbk9rJyk7XHJcblxyXG4gICAgICAgIC8vIG9rIGJ1dHRvbiBsaXN0ZW5lciBvblxyXG4gICAgICAgIG9rQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgb2sgY2FsbGJhY2sgJiYgaWYgb2sgY2FsbGJhY2sgaXMgYSBmdW5jdGlvblxyXG4gICAgICAgICAgICBpZiAob2tCdXR0b25DYWxsYmFjayAmJiB0eXBlb2Ygb2tCdXR0b25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgb2tCdXR0b25DYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25maXJtQ2xvc2VXcmFwLmNsYXNzTGlzdC5hZGQoJ3JlbW92ZScpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25maXJtQ2xvc2VXcmFwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29uZmlybUNsb3NlV3JhcCk7XHJcbiAgICAgICAgICAgIH0sIG5ld0NvbmZpcm1TZXR0aW5ncy5jc3NBbmltYXRpb25EdXJhdGlvbik7XHJcblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIG9rIGJ1dHRvbiBsaXN0ZW5lciBvZmZcclxuXHJcbiAgICAgICAgLy8gaWYgb2sgY2FsbGJhY2sgJiYgaWYgb2sgY2FsbGJhY2sgYSBmdW5jdGlvbiA9PiBhZGQgQ2FuY2VsIEJ1dHRvbiBsaXN0ZW5lciBvblxyXG4gICAgICAgIGlmIChva0J1dHRvbkNhbGxiYWNrICYmIHR5cGVvZiBva0J1dHRvbkNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBjYW5jZWwgYnV0dG9uIGxpc3RlbmVyIG9uXHJcbiAgICAgICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdOWENvbmZpcm1CdXR0b25DYW5jZWwnKTtcclxuICAgICAgICAgICAgY2FuY2VsQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlmIGNhbmNlbCBjYWxsYmFjayAmJiBpZiBjYW5jZWwgY2FsbGJhY2sgYSBmdW5jdGlvblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbEJ1dHRvbkNhbGxiYWNrICYmIHR5cGVvZiBjYW5jZWxCdXR0b25DYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvbkNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uZmlybUNsb3NlV3JhcC5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25maXJtQ2xvc2VXcmFwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY29uZmlybUNsb3NlV3JhcCk7XHJcbiAgICAgICAgICAgICAgICB9LCBuZXdDb25maXJtU2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIGNhbmNlbCBidXR0b24gbGlzdGVuZXIgb2ZmXHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBvayBjYWxsYmFjayAmJiBpZiBvayBjYWxsYmFjayBhIGZ1bmN0aW9uID0+IGFkZCBDYW5jZWwgQnV0dG9uIGxpc3RlbmVyIG9mZlxyXG4gICAgICAgIC8vIGJ1dHRvbnMgbGlzdGVuZXIgb2ZmXHJcblxyXG4gICAgfVxyXG4gICAgLy8gaWYgdGhlcmUgaXMgbm8gY29uZmlybSBib3ggb2ZmXHJcblxyXG59XHJcbi8vIE5vdGlmbGl4OiBDb25maXJtIFNpbmdsZSBvZmZcclxuXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTaW5nbGUgb25cclxuY29uc3QgTm90aWZsaXhMb2FkaW5nID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGljb25UeXBlLCBkaXNwbGF5LCB0aGVEZWxheSkge1xyXG5cclxuICAgIGlmIChkaXNwbGF5KSB7IC8vIHNob3cgaXRcclxuXHJcbiAgICAgICAgLy8gaWYgbWVzc2FnZSBzZXR0aW5ncyBvblxyXG4gICAgICAgIGlmIChtZXNzYWdlLnRvU3RyaW5nKCkubGVuZ3RoID4gbmV3TG9hZGluZ1NldHRpbmdzLm1lc3NhZ2VNYXhMZW5ndGgpIHtcclxuICAgICAgICAgICAgbWVzc2FnZSA9IGAke25vdGlmbGl4UGxhaW50ZXh0KG1lc3NhZ2UpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIG5ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlTWF4TGVuZ3RoKX0uLi5gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBgJHtub3RpZmxpeFBsYWludGV4dChtZXNzYWdlKS50b1N0cmluZygpfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaW50U3ZnU2l6ZSA9IHBhcnNlSW50KG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdTaXplLnNsaWNlKDAsIC0yKSk7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2VIVE1MID0gJyc7XHJcbiAgICAgICAgaWYgKG1lc3NhZ2UubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VQb3NUb3AgPSBgJHtwYXJzZUludChNYXRoLnJvdW5kKGludFN2Z1NpemUgLSAoaW50U3ZnU2l6ZSAvIDQpKSkudG9TdHJpbmcoKX1weGA7XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlSGVpZ2h0ID0gYCR7KHBhcnNlSW50KG5ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlRm9udFNpemUuc2xpY2UoMCwgMikpICogMS4yKS50b1N0cmluZygpfXB4YDtcclxuXHJcbiAgICAgICAgICAgIG1lc3NhZ2VIVE1MID0gYDxwIGlkPVwiJHtuZXdMb2FkaW5nU2V0dGluZ3MubWVzc2FnZUlEfVwiIGNsYXNzPVwibG9hZGluZy1tZXNzYWdlXCIgc3R5bGU9XCJjb2xvcjoke25ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlQ29sb3J9O2ZvbnQtc2l6ZToke25ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlRm9udFNpemV9O2hlaWdodDoke21lc3NhZ2VIZWlnaHR9OyB0b3A6JHttZXNzYWdlUG9zVG9wfTtcIj4ke21lc3NhZ2V9PC9wPmA7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBtZXNzYWdlIHNldHRpbmdzIG9mZlxyXG5cclxuICAgICAgICAvLyBpZiBjc3NBbmltYWlvbiBmYWxzZSAtPiBkdXJhdGlvbiBvblxyXG4gICAgICAgIGlmICghbmV3TG9hZGluZ1NldHRpbmdzLmNzc0FuaW1hdGlvbikge1xyXG4gICAgICAgICAgICBuZXdMb2FkaW5nU2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb24gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiBjc3NBbmltYWlvbiBmYWxzZSAtPiBkdXJhdGlvbiBvZmZcclxuXHJcbiAgICAgICAgLy8gc3ZnSWNvbiBvblxyXG4gICAgICAgIGxldCBzdmdJY29uID0gJyc7XHJcbiAgICAgICAgaWYgKGljb25UeXBlID09PSAnc3RhbmRhcmQnKSB7XHJcbiAgICAgICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeExvYWRpbmdTdmdTdGFuZGFyZChuZXdMb2FkaW5nU2V0dGluZ3Muc3ZnU2l6ZSwgbmV3TG9hZGluZ1NldHRpbmdzLnN2Z0NvbG9yKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGljb25UeXBlID09PSAnaG91cmdsYXNzJykge1xyXG4gICAgICAgICAgICBzdmdJY29uID0gbm90aWZsaXhMb2FkaW5nU3ZnSG91cmdsYXNzKG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdTaXplLCBuZXdMb2FkaW5nU2V0dGluZ3Muc3ZnQ29sb3IpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaWNvblR5cGUgPT09ICdjaXJjbGUnKSB7XHJcbiAgICAgICAgICAgIHN2Z0ljb24gPSBub3RpZmxpeExvYWRpbmdTdmdDaXJjbGUobmV3TG9hZGluZ1NldHRpbmdzLnN2Z1NpemUsIG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdDb2xvcik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpY29uVHlwZSA9PT0gJ2Fycm93cycpIHtcclxuICAgICAgICAgICAgc3ZnSWNvbiA9IG5vdGlmbGl4TG9hZGluZ1N2Z0Fycm93cyhuZXdMb2FkaW5nU2V0dGluZ3Muc3ZnU2l6ZSwgbmV3TG9hZGluZ1NldHRpbmdzLnN2Z0NvbG9yKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGljb25UeXBlID09PSAnZG90cycpIHtcclxuICAgICAgICAgICAgc3ZnSWNvbiA9IG5vdGlmbGl4TG9hZGluZ1N2Z0RvdHMobmV3TG9hZGluZ1NldHRpbmdzLnN2Z1NpemUsIG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdDb2xvcik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpY29uVHlwZSA9PT0gJ3B1bHNlJykge1xyXG4gICAgICAgICAgICBzdmdJY29uID0gbm90aWZsaXhMb2FkaW5nU3ZnUHVsc2UobmV3TG9hZGluZ1NldHRpbmdzLnN2Z1NpemUsIG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdDb2xvcik7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpY29uVHlwZSA9PT0gJ2N1c3RvbScgJiYgbmV3TG9hZGluZ1NldHRpbmdzLmN1c3RvbVN2Z1VybCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBzdmdJY29uID0gYDxpbWcgY2xhc3M9XCJjdXN0b20tbG9hZGluZy1pY29uXCIgd2lkdGg9XCIke25ld0xvYWRpbmdTZXR0aW5ncy5zdmdTaXplfVwiIGhlaWdodD1cIiR7bmV3TG9hZGluZ1NldHRpbmdzLnN2Z1NpemV9XCIgc3JjPVwiJHtuZXdMb2FkaW5nU2V0dGluZ3MuY3VzdG9tU3ZnVXJsfVwiIGFsdD1cIk5vdGlmbGl4XCI+YDtcclxuICAgICAgICB9IGVsc2UgaWYgKGljb25UeXBlID09PSAnY3VzdG9tJyAmJiBuZXdMb2FkaW5nU2V0dGluZ3MuY3VzdG9tU3ZnVXJsID09IG51bGwpIHtcclxuICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ1lvdSBoYXZlIHRvIHNldCBhIHN0YXRpYyBTVkcgdXJsIHRvIFwiY3VzdG9tU3ZnVXJsXCIgb3B0aW9uIHRvIHVzZSBMb2FkaW5nIEN1c3RvbS4nKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaWNvblR5cGUgPT09ICdub3RpZmxpeCcpIHtcclxuICAgICAgICAgICAgc3ZnSWNvbiA9IG5vdGlmbGl4TG9hZGluZ1N2Z05vdGlmbGl4KG5ld0xvYWRpbmdTZXR0aW5ncy5zdmdTaXplLCAnI2Y4ZjhmOCcsICcjMDBiNDYyJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3ZnUG9zVG9wID0gMDtcclxuICAgICAgICBpZiAobWVzc2FnZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHN2Z1Bvc1RvcCA9IGAtJHtwYXJzZUludChNYXRoLnJvdW5kKGludFN2Z1NpemUgLSAoaW50U3ZnU2l6ZSAvIDQpKSkudG9TdHJpbmcoKX1weGA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3ZnSWNvbkhUTUwgPSBgPGRpdiBzdHlsZT1cInRvcDoke3N2Z1Bvc1RvcH07IHdpZHRoOiR7bmV3TG9hZGluZ1NldHRpbmdzLnN2Z1NpemV9OyBoZWlnaHQ6JHtuZXdMb2FkaW5nU2V0dGluZ3Muc3ZnU2l6ZX07XCIgY2xhc3M9XCIke25ld0xvYWRpbmdTZXR0aW5ncy5jbGFzc05hbWV9LWljb24gJHsobWVzc2FnZS5sZW5ndGggPiAwID8gJ3dpdGgtbWVzc2FnZScgOiAnJyl9XCI+JHtzdmdJY29ufTwvZGl2PmA7XHJcbiAgICAgICAgLy8gc3ZnSWNvbiBvZmZcclxuXHJcblxyXG4gICAgICAgIC8vIGxvYWRpbmcgd3JhcCBvblxyXG4gICAgICAgIGNvbnN0IGRvY0JvZHkgPSBkb2N1bWVudC5ib2R5O1xyXG5cclxuICAgICAgICBjb25zdCBudGZseExvYWRpbmdXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgbnRmbHhMb2FkaW5nV3JhcC5pZCA9IGxvYWRpbmdTZXR0aW5ncy5JRDtcclxuICAgICAgICBudGZseExvYWRpbmdXcmFwLmNsYXNzTmFtZSA9IGAke25ld0xvYWRpbmdTZXR0aW5ncy5jbGFzc05hbWV9ICR7KG5ld0xvYWRpbmdTZXR0aW5ncy5jc3NBbmltYXRpb24gPyAnd2l0aC1hbmltYXRpb24nIDogJycpfSAkeyhuZXdMb2FkaW5nU2V0dGluZ3MuY2xpY2tUb0Nsb3NlID8gJ2NsaWNrLXRvLWNsb3NlJyA6ICcnKX1gO1xyXG4gICAgICAgIG50Zmx4TG9hZGluZ1dyYXAuc3R5bGUuekluZGV4ID0gbmV3TG9hZGluZ1NldHRpbmdzLnppbmRleDtcclxuICAgICAgICBudGZseExvYWRpbmdXcmFwLnN0eWxlLmJhY2tncm91bmQgPSBuZXdMb2FkaW5nU2V0dGluZ3MuYmFja2dyb3VuZENvbG9yO1xyXG4gICAgICAgIG50Zmx4TG9hZGluZ1dyYXAuc3R5bGUuYW5pbWF0aW9uRHVyYXRpb24gPSBgJHtuZXdMb2FkaW5nU2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb259bXNgO1xyXG5cclxuICAgICAgICAvLyBmb250LWZhbWlseSBvblxyXG4gICAgICAgIG50Zmx4TG9hZGluZ1dyYXAuc3R5bGUuZm9udEZhbWlseSA9IGBcIiR7bmV3TG9hZGluZ1NldHRpbmdzLmZvbnRGYW1pbHl9XCIsIHNhbnMtc2VyaWZgO1xyXG4gICAgICAgIC8vIGZvbnQtZmFtaWx5IG9mZlxyXG5cclxuICAgICAgICAvLyBydGwgb25cclxuICAgICAgICBpZiAobmV3TG9hZGluZ1NldHRpbmdzLnJ0bCkge1xyXG4gICAgICAgICAgICBudGZseExvYWRpbmdXcmFwLnNldEF0dHJpYnV0ZSgnZGlyJywgJ3J0bCcpO1xyXG4gICAgICAgICAgICBudGZseExvYWRpbmdXcmFwLmNsYXNzTGlzdC5hZGQoJ3J0bC1vbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBydGwgb2ZmXHJcblxyXG4gICAgICAgIC8vIGFwcGVuZCBvblxyXG4gICAgICAgIG50Zmx4TG9hZGluZ1dyYXAuaW5uZXJIVE1MID0gYCR7c3ZnSWNvbkhUTUx9ICR7bWVzc2FnZUhUTUx9YDsgLy8gaW5uZXIgaHRtbFxyXG5cclxuICAgICAgICBpZiAoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG50Zmx4TG9hZGluZ1dyYXAuaWQpKSB7IC8vIGlmIG5vdCBsb2FkaW5nXHJcblxyXG4gICAgICAgICAgICBkb2NCb2R5LmFwcGVuZENoaWxkKG50Zmx4TG9hZGluZ1dyYXApOyAvLyBhcHBlbmRcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGNsaWNrIHRvIGNsb3NlIG9uICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChuZXdMb2FkaW5nU2V0dGluZ3MuY2xpY2tUb0Nsb3NlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9hZGluZ1dyYXBFbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChudGZseExvYWRpbmdXcmFwLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsb2FkaW5nV3JhcEVsbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbnRmbHhMb2FkaW5nV3JhcC5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG50Zmx4TG9hZGluZ1dyYXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChudGZseExvYWRpbmdXcmFwKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBuZXdMb2FkaW5nU2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiBjbGljayB0byBjbG9zZSBvZmZcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYXBwZW5kIG9mZlxyXG5cclxuICAgIH0gZWxzZSB7IC8vIFJlbW92ZVxyXG5cclxuICAgICAgICBpZiAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9hZGluZ1NldHRpbmdzLklEKSkgeyAvLyBpZiBoYXMgYW55IGxvYWRpbmdcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGxvYWRpbmdFbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2FkaW5nU2V0dGluZ3MuSUQpO1xyXG5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbG9hZGluZ0VsbS5jbGFzc0xpc3QuYWRkKCdyZW1vdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2FkaW5nRWxtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobG9hZGluZ0VsbSk7XHJcbiAgICAgICAgICAgICAgICB9LCBuZXdMb2FkaW5nU2V0dGluZ3MuY3NzQW5pbWF0aW9uRHVyYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgfSwgdGhlRGVsYXkpO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTaW5nbGUgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBDaGFuZ2UgTWVzc2FnZSBvblxyXG5jb25zdCBOb3RpZmxpeExvYWRpbmdDaGFuZ2UgPSBmdW5jdGlvbiAobmV3TWVzc2FnZSkge1xyXG5cclxuICAgIGlmIChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2FkaW5nU2V0dGluZ3MuSUQpKSB7IC8vIGlmIGhhcyBhbnkgbG9hZGluZ1xyXG5cclxuICAgICAgICBpZiAobmV3TWVzc2FnZS50b1N0cmluZygpLmxlbmd0aCA+IG5ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlTWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5ld01lc3NhZ2UgPSBgJHtub3RpZmxpeFBsYWludGV4dChuZXdNZXNzYWdlKS50b1N0cmluZygpLnN1YnN0cmluZygwLCBuZXdMb2FkaW5nU2V0dGluZ3MubWVzc2FnZU1heExlbmd0aCl9Li4uYDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBuZXdNZXNzYWdlID0gbm90aWZsaXhQbGFpbnRleHQobmV3TWVzc2FnZSkudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChuZXdNZXNzYWdlLmxlbmd0aCA+IDApIHsgLy8gaWYgaGFzIGFueSBtZXNzYWdlXHJcblxyXG4gICAgICAgICAgICBsZXQgb2xkTWVzc2FnZUVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvYWRpbmdTZXR0aW5ncy5JRCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3AnKVswXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChvbGRNZXNzYWdlRWxtICE9PSB1bmRlZmluZWQpIHsgLy8gdGhlcmUgaXMgYSBtZXNzYWdlIGVsZW1lbnRcclxuXHJcbiAgICAgICAgICAgICAgICBvbGRNZXNzYWdlRWxtLmlubmVySFRNTCA9IG5ld01lc3NhZ2U7IC8vIGNoYW5nZSB0aGUgbWVzc2FnZVxyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gdGhlcmUgaXMgbm8gbWVzc2FnZSBlbGVtZW50XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UgZWxlbWVudCBvblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3TWVzc2FnZUhUTUwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlSFRNTC5pZCA9IG5ld0xvYWRpbmdTZXR0aW5ncy5tZXNzYWdlSUQ7XHJcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlSFRNTC5jbGFzc05hbWUgPSAnbG9hZGluZy1tZXNzYWdlIG5ldyc7XHJcblxyXG4gICAgICAgICAgICAgICAgbmV3TWVzc2FnZUhUTUwuc3R5bGUuY29sb3IgPSBuZXdMb2FkaW5nU2V0dGluZ3MubWVzc2FnZUNvbG9yO1xyXG4gICAgICAgICAgICAgICAgbmV3TWVzc2FnZUhUTUwuc3R5bGUuZm9udFNpemUgPSBuZXdMb2FkaW5nU2V0dGluZ3MubWVzc2FnZUZvbnRTaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGludFN2Z1NpemUgPSBwYXJzZUludChuZXdMb2FkaW5nU2V0dGluZ3Muc3ZnU2l6ZS5zbGljZSgwLCAtMikpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZVBvc1RvcCA9IGAke3BhcnNlSW50KE1hdGgucm91bmQoaW50U3ZnU2l6ZSAtIChpbnRTdmdTaXplIC8gNCkpKS50b1N0cmluZygpfXB4YDtcclxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2VIVE1MLnN0eWxlLnRvcCA9IG1lc3NhZ2VQb3NUb3A7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUhlaWdodCA9IGAkeyhwYXJzZUludChuZXdMb2FkaW5nU2V0dGluZ3MubWVzc2FnZUZvbnRTaXplLnNsaWNlKDAsIDIpKSAqIDEuMikudG9TdHJpbmcoKX1weGA7XHJcbiAgICAgICAgICAgICAgICBuZXdNZXNzYWdlSFRNTC5zdHlsZS5oZWlnaHQgPSBtZXNzYWdlSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgICAgIG5ld01lc3NhZ2VIVE1MLmlubmVySFRNTCA9IG5ld01lc3NhZ2U7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZVdyYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2FkaW5nU2V0dGluZ3MuSUQpO1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZVdyYXAuYXBwZW5kQ2hpbGQobmV3TWVzc2FnZUhUTUwpO1xyXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IG1lc3NhZ2UgZWxlbWVudCBvZmZcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNhbCBhbGlnbiBzdmcgb25cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN2Z0RpdkVsbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvYWRpbmdTZXR0aW5ncy5JRCkuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2RpdicpWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ZnTmV3UG9zVG9wID0gYC0ke3BhcnNlSW50KE1hdGgucm91bmQoaW50U3ZnU2l6ZSAtIChpbnRTdmdTaXplIC8gNCkpKS50b1N0cmluZygpfXB4YDtcclxuICAgICAgICAgICAgICAgIHN2Z0RpdkVsbS5zdHlsZS50b3AgPSBzdmdOZXdQb3NUb3A7XHJcbiAgICAgICAgICAgICAgICAvLyB2ZXJ0aWNhbCBhbGlnbiBzdmcgb2ZmXHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7IC8vIGlmIG5vIG1lc3NhZ2VcclxuICAgICAgICAgICAgbm90aWZsaXhDb25zb2xlRXJyb3IoJ05vdGlmbGl4IEVycm9yJywgJ1doZXJlIGlzIHRoZSBuZXcgbWVzc2FnZT8nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBDaGFuZ2UgTWVzc2FnZSBvZmZcclxuXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgc3RhbmRhcmQgb25cclxuY29uc3Qgbm90aWZsaXhMb2FkaW5nU3ZnU3RhbmRhcmQgPSAod2lkdGgsIGNvbG9yKSA9PiB7XHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzYwcHgnOyB9XHJcbiAgICBpZiAoIWNvbG9yKSB7IGNvbG9yID0gJyMwMGI0NjInOyB9XHJcbiAgICBjb25zdCBzdGFuZGFyZCA9IGA8c3ZnIHN0cm9rZT1cIiR7Y29sb3J9XCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgdmlld0JveD1cIjAgMCAzOCAzOFwiIHN0eWxlPVwidHJhbnNmb3JtOnNjYWxlKDAuOCk7XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxnIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiPjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgxIDEpXCIgc3Ryb2tlLXdpZHRoPVwiMlwiPjxjaXJjbGUgc3Ryb2tlLW9wYWNpdHk9XCIuMjVcIiBjeD1cIjE4XCIgY3k9XCIxOFwiIHI9XCIxOFwiLz48cGF0aCBkPVwiTTM2IDE4YzAtOS45NC04LjA2LTE4LTE4LTE4XCI+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cInRyYW5zZm9ybVwiIHR5cGU9XCJyb3RhdGVcIiBmcm9tPVwiMCAxOCAxOFwiIHRvPVwiMzYwIDE4IDE4XCIgZHVyPVwiMXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+PC9wYXRoPjwvZz48L2c+PC9zdmc+YDtcclxuICAgIHJldHVybiBzdGFuZGFyZDtcclxufVxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgc3RhbmRhcmQgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgaG91cmdsYXNzIG9uXHJcbmNvbnN0IG5vdGlmbGl4TG9hZGluZ1N2Z0hvdXJnbGFzcyA9ICh3aWR0aCwgY29sb3IpID0+IHtcclxuICAgIGlmICghd2lkdGgpIHsgd2lkdGggPSAnNjBweCc7IH1cclxuICAgIGlmICghY29sb3IpIHsgY29sb3IgPSAnIzAwYjQ2Mic7IH1cclxuICAgIGNvbnN0IGhvdXJnbGFzcyA9IGA8c3ZnIGlkPVwiTlhMb2FkaW5nSG91cmdsYXNzXCIgZmlsbD1cIiR7Y29sb3J9XCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgdmVyc2lvbj1cIjEuMVwiIHN0eWxlPVwic2hhcGUtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgdGV4dC1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyBpbWFnZS1yZW5kZXJpbmc6b3B0aW1pemVRdWFsaXR5OyBmaWxsLXJ1bGU6ZXZlbm9kZDsgY2xpcC1ydWxlOmV2ZW5vZGRcIiB2aWV3Qm94PVwiMCAwIDIwMCAyMDBcIj48c3R5bGU+QC13ZWJraXQta2V5ZnJhbWVzIE5YaG91cmdsYXNzNS1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDEpO3RyYW5zZm9ybTogc2NhbGUoMSwgMSk7fTE2LjY3JXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMC44KTt0cmFuc2Zvcm06IHNjYWxlKDEsIDAuOCk7fTMzLjMzJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC44OCwgMC42KTt0cmFuc2Zvcm06IHNjYWxlKDAuODgsIDAuNik7fTM3LjUwJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC44NSwgMC41NSk7dHJhbnNmb3JtOiBzY2FsZSgwLjg1LCAwLjU1KTt9NDEuNjcley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjgsIDAuNSk7dHJhbnNmb3JtOiBzY2FsZSgwLjgsIDAuNSk7fTQ1LjgzJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC43NSwgMC40NSk7dHJhbnNmb3JtOiBzY2FsZSgwLjc1LCAwLjQ1KTt9NTAley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjcsIDAuNCk7dHJhbnNmb3JtOiBzY2FsZSgwLjcsIDAuNCk7fTU0LjE3JXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC42LCAwLjM1KTt0cmFuc2Zvcm06IHNjYWxlKDAuNiwgMC4zNSk7fTU4LjMzJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC41LCAwLjMpO3RyYW5zZm9ybTogc2NhbGUoMC41LCAwLjMpO304My4zMyV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMiwgMCk7dHJhbnNmb3JtOiBzY2FsZSgwLjIsIDApO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjIsIDApO3RyYW5zZm9ybTogc2NhbGUoMC4yLCAwKTt9fUBrZXlmcmFtZXMgTlhob3VyZ2xhc3M1LWFuaW1hdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSk7dHJhbnNmb3JtOiBzY2FsZSgxLCAxKTt9MTYuNjcley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAwLjgpO3RyYW5zZm9ybTogc2NhbGUoMSwgMC44KTt9MzMuMzMley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjg4LCAwLjYpO3RyYW5zZm9ybTogc2NhbGUoMC44OCwgMC42KTt9MzcuNTAley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjg1LCAwLjU1KTt0cmFuc2Zvcm06IHNjYWxlKDAuODUsIDAuNTUpO300MS42NyV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuOCwgMC41KTt0cmFuc2Zvcm06IHNjYWxlKDAuOCwgMC41KTt9NDUuODMley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjc1LCAwLjQ1KTt0cmFuc2Zvcm06IHNjYWxlKDAuNzUsIDAuNDUpO301MCV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuNywgMC40KTt0cmFuc2Zvcm06IHNjYWxlKDAuNywgMC40KTt9NTQuMTcley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjYsIDAuMzUpO3RyYW5zZm9ybTogc2NhbGUoMC42LCAwLjM1KTt9NTguMzMley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgwLjUsIDAuMyk7dHJhbnNmb3JtOiBzY2FsZSgwLjUsIDAuMyk7fTgzLjMzJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMC4yLCAwKTt0cmFuc2Zvcm06IHNjYWxlKDAuMiwgMCk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDAuMiwgMCk7dHJhbnNmb3JtOiBzY2FsZSgwLjIsIDApO319QC13ZWJraXQta2V5ZnJhbWVzIE5YaG91cmdsYXNzMy1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHNjYWxlKDEsIDAuMDIpO3RyYW5zZm9ybTogc2NhbGUoMSwgMC4wMik7fTc5LjE3JXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSk7dHJhbnNmb3JtOiBzY2FsZSgxLCAxKTt9MTAwJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMSk7dHJhbnNmb3JtOiBzY2FsZSgxLCAxKTt9fUBrZXlmcmFtZXMgTlhob3VyZ2xhc3MzLWFuaW1hdGlvbnswJXstd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMSwgMC4wMik7dHJhbnNmb3JtOiBzY2FsZSgxLCAwLjAyKTt9NzkuMTcley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKTt0cmFuc2Zvcm06IHNjYWxlKDEsIDEpO30xMDAley13ZWJraXQtdHJhbnNmb3JtOiBzY2FsZSgxLCAxKTt0cmFuc2Zvcm06IHNjYWxlKDEsIDEpO319QC13ZWJraXQta2V5ZnJhbWVzIE5YaG91cmdsYXNzMS1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTt9ODMuMzMley13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7fX1Aa2V5ZnJhbWVzIE5YaG91cmdsYXNzMS1hbmltYXRpb257MCV7LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTt9ODMuMzMley13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7dHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7fTEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO3RyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7fX0jTlhMb2FkaW5nSG91cmdsYXNzICp7LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246IDEuMnM7YW5pbWF0aW9uLWR1cmF0aW9uOiAxLjJzOy13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMCwgMCwgMSwgMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDEsIDEpO30jTlhob3VyZ2xhc3M3e2ZpbGw6IGluaGVyaXQ7fSNOWGhvdXJnbGFzczF7LXdlYmtpdC1hbmltYXRpb24tbmFtZTogTlhob3VyZ2xhc3MxLWFuaW1hdGlvbjthbmltYXRpb24tbmFtZTogTlhob3VyZ2xhc3MxLWFuaW1hdGlvbjstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDUwJSA1MCU7dHJhbnNmb3JtLW9yaWdpbjogNTAlIDUwJTt0cmFuc2Zvcm0tYm94OiBmaWxsLWJveDt9I05YaG91cmdsYXNzM3std2Via2l0LWFuaW1hdGlvbi1uYW1lOiBOWGhvdXJnbGFzczMtYW5pbWF0aW9uO2FuaW1hdGlvbi1uYW1lOiBOWGhvdXJnbGFzczMtYW5pbWF0aW9uOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNDIsIDAsIDAuNTgsIDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQyLCAwLCAwLjU4LCAxKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IDUwJSAxMDAlO3RyYW5zZm9ybS1vcmlnaW46IDUwJSAxMDAlO3RyYW5zZm9ybS1ib3g6IGZpbGwtYm94O30jTlhob3VyZ2xhc3M1ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6IE5YaG91cmdsYXNzNS1hbmltYXRpb247YW5pbWF0aW9uLW5hbWU6IE5YaG91cmdsYXNzNS1hbmltYXRpb247LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiA1MCUgMTAwJTt0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgMTAwJTt0cmFuc2Zvcm0tYm94OiBmaWxsLWJveDt9ZyNOWGhvdXJnbGFzczUsI05YaG91cmdsYXNzM3tmaWxsOiBpbmhlcml0O29wYWNpdHk6IC40O308L3N0eWxlPjxnIGlkPVwiTlhob3VyZ2xhc3MxXCIgZGF0YS1hbmltYXRvci1ncm91cD1cInRydWVcIiBkYXRhLWFuaW1hdG9yLXR5cGU9XCIxXCI+PGcgaWQ9XCJOWGhvdXJnbGFzczJcIj48ZyBpZD1cIk5YaG91cmdsYXNzM1wiIGRhdGEtYW5pbWF0b3ItZ3JvdXA9XCJ0cnVlXCIgZGF0YS1hbmltYXRvci10eXBlPVwiMlwiPjxwb2x5Z29uIHBvaW50cz1cIjEwMCwxMDAgNjUuNjIsMTMyLjA4IDY1LjYyLDE2My4yMiAxMzQuMzgsMTYzLjIyIDEzNC4zOCwxMzIuMDggXCIgaWQ9XCJOWGhvdXJnbGFzczRcIi8+PC9nPjxnIGlkPVwiTlhob3VyZ2xhc3M1XCIgZGF0YS1hbmltYXRvci1ncm91cD1cInRydWVcIiBkYXRhLWFuaW1hdG9yLXR5cGU9XCIyXCI+PHBvbHlnb24gcG9pbnRzPVwiMTAwLDEwMCA2NS42Miw2Ny45MiA2NS42MiwzNi43OCAxMzQuMzgsMzYuNzggMTM0LjM4LDY3LjkyXCIgaWQ9XCJOWGhvdXJnbGFzczZcIi8+PC9nPiA8cGF0aCBkPVwiTTUxLjE0IDM4Ljg5bDguMzMgMCAwIDE0LjkzYzAsMTUuMSA4LjI5LDI4Ljk5IDIzLjM0LDM5LjEgMS44OCwxLjI1IDMuMDQsMy45NyAzLjA0LDcuMDggMCwzLjExIC0xLjE2LDUuODMgLTMuMDQsNy4wOSAtMTUuMDUsMTAuMSAtMjMuMzQsMjMuOTkgLTIzLjM0LDM5LjA5bDAgMTQuOTMgLTguMzMgMGMtMi42OCwwIC00Ljg2LDIuMTggLTQuODYsNC44NiAwLDIuNjkgMi4xOCw0Ljg2IDQuODYsNC44Nmw5Ny43MiAwYzIuNjgsMCA0Ljg2LC0yLjE3IDQuODYsLTQuODYgMCwtMi42OCAtMi4xOCwtNC44NiAtNC44NiwtNC44NmwtOC4zMyAwIDAgLTE0LjkzYzAsLTE1LjEgLTguMjksLTI4Ljk5IC0yMy4zNCwtMzkuMDkgLTEuODgsLTEuMjYgLTMuMDQsLTMuOTggLTMuMDQsLTcuMDkgMCwtMy4xMSAxLjE2LC01LjgzIDMuMDQsLTcuMDggMTUuMDUsLTEwLjExIDIzLjM0LC0yNCAyMy4zNCwtMzkuMWwwIC0xNC45MyA4LjMzIDBjMi42OCwwIDQuODYsLTIuMTggNC44NiwtNC44NiAwLC0yLjY5IC0yLjE4LC00Ljg2IC00Ljg2LC00Ljg2bC05Ny43MiAwYy0yLjY4LDAgLTQuODYsMi4xNyAtNC44Niw0Ljg2IDAsMi42OCAyLjE4LDQuODYgNC44Niw0Ljg2em03OS42NyAxNC45M2MwLDE1Ljg3IC0xMS45MywyNi4yNSAtMTkuMDQsMzEuMDMgLTQuNiwzLjA4IC03LjM0LDguNzUgLTcuMzQsMTUuMTUgMCw2LjQxIDIuNzQsMTIuMDcgNy4zNCwxNS4xNSA3LjExLDQuNzggMTkuMDQsMTUuMTYgMTkuMDQsMzEuMDNsMCAxNC45MyAtNjEuNjIgMCAwIC0xNC45M2MwLC0xNS44NyAxMS45MywtMjYuMjUgMTkuMDQsLTMxLjAyIDQuNiwtMy4wOSA3LjM0LC04Ljc1IDcuMzQsLTE1LjE2IDAsLTYuNCAtMi43NCwtMTIuMDcgLTcuMzQsLTE1LjE1IC03LjExLC00Ljc4IC0xOS4wNCwtMTUuMTYgLTE5LjA0LC0zMS4wM2wwIC0xNC45MyA2MS42MiAwIDAgMTQuOTN6XCIgaWQ9XCJOWGhvdXJnbGFzczdcIi8+PC9nPjwvZz48L3N2Zz5gO1xyXG4gICAgcmV0dXJuIGhvdXJnbGFzcztcclxufVxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgaG91cmdsYXNzIG9mZlxyXG5cclxuLy8gTm90aWZsaXg6IExvYWRpbmcgU1ZHIGNpcmNsZSBvblxyXG5jb25zdCBub3RpZmxpeExvYWRpbmdTdmdDaXJjbGUgPSAod2lkdGgsIGNvbG9yKSA9PiB7XHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzYwcHgnOyB9XHJcbiAgICBpZiAoIWNvbG9yKSB7IGNvbG9yID0gJyMwMGI0NjInOyB9XHJcbiAgICBjb25zdCBjaXJjbGUgPSBgPHN2ZyBpZD1cIk5YTG9hZGluZ0NpcmNsZVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2aWV3Qm94PVwiMjUgMjUgNTAgNTBcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiIHZlcnNpb249XCIxLjFcIj48c3R5bGU+I05YTG9hZGluZ0NpcmNsZXstd2Via2l0LWFuaW1hdGlvbjogcm90YXRlIDJzIGxpbmVhciBpbmZpbml0ZTsgYW5pbWF0aW9uOiByb3RhdGUgMnMgbGluZWFyIGluZmluaXRlOyBoZWlnaHQ6ICR7d2lkdGh9OyAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7IC1tcy10cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOyB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyOyB3aWR0aDogJHt3aWR0aH07IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyBtYXJnaW46IGF1dG87fS5ub3RpZmxpeC1sb2FkZXItY2lyY2xlLXBhdGh7c3Ryb2tlLWRhc2hhcnJheTogMTUwLDIwMDsgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xMDsgLXdlYmtpdC1hbmltYXRpb246IGRhc2ggMS41cyBlYXNlLWluLW91dCBpbmZpbml0ZSwgY29sb3IgMS41cyBlYXNlLWluLW91dCBpbmZpbml0ZTsgYW5pbWF0aW9uOiBkYXNoIDEuNXMgZWFzZS1pbi1vdXQgaW5maW5pdGUsIGNvbG9yIDEuNXMgZWFzZS1pbi1vdXQgaW5maW5pdGU7IHN0cm9rZS1saW5lY2FwOiByb3VuZDt9QC13ZWJraXQta2V5ZnJhbWVzIHJvdGF0ZXsxMDAley13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTt9fUBrZXlmcmFtZXMgcm90YXRlezEwMCV7LXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpOyB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO319QC13ZWJraXQta2V5ZnJhbWVzIGRhc2h7MCV7c3Ryb2tlLWRhc2hhcnJheTogMSwyMDA7IHN0cm9rZS1kYXNob2Zmc2V0OiAwO301MCV7c3Ryb2tlLWRhc2hhcnJheTogODksMjAwOyBzdHJva2UtZGFzaG9mZnNldDogLTM1O30xMDAle3N0cm9rZS1kYXNoYXJyYXk6IDg5LDIwMDsgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xMjQ7fX1Aa2V5ZnJhbWVzIGRhc2h7MCV7c3Ryb2tlLWRhc2hhcnJheTogMSwyMDA7IHN0cm9rZS1kYXNob2Zmc2V0OiAwO301MCV7c3Ryb2tlLWRhc2hhcnJheTogODksMjAwOyBzdHJva2UtZGFzaG9mZnNldDogLTM1O30xMDAle3N0cm9rZS1kYXNoYXJyYXk6IDg5LDIwMDsgc3Ryb2tlLWRhc2hvZmZzZXQ6IC0xMjQ7fX08L3N0eWxlPjxjaXJjbGUgY2xhc3M9XCJub3RpZmxpeC1sb2FkZXItY2lyY2xlLXBhdGhcIiBjeD1cIjUwXCIgY3k9XCI1MFwiIHI9XCIyMFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiJHtjb2xvcn1cIiBzdHJva2Utd2lkdGg9XCIyXCIvPjwvc3ZnPmA7XHJcbiAgICByZXR1cm4gY2lyY2xlO1xyXG59XHJcbi8vIE5vdGlmbGl4OiBMb2FkaW5nIFNWRyBjaXJjbGUgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgYXJyb3dzIG9uXHJcbmNvbnN0IG5vdGlmbGl4TG9hZGluZ1N2Z0Fycm93cyA9ICh3aWR0aCwgY29sb3IpID0+IHtcclxuICAgIGlmICghd2lkdGgpIHsgd2lkdGggPSAnNjBweCc7IH1cclxuICAgIGlmICghY29sb3IpIHsgY29sb3IgPSAnIzAwYjQ2Mic7IH1cclxuICAgIGNvbnN0IGFycm93cyA9IGA8c3ZnIGlkPVwiTlhMb2FkaW5nQXJyb3dzXCIgZmlsbD1cIiR7Y29sb3J9XCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbG5zOnhsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiIHZlcnNpb249XCIxLjFcIiB2aWV3Qm94PVwiMCAwIDEyOCAxMjhcIiB4bWw6c3BhY2U9XCJwcmVzZXJ2ZVwiPjxnPjxwYXRoIGZpbGw9XCJpbmhlcml0XCIgZmlsbC1vcGFjaXR5PVwiMVwiIGQ9XCJNMTA5LjI1IDU1LjVoLTM2bDEyLTEyYTI5LjU0IDI5LjU0IDAgMCAwLTQ5LjUzIDEySDE4Ljc1QTQ2LjA0IDQ2LjA0IDAgMCAxIDk2LjkgMzEuODRsMTIuMzUtMTIuMzR2MzZ6bS05MC41IDE3aDM2bC0xMiAxMmEyOS41NCAyOS41NCAwIDAgMCA0OS41My0xMmgxNi45N0E0Ni4wNCA0Ni4wNCAwIDAgMSAzMS4xIDk2LjE2TDE4Ljc0IDEwOC41di0zNnpcIiAvPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIiB0eXBlPVwicm90YXRlXCIgZnJvbT1cIjAgNjQgNjRcIiB0bz1cIjM2MCA2NCA2NFwiIGR1cj1cIjEuNXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIj48L2FuaW1hdGVUcmFuc2Zvcm0+PC9nPjwvc3ZnPmA7XHJcbiAgICByZXR1cm4gYXJyb3dzO1xyXG59XHJcbi8vIE5vdGlmbGl4OiBMb2FkaW5nIFNWRyBhcnJvd3Mgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgZG90cyBvblxyXG5jb25zdCBub3RpZmxpeExvYWRpbmdTdmdEb3RzID0gKHdpZHRoLCBjb2xvcikgPT4ge1xyXG4gICAgaWYgKCF3aWR0aCkgeyB3aWR0aCA9ICc2MHB4JzsgfVxyXG4gICAgaWYgKCFjb2xvcikgeyBjb2xvciA9ICcjMDBiNDYyJzsgfVxyXG4gICAgY29uc3QgZG90cyA9IGA8c3ZnIGlkPVwiTlhMb2FkaW5nRG90c1wiIGZpbGw9XCIke2NvbG9yfVwiIHdpZHRoPVwiJHt3aWR0aH1cIiBoZWlnaHQ9XCIke3dpZHRofVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiB2aWV3Qm94PVwiMCAwIDEwMCAxMDBcIiBwcmVzZXJ2ZUFzcGVjdFJhdGlvPVwieE1pZFlNaWRcIj48ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoMjUgNTApXCI+PGNpcmNsZSBjeD1cIjBcIiBjeT1cIjBcIiByPVwiOVwiIGZpbGw9XCJpbmhlcml0XCIgdHJhbnNmb3JtPVwic2NhbGUoMC4yMzkgMC4yMzkpXCI+PGFuaW1hdGVUcmFuc2Zvcm0gYXR0cmlidXRlTmFtZT1cInRyYW5zZm9ybVwiIHR5cGU9XCJzY2FsZVwiIGJlZ2luPVwiLTAuMjY2c1wiIGNhbGNNb2RlPVwic3BsaW5lXCIga2V5U3BsaW5lcz1cIjAuMyAwIDAuNyAxOzAuMyAwIDAuNyAxXCIgdmFsdWVzPVwiMDsxOzBcIiBrZXlUaW1lcz1cIjA7MC41OzFcIiBkdXI9XCIwLjhzXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCIvPjwvY2lyY2xlPjwvZz48ZyB0cmFuc2Zvcm09XCJ0cmFuc2xhdGUoNTAgNTApXCI+IDxjaXJjbGUgY3g9XCIwXCIgY3k9XCIwXCIgcj1cIjlcIiBmaWxsPVwiaW5oZXJpdFwiIHRyYW5zZm9ybT1cInNjYWxlKDAuMDAxNTIgMC4wMDE1MilcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgdHlwZT1cInNjYWxlXCIgYmVnaW49XCItMC4xMzNzXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlTcGxpbmVzPVwiMC4zIDAgMC43IDE7MC4zIDAgMC43IDFcIiB2YWx1ZXM9XCIwOzE7MFwiIGtleVRpbWVzPVwiMDswLjU7MVwiIGR1cj1cIjAuOHNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+PC9jaXJjbGU+PC9nPjxnIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSg3NSA1MClcIj48Y2lyY2xlIGN4PVwiMFwiIGN5PVwiMFwiIHI9XCI5XCIgZmlsbD1cImluaGVyaXRcIiB0cmFuc2Zvcm09XCJzY2FsZSgwLjI5OSAwLjI5OSlcIj48YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgdHlwZT1cInNjYWxlXCIgYmVnaW49XCIwc1wiIGNhbGNNb2RlPVwic3BsaW5lXCIga2V5U3BsaW5lcz1cIjAuMyAwIDAuNyAxOzAuMyAwIDAuNyAxXCIgdmFsdWVzPVwiMDsxOzBcIiBrZXlUaW1lcz1cIjA7MC41OzFcIiBkdXI9XCIwLjhzXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCIvPjwvY2lyY2xlPjwvZz48L3N2Zz5gO1xyXG4gICAgcmV0dXJuIGRvdHM7XHJcbn1cclxuLy8gTm90aWZsaXg6IExvYWRpbmcgU1ZHIGRvdHMgb2ZmXHJcblxyXG4vLyBOb3RpZmxpeDogTG9hZGluZyBTVkcgcHVsc2Ugb25cclxuY29uc3Qgbm90aWZsaXhMb2FkaW5nU3ZnUHVsc2UgPSAod2lkdGgsIGNvbG9yKSA9PiB7XHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzYwcHgnOyB9XHJcbiAgICBpZiAoIWNvbG9yKSB7IGNvbG9yID0gJyMwMGI0NjInOyB9XHJcbiAgICBjb25zdCBwdWxzZSA9IGA8c3ZnIHN0cm9rZT1cIiR7Y29sb3J9XCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgdmlld0JveD1cIjAgMCA0NCA0NFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48ZyBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBzdHJva2Utd2lkdGg9XCIyXCI+PGNpcmNsZSBjeD1cIjIyXCIgY3k9XCIyMlwiIHI9XCIxXCI+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cInJcIiBiZWdpbj1cIjBzXCIgZHVyPVwiMS44c1wiIHZhbHVlcz1cIjE7IDIwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7IDFcIiBrZXlTcGxpbmVzPVwiMC4xNjUsIDAuODQsIDAuNDQsIDFcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+PGFuaW1hdGUgYXR0cmlidXRlTmFtZT1cInN0cm9rZS1vcGFjaXR5XCIgYmVnaW49XCIwc1wiIGR1cj1cIjEuOHNcIiB2YWx1ZXM9XCIxOyAwXCIgY2FsY01vZGU9XCJzcGxpbmVcIiBrZXlUaW1lcz1cIjA7IDFcIiBrZXlTcGxpbmVzPVwiMC4zLCAwLjYxLCAwLjM1NSwgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiLz48L2NpcmNsZT48Y2lyY2xlIGN4PVwiMjJcIiBjeT1cIjIyXCIgcj1cIjFcIj48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwiclwiIGJlZ2luPVwiLTAuOXNcIiBkdXI9XCIxLjhzXCIgdmFsdWVzPVwiMTsgMjBcIiBjYWxjTW9kZT1cInNwbGluZVwiIGtleVRpbWVzPVwiMDsgMVwiIGtleVNwbGluZXM9XCIwLjE2NSwgMC44NCwgMC40NCwgMVwiIHJlcGVhdENvdW50PVwiaW5kZWZpbml0ZVwiLz48YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwic3Ryb2tlLW9wYWNpdHlcIiBiZWdpbj1cIi0wLjlzXCIgZHVyPVwiMS44c1wiIHZhbHVlcz1cIjE7IDBcIiBjYWxjTW9kZT1cInNwbGluZVwiIGtleVRpbWVzPVwiMDsgMVwiIGtleVNwbGluZXM9XCIwLjMsIDAuNjEsIDAuMzU1LCAxXCIgcmVwZWF0Q291bnQ9XCJpbmRlZmluaXRlXCIvPjwvY2lyY2xlPjwvZz48L3N2Zz5gO1xyXG4gICAgcmV0dXJuIHB1bHNlO1xyXG59XHJcbi8vIE5vdGlmbGl4OiBMb2FkaW5nIFNWRyBwdWxzZSBvZmZcclxuXHJcbi8vIE5vdGlmbGl4OiBMb2FkaW5nIFNWRyBub3RpZmxpeCBvblxyXG5jb25zdCBub3RpZmxpeExvYWRpbmdTdmdOb3RpZmxpeCA9ICh3aWR0aCwgd2hpdGUsIGdyZWVuKSA9PiB7XHJcbiAgICBpZiAoIXdpZHRoKSB7IHdpZHRoID0gJzYwcHgnOyB9XHJcbiAgICBpZiAoIXdoaXRlKSB7IHdoaXRlID0gJyNmOGY4ZjgnOyB9XHJcbiAgICBpZiAoIWdyZWVuKSB7IGdyZWVuID0gJyMwMGI0NjInOyB9XHJcbiAgICBjb25zdCBub3RpZmxpeEljb24gPSBgPHN2ZyBpZD1cIk5YTG9hZGluZ05vdGlmbGl4TGliXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHhtbDpzcGFjZT1cInByZXNlcnZlXCIgd2lkdGg9XCIke3dpZHRofVwiIGhlaWdodD1cIiR7d2lkdGh9XCIgdmVyc2lvbj1cIjEuMVwiIHN0eWxlPVwic2hhcGUtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgdGV4dC1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyBpbWFnZS1yZW5kZXJpbmc6b3B0aW1pemVRdWFsaXR5OyBmaWxsLXJ1bGU6ZXZlbm9kZDsgY2xpcC1ydWxlOmV2ZW5vZGRcIiB2aWV3Qm94PVwiMCAwIDIwMCAyMDBcIiB4bWxuczp4bGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIj48ZGVmcz48c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+LmxpbmV7c3Ryb2tlOiR7d2hpdGV9O3N0cm9rZS13aWR0aDoxMjtzdHJva2UtbGluZWNhcDpyb3VuZDtzdHJva2UtbGluZWpvaW46cm91bmQ7c3Ryb2tlLW1pdGVybGltaXQ6MjI7fS5saW5le2ZpbGw6bm9uZTt9LmRvdHtmaWxsOiR7Z3JlZW59O3N0cm9rZToke2dyZWVufTtzdHJva2Utd2lkdGg6MTI7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO3N0cm9rZS1taXRlcmxpbWl0OjIyO30ubntzdHJva2UtZGFzaGFycmF5OiA1MDA7c3Ryb2tlLWRhc2hvZmZzZXQ6IDA7YW5pbWF0aW9uLW5hbWU6IG5vdGlmbGl4LW47YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyO2FuaW1hdGlvbi1kdXJhdGlvbjogMi41czthbmltYXRpb24tZGVsYXk6MHM7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7YW5pbWF0aW9uLWRpcmVjdGlvbjogbm9ybWFsO31Aa2V5ZnJhbWVzIG5vdGlmbGl4LW57MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6IDEwMDA7fTEwMCV7c3Ryb2tlLWRhc2hvZmZzZXQ6IDA7fX0ueDIsLngxe3N0cm9rZS1kYXNoYXJyYXk6IDUwMDtzdHJva2UtZGFzaG9mZnNldDogMDthbmltYXRpb24tbmFtZTogbm90aWZsaXgteDthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7YW5pbWF0aW9uLWR1cmF0aW9uOiAyLjVzO2FuaW1hdGlvbi1kZWxheTouMnM7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDogaW5maW5pdGU7YW5pbWF0aW9uLWRpcmVjdGlvbjogbm9ybWFsO31Aa2V5ZnJhbWVzIG5vdGlmbGl4LXh7MCV7c3Ryb2tlLWRhc2hvZmZzZXQ6IDEwMDA7fTEwMCV7c3Ryb2tlLWRhc2hvZmZzZXQ6IDA7fX0uZG90e2FuaW1hdGlvbi1uYW1lOiBub3RpZmxpeC1kb3Q7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbi1vdXQ7YW5pbWF0aW9uLWR1cmF0aW9uOiAxLjI1czthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiBpbmZpbml0ZTthbmltYXRpb24tZGlyZWN0aW9uOiBub3JtYWw7fUBrZXlmcmFtZXMgbm90aWZsaXgtZG90ezAle3N0cm9rZS13aWR0aDogMDt9NTAle3N0cm9rZS13aWR0aDogMTI7fTEwMCV7c3Ryb2tlLXdpZHRoOiAwO319PC9zdHlsZT48L2RlZnM+PGc+PHBhdGggY2xhc3M9XCJkb3RcIiBkPVwiTTQ3Ljk3IDEzNS4wNWMzLjU5LDAgNi41LDIuOTEgNi41LDYuNSAwLDMuNTkgLTIuOTEsNi41IC02LjUsNi41IC0zLjU5LDAgLTYuNSwtMi45MSAtNi41LC02LjUgMCwtMy41OSAyLjkxLC02LjUgNi41LC02LjV6XCIvPjxwYXRoIGNsYXNzPVwibGluZSBuXCIgZD1cIk0xMC4xNCAxNDQuNzZsMCAtMC4yMiAwIC0wLjk2IDAgLTU2LjAzYzAsLTUuNjggLTQuNTQsLTQxLjM2IDM3LjgzLC00MS4zNiA0Mi4zNiwwIDM3LjgyLDM1LjY4IDM3LjgyLDQxLjM2bDAgNTcuMjFcIi8+PHBhdGggY2xhc3M9XCJsaW5lIHgxXCIgZD1cIk0xMTUuMDYgMTQ0LjQ5YzI0Ljk4LC0zMi42OCA0OS45NiwtNjUuMzUgNzQuOTQsLTk4LjAzXCIvPjxwYXRoIGNsYXNzPVwibGluZSB4MlwiIGQ9XCJNMTE0Ljg5IDQ2LjZjMjUuMDksMzIuNTggNTAuMTksNjUuMTcgNzUuMjksOTcuNzVcIi8+PC9nPjwvc3ZnPmA7XHJcbiAgICByZXR1cm4gbm90aWZsaXhJY29uO1xyXG59XHJcbi8vIE5vdGlmbGl4OiBMb2FkaW5nIFNWRyBub3RpZmxpeCBvZmYiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LTEhLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtMiEuL3BlcmZlY3Qtc2Nyb2xsYmFyLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi9wb3N0Y3NzLWxvYWRlci9zcmMvaW5kZXguanM/P3JlZi0tNi0yIS4vcGVyZmVjdC1zY3JvbGxiYXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS02LTEhLi4vLi4vcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTYtMiEuL3BlcmZlY3Qtc2Nyb2xsYmFyLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qIVxuICogcGVyZmVjdC1zY3JvbGxiYXIgdjEuNC4wXG4gKiAoYykgMjAxOCBIeXVuamUgSnVuXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLlBlcmZlY3RTY3JvbGxiYXIgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGdldChlbGVtZW50KSB7XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufVxuXG5mdW5jdGlvbiBzZXQoZWxlbWVudCwgb2JqKSB7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICB2YWwgPSB2YWwgKyBcInB4XCI7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHZhbDtcbiAgfVxuICByZXR1cm4gZWxlbWVudDtcbn1cblxuZnVuY3Rpb24gZGl2KGNsYXNzTmFtZSkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIHJldHVybiBkaXY7XG59XG5cbnZhciBlbE1hdGNoZXMgPVxuICB0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgKEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcbiAgICBFbGVtZW50LnByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3Rvcik7XG5cbmZ1bmN0aW9uIG1hdGNoZXMoZWxlbWVudCwgcXVlcnkpIHtcbiAgaWYgKCFlbE1hdGNoZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgbWF0Y2hpbmcgbWV0aG9kIHN1cHBvcnRlZCcpO1xuICB9XG5cbiAgcmV0dXJuIGVsTWF0Y2hlcy5jYWxsKGVsZW1lbnQsIHF1ZXJ5KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQucmVtb3ZlKSB7XG4gICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlKSB7XG4gICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXJ5Q2hpbGRyZW4oZWxlbWVudCwgc2VsZWN0b3IpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlbGVtZW50LmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIG1hdGNoZXMoY2hpbGQsIHNlbGVjdG9yKTsgfVxuICApO1xufVxuXG52YXIgY2xzID0ge1xuICBtYWluOiAncHMnLFxuICBlbGVtZW50OiB7XG4gICAgdGh1bWI6IGZ1bmN0aW9uICh4KSB7IHJldHVybiAoXCJwc19fdGh1bWItXCIgKyB4KTsgfSxcbiAgICByYWlsOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gKFwicHNfX3JhaWwtXCIgKyB4KTsgfSxcbiAgICBjb25zdW1pbmc6ICdwc19fY2hpbGQtLWNvbnN1bWUnLFxuICB9LFxuICBzdGF0ZToge1xuICAgIGZvY3VzOiAncHMtLWZvY3VzJyxcbiAgICBjbGlja2luZzogJ3BzLS1jbGlja2luZycsXG4gICAgYWN0aXZlOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gKFwicHMtLWFjdGl2ZS1cIiArIHgpOyB9LFxuICAgIHNjcm9sbGluZzogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIChcInBzLS1zY3JvbGxpbmctXCIgKyB4KTsgfSxcbiAgfSxcbn07XG5cbi8qXG4gKiBIZWxwZXIgbWV0aG9kc1xuICovXG52YXIgc2Nyb2xsaW5nQ2xhc3NUaW1lb3V0ID0geyB4OiBudWxsLCB5OiBudWxsIH07XG5cbmZ1bmN0aW9uIGFkZFNjcm9sbGluZ0NsYXNzKGksIHgpIHtcbiAgdmFyIGNsYXNzTGlzdCA9IGkuZWxlbWVudC5jbGFzc0xpc3Q7XG4gIHZhciBjbGFzc05hbWUgPSBjbHMuc3RhdGUuc2Nyb2xsaW5nKHgpO1xuXG4gIGlmIChjbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIGNsZWFyVGltZW91dChzY3JvbGxpbmdDbGFzc1RpbWVvdXRbeF0pO1xuICB9IGVsc2Uge1xuICAgIGNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVTY3JvbGxpbmdDbGFzcyhpLCB4KSB7XG4gIHNjcm9sbGluZ0NsYXNzVGltZW91dFt4XSA9IHNldFRpbWVvdXQoXG4gICAgZnVuY3Rpb24gKCkgeyByZXR1cm4gaS5pc0FsaXZlICYmIGkuZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscy5zdGF0ZS5zY3JvbGxpbmcoeCkpOyB9LFxuICAgIGkuc2V0dGluZ3Muc2Nyb2xsaW5nVGhyZXNob2xkXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNldFNjcm9sbGluZ0NsYXNzSW5zdGFudGx5KGksIHgpIHtcbiAgYWRkU2Nyb2xsaW5nQ2xhc3MoaSwgeCk7XG4gIHJlbW92ZVNjcm9sbGluZ0NsYXNzKGksIHgpO1xufVxuXG52YXIgRXZlbnRFbGVtZW50ID0gZnVuY3Rpb24gRXZlbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5oYW5kbGVycyA9IHt9O1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNFbXB0eTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5FdmVudEVsZW1lbnQucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiBiaW5kIChldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLmhhbmRsZXJzW2V2ZW50TmFtZV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tldmVudE5hbWVdID0gW107XG4gIH1cbiAgdGhpcy5oYW5kbGVyc1tldmVudE5hbWVdLnB1c2goaGFuZGxlcik7XG4gIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbGVtZW50LnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbiB1bmJpbmQgKGV2ZW50TmFtZSwgdGFyZ2V0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5oYW5kbGVyc1tldmVudE5hbWVdID0gdGhpcy5oYW5kbGVyc1tldmVudE5hbWVdLmZpbHRlcihmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIGlmICh0YXJnZXQgJiYgaGFuZGxlciAhPT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcyQxLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0pO1xufTtcblxuRXZlbnRFbGVtZW50LnByb3RvdHlwZS51bmJpbmRBbGwgPSBmdW5jdGlvbiB1bmJpbmRBbGwgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcyQxLmhhbmRsZXJzKSB7XG4gICAgdGhpcyQxLnVuYmluZChuYW1lKTtcbiAgfVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmlzRW1wdHkuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmhhbmRsZXJzKS5ldmVyeShcbiAgICBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiB0aGlzJDEuaGFuZGxlcnNba2V5XS5sZW5ndGggPT09IDA7IH1cbiAgKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFdmVudEVsZW1lbnQucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIEV2ZW50TWFuYWdlciA9IGZ1bmN0aW9uIEV2ZW50TWFuYWdlcigpIHtcbiAgdGhpcy5ldmVudEVsZW1lbnRzID0gW107XG59O1xuXG5FdmVudE1hbmFnZXIucHJvdG90eXBlLmV2ZW50RWxlbWVudCA9IGZ1bmN0aW9uIGV2ZW50RWxlbWVudCAoZWxlbWVudCkge1xuICB2YXIgZWUgPSB0aGlzLmV2ZW50RWxlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChlZSkgeyByZXR1cm4gZWUuZWxlbWVudCA9PT0gZWxlbWVudDsgfSlbMF07XG4gIGlmICghZWUpIHtcbiAgICBlZSA9IG5ldyBFdmVudEVsZW1lbnQoZWxlbWVudCk7XG4gICAgdGhpcy5ldmVudEVsZW1lbnRzLnB1c2goZWUpO1xuICB9XG4gIHJldHVybiBlZTtcbn07XG5cbkV2ZW50TWFuYWdlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uIGJpbmQgKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICB0aGlzLmV2ZW50RWxlbWVudChlbGVtZW50KS5iaW5kKGV2ZW50TmFtZSwgaGFuZGxlcik7XG59O1xuXG5FdmVudE1hbmFnZXIucHJvdG90eXBlLnVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZCAoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gIHZhciBlZSA9IHRoaXMuZXZlbnRFbGVtZW50KGVsZW1lbnQpO1xuICBlZS51bmJpbmQoZXZlbnROYW1lLCBoYW5kbGVyKTtcblxuICBpZiAoZWUuaXNFbXB0eSkge1xuICAgIC8vIHJlbW92ZVxuICAgIHRoaXMuZXZlbnRFbGVtZW50cy5zcGxpY2UodGhpcy5ldmVudEVsZW1lbnRzLmluZGV4T2YoZWUpLCAxKTtcbiAgfVxufTtcblxuRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS51bmJpbmRBbGwgPSBmdW5jdGlvbiB1bmJpbmRBbGwgKCkge1xuICB0aGlzLmV2ZW50RWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS51bmJpbmRBbGwoKTsgfSk7XG4gIHRoaXMuZXZlbnRFbGVtZW50cyA9IFtdO1xufTtcblxuRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24gb25jZSAoZWxlbWVudCwgZXZlbnROYW1lLCBoYW5kbGVyKSB7XG4gIHZhciBlZSA9IHRoaXMuZXZlbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgb25jZUhhbmRsZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgZWUudW5iaW5kKGV2ZW50TmFtZSwgb25jZUhhbmRsZXIpO1xuICAgIGhhbmRsZXIoZXZ0KTtcbiAgfTtcbiAgZWUuYmluZChldmVudE5hbWUsIG9uY2VIYW5kbGVyKTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50KG5hbWUpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cuQ3VzdG9tRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbmV3IEN1c3RvbUV2ZW50KG5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBldnQuaW5pdEN1c3RvbUV2ZW50KG5hbWUsIGZhbHNlLCBmYWxzZSwgdW5kZWZpbmVkKTtcbiAgICByZXR1cm4gZXZ0O1xuICB9XG59XG5cbnZhciBwcm9jZXNzU2Nyb2xsRGlmZiA9IGZ1bmN0aW9uKFxuICBpLFxuICBheGlzLFxuICBkaWZmLFxuICB1c2VTY3JvbGxpbmdDbGFzcyxcbiAgZm9yY2VGaXJlUmVhY2hFdmVudFxuKSB7XG4gIGlmICggdXNlU2Nyb2xsaW5nQ2xhc3MgPT09IHZvaWQgMCApIHVzZVNjcm9sbGluZ0NsYXNzID0gdHJ1ZTtcbiAgaWYgKCBmb3JjZUZpcmVSZWFjaEV2ZW50ID09PSB2b2lkIDAgKSBmb3JjZUZpcmVSZWFjaEV2ZW50ID0gZmFsc2U7XG5cbiAgdmFyIGZpZWxkcztcbiAgaWYgKGF4aXMgPT09ICd0b3AnKSB7XG4gICAgZmllbGRzID0gW1xuICAgICAgJ2NvbnRlbnRIZWlnaHQnLFxuICAgICAgJ2NvbnRhaW5lckhlaWdodCcsXG4gICAgICAnc2Nyb2xsVG9wJyxcbiAgICAgICd5JyxcbiAgICAgICd1cCcsXG4gICAgICAnZG93bicgXTtcbiAgfSBlbHNlIGlmIChheGlzID09PSAnbGVmdCcpIHtcbiAgICBmaWVsZHMgPSBbXG4gICAgICAnY29udGVudFdpZHRoJyxcbiAgICAgICdjb250YWluZXJXaWR0aCcsXG4gICAgICAnc2Nyb2xsTGVmdCcsXG4gICAgICAneCcsXG4gICAgICAnbGVmdCcsXG4gICAgICAncmlnaHQnIF07XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdBIHByb3BlciBheGlzIHNob3VsZCBiZSBwcm92aWRlZCcpO1xuICB9XG5cbiAgcHJvY2Vzc1Njcm9sbERpZmYkMShpLCBkaWZmLCBmaWVsZHMsIHVzZVNjcm9sbGluZ0NsYXNzLCBmb3JjZUZpcmVSZWFjaEV2ZW50KTtcbn07XG5cbmZ1bmN0aW9uIHByb2Nlc3NTY3JvbGxEaWZmJDEoXG4gIGksXG4gIGRpZmYsXG4gIHJlZixcbiAgdXNlU2Nyb2xsaW5nQ2xhc3MsXG4gIGZvcmNlRmlyZVJlYWNoRXZlbnRcbikge1xuICB2YXIgY29udGVudEhlaWdodCA9IHJlZlswXTtcbiAgdmFyIGNvbnRhaW5lckhlaWdodCA9IHJlZlsxXTtcbiAgdmFyIHNjcm9sbFRvcCA9IHJlZlsyXTtcbiAgdmFyIHkgPSByZWZbM107XG4gIHZhciB1cCA9IHJlZls0XTtcbiAgdmFyIGRvd24gPSByZWZbNV07XG4gIGlmICggdXNlU2Nyb2xsaW5nQ2xhc3MgPT09IHZvaWQgMCApIHVzZVNjcm9sbGluZ0NsYXNzID0gdHJ1ZTtcbiAgaWYgKCBmb3JjZUZpcmVSZWFjaEV2ZW50ID09PSB2b2lkIDAgKSBmb3JjZUZpcmVSZWFjaEV2ZW50ID0gZmFsc2U7XG5cbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG5cbiAgLy8gcmVzZXQgcmVhY2hcbiAgaS5yZWFjaFt5XSA9IG51bGw7XG5cbiAgLy8gMSBmb3Igc3VicGl4ZWwgcm91bmRpbmdcbiAgaWYgKGVsZW1lbnRbc2Nyb2xsVG9wXSA8IDEpIHtcbiAgICBpLnJlYWNoW3ldID0gJ3N0YXJ0JztcbiAgfVxuXG4gIC8vIDEgZm9yIHN1YnBpeGVsIHJvdW5kaW5nXG4gIGlmIChlbGVtZW50W3Njcm9sbFRvcF0gPiBpW2NvbnRlbnRIZWlnaHRdIC0gaVtjb250YWluZXJIZWlnaHRdIC0gMSkge1xuICAgIGkucmVhY2hbeV0gPSAnZW5kJztcbiAgfVxuXG4gIGlmIChkaWZmKSB7XG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KChcInBzLXNjcm9sbC1cIiArIHkpKSk7XG5cbiAgICBpZiAoZGlmZiA8IDApIHtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVhdGVFdmVudCgoXCJwcy1zY3JvbGwtXCIgKyB1cCkpKTtcbiAgICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQoY3JlYXRlRXZlbnQoKFwicHMtc2Nyb2xsLVwiICsgZG93bikpKTtcbiAgICB9XG5cbiAgICBpZiAodXNlU2Nyb2xsaW5nQ2xhc3MpIHtcbiAgICAgIHNldFNjcm9sbGluZ0NsYXNzSW5zdGFudGx5KGksIHkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpLnJlYWNoW3ldICYmIChkaWZmIHx8IGZvcmNlRmlyZVJlYWNoRXZlbnQpKSB7XG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUV2ZW50KChcInBzLVwiICsgeSArIFwiLXJlYWNoLVwiICsgKGkucmVhY2hbeV0pKSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvSW50KHgpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHgsIDEwKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBpc0VkaXRhYmxlKGVsKSB7XG4gIHJldHVybiAoXG4gICAgbWF0Y2hlcyhlbCwgJ2lucHV0LFtjb250ZW50ZWRpdGFibGVdJykgfHxcbiAgICBtYXRjaGVzKGVsLCAnc2VsZWN0LFtjb250ZW50ZWRpdGFibGVdJykgfHxcbiAgICBtYXRjaGVzKGVsLCAndGV4dGFyZWEsW2NvbnRlbnRlZGl0YWJsZV0nKSB8fFxuICAgIG1hdGNoZXMoZWwsICdidXR0b24sW2NvbnRlbnRlZGl0YWJsZV0nKVxuICApO1xufVxuXG5mdW5jdGlvbiBvdXRlcldpZHRoKGVsZW1lbnQpIHtcbiAgdmFyIHN0eWxlcyA9IGdldChlbGVtZW50KTtcbiAgcmV0dXJuIChcbiAgICB0b0ludChzdHlsZXMud2lkdGgpICtcbiAgICB0b0ludChzdHlsZXMucGFkZGluZ0xlZnQpICtcbiAgICB0b0ludChzdHlsZXMucGFkZGluZ1JpZ2h0KSArXG4gICAgdG9JbnQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCkgK1xuICAgIHRvSW50KHN0eWxlcy5ib3JkZXJSaWdodFdpZHRoKVxuICApO1xufVxuXG52YXIgZW52ID0ge1xuICBpc1dlYktpdDpcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ1dlYmtpdEFwcGVhcmFuY2UnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgc3VwcG9ydHNUb3VjaDpcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHxcbiAgICAgICh3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKSksXG4gIHN1cHBvcnRzSWVQb2ludGVyOlxuICAgIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzLFxuICBpc0Nocm9tZTpcbiAgICB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIC9DaHJvbWUvaS50ZXN0KG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50KSxcbn07XG5cbnZhciB1cGRhdGVHZW9tZXRyeSA9IGZ1bmN0aW9uKGkpIHtcbiAgdmFyIGVsZW1lbnQgPSBpLmVsZW1lbnQ7XG4gIHZhciByb3VuZGVkU2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7XG5cbiAgaS5jb250YWluZXJXaWR0aCA9IGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIGkuY29udGFpbmVySGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIGkuY29udGVudFdpZHRoID0gZWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgaS5jb250ZW50SGVpZ2h0ID0gZWxlbWVudC5zY3JvbGxIZWlnaHQ7XG5cbiAgaWYgKCFlbGVtZW50LmNvbnRhaW5zKGkuc2Nyb2xsYmFyWFJhaWwpKSB7XG4gICAgLy8gY2xlYW4gdXAgYW5kIGFwcGVuZFxuICAgIHF1ZXJ5Q2hpbGRyZW4oZWxlbWVudCwgY2xzLmVsZW1lbnQucmFpbCgneCcpKS5mb3JFYWNoKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gcmVtb3ZlKGVsKTsgfVxuICAgICk7XG4gICAgZWxlbWVudC5hcHBlbmRDaGlsZChpLnNjcm9sbGJhclhSYWlsKTtcbiAgfVxuICBpZiAoIWVsZW1lbnQuY29udGFpbnMoaS5zY3JvbGxiYXJZUmFpbCkpIHtcbiAgICAvLyBjbGVhbiB1cCBhbmQgYXBwZW5kXG4gICAgcXVlcnlDaGlsZHJlbihlbGVtZW50LCBjbHMuZWxlbWVudC5yYWlsKCd5JykpLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7IHJldHVybiByZW1vdmUoZWwpOyB9XG4gICAgKTtcbiAgICBlbGVtZW50LmFwcGVuZENoaWxkKGkuc2Nyb2xsYmFyWVJhaWwpO1xuICB9XG5cbiAgaWYgKFxuICAgICFpLnNldHRpbmdzLnN1cHByZXNzU2Nyb2xsWCAmJlxuICAgIGkuY29udGFpbmVyV2lkdGggKyBpLnNldHRpbmdzLnNjcm9sbFhNYXJnaW5PZmZzZXQgPCBpLmNvbnRlbnRXaWR0aFxuICApIHtcbiAgICBpLnNjcm9sbGJhclhBY3RpdmUgPSB0cnVlO1xuICAgIGkucmFpbFhXaWR0aCA9IGkuY29udGFpbmVyV2lkdGggLSBpLnJhaWxYTWFyZ2luV2lkdGg7XG4gICAgaS5yYWlsWFJhdGlvID0gaS5jb250YWluZXJXaWR0aCAvIGkucmFpbFhXaWR0aDtcbiAgICBpLnNjcm9sbGJhclhXaWR0aCA9IGdldFRodW1iU2l6ZShcbiAgICAgIGksXG4gICAgICB0b0ludChpLnJhaWxYV2lkdGggKiBpLmNvbnRhaW5lcldpZHRoIC8gaS5jb250ZW50V2lkdGgpXG4gICAgKTtcbiAgICBpLnNjcm9sbGJhclhMZWZ0ID0gdG9JbnQoXG4gICAgICAoaS5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgKyBlbGVtZW50LnNjcm9sbExlZnQpICpcbiAgICAgICAgKGkucmFpbFhXaWR0aCAtIGkuc2Nyb2xsYmFyWFdpZHRoKSAvXG4gICAgICAgIChpLmNvbnRlbnRXaWR0aCAtIGkuY29udGFpbmVyV2lkdGgpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpLnNjcm9sbGJhclhBY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChcbiAgICAhaS5zZXR0aW5ncy5zdXBwcmVzc1Njcm9sbFkgJiZcbiAgICBpLmNvbnRhaW5lckhlaWdodCArIGkuc2V0dGluZ3Muc2Nyb2xsWU1hcmdpbk9mZnNldCA8IGkuY29udGVudEhlaWdodFxuICApIHtcbiAgICBpLnNjcm9sbGJhcllBY3RpdmUgPSB0cnVlO1xuICAgIGkucmFpbFlIZWlnaHQgPSBpLmNvbnRhaW5lckhlaWdodCAtIGkucmFpbFlNYXJnaW5IZWlnaHQ7XG4gICAgaS5yYWlsWVJhdGlvID0gaS5jb250YWluZXJIZWlnaHQgLyBpLnJhaWxZSGVpZ2h0O1xuICAgIGkuc2Nyb2xsYmFyWUhlaWdodCA9IGdldFRodW1iU2l6ZShcbiAgICAgIGksXG4gICAgICB0b0ludChpLnJhaWxZSGVpZ2h0ICogaS5jb250YWluZXJIZWlnaHQgLyBpLmNvbnRlbnRIZWlnaHQpXG4gICAgKTtcbiAgICBpLnNjcm9sbGJhcllUb3AgPSB0b0ludChcbiAgICAgIHJvdW5kZWRTY3JvbGxUb3AgKlxuICAgICAgICAoaS5yYWlsWUhlaWdodCAtIGkuc2Nyb2xsYmFyWUhlaWdodCkgL1xuICAgICAgICAoaS5jb250ZW50SGVpZ2h0IC0gaS5jb250YWluZXJIZWlnaHQpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBpLnNjcm9sbGJhcllBY3RpdmUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpLnNjcm9sbGJhclhMZWZ0ID49IGkucmFpbFhXaWR0aCAtIGkuc2Nyb2xsYmFyWFdpZHRoKSB7XG4gICAgaS5zY3JvbGxiYXJYTGVmdCA9IGkucmFpbFhXaWR0aCAtIGkuc2Nyb2xsYmFyWFdpZHRoO1xuICB9XG4gIGlmIChpLnNjcm9sbGJhcllUb3AgPj0gaS5yYWlsWUhlaWdodCAtIGkuc2Nyb2xsYmFyWUhlaWdodCkge1xuICAgIGkuc2Nyb2xsYmFyWVRvcCA9IGkucmFpbFlIZWlnaHQgLSBpLnNjcm9sbGJhcllIZWlnaHQ7XG4gIH1cblxuICB1cGRhdGVDc3MoZWxlbWVudCwgaSk7XG5cbiAgaWYgKGkuc2Nyb2xsYmFyWEFjdGl2ZSkge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbHMuc3RhdGUuYWN0aXZlKCd4JykpO1xuICB9IGVsc2Uge1xuICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbHMuc3RhdGUuYWN0aXZlKCd4JykpO1xuICAgIGkuc2Nyb2xsYmFyWFdpZHRoID0gMDtcbiAgICBpLnNjcm9sbGJhclhMZWZ0ID0gMDtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgPSAwO1xuICB9XG4gIGlmIChpLnNjcm9sbGJhcllBY3RpdmUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzLnN0YXRlLmFjdGl2ZSgneScpKTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY2xzLnN0YXRlLmFjdGl2ZSgneScpKTtcbiAgICBpLnNjcm9sbGJhcllIZWlnaHQgPSAwO1xuICAgIGkuc2Nyb2xsYmFyWVRvcCA9IDA7XG4gICAgZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRUaHVtYlNpemUoaSwgdGh1bWJTaXplKSB7XG4gIGlmIChpLnNldHRpbmdzLm1pblNjcm9sbGJhckxlbmd0aCkge1xuICAgIHRodW1iU2l6ZSA9IE1hdGgubWF4KHRodW1iU2l6ZSwgaS5zZXR0aW5ncy5taW5TY3JvbGxiYXJMZW5ndGgpO1xuICB9XG4gIGlmIChpLnNldHRpbmdzLm1heFNjcm9sbGJhckxlbmd0aCkge1xuICAgIHRodW1iU2l6ZSA9IE1hdGgubWluKHRodW1iU2l6ZSwgaS5zZXR0aW5ncy5tYXhTY3JvbGxiYXJMZW5ndGgpO1xuICB9XG4gIHJldHVybiB0aHVtYlNpemU7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNzcyhlbGVtZW50LCBpKSB7XG4gIHZhciB4UmFpbE9mZnNldCA9IHsgd2lkdGg6IGkucmFpbFhXaWR0aCB9O1xuICB2YXIgcm91bmRlZFNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApO1xuXG4gIGlmIChpLmlzUnRsKSB7XG4gICAgeFJhaWxPZmZzZXQubGVmdCA9XG4gICAgICBpLm5lZ2F0aXZlU2Nyb2xsQWRqdXN0bWVudCArXG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgK1xuICAgICAgaS5jb250YWluZXJXaWR0aCAtXG4gICAgICBpLmNvbnRlbnRXaWR0aDtcbiAgfSBlbHNlIHtcbiAgICB4UmFpbE9mZnNldC5sZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICB9XG4gIGlmIChpLmlzU2Nyb2xsYmFyWFVzaW5nQm90dG9tKSB7XG4gICAgeFJhaWxPZmZzZXQuYm90dG9tID0gaS5zY3JvbGxiYXJYQm90dG9tIC0gcm91bmRlZFNjcm9sbFRvcDtcbiAgfSBlbHNlIHtcbiAgICB4UmFpbE9mZnNldC50b3AgPSBpLnNjcm9sbGJhclhUb3AgKyByb3VuZGVkU2Nyb2xsVG9wO1xuICB9XG4gIHNldChpLnNjcm9sbGJhclhSYWlsLCB4UmFpbE9mZnNldCk7XG5cbiAgdmFyIHlSYWlsT2Zmc2V0ID0geyB0b3A6IHJvdW5kZWRTY3JvbGxUb3AsIGhlaWdodDogaS5yYWlsWUhlaWdodCB9O1xuICBpZiAoaS5pc1Njcm9sbGJhcllVc2luZ1JpZ2h0KSB7XG4gICAgaWYgKGkuaXNSdGwpIHtcbiAgICAgIHlSYWlsT2Zmc2V0LnJpZ2h0ID1cbiAgICAgICAgaS5jb250ZW50V2lkdGggLVxuICAgICAgICAoaS5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgKyBlbGVtZW50LnNjcm9sbExlZnQpIC1cbiAgICAgICAgaS5zY3JvbGxiYXJZUmlnaHQgLVxuICAgICAgICBpLnNjcm9sbGJhcllPdXRlcldpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB5UmFpbE9mZnNldC5yaWdodCA9IGkuc2Nyb2xsYmFyWVJpZ2h0IC0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoaS5pc1J0bCkge1xuICAgICAgeVJhaWxPZmZzZXQubGVmdCA9XG4gICAgICAgIGkubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ICtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0ICtcbiAgICAgICAgaS5jb250YWluZXJXaWR0aCAqIDIgLVxuICAgICAgICBpLmNvbnRlbnRXaWR0aCAtXG4gICAgICAgIGkuc2Nyb2xsYmFyWUxlZnQgLVxuICAgICAgICBpLnNjcm9sbGJhcllPdXRlcldpZHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB5UmFpbE9mZnNldC5sZWZ0ID0gaS5zY3JvbGxiYXJZTGVmdCArIGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICB9XG4gIH1cbiAgc2V0KGkuc2Nyb2xsYmFyWVJhaWwsIHlSYWlsT2Zmc2V0KTtcblxuICBzZXQoaS5zY3JvbGxiYXJYLCB7XG4gICAgbGVmdDogaS5zY3JvbGxiYXJYTGVmdCxcbiAgICB3aWR0aDogaS5zY3JvbGxiYXJYV2lkdGggLSBpLnJhaWxCb3JkZXJYV2lkdGgsXG4gIH0pO1xuICBzZXQoaS5zY3JvbGxiYXJZLCB7XG4gICAgdG9wOiBpLnNjcm9sbGJhcllUb3AsXG4gICAgaGVpZ2h0OiBpLnNjcm9sbGJhcllIZWlnaHQgLSBpLnJhaWxCb3JkZXJZV2lkdGgsXG4gIH0pO1xufVxuXG52YXIgY2xpY2tSYWlsID0gZnVuY3Rpb24oaSkge1xuICBpLmV2ZW50LmJpbmQoaS5zY3JvbGxiYXJZLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICBpLmV2ZW50LmJpbmQoaS5zY3JvbGxiYXJZUmFpbCwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHBvc2l0aW9uVG9wID1cbiAgICAgIGUucGFnZVkgLVxuICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0IC1cbiAgICAgIGkuc2Nyb2xsYmFyWVJhaWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIHZhciBkaXJlY3Rpb24gPSBwb3NpdGlvblRvcCA+IGkuc2Nyb2xsYmFyWVRvcCA/IDEgOiAtMTtcblxuICAgIGkuZWxlbWVudC5zY3JvbGxUb3AgKz0gZGlyZWN0aW9uICogaS5jb250YWluZXJIZWlnaHQ7XG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcblxuICBpLmV2ZW50LmJpbmQoaS5zY3JvbGxiYXJYLCAnbW91c2Vkb3duJywgZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuc3RvcFByb3BhZ2F0aW9uKCk7IH0pO1xuICBpLmV2ZW50LmJpbmQoaS5zY3JvbGxiYXJYUmFpbCwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHBvc2l0aW9uTGVmdCA9XG4gICAgICBlLnBhZ2VYIC1cbiAgICAgIHdpbmRvdy5wYWdlWE9mZnNldCAtXG4gICAgICBpLnNjcm9sbGJhclhSYWlsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG4gICAgdmFyIGRpcmVjdGlvbiA9IHBvc2l0aW9uTGVmdCA+IGkuc2Nyb2xsYmFyWExlZnQgPyAxIDogLTE7XG5cbiAgICBpLmVsZW1lbnQuc2Nyb2xsTGVmdCArPSBkaXJlY3Rpb24gKiBpLmNvbnRhaW5lcldpZHRoO1xuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfSk7XG59O1xuXG52YXIgZHJhZ1RodW1iID0gZnVuY3Rpb24oaSkge1xuICBiaW5kTW91c2VTY3JvbGxIYW5kbGVyKGksIFtcbiAgICAnY29udGFpbmVyV2lkdGgnLFxuICAgICdjb250ZW50V2lkdGgnLFxuICAgICdwYWdlWCcsXG4gICAgJ3JhaWxYV2lkdGgnLFxuICAgICdzY3JvbGxiYXJYJyxcbiAgICAnc2Nyb2xsYmFyWFdpZHRoJyxcbiAgICAnc2Nyb2xsTGVmdCcsXG4gICAgJ3gnLFxuICAgICdzY3JvbGxiYXJYUmFpbCcgXSk7XG4gIGJpbmRNb3VzZVNjcm9sbEhhbmRsZXIoaSwgW1xuICAgICdjb250YWluZXJIZWlnaHQnLFxuICAgICdjb250ZW50SGVpZ2h0JyxcbiAgICAncGFnZVknLFxuICAgICdyYWlsWUhlaWdodCcsXG4gICAgJ3Njcm9sbGJhclknLFxuICAgICdzY3JvbGxiYXJZSGVpZ2h0JyxcbiAgICAnc2Nyb2xsVG9wJyxcbiAgICAneScsXG4gICAgJ3Njcm9sbGJhcllSYWlsJyBdKTtcbn07XG5cbmZ1bmN0aW9uIGJpbmRNb3VzZVNjcm9sbEhhbmRsZXIoXG4gIGksXG4gIHJlZlxuKSB7XG4gIHZhciBjb250YWluZXJIZWlnaHQgPSByZWZbMF07XG4gIHZhciBjb250ZW50SGVpZ2h0ID0gcmVmWzFdO1xuICB2YXIgcGFnZVkgPSByZWZbMl07XG4gIHZhciByYWlsWUhlaWdodCA9IHJlZlszXTtcbiAgdmFyIHNjcm9sbGJhclkgPSByZWZbNF07XG4gIHZhciBzY3JvbGxiYXJZSGVpZ2h0ID0gcmVmWzVdO1xuICB2YXIgc2Nyb2xsVG9wID0gcmVmWzZdO1xuICB2YXIgeSA9IHJlZls3XTtcbiAgdmFyIHNjcm9sbGJhcllSYWlsID0gcmVmWzhdO1xuXG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuXG4gIHZhciBzdGFydGluZ1Njcm9sbFRvcCA9IG51bGw7XG4gIHZhciBzdGFydGluZ01vdXNlUGFnZVkgPSBudWxsO1xuICB2YXIgc2Nyb2xsQnkgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIG1vdXNlTW92ZUhhbmRsZXIoZSkge1xuICAgIGVsZW1lbnRbc2Nyb2xsVG9wXSA9XG4gICAgICBzdGFydGluZ1Njcm9sbFRvcCArIHNjcm9sbEJ5ICogKGVbcGFnZVldIC0gc3RhcnRpbmdNb3VzZVBhZ2VZKTtcbiAgICBhZGRTY3JvbGxpbmdDbGFzcyhpLCB5KTtcbiAgICB1cGRhdGVHZW9tZXRyeShpKTtcblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbW91c2VVcEhhbmRsZXIoKSB7XG4gICAgcmVtb3ZlU2Nyb2xsaW5nQ2xhc3MoaSwgeSk7XG4gICAgaVtzY3JvbGxiYXJZUmFpbF0uY2xhc3NMaXN0LnJlbW92ZShjbHMuc3RhdGUuY2xpY2tpbmcpO1xuICAgIGkuZXZlbnQudW5iaW5kKGkub3duZXJEb2N1bWVudCwgJ21vdXNlbW92ZScsIG1vdXNlTW92ZUhhbmRsZXIpO1xuICB9XG5cbiAgaS5ldmVudC5iaW5kKGlbc2Nyb2xsYmFyWV0sICdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgIHN0YXJ0aW5nU2Nyb2xsVG9wID0gZWxlbWVudFtzY3JvbGxUb3BdO1xuICAgIHN0YXJ0aW5nTW91c2VQYWdlWSA9IGVbcGFnZVldO1xuICAgIHNjcm9sbEJ5ID1cbiAgICAgIChpW2NvbnRlbnRIZWlnaHRdIC0gaVtjb250YWluZXJIZWlnaHRdKSAvXG4gICAgICAoaVtyYWlsWUhlaWdodF0gLSBpW3Njcm9sbGJhcllIZWlnaHRdKTtcblxuICAgIGkuZXZlbnQuYmluZChpLm93bmVyRG9jdW1lbnQsICdtb3VzZW1vdmUnLCBtb3VzZU1vdmVIYW5kbGVyKTtcbiAgICBpLmV2ZW50Lm9uY2UoaS5vd25lckRvY3VtZW50LCAnbW91c2V1cCcsIG1vdXNlVXBIYW5kbGVyKTtcblxuICAgIGlbc2Nyb2xsYmFyWVJhaWxdLmNsYXNzTGlzdC5hZGQoY2xzLnN0YXRlLmNsaWNraW5nKTtcblxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9KTtcbn1cblxudmFyIGtleWJvYXJkID0gZnVuY3Rpb24oaSkge1xuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcblxuICB2YXIgZWxlbWVudEhvdmVyZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXRjaGVzKGVsZW1lbnQsICc6aG92ZXInKTsgfTtcbiAgdmFyIHNjcm9sbGJhckZvY3VzZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBtYXRjaGVzKGkuc2Nyb2xsYmFyWCwgJzpmb2N1cycpIHx8IG1hdGNoZXMoaS5zY3JvbGxiYXJZLCAnOmZvY3VzJyk7IH07XG5cbiAgZnVuY3Rpb24gc2hvdWxkUHJldmVudERlZmF1bHQoZGVsdGFYLCBkZWx0YVkpIHtcbiAgICB2YXIgc2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7XG4gICAgaWYgKGRlbHRhWCA9PT0gMCkge1xuICAgICAgaWYgKCFpLnNjcm9sbGJhcllBY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAoc2Nyb2xsVG9wID09PSAwICYmIGRlbHRhWSA+IDApIHx8XG4gICAgICAgIChzY3JvbGxUb3AgPj0gaS5jb250ZW50SGVpZ2h0IC0gaS5jb250YWluZXJIZWlnaHQgJiYgZGVsdGFZIDwgMClcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gIWkuc2V0dGluZ3Mud2hlZWxQcm9wYWdhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc2Nyb2xsTGVmdCA9IGVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICBpZiAoZGVsdGFZID09PSAwKSB7XG4gICAgICBpZiAoIWkuc2Nyb2xsYmFyWEFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIChzY3JvbGxMZWZ0ID09PSAwICYmIGRlbHRhWCA8IDApIHx8XG4gICAgICAgIChzY3JvbGxMZWZ0ID49IGkuY29udGVudFdpZHRoIC0gaS5jb250YWluZXJXaWR0aCAmJiBkZWx0YVggPiAwKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAhaS5zZXR0aW5ncy53aGVlbFByb3BhZ2F0aW9uO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGkuZXZlbnQuYmluZChpLm93bmVyRG9jdW1lbnQsICdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoXG4gICAgICAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQgJiYgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgfHxcbiAgICAgIGUuZGVmYXVsdFByZXZlbnRlZFxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZWxlbWVudEhvdmVyZWQoKSAmJiAhc2Nyb2xsYmFyRm9jdXNlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICA/IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgIDogaS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIGlmIChhY3RpdmVFbGVtZW50LnRhZ05hbWUgPT09ICdJRlJBTUUnKSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBhY3RpdmVFbGVtZW50LmNvbnRlbnREb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZ28gZGVlcGVyIGlmIGVsZW1lbnQgaXMgYSB3ZWJjb21wb25lbnRcbiAgICAgICAgd2hpbGUgKGFjdGl2ZUVsZW1lbnQuc2hhZG93Um9vdCkge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBhY3RpdmVFbGVtZW50LnNoYWRvd1Jvb3QuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRWRpdGFibGUoYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWx0YVggPSAwO1xuICAgIHZhciBkZWx0YVkgPSAwO1xuXG4gICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICBjYXNlIDM3OiAvLyBsZWZ0XG4gICAgICAgIGlmIChlLm1ldGFLZXkpIHtcbiAgICAgICAgICBkZWx0YVggPSAtaS5jb250ZW50V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgICBkZWx0YVggPSAtaS5jb250YWluZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YVggPSAtMzA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM4OiAvLyB1cFxuICAgICAgICBpZiAoZS5tZXRhS2V5KSB7XG4gICAgICAgICAgZGVsdGFZID0gaS5jb250ZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKGUuYWx0S2V5KSB7XG4gICAgICAgICAgZGVsdGFZID0gaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsdGFZID0gMzA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM5OiAvLyByaWdodFxuICAgICAgICBpZiAoZS5tZXRhS2V5KSB7XG4gICAgICAgICAgZGVsdGFYID0gaS5jb250ZW50V2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5hbHRLZXkpIHtcbiAgICAgICAgICBkZWx0YVggPSBpLmNvbnRhaW5lcldpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbHRhWCA9IDMwO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0MDogLy8gZG93blxuICAgICAgICBpZiAoZS5tZXRhS2V5KSB7XG4gICAgICAgICAgZGVsdGFZID0gLWkuY29udGVudEhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChlLmFsdEtleSkge1xuICAgICAgICAgIGRlbHRhWSA9IC1pLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YVkgPSAtMzA7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMyOiAvLyBzcGFjZSBiYXJcbiAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICBkZWx0YVkgPSBpLmNvbnRhaW5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWx0YVkgPSAtaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDMzOiAvLyBwYWdlIHVwXG4gICAgICAgIGRlbHRhWSA9IGkuY29udGFpbmVySGVpZ2h0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzQ6IC8vIHBhZ2UgZG93blxuICAgICAgICBkZWx0YVkgPSAtaS5jb250YWluZXJIZWlnaHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzNjogLy8gaG9tZVxuICAgICAgICBkZWx0YVkgPSBpLmNvbnRlbnRIZWlnaHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzNTogLy8gZW5kXG4gICAgICAgIGRlbHRhWSA9IC1pLmNvbnRlbnRIZWlnaHQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpLnNldHRpbmdzLnN1cHByZXNzU2Nyb2xsWCAmJiBkZWx0YVggIT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGkuc2V0dGluZ3Muc3VwcHJlc3NTY3JvbGxZICYmIGRlbHRhWSAhPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuc2Nyb2xsVG9wIC09IGRlbHRhWTtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgKz0gZGVsdGFYO1xuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuXG4gICAgaWYgKHNob3VsZFByZXZlbnREZWZhdWx0KGRlbHRhWCwgZGVsdGFZKSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgd2hlZWwgPSBmdW5jdGlvbihpKSB7XG4gIHZhciBlbGVtZW50ID0gaS5lbGVtZW50O1xuXG4gIGZ1bmN0aW9uIHNob3VsZFByZXZlbnREZWZhdWx0KGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgdmFyIHJvdW5kZWRTY3JvbGxUb3AgPSBNYXRoLmZsb29yKGVsZW1lbnQuc2Nyb2xsVG9wKTtcbiAgICB2YXIgaXNUb3AgPSBlbGVtZW50LnNjcm9sbFRvcCA9PT0gMDtcbiAgICB2YXIgaXNCb3R0b20gPVxuICAgICAgcm91bmRlZFNjcm9sbFRvcCArIGVsZW1lbnQub2Zmc2V0SGVpZ2h0ID09PSBlbGVtZW50LnNjcm9sbEhlaWdodDtcbiAgICB2YXIgaXNMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0ID09PSAwO1xuICAgIHZhciBpc1JpZ2h0ID1cbiAgICAgIGVsZW1lbnQuc2Nyb2xsTGVmdCArIGVsZW1lbnQub2Zmc2V0V2lkdGggPT09IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XG5cbiAgICB2YXIgaGl0c0JvdW5kO1xuXG4gICAgLy8gcGljayBheGlzIHdpdGggcHJpbWFyeSBkaXJlY3Rpb25cbiAgICBpZiAoTWF0aC5hYnMoZGVsdGFZKSA+IE1hdGguYWJzKGRlbHRhWCkpIHtcbiAgICAgIGhpdHNCb3VuZCA9IGlzVG9wIHx8IGlzQm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXRzQm91bmQgPSBpc0xlZnQgfHwgaXNSaWdodDtcbiAgICB9XG5cbiAgICByZXR1cm4gaGl0c0JvdW5kID8gIWkuc2V0dGluZ3Mud2hlZWxQcm9wYWdhdGlvbiA6IHRydWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWx0YUZyb21FdmVudChlKSB7XG4gICAgdmFyIGRlbHRhWCA9IGUuZGVsdGFYO1xuICAgIHZhciBkZWx0YVkgPSAtMSAqIGUuZGVsdGFZO1xuXG4gICAgaWYgKHR5cGVvZiBkZWx0YVggPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiBkZWx0YVkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBPUyBYIFNhZmFyaVxuICAgICAgZGVsdGFYID0gLTEgKiBlLndoZWVsRGVsdGFYIC8gNjtcbiAgICAgIGRlbHRhWSA9IGUud2hlZWxEZWx0YVkgLyA2O1xuICAgIH1cblxuICAgIGlmIChlLmRlbHRhTW9kZSAmJiBlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgLy8gRmlyZWZveCBpbiBkZWx0YU1vZGUgMTogTGluZSBzY3JvbGxpbmdcbiAgICAgIGRlbHRhWCAqPSAxMDtcbiAgICAgIGRlbHRhWSAqPSAxMDtcbiAgICB9XG5cbiAgICBpZiAoZGVsdGFYICE9PSBkZWx0YVggJiYgZGVsdGFZICE9PSBkZWx0YVkgLyogTmFOIGNoZWNrcyAqLykge1xuICAgICAgLy8gSUUgaW4gc29tZSBtb3VzZSBkcml2ZXJzXG4gICAgICBkZWx0YVggPSAwO1xuICAgICAgZGVsdGFZID0gZS53aGVlbERlbHRhO1xuICAgIH1cblxuICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAvLyByZXZlcnNlIGF4aXMgd2l0aCBzaGlmdCBrZXlcbiAgICAgIHJldHVybiBbLWRlbHRhWSwgLWRlbHRhWF07XG4gICAgfVxuICAgIHJldHVybiBbZGVsdGFYLCBkZWx0YVldO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdWxkQmVDb25zdW1lZEJ5Q2hpbGQodGFyZ2V0LCBkZWx0YVgsIGRlbHRhWSkge1xuICAgIC8vIEZJWE1FOiB0aGlzIGlzIGEgd29ya2Fyb3VuZCBmb3IgPHNlbGVjdD4gaXNzdWUgaW4gRkYgYW5kIElFICM1NzFcbiAgICBpZiAoIWVudi5pc1dlYktpdCAmJiBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NlbGVjdDpmb2N1cycpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnQuY29udGFpbnModGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBjdXJzb3IgPSB0YXJnZXQ7XG5cbiAgICB3aGlsZSAoY3Vyc29yICYmIGN1cnNvciAhPT0gZWxlbWVudCkge1xuICAgICAgaWYgKGN1cnNvci5jbGFzc0xpc3QuY29udGFpbnMoY2xzLmVsZW1lbnQuY29uc3VtaW5nKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN0eWxlID0gZ2V0KGN1cnNvcik7XG4gICAgICB2YXIgb3ZlcmZsb3cgPSBbc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZXS5qb2luKFxuICAgICAgICAnJ1xuICAgICAgKTtcblxuICAgICAgLy8gaWYgc2Nyb2xsYWJsZVxuICAgICAgaWYgKG92ZXJmbG93Lm1hdGNoKC8oc2Nyb2xsfGF1dG8pLykpIHtcbiAgICAgICAgdmFyIG1heFNjcm9sbFRvcCA9IGN1cnNvci5zY3JvbGxIZWlnaHQgLSBjdXJzb3IuY2xpZW50SGVpZ2h0O1xuICAgICAgICBpZiAobWF4U2Nyb2xsVG9wID4gMCkge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbFRvcCA9PT0gMCAmJiBkZWx0YVkgPiAwKSAmJlxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsVG9wID09PSBtYXhTY3JvbGxUb3AgJiYgZGVsdGFZIDwgMClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbWF4U2Nyb2xsTGVmdCA9IGN1cnNvci5zY3JvbGxXaWR0aCAtIGN1cnNvci5jbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKG1heFNjcm9sbExlZnQgPiAwKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsTGVmdCA9PT0gMCAmJiBkZWx0YVggPCAwKSAmJlxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsTGVmdCA9PT0gbWF4U2Nyb2xsTGVmdCAmJiBkZWx0YVggPiAwKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN1cnNvciA9IGN1cnNvci5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdXNld2hlZWxIYW5kbGVyKGUpIHtcbiAgICB2YXIgcmVmID0gZ2V0RGVsdGFGcm9tRXZlbnQoZSk7XG4gICAgdmFyIGRlbHRhWCA9IHJlZlswXTtcbiAgICB2YXIgZGVsdGFZID0gcmVmWzFdO1xuXG4gICAgaWYgKHNob3VsZEJlQ29uc3VtZWRCeUNoaWxkKGUudGFyZ2V0LCBkZWx0YVgsIGRlbHRhWSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgc2hvdWxkUHJldmVudCA9IGZhbHNlO1xuICAgIGlmICghaS5zZXR0aW5ncy51c2VCb3RoV2hlZWxBeGVzKSB7XG4gICAgICAvLyBkZWx0YVggd2lsbCBvbmx5IGJlIHVzZWQgZm9yIGhvcml6b250YWwgc2Nyb2xsaW5nIGFuZCBkZWx0YVkgd2lsbFxuICAgICAgLy8gb25seSBiZSB1c2VkIGZvciB2ZXJ0aWNhbCBzY3JvbGxpbmcgLSB0aGlzIGlzIHRoZSBkZWZhdWx0XG4gICAgICBlbGVtZW50LnNjcm9sbFRvcCAtPSBkZWx0YVkgKiBpLnNldHRpbmdzLndoZWVsU3BlZWQ7XG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgKz0gZGVsdGFYICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgIH0gZWxzZSBpZiAoaS5zY3JvbGxiYXJZQWN0aXZlICYmICFpLnNjcm9sbGJhclhBY3RpdmUpIHtcbiAgICAgIC8vIG9ubHkgdmVydGljYWwgc2Nyb2xsYmFyIGlzIGFjdGl2ZSBhbmQgdXNlQm90aFdoZWVsQXhlcyBvcHRpb24gaXNcbiAgICAgIC8vIGFjdGl2ZSwgc28gbGV0J3Mgc2Nyb2xsIHZlcnRpY2FsIGJhciB1c2luZyBib3RoIG1vdXNlIHdoZWVsIGF4ZXNcbiAgICAgIGlmIChkZWx0YVkpIHtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgLT0gZGVsdGFZICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgKz0gZGVsdGFYICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgICAgfVxuICAgICAgc2hvdWxkUHJldmVudCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChpLnNjcm9sbGJhclhBY3RpdmUgJiYgIWkuc2Nyb2xsYmFyWUFjdGl2ZSkge1xuICAgICAgLy8gdXNlQm90aFdoZWVsQXhlcyBhbmQgb25seSBob3Jpem9udGFsIGJhciBpcyBhY3RpdmUsIHNvIHVzZSBib3RoXG4gICAgICAvLyB3aGVlbCBheGVzIGZvciBob3Jpem9udGFsIGJhclxuICAgICAgaWYgKGRlbHRhWCkge1xuICAgICAgICBlbGVtZW50LnNjcm9sbExlZnQgKz0gZGVsdGFYICogaS5zZXR0aW5ncy53aGVlbFNwZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5zY3JvbGxMZWZ0IC09IGRlbHRhWSAqIGkuc2V0dGluZ3Mud2hlZWxTcGVlZDtcbiAgICAgIH1cbiAgICAgIHNob3VsZFByZXZlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHVwZGF0ZUdlb21ldHJ5KGkpO1xuXG4gICAgc2hvdWxkUHJldmVudCA9IHNob3VsZFByZXZlbnQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQoZGVsdGFYLCBkZWx0YVkpO1xuICAgIGlmIChzaG91bGRQcmV2ZW50ICYmICFlLmN0cmxLZXkpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cub253aGVlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpLmV2ZW50LmJpbmQoZWxlbWVudCwgJ3doZWVsJywgbW91c2V3aGVlbEhhbmRsZXIpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cub25tb3VzZXdoZWVsICE9PSAndW5kZWZpbmVkJykge1xuICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAnbW91c2V3aGVlbCcsIG1vdXNld2hlZWxIYW5kbGVyKTtcbiAgfVxufTtcblxudmFyIHRvdWNoID0gZnVuY3Rpb24oaSkge1xuICBpZiAoIWVudi5zdXBwb3J0c1RvdWNoICYmICFlbnYuc3VwcG9ydHNJZVBvaW50ZXIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZWxlbWVudCA9IGkuZWxlbWVudDtcblxuICBmdW5jdGlvbiBzaG91bGRQcmV2ZW50KGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgdmFyIHNjcm9sbFRvcCA9IE1hdGguZmxvb3IoZWxlbWVudC5zY3JvbGxUb3ApO1xuICAgIHZhciBzY3JvbGxMZWZ0ID0gZWxlbWVudC5zY3JvbGxMZWZ0O1xuICAgIHZhciBtYWduaXR1ZGVYID0gTWF0aC5hYnMoZGVsdGFYKTtcbiAgICB2YXIgbWFnbml0dWRlWSA9IE1hdGguYWJzKGRlbHRhWSk7XG5cbiAgICBpZiAobWFnbml0dWRlWSA+IG1hZ25pdHVkZVgpIHtcbiAgICAgIC8vIHVzZXIgaXMgcGVyaGFwcyB0cnlpbmcgdG8gc3dpcGUgdXAvZG93biB0aGUgcGFnZVxuXG4gICAgICBpZiAoXG4gICAgICAgIChkZWx0YVkgPCAwICYmIHNjcm9sbFRvcCA9PT0gaS5jb250ZW50SGVpZ2h0IC0gaS5jb250YWluZXJIZWlnaHQpIHx8XG4gICAgICAgIChkZWx0YVkgPiAwICYmIHNjcm9sbFRvcCA9PT0gMClcbiAgICAgICkge1xuICAgICAgICAvLyBzZXQgcHJldmVudCBmb3IgbW9iaWxlIENocm9tZSByZWZyZXNoXG4gICAgICAgIHJldHVybiB3aW5kb3cuc2Nyb2xsWSA9PT0gMCAmJiBkZWx0YVkgPiAwICYmIGVudi5pc0Nocm9tZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1hZ25pdHVkZVggPiBtYWduaXR1ZGVZKSB7XG4gICAgICAvLyB1c2VyIGlzIHBlcmhhcHMgdHJ5aW5nIHRvIHN3aXBlIGxlZnQvcmlnaHQgYWNyb3NzIHRoZSBwYWdlXG5cbiAgICAgIGlmIChcbiAgICAgICAgKGRlbHRhWCA8IDAgJiYgc2Nyb2xsTGVmdCA9PT0gaS5jb250ZW50V2lkdGggLSBpLmNvbnRhaW5lcldpZHRoKSB8fFxuICAgICAgICAoZGVsdGFYID4gMCAmJiBzY3JvbGxMZWZ0ID09PSAwKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlUb3VjaE1vdmUoZGlmZmVyZW5jZVgsIGRpZmZlcmVuY2VZKSB7XG4gICAgZWxlbWVudC5zY3JvbGxUb3AgLT0gZGlmZmVyZW5jZVk7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0IC09IGRpZmZlcmVuY2VYO1xuXG4gICAgdXBkYXRlR2VvbWV0cnkoaSk7XG4gIH1cblxuICB2YXIgc3RhcnRPZmZzZXQgPSB7fTtcbiAgdmFyIHN0YXJ0VGltZSA9IDA7XG4gIHZhciBzcGVlZCA9IHt9O1xuICB2YXIgZWFzaW5nTG9vcCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gZ2V0VG91Y2goZSkge1xuICAgIGlmIChlLnRhcmdldFRvdWNoZXMpIHtcbiAgICAgIHJldHVybiBlLnRhcmdldFRvdWNoZXNbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1heWJlIElFIHBvaW50ZXJcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEhhbmRsZShlKSB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgJiYgZS5wb2ludGVyVHlwZSA9PT0gJ3BlbicgJiYgZS5idXR0b25zID09PSAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChlLnRhcmdldFRvdWNoZXMgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGUucG9pbnRlclR5cGUgJiZcbiAgICAgIGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScgJiZcbiAgICAgIGUucG9pbnRlclR5cGUgIT09IGUuTVNQT0lOVEVSX1RZUEVfTU9VU0VcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiB0b3VjaFN0YXJ0KGUpIHtcbiAgICBpZiAoIXNob3VsZEhhbmRsZShlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0b3VjaCA9IGdldFRvdWNoKGUpO1xuXG4gICAgc3RhcnRPZmZzZXQucGFnZVggPSB0b3VjaC5wYWdlWDtcbiAgICBzdGFydE9mZnNldC5wYWdlWSA9IHRvdWNoLnBhZ2VZO1xuXG4gICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cbiAgICBpZiAoZWFzaW5nTG9vcCAhPT0gbnVsbCkge1xuICAgICAgY2xlYXJJbnRlcnZhbChlYXNpbmdMb29wKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRCZUNvbnN1bWVkQnlDaGlsZCh0YXJnZXQsIGRlbHRhWCwgZGVsdGFZKSB7XG4gICAgaWYgKCFlbGVtZW50LmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgY3Vyc29yID0gdGFyZ2V0O1xuXG4gICAgd2hpbGUgKGN1cnNvciAmJiBjdXJzb3IgIT09IGVsZW1lbnQpIHtcbiAgICAgIGlmIChjdXJzb3IuY2xhc3NMaXN0LmNvbnRhaW5zKGNscy5lbGVtZW50LmNvbnN1bWluZykpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZSA9IGdldChjdXJzb3IpO1xuICAgICAgdmFyIG92ZXJmbG93ID0gW3N0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WV0uam9pbihcbiAgICAgICAgJydcbiAgICAgICk7XG5cbiAgICAgIC8vIGlmIHNjcm9sbGFibGVcbiAgICAgIGlmIChvdmVyZmxvdy5tYXRjaCgvKHNjcm9sbHxhdXRvKS8pKSB7XG4gICAgICAgIHZhciBtYXhTY3JvbGxUb3AgPSBjdXJzb3Iuc2Nyb2xsSGVpZ2h0IC0gY3Vyc29yLmNsaWVudEhlaWdodDtcbiAgICAgICAgaWYgKG1heFNjcm9sbFRvcCA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhKGN1cnNvci5zY3JvbGxUb3AgPT09IDAgJiYgZGVsdGFZID4gMCkgJiZcbiAgICAgICAgICAgICEoY3Vyc29yLnNjcm9sbFRvcCA9PT0gbWF4U2Nyb2xsVG9wICYmIGRlbHRhWSA8IDApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heFNjcm9sbExlZnQgPSBjdXJzb3Iuc2Nyb2xsTGVmdCAtIGN1cnNvci5jbGllbnRXaWR0aDtcbiAgICAgICAgaWYgKG1heFNjcm9sbExlZnQgPiAwKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsTGVmdCA9PT0gMCAmJiBkZWx0YVggPCAwKSAmJlxuICAgICAgICAgICAgIShjdXJzb3Iuc2Nyb2xsTGVmdCA9PT0gbWF4U2Nyb2xsTGVmdCAmJiBkZWx0YVggPiAwKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGN1cnNvciA9IGN1cnNvci5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvdWNoTW92ZShlKSB7XG4gICAgaWYgKHNob3VsZEhhbmRsZShlKSkge1xuICAgICAgdmFyIHRvdWNoID0gZ2V0VG91Y2goZSk7XG5cbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0geyBwYWdlWDogdG91Y2gucGFnZVgsIHBhZ2VZOiB0b3VjaC5wYWdlWSB9O1xuXG4gICAgICB2YXIgZGlmZmVyZW5jZVggPSBjdXJyZW50T2Zmc2V0LnBhZ2VYIC0gc3RhcnRPZmZzZXQucGFnZVg7XG4gICAgICB2YXIgZGlmZmVyZW5jZVkgPSBjdXJyZW50T2Zmc2V0LnBhZ2VZIC0gc3RhcnRPZmZzZXQucGFnZVk7XG5cbiAgICAgIGlmIChzaG91bGRCZUNvbnN1bWVkQnlDaGlsZChlLnRhcmdldCwgZGlmZmVyZW5jZVgsIGRpZmZlcmVuY2VZKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwcGx5VG91Y2hNb3ZlKGRpZmZlcmVuY2VYLCBkaWZmZXJlbmNlWSk7XG4gICAgICBzdGFydE9mZnNldCA9IGN1cnJlbnRPZmZzZXQ7XG5cbiAgICAgIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gICAgICB2YXIgdGltZUdhcCA9IGN1cnJlbnRUaW1lIC0gc3RhcnRUaW1lO1xuICAgICAgaWYgKHRpbWVHYXAgPiAwKSB7XG4gICAgICAgIHNwZWVkLnggPSBkaWZmZXJlbmNlWCAvIHRpbWVHYXA7XG4gICAgICAgIHNwZWVkLnkgPSBkaWZmZXJlbmNlWSAvIHRpbWVHYXA7XG4gICAgICAgIHN0YXJ0VGltZSA9IGN1cnJlbnRUaW1lO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkUHJldmVudChkaWZmZXJlbmNlWCwgZGlmZmVyZW5jZVkpKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdG91Y2hFbmQoKSB7XG4gICAgaWYgKGkuc2V0dGluZ3Muc3dpcGVFYXNpbmcpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoZWFzaW5nTG9vcCk7XG4gICAgICBlYXNpbmdMb29wID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChpLmlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGVhc2luZ0xvb3ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3BlZWQueCAmJiAhc3BlZWQueSkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZWFzaW5nTG9vcCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNwZWVkLngpIDwgMC4wMSAmJiBNYXRoLmFicyhzcGVlZC55KSA8IDAuMDEpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGVhc2luZ0xvb3ApO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5VG91Y2hNb3ZlKHNwZWVkLnggKiAzMCwgc3BlZWQueSAqIDMwKTtcblxuICAgICAgICBzcGVlZC54ICo9IDAuODtcbiAgICAgICAgc3BlZWQueSAqPSAwLjg7XG4gICAgICB9LCAxMCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVudi5zdXBwb3J0c1RvdWNoKSB7XG4gICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICd0b3VjaHN0YXJ0JywgdG91Y2hTdGFydCk7XG4gICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICd0b3VjaG1vdmUnLCB0b3VjaE1vdmUpO1xuICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAndG91Y2hlbmQnLCB0b3VjaEVuZCk7XG4gIH0gZWxzZSBpZiAoZW52LnN1cHBvcnRzSWVQb2ludGVyKSB7XG4gICAgaWYgKHdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAncG9pbnRlcmRvd24nLCB0b3VjaFN0YXJ0KTtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAncG9pbnRlcm1vdmUnLCB0b3VjaE1vdmUpO1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdwb2ludGVydXAnLCB0b3VjaEVuZCk7XG4gICAgfSBlbHNlIGlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQpIHtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAnTVNQb2ludGVyRG93bicsIHRvdWNoU3RhcnQpO1xuICAgICAgaS5ldmVudC5iaW5kKGVsZW1lbnQsICdNU1BvaW50ZXJNb3ZlJywgdG91Y2hNb3ZlKTtcbiAgICAgIGkuZXZlbnQuYmluZChlbGVtZW50LCAnTVNQb2ludGVyVXAnLCB0b3VjaEVuZCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgZGVmYXVsdFNldHRpbmdzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgaGFuZGxlcnM6IFsnY2xpY2stcmFpbCcsICdkcmFnLXRodW1iJywgJ2tleWJvYXJkJywgJ3doZWVsJywgJ3RvdWNoJ10sXG4gIG1heFNjcm9sbGJhckxlbmd0aDogbnVsbCxcbiAgbWluU2Nyb2xsYmFyTGVuZ3RoOiBudWxsLFxuICBzY3JvbGxpbmdUaHJlc2hvbGQ6IDEwMDAsXG4gIHNjcm9sbFhNYXJnaW5PZmZzZXQ6IDAsXG4gIHNjcm9sbFlNYXJnaW5PZmZzZXQ6IDAsXG4gIHN1cHByZXNzU2Nyb2xsWDogZmFsc2UsXG4gIHN1cHByZXNzU2Nyb2xsWTogZmFsc2UsXG4gIHN3aXBlRWFzaW5nOiB0cnVlLFxuICB1c2VCb3RoV2hlZWxBeGVzOiBmYWxzZSxcbiAgd2hlZWxQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgd2hlZWxTcGVlZDogMSxcbn0pOyB9O1xuXG52YXIgaGFuZGxlcnMgPSB7XG4gICdjbGljay1yYWlsJzogY2xpY2tSYWlsLFxuICAnZHJhZy10aHVtYic6IGRyYWdUaHVtYixcbiAga2V5Ym9hcmQ6IGtleWJvYXJkLFxuICB3aGVlbDogd2hlZWwsXG4gIHRvdWNoOiB0b3VjaCxcbn07XG5cbnZhciBQZXJmZWN0U2Nyb2xsYmFyID0gZnVuY3Rpb24gUGVyZmVjdFNjcm9sbGJhcihlbGVtZW50LCB1c2VyU2V0dGluZ3MpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggdXNlclNldHRpbmdzID09PSB2b2lkIDAgKSB1c2VyU2V0dGluZ3MgPSB7fTtcblxuICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQubm9kZU5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vIGVsZW1lbnQgaXMgc3BlY2lmaWVkIHRvIGluaXRpYWxpemUgUGVyZmVjdFNjcm9sbGJhcicpO1xuICB9XG5cbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcblxuICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzLm1haW4pO1xuXG4gIHRoaXMuc2V0dGluZ3MgPSBkZWZhdWx0U2V0dGluZ3MoKTtcbiAgZm9yICh2YXIga2V5IGluIHVzZXJTZXR0aW5ncykge1xuICAgIHRoaXMkMS5zZXR0aW5nc1trZXldID0gdXNlclNldHRpbmdzW2tleV07XG4gIH1cblxuICB0aGlzLmNvbnRhaW5lcldpZHRoID0gbnVsbDtcbiAgdGhpcy5jb250YWluZXJIZWlnaHQgPSBudWxsO1xuICB0aGlzLmNvbnRlbnRXaWR0aCA9IG51bGw7XG4gIHRoaXMuY29udGVudEhlaWdodCA9IG51bGw7XG5cbiAgdmFyIGZvY3VzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNscy5zdGF0ZS5mb2N1cyk7IH07XG4gIHZhciBibHVyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNscy5zdGF0ZS5mb2N1cyk7IH07XG5cbiAgdGhpcy5pc1J0bCA9IGdldChlbGVtZW50KS5kaXJlY3Rpb24gPT09ICdydGwnO1xuICB0aGlzLmlzTmVnYXRpdmVTY3JvbGwgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcmlnaW5hbFNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7XG4gICAgdmFyIHJlc3VsdCA9IG51bGw7XG4gICAgZWxlbWVudC5zY3JvbGxMZWZ0ID0gLTE7XG4gICAgcmVzdWx0ID0gZWxlbWVudC5zY3JvbGxMZWZ0IDwgMDtcbiAgICBlbGVtZW50LnNjcm9sbExlZnQgPSBvcmlnaW5hbFNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSkoKTtcbiAgdGhpcy5uZWdhdGl2ZVNjcm9sbEFkanVzdG1lbnQgPSB0aGlzLmlzTmVnYXRpdmVTY3JvbGxcbiAgICA/IGVsZW1lbnQuc2Nyb2xsV2lkdGggLSBlbGVtZW50LmNsaWVudFdpZHRoXG4gICAgOiAwO1xuICB0aGlzLmV2ZW50ID0gbmV3IEV2ZW50TWFuYWdlcigpO1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG5cbiAgdGhpcy5zY3JvbGxiYXJYUmFpbCA9IGRpdihjbHMuZWxlbWVudC5yYWlsKCd4JykpO1xuICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsYmFyWFJhaWwpO1xuICB0aGlzLnNjcm9sbGJhclggPSBkaXYoY2xzLmVsZW1lbnQudGh1bWIoJ3gnKSk7XG4gIHRoaXMuc2Nyb2xsYmFyWFJhaWwuYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxiYXJYKTtcbiAgdGhpcy5zY3JvbGxiYXJYLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgdGhpcy5ldmVudC5iaW5kKHRoaXMuc2Nyb2xsYmFyWCwgJ2ZvY3VzJywgZm9jdXMpO1xuICB0aGlzLmV2ZW50LmJpbmQodGhpcy5zY3JvbGxiYXJYLCAnYmx1cicsIGJsdXIpO1xuICB0aGlzLnNjcm9sbGJhclhBY3RpdmUgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhclhXaWR0aCA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWExlZnQgPSBudWxsO1xuICB2YXIgcmFpbFhTdHlsZSA9IGdldCh0aGlzLnNjcm9sbGJhclhSYWlsKTtcbiAgdGhpcy5zY3JvbGxiYXJYQm90dG9tID0gcGFyc2VJbnQocmFpbFhTdHlsZS5ib3R0b20sIDEwKTtcbiAgaWYgKGlzTmFOKHRoaXMuc2Nyb2xsYmFyWEJvdHRvbSkpIHtcbiAgICB0aGlzLmlzU2Nyb2xsYmFyWFVzaW5nQm90dG9tID0gZmFsc2U7XG4gICAgdGhpcy5zY3JvbGxiYXJYVG9wID0gdG9JbnQocmFpbFhTdHlsZS50b3ApO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaXNTY3JvbGxiYXJYVXNpbmdCb3R0b20gPSB0cnVlO1xuICB9XG4gIHRoaXMucmFpbEJvcmRlclhXaWR0aCA9XG4gICAgdG9JbnQocmFpbFhTdHlsZS5ib3JkZXJMZWZ0V2lkdGgpICsgdG9JbnQocmFpbFhTdHlsZS5ib3JkZXJSaWdodFdpZHRoKTtcbiAgLy8gU2V0IHJhaWwgdG8gZGlzcGxheTpibG9jayB0byBjYWxjdWxhdGUgbWFyZ2luc1xuICBzZXQodGhpcy5zY3JvbGxiYXJYUmFpbCwgeyBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICB0aGlzLnJhaWxYTWFyZ2luV2lkdGggPVxuICAgIHRvSW50KHJhaWxYU3R5bGUubWFyZ2luTGVmdCkgKyB0b0ludChyYWlsWFN0eWxlLm1hcmdpblJpZ2h0KTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwsIHsgZGlzcGxheTogJycgfSk7XG4gIHRoaXMucmFpbFhXaWR0aCA9IG51bGw7XG4gIHRoaXMucmFpbFhSYXRpbyA9IG51bGw7XG5cbiAgdGhpcy5zY3JvbGxiYXJZUmFpbCA9IGRpdihjbHMuZWxlbWVudC5yYWlsKCd5JykpO1xuICBlbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuc2Nyb2xsYmFyWVJhaWwpO1xuICB0aGlzLnNjcm9sbGJhclkgPSBkaXYoY2xzLmVsZW1lbnQudGh1bWIoJ3knKSk7XG4gIHRoaXMuc2Nyb2xsYmFyWVJhaWwuYXBwZW5kQ2hpbGQodGhpcy5zY3JvbGxiYXJZKTtcbiAgdGhpcy5zY3JvbGxiYXJZLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAwKTtcbiAgdGhpcy5ldmVudC5iaW5kKHRoaXMuc2Nyb2xsYmFyWSwgJ2ZvY3VzJywgZm9jdXMpO1xuICB0aGlzLmV2ZW50LmJpbmQodGhpcy5zY3JvbGxiYXJZLCAnYmx1cicsIGJsdXIpO1xuICB0aGlzLnNjcm9sbGJhcllBY3RpdmUgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhcllIZWlnaHQgPSBudWxsO1xuICB0aGlzLnNjcm9sbGJhcllUb3AgPSBudWxsO1xuICB2YXIgcmFpbFlTdHlsZSA9IGdldCh0aGlzLnNjcm9sbGJhcllSYWlsKTtcbiAgdGhpcy5zY3JvbGxiYXJZUmlnaHQgPSBwYXJzZUludChyYWlsWVN0eWxlLnJpZ2h0LCAxMCk7XG4gIGlmIChpc05hTih0aGlzLnNjcm9sbGJhcllSaWdodCkpIHtcbiAgICB0aGlzLmlzU2Nyb2xsYmFyWVVzaW5nUmlnaHQgPSBmYWxzZTtcbiAgICB0aGlzLnNjcm9sbGJhcllMZWZ0ID0gdG9JbnQocmFpbFlTdHlsZS5sZWZ0KTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmlzU2Nyb2xsYmFyWVVzaW5nUmlnaHQgPSB0cnVlO1xuICB9XG4gIHRoaXMuc2Nyb2xsYmFyWU91dGVyV2lkdGggPSB0aGlzLmlzUnRsID8gb3V0ZXJXaWR0aCh0aGlzLnNjcm9sbGJhclkpIDogbnVsbDtcbiAgdGhpcy5yYWlsQm9yZGVyWVdpZHRoID1cbiAgICB0b0ludChyYWlsWVN0eWxlLmJvcmRlclRvcFdpZHRoKSArIHRvSW50KHJhaWxZU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpO1xuICBzZXQodGhpcy5zY3JvbGxiYXJZUmFpbCwgeyBkaXNwbGF5OiAnYmxvY2snIH0pO1xuICB0aGlzLnJhaWxZTWFyZ2luSGVpZ2h0ID1cbiAgICB0b0ludChyYWlsWVN0eWxlLm1hcmdpblRvcCkgKyB0b0ludChyYWlsWVN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gIHNldCh0aGlzLnNjcm9sbGJhcllSYWlsLCB7IGRpc3BsYXk6ICcnIH0pO1xuICB0aGlzLnJhaWxZSGVpZ2h0ID0gbnVsbDtcbiAgdGhpcy5yYWlsWVJhdGlvID0gbnVsbDtcblxuICB0aGlzLnJlYWNoID0ge1xuICAgIHg6XG4gICAgICBlbGVtZW50LnNjcm9sbExlZnQgPD0gMFxuICAgICAgICA/ICdzdGFydCdcbiAgICAgICAgOiBlbGVtZW50LnNjcm9sbExlZnQgPj0gdGhpcy5jb250ZW50V2lkdGggLSB0aGlzLmNvbnRhaW5lcldpZHRoXG4gICAgICAgICAgPyAnZW5kJ1xuICAgICAgICAgIDogbnVsbCxcbiAgICB5OlxuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPD0gMFxuICAgICAgICA/ICdzdGFydCdcbiAgICAgICAgOiBlbGVtZW50LnNjcm9sbFRvcCA+PSB0aGlzLmNvbnRlbnRIZWlnaHQgLSB0aGlzLmNvbnRhaW5lckhlaWdodFxuICAgICAgICAgID8gJ2VuZCdcbiAgICAgICAgICA6IG51bGwsXG4gIH07XG5cbiAgdGhpcy5pc0FsaXZlID0gdHJ1ZTtcblxuICB0aGlzLnNldHRpbmdzLmhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXJOYW1lKSB7IHJldHVybiBoYW5kbGVyc1toYW5kbGVyTmFtZV0odGhpcyQxKTsgfSk7XG5cbiAgdGhpcy5sYXN0U2Nyb2xsVG9wID0gTWF0aC5mbG9vcihlbGVtZW50LnNjcm9sbFRvcCk7IC8vIGZvciBvblNjcm9sbCBvbmx5XG4gIHRoaXMubGFzdFNjcm9sbExlZnQgPSBlbGVtZW50LnNjcm9sbExlZnQ7IC8vIGZvciBvblNjcm9sbCBvbmx5XG4gIHRoaXMuZXZlbnQuYmluZCh0aGlzLmVsZW1lbnQsICdzY3JvbGwnLCBmdW5jdGlvbiAoZSkgeyByZXR1cm4gdGhpcyQxLm9uU2Nyb2xsKGUpOyB9KTtcbiAgdXBkYXRlR2VvbWV0cnkodGhpcyk7XG59O1xuXG5QZXJmZWN0U2Nyb2xsYmFyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICBpZiAoIXRoaXMuaXNBbGl2ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFJlY2FsY3VhdGUgbmVnYXRpdmUgc2Nyb2xsTGVmdCBhZGp1c3RtZW50XG4gIHRoaXMubmVnYXRpdmVTY3JvbGxBZGp1c3RtZW50ID0gdGhpcy5pc05lZ2F0aXZlU2Nyb2xsXG4gICAgPyB0aGlzLmVsZW1lbnQuc2Nyb2xsV2lkdGggLSB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGhcbiAgICA6IDA7XG5cbiAgLy8gUmVjYWxjdWxhdGUgcmFpbCBtYXJnaW5zXG4gIHNldCh0aGlzLnNjcm9sbGJhclhSYWlsLCB7IGRpc3BsYXk6ICdibG9jaycgfSk7XG4gIHNldCh0aGlzLnNjcm9sbGJhcllSYWlsLCB7IGRpc3BsYXk6ICdibG9jaycgfSk7XG4gIHRoaXMucmFpbFhNYXJnaW5XaWR0aCA9XG4gICAgdG9JbnQoZ2V0KHRoaXMuc2Nyb2xsYmFyWFJhaWwpLm1hcmdpbkxlZnQpICtcbiAgICB0b0ludChnZXQodGhpcy5zY3JvbGxiYXJYUmFpbCkubWFyZ2luUmlnaHQpO1xuICB0aGlzLnJhaWxZTWFyZ2luSGVpZ2h0ID1cbiAgICB0b0ludChnZXQodGhpcy5zY3JvbGxiYXJZUmFpbCkubWFyZ2luVG9wKSArXG4gICAgdG9JbnQoZ2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwpLm1hcmdpbkJvdHRvbSk7XG5cbiAgLy8gSGlkZSBzY3JvbGxiYXJzIG5vdCB0byBhZmZlY3Qgc2Nyb2xsV2lkdGggYW5kIHNjcm9sbEhlaWdodFxuICBzZXQodGhpcy5zY3JvbGxiYXJYUmFpbCwgeyBkaXNwbGF5OiAnbm9uZScgfSk7XG4gIHNldCh0aGlzLnNjcm9sbGJhcllSYWlsLCB7IGRpc3BsYXk6ICdub25lJyB9KTtcblxuICB1cGRhdGVHZW9tZXRyeSh0aGlzKTtcblxuICBwcm9jZXNzU2Nyb2xsRGlmZih0aGlzLCAndG9wJywgMCwgZmFsc2UsIHRydWUpO1xuICBwcm9jZXNzU2Nyb2xsRGlmZih0aGlzLCAnbGVmdCcsIDAsIGZhbHNlLCB0cnVlKTtcblxuICBzZXQodGhpcy5zY3JvbGxiYXJYUmFpbCwgeyBkaXNwbGF5OiAnJyB9KTtcbiAgc2V0KHRoaXMuc2Nyb2xsYmFyWVJhaWwsIHsgZGlzcGxheTogJycgfSk7XG59O1xuXG5QZXJmZWN0U2Nyb2xsYmFyLnByb3RvdHlwZS5vblNjcm9sbCA9IGZ1bmN0aW9uIG9uU2Nyb2xsIChlKSB7XG4gIGlmICghdGhpcy5pc0FsaXZlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdXBkYXRlR2VvbWV0cnkodGhpcyk7XG4gIHByb2Nlc3NTY3JvbGxEaWZmKHRoaXMsICd0b3AnLCB0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wIC0gdGhpcy5sYXN0U2Nyb2xsVG9wKTtcbiAgcHJvY2Vzc1Njcm9sbERpZmYoXG4gICAgdGhpcyxcbiAgICAnbGVmdCcsXG4gICAgdGhpcy5lbGVtZW50LnNjcm9sbExlZnQgLSB0aGlzLmxhc3RTY3JvbGxMZWZ0XG4gICk7XG5cbiAgdGhpcy5sYXN0U2Nyb2xsVG9wID0gTWF0aC5mbG9vcih0aGlzLmVsZW1lbnQuc2Nyb2xsVG9wKTtcbiAgdGhpcy5sYXN0U2Nyb2xsTGVmdCA9IHRoaXMuZWxlbWVudC5zY3JvbGxMZWZ0O1xufTtcblxuUGVyZmVjdFNjcm9sbGJhci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICBpZiAoIXRoaXMuaXNBbGl2ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuZXZlbnQudW5iaW5kQWxsKCk7XG4gIHJlbW92ZSh0aGlzLnNjcm9sbGJhclgpO1xuICByZW1vdmUodGhpcy5zY3JvbGxiYXJZKTtcbiAgcmVtb3ZlKHRoaXMuc2Nyb2xsYmFyWFJhaWwpO1xuICByZW1vdmUodGhpcy5zY3JvbGxiYXJZUmFpbCk7XG4gIHRoaXMucmVtb3ZlUHNDbGFzc2VzKCk7XG5cbiAgLy8gdW5zZXQgZWxlbWVudHNcbiAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJYID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJZID0gbnVsbDtcbiAgdGhpcy5zY3JvbGxiYXJYUmFpbCA9IG51bGw7XG4gIHRoaXMuc2Nyb2xsYmFyWVJhaWwgPSBudWxsO1xuXG4gIHRoaXMuaXNBbGl2ZSA9IGZhbHNlO1xufTtcblxuUGVyZmVjdFNjcm9sbGJhci5wcm90b3R5cGUucmVtb3ZlUHNDbGFzc2VzID0gZnVuY3Rpb24gcmVtb3ZlUHNDbGFzc2VzICgpIHtcbiAgdGhpcy5lbGVtZW50LmNsYXNzTmFtZSA9IHRoaXMuZWxlbWVudC5jbGFzc05hbWVcbiAgICAuc3BsaXQoJyAnKVxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFuYW1lLm1hdGNoKC9ecHMoWy1fXS4rfCkkLyk7IH0pXG4gICAgLmpvaW4oJyAnKTtcbn07XG5cbnJldHVybiBQZXJmZWN0U2Nyb2xsYmFyO1xuXG59KSkpO1xuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNi4wXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB0aW1lb3V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59KCk7XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBub2RlIG9mIHRoZSByZWZlcmVuY2Ugb2JqZWN0LCBvciB0aGUgcmVmZXJlbmNlIG9iamVjdCBpdHNlbGYuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlID8gcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgOiByZWZlcmVuY2U7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10sIDEwKSArIHBhcnNlRmxvYXQoc3R5bGVzWydib3JkZXInICsgc2lkZUIgKyAnV2lkdGgnXSwgMTApO1xufVxuXG5mdW5jdGlvbiBnZXRTaXplKGF4aXMsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpIHtcbiAgcmV0dXJuIE1hdGgubWF4KGJvZHlbJ29mZnNldCcgKyBheGlzXSwgYm9keVsnc2Nyb2xsJyArIGF4aXNdLCBodG1sWydjbGllbnQnICsgYXhpc10sIGh0bWxbJ29mZnNldCcgKyBheGlzXSwgaHRtbFsnc2Nyb2xsJyArIGF4aXNdLCBpc0lFKDEwKSA/IHBhcnNlSW50KGh0bWxbJ29mZnNldCcgKyBheGlzXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ1RvcCcgOiAnTGVmdCcpXSkgKyBwYXJzZUludChjb21wdXRlZFN0eWxlWydtYXJnaW4nICsgKGF4aXMgPT09ICdIZWlnaHQnID8gJ0JvdHRvbScgOiAnUmlnaHQnKV0pIDogMCk7XG59XG5cbmZ1bmN0aW9uIGdldFdpbmRvd1NpemVzKGRvY3VtZW50KSB7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gaXNJRSgxMCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShodG1sKTtcblxuICByZXR1cm4ge1xuICAgIGhlaWdodDogZ2V0U2l6ZSgnSGVpZ2h0JywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSksXG4gICAgd2lkdGg6IGdldFNpemUoJ1dpZHRoJywgYm9keSwgaHRtbCwgY29tcHV0ZWRTdHlsZSlcbiAgfTtcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG4vKipcbiAqIEdpdmVuIGVsZW1lbnQgb2Zmc2V0cywgZ2VuZXJhdGUgYW4gb3V0cHV0IHNpbWlsYXIgdG8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gb2Zmc2V0c1xuICogQHJldHVybnMge09iamVjdH0gQ2xpZW50UmVjdCBsaWtlIG91dHB1dFxuICovXG5mdW5jdGlvbiBnZXRDbGllbnRSZWN0KG9mZnNldHMpIHtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBvZmZzZXRzLCB7XG4gICAgcmlnaHQ6IG9mZnNldHMubGVmdCArIG9mZnNldHMud2lkdGgsXG4gICAgYm90dG9tOiBvZmZzZXRzLnRvcCArIG9mZnNldHMuaGVpZ2h0XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBib3VuZGluZyBjbGllbnQgcmVjdCBvZiBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtPYmplY3R9IGNsaWVudCByZWN0XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KSB7XG4gIHZhciByZWN0ID0ge307XG5cbiAgLy8gSUUxMCAxMCBGSVg6IFBsZWFzZSwgZG9uJ3QgYXNrLCB0aGUgZWxlbWVudCBpc24ndFxuICAvLyBjb25zaWRlcmVkIGluIERPTSBpbiBzb21lIGNpcmN1bXN0YW5jZXMuLi5cbiAgLy8gVGhpcyBpc24ndCByZXByb2R1Y2libGUgaW4gSUUxMCBjb21wYXRpYmlsaXR5IG1vZGUgb2YgSUUxMVxuICB0cnkge1xuICAgIGlmIChpc0lFKDEwKSkge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgICAgIHZhciBzY3JvbGxMZWZ0ID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICdsZWZ0Jyk7XG4gICAgICByZWN0LnRvcCArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LmxlZnQgKz0gc2Nyb2xsTGVmdDtcbiAgICAgIHJlY3QuYm90dG9tICs9IHNjcm9sbFRvcDtcbiAgICAgIHJlY3QucmlnaHQgKz0gc2Nyb2xsTGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSB7XG4gICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgIHRvcDogcmVjdC50b3AsXG4gICAgd2lkdGg6IHJlY3QucmlnaHQgLSByZWN0LmxlZnQsXG4gICAgaGVpZ2h0OiByZWN0LmJvdHRvbSAtIHJlY3QudG9wXG4gIH07XG5cbiAgLy8gc3VidHJhY3Qgc2Nyb2xsYmFyIHNpemUgZnJvbSBzaXplc1xuICB2YXIgc2l6ZXMgPSBlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgPyBnZXRXaW5kb3dTaXplcyhlbGVtZW50Lm93bmVyRG9jdW1lbnQpIDoge307XG4gIHZhciB3aWR0aCA9IHNpemVzLndpZHRoIHx8IGVsZW1lbnQuY2xpZW50V2lkdGggfHwgcmVzdWx0LndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gc2l6ZXMuaGVpZ2h0IHx8IGVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IHJlc3VsdC5oZWlnaHQ7XG5cbiAgdmFyIGhvcml6U2Nyb2xsYmFyID0gZWxlbWVudC5vZmZzZXRXaWR0aCAtIHdpZHRoO1xuICB2YXIgdmVydFNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0O1xuXG4gIC8vIGlmIGFuIGh5cG90aGV0aWNhbCBzY3JvbGxiYXIgaXMgZGV0ZWN0ZWQsIHdlIG11c3QgYmUgc3VyZSBpdCdzIG5vdCBhIGBib3JkZXJgXG4gIC8vIHdlIG1ha2UgdGhpcyBjaGVjayBjb25kaXRpb25hbCBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICBpZiAoaG9yaXpTY3JvbGxiYXIgfHwgdmVydFNjcm9sbGJhcikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCk7XG4gICAgaG9yaXpTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneCcpO1xuICAgIHZlcnRTY3JvbGxiYXIgLT0gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCAneScpO1xuXG4gICAgcmVzdWx0LndpZHRoIC09IGhvcml6U2Nyb2xsYmFyO1xuICAgIHJlc3VsdC5oZWlnaHQgLT0gdmVydFNjcm9sbGJhcjtcbiAgfVxuXG4gIHJldHVybiBnZXRDbGllbnRSZWN0KHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShjaGlsZHJlbiwgcGFyZW50KSB7XG4gIHZhciBmaXhlZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgaXNJRTEwID0gaXNJRSgxMCk7XG4gIHZhciBpc0hUTUwgPSBwYXJlbnQubm9kZU5hbWUgPT09ICdIVE1MJztcbiAgdmFyIGNoaWxkcmVuUmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChjaGlsZHJlbik7XG4gIHZhciBwYXJlbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHBhcmVudCk7XG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoY2hpbGRyZW4pO1xuXG4gIHZhciBzdHlsZXMgPSBnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkocGFyZW50KTtcbiAgdmFyIGJvcmRlclRvcFdpZHRoID0gcGFyc2VGbG9hdChzdHlsZXMuYm9yZGVyVG9wV2lkdGgsIDEwKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCwgMTApO1xuXG4gIC8vIEluIGNhc2VzIHdoZXJlIHRoZSBwYXJlbnQgaXMgZml4ZWQsIHdlIG11c3QgaWdub3JlIG5lZ2F0aXZlIHNjcm9sbCBpbiBvZmZzZXQgY2FsY1xuICBpZiAoZml4ZWRQb3NpdGlvbiAmJiBpc0hUTUwpIHtcbiAgICBwYXJlbnRSZWN0LnRvcCA9IE1hdGgubWF4KHBhcmVudFJlY3QudG9wLCAwKTtcbiAgICBwYXJlbnRSZWN0LmxlZnQgPSBNYXRoLm1heChwYXJlbnRSZWN0LmxlZnQsIDApO1xuICB9XG4gIHZhciBvZmZzZXRzID0gZ2V0Q2xpZW50UmVjdCh7XG4gICAgdG9wOiBjaGlsZHJlblJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgLSBib3JkZXJUb3BXaWR0aCxcbiAgICBsZWZ0OiBjaGlsZHJlblJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCAtIGJvcmRlckxlZnRXaWR0aCxcbiAgICB3aWR0aDogY2hpbGRyZW5SZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRyZW5SZWN0LmhlaWdodFxuICB9KTtcbiAgb2Zmc2V0cy5tYXJnaW5Ub3AgPSAwO1xuICBvZmZzZXRzLm1hcmdpbkxlZnQgPSAwO1xuXG4gIC8vIFN1YnRyYWN0IG1hcmdpbnMgb2YgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgaXQncyBiZWluZyB1c2VkIGFzIHBhcmVudFxuICAvLyB3ZSBkbyB0aGlzIG9ubHkgb24gSFRNTCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgZWxlbWVudCB0aGF0IGJlaGF2ZXNcbiAgLy8gZGlmZmVyZW50bHkgd2hlbiBtYXJnaW5zIGFyZSBhcHBsaWVkIHRvIGl0LiBUaGUgbWFyZ2lucyBhcmUgaW5jbHVkZWQgaW5cbiAgLy8gdGhlIGJveCBvZiB0aGUgZG9jdW1lbnRFbGVtZW50LCBpbiB0aGUgb3RoZXIgY2FzZXMgbm90LlxuICBpZiAoIWlzSUUxMCAmJiBpc0hUTUwpIHtcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luVG9wLCAxMCk7XG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0LCAxMCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdLCAxMCk7XG4gIHZhciBwb3BwZXJCb3JkZXJTaWRlID0gcGFyc2VGbG9hdChjc3NbJ2JvcmRlcicgKyBzaWRlQ2FwaXRhbGl6ZWQgKyAnV2lkdGgnXSwgMTApO1xuICB2YXIgc2lkZVZhbHVlID0gY2VudGVyIC0gZGF0YS5vZmZzZXRzLnBvcHBlcltzaWRlXSAtIHBvcHBlck1hcmdpblNpZGUgLSBwb3BwZXJCb3JkZXJTaWRlO1xuXG4gIC8vIHByZXZlbnQgYXJyb3dFbGVtZW50IGZyb20gYmVpbmcgcGxhY2VkIG5vdCBjb250aWd1b3VzbHkgdG8gaXRzIHBvcHBlclxuICBzaWRlVmFsdWUgPSBNYXRoLm1heChNYXRoLm1pbihwb3BwZXJbbGVuXSAtIGFycm93RWxlbWVudFNpemUsIHNpZGVWYWx1ZSksIDApO1xuXG4gIGRhdGEuYXJyb3dFbGVtZW50ID0gYXJyb3dFbGVtZW50O1xuICBkYXRhLm9mZnNldHMuYXJyb3cgPSAoX2RhdGEkb2Zmc2V0cyRhcnJvdyA9IHt9LCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBzaWRlLCBNYXRoLnJvdW5kKHNpZGVWYWx1ZSkpLCBkZWZpbmVQcm9wZXJ0eShfZGF0YSRvZmZzZXRzJGFycm93LCBhbHRTaWRlLCAnJyksIF9kYXRhJG9mZnNldHMkYXJyb3cpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEdldCB0aGUgb3Bwb3NpdGUgcGxhY2VtZW50IHZhcmlhdGlvbiBvZiB0aGUgZ2l2ZW4gb25lXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IHZhcmlhdGlvblxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnQgdmFyaWF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbikge1xuICBpZiAodmFyaWF0aW9uID09PSAnZW5kJykge1xuICAgIHJldHVybiAnc3RhcnQnO1xuICB9IGVsc2UgaWYgKHZhcmlhdGlvbiA9PT0gJ3N0YXJ0Jykge1xuICAgIHJldHVybiAnZW5kJztcbiAgfVxuICByZXR1cm4gdmFyaWF0aW9uO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgYWNjZXB0ZWQgcGxhY2VtZW50cyB0byB1c2UgYXMgdmFsdWVzIG9mIHRoZSBgcGxhY2VtZW50YCBvcHRpb24uPGJyIC8+XG4gKiBWYWxpZCBwbGFjZW1lbnRzIGFyZTpcbiAqIC0gYGF1dG9gXG4gKiAtIGB0b3BgXG4gKiAtIGByaWdodGBcbiAqIC0gYGJvdHRvbWBcbiAqIC0gYGxlZnRgXG4gKlxuICogRWFjaCBwbGFjZW1lbnQgY2FuIGhhdmUgYSB2YXJpYXRpb24gZnJvbSB0aGlzIGxpc3Q6XG4gKiAtIGAtc3RhcnRgXG4gKiAtIGAtZW5kYFxuICpcbiAqIFZhcmlhdGlvbnMgYXJlIGludGVycHJldGVkIGVhc2lseSBpZiB5b3UgdGhpbmsgb2YgdGhlbSBhcyB0aGUgbGVmdCB0byByaWdodFxuICogd3JpdHRlbiBsYW5ndWFnZXMuIEhvcml6b250YWxseSAoYHRvcGAgYW5kIGBib3R0b21gKSwgYHN0YXJ0YCBpcyBsZWZ0IGFuZCBgZW5kYFxuICogaXMgcmlnaHQuPGJyIC8+XG4gKiBWZXJ0aWNhbGx5IChgbGVmdGAgYW5kIGByaWdodGApLCBgc3RhcnRgIGlzIHRvcCBhbmQgYGVuZGAgaXMgYm90dG9tLlxuICpcbiAqIFNvbWUgdmFsaWQgZXhhbXBsZXMgYXJlOlxuICogLSBgdG9wLWVuZGAgKG9uIHRvcCBvZiByZWZlcmVuY2UsIHJpZ2h0IGFsaWduZWQpXG4gKiAtIGByaWdodC1zdGFydGAgKG9uIHJpZ2h0IG9mIHJlZmVyZW5jZSwgdG9wIGFsaWduZWQpXG4gKiAtIGBib3R0b21gIChvbiBib3R0b20sIGNlbnRlcmVkKVxuICogLSBgYXV0by1lbmRgIChvbiB0aGUgc2lkZSB3aXRoIG1vcmUgc3BhY2UgYXZhaWxhYmxlLCBhbGlnbm1lbnQgZGVwZW5kcyBieSBwbGFjZW1lbnQpXG4gKlxuICogQHN0YXRpY1xuICogQHR5cGUge0FycmF5fVxuICogQGVudW0ge1N0cmluZ31cbiAqIEByZWFkb25seVxuICogQG1ldGhvZCBwbGFjZW1lbnRzXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBwbGFjZW1lbnRzID0gWydhdXRvLXN0YXJ0JywgJ2F1dG8nLCAnYXV0by1lbmQnLCAndG9wLXN0YXJ0JywgJ3RvcCcsICd0b3AtZW5kJywgJ3JpZ2h0LXN0YXJ0JywgJ3JpZ2h0JywgJ3JpZ2h0LWVuZCcsICdib3R0b20tZW5kJywgJ2JvdHRvbScsICdib3R0b20tc3RhcnQnLCAnbGVmdC1lbmQnLCAnbGVmdCcsICdsZWZ0LXN0YXJ0J107XG5cbi8vIEdldCByaWQgb2YgYGF1dG9gIGBhdXRvLXN0YXJ0YCBhbmQgYGF1dG8tZW5kYFxudmFyIHZhbGlkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuc2xpY2UoMyk7XG5cbi8qKlxuICogR2l2ZW4gYW4gaW5pdGlhbCBwbGFjZW1lbnQsIHJldHVybnMgYWxsIHRoZSBzdWJzZXF1ZW50IHBsYWNlbWVudHNcbiAqIGNsb2Nrd2lzZSAob3IgY291bnRlci1jbG9ja3dpc2UpLlxuICpcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwbGFjZW1lbnQgLSBBIHZhbGlkIHBsYWNlbWVudCAoaXQgYWNjZXB0cyB2YXJpYXRpb25zKVxuICogQGFyZ3VtZW50IHtCb29sZWFufSBjb3VudGVyIC0gU2V0IHRvIHRydWUgdG8gd2FsayB0aGUgcGxhY2VtZW50cyBjb3VudGVyY2xvY2t3aXNlXG4gKiBAcmV0dXJucyB7QXJyYXl9IHBsYWNlbWVudHMgaW5jbHVkaW5nIHRoZWlyIHZhcmlhdGlvbnNcbiAqL1xuZnVuY3Rpb24gY2xvY2t3aXNlKHBsYWNlbWVudCkge1xuICB2YXIgY291bnRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG5cbiAgdmFyIGluZGV4ID0gdmFsaWRQbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KTtcbiAgdmFyIGFyciA9IHZhbGlkUGxhY2VtZW50cy5zbGljZShpbmRleCArIDEpLmNvbmNhdCh2YWxpZFBsYWNlbWVudHMuc2xpY2UoMCwgaW5kZXgpKTtcbiAgcmV0dXJuIGNvdW50ZXIgPyBhcnIucmV2ZXJzZSgpIDogYXJyO1xufVxuXG52YXIgQkVIQVZJT1JTID0ge1xuICBGTElQOiAnZmxpcCcsXG4gIENMT0NLV0lTRTogJ2Nsb2Nrd2lzZScsXG4gIENPVU5URVJDTE9DS1dJU0U6ICdjb3VudGVyY2xvY2t3aXNlJ1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGZsaXAoZGF0YSwgb3B0aW9ucykge1xuICAvLyBpZiBgaW5uZXJgIG1vZGlmaWVyIGlzIGVuYWJsZWQsIHdlIGNhbid0IHVzZSB0aGUgYGZsaXBgIG1vZGlmaWVyXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2lubmVyJykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGlmIChkYXRhLmZsaXBwZWQgJiYgZGF0YS5wbGFjZW1lbnQgPT09IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQpIHtcbiAgICAvLyBzZWVtcyBsaWtlIGZsaXAgaXMgdHJ5aW5nIHRvIGxvb3AsIHByb2JhYmx5IHRoZXJlJ3Mgbm90IGVub3VnaCBzcGFjZSBvbiBhbnkgb2YgdGhlIGZsaXBwYWJsZSBzaWRlc1xuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50LCBkYXRhLnBvc2l0aW9uRml4ZWQpO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVsxXSB8fCAnJztcblxuICB2YXIgZmxpcE9yZGVyID0gW107XG5cbiAgc3dpdGNoIChvcHRpb25zLmJlaGF2aW9yKSB7XG4gICAgY2FzZSBCRUhBVklPUlMuRkxJUDpcbiAgICAgIGZsaXBPcmRlciA9IFtwbGFjZW1lbnQsIHBsYWNlbWVudE9wcG9zaXRlXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBCRUhBVklPUlMuQ09VTlRFUkNMT0NLV0lTRTpcbiAgICAgIGZsaXBPcmRlciA9IGNsb2Nrd2lzZShwbGFjZW1lbnQsIHRydWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGZsaXBPcmRlciA9IG9wdGlvbnMuYmVoYXZpb3I7XG4gIH1cblxuICBmbGlwT3JkZXIuZm9yRWFjaChmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICBpZiAocGxhY2VtZW50ICE9PSBzdGVwIHx8IGZsaXBPcmRlci5sZW5ndGggPT09IGluZGV4ICsgMSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgICBwbGFjZW1lbnRPcHBvc2l0ZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG4gICAgdmFyIHJlZk9mZnNldHMgPSBkYXRhLm9mZnNldHMucmVmZXJlbmNlO1xuXG4gICAgLy8gdXNpbmcgZmxvb3IgYmVjYXVzZSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgbWF5IGNvbnRhaW4gZGVjaW1hbHMgd2UgYXJlIG5vdCBnb2luZyB0byBjb25zaWRlciBoZXJlXG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgICB2YXIgb3ZlcmxhcHNSZWYgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnJpZ2h0KSA+IGZsb29yKHJlZk9mZnNldHMubGVmdCkgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihyZWZPZmZzZXRzLnJpZ2h0KSB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIGZsb29yKHBvcHBlck9mZnNldHMuYm90dG9tKSA+IGZsb29yKHJlZk9mZnNldHMudG9wKSB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKHJlZk9mZnNldHMuYm90dG9tKTtcblxuICAgIHZhciBvdmVyZmxvd3NMZWZ0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5sZWZ0KSA8IGZsb29yKGJvdW5kYXJpZXMubGVmdCk7XG4gICAgdmFyIG92ZXJmbG93c1JpZ2h0ID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihib3VuZGFyaWVzLnJpZ2h0KTtcbiAgICB2YXIgb3ZlcmZsb3dzVG9wID0gZmxvb3IocG9wcGVyT2Zmc2V0cy50b3ApIDwgZmxvb3IoYm91bmRhcmllcy50b3ApO1xuICAgIHZhciBvdmVyZmxvd3NCb3R0b20gPSBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihib3VuZGFyaWVzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzQm91bmRhcmllcyA9IHBsYWNlbWVudCA9PT0gJ2xlZnQnICYmIG92ZXJmbG93c0xlZnQgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IHBsYWNlbWVudCA9PT0gJ3RvcCcgJiYgb3ZlcmZsb3dzVG9wIHx8IHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgJiYgb3ZlcmZsb3dzQm90dG9tO1xuXG4gICAgLy8gZmxpcCB0aGUgdmFyaWF0aW9uIGlmIHJlcXVpcmVkXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeVJlZiA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzTGVmdCB8fCBpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ2VuZCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1RvcCB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0JvdHRvbSk7XG5cbiAgICAvLyBmbGlwcyB2YXJpYXRpb24gaWYgcG9wcGVyIGNvbnRlbnQgb3ZlcmZsb3dzIGJvdW5kYXJpZXNcbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudCA9ICEhb3B0aW9ucy5mbGlwVmFyaWF0aW9uc0J5Q29udGVudCAmJiAoaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdzdGFydCcgJiYgb3ZlcmZsb3dzUmlnaHQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c0xlZnQgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0JvdHRvbSB8fCAhaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1RvcCk7XG5cbiAgICB2YXIgZmxpcHBlZFZhcmlhdGlvbiA9IGZsaXBwZWRWYXJpYXRpb25CeVJlZiB8fCBmbGlwcGVkVmFyaWF0aW9uQnlDb250ZW50O1xuXG4gICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMgfHwgZmxpcHBlZFZhcmlhdGlvbikge1xuICAgICAgLy8gdGhpcyBib29sZWFuIHRvIGRldGVjdCBhbnkgZmxpcCBsb29wXG4gICAgICBkYXRhLmZsaXBwZWQgPSB0cnVlO1xuXG4gICAgICBpZiAob3ZlcmxhcHNSZWYgfHwgb3ZlcmZsb3dzQm91bmRhcmllcykge1xuICAgICAgICBwbGFjZW1lbnQgPSBmbGlwT3JkZXJbaW5kZXggKyAxXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgICAgdmFyaWF0aW9uID0gZ2V0T3Bwb3NpdGVWYXJpYXRpb24odmFyaWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgZGF0YS5wbGFjZW1lbnQgPSBwbGFjZW1lbnQgKyAodmFyaWF0aW9uID8gJy0nICsgdmFyaWF0aW9uIDogJycpO1xuXG4gICAgICAvLyB0aGlzIG9iamVjdCBjb250YWlucyBgcG9zaXRpb25gLCB3ZSB3YW50IHRvIHByZXNlcnZlIGl0IGFsb25nIHdpdGhcbiAgICAgIC8vIGFueSBhZGRpdGlvbmFsIHByb3BlcnR5IHdlIG1heSBhZGQgaW4gdGhlIGZ1dHVyZVxuICAgICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBkYXRhLm9mZnNldHMucG9wcGVyLCBnZXRQb3BwZXJPZmZzZXRzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLm9mZnNldHMucmVmZXJlbmNlLCBkYXRhLnBsYWNlbWVudCkpO1xuXG4gICAgICBkYXRhID0gcnVuTW9kaWZpZXJzKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBkYXRhLCAnZmxpcCcpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24ga2VlcFRvZ2V0aGVyKGRhdGEpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTE7XG4gIHZhciBzaWRlID0gaXNWZXJ0aWNhbCA/ICdyaWdodCcgOiAnYm90dG9tJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICBpZiAocG9wcGVyW3NpZGVdIDwgZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW29wU2lkZV0pIC0gcG9wcGVyW21lYXN1cmVtZW50XTtcbiAgfVxuICBpZiAocG9wcGVyW29wU2lkZV0gPiBmbG9vcihyZWZlcmVuY2Vbc2lkZV0pKSB7XG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlcltvcFNpZGVdID0gZmxvb3IocmVmZXJlbmNlW3NpZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdmFsdWUgKyB1bml0IGludG8gYSBweCB2YWx1ZSBudW1iZXJcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBzdHIgLSBWYWx1ZSArIHVuaXQgc3RyaW5nXG4gKiBAYXJndW1lbnQge1N0cmluZ30gbWVhc3VyZW1lbnQgLSBgaGVpZ2h0YCBvciBgd2lkdGhgXG4gKiBAYXJndW1lbnQge09iamVjdH0gcG9wcGVyT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHNcbiAqIEByZXR1cm5zIHtOdW1iZXJ8U3RyaW5nfVxuICogVmFsdWUgaW4gcGl4ZWxzLCBvciBvcmlnaW5hbCBzdHJpbmcgaWYgbm8gdmFsdWVzIHdlcmUgZXh0cmFjdGVkXG4gKi9cbmZ1bmN0aW9uIHRvVmFsdWUoc3RyLCBtZWFzdXJlbWVudCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cykge1xuICAvLyBzZXBhcmF0ZSB2YWx1ZSBmcm9tIHVuaXRcbiAgdmFyIHNwbGl0ID0gc3RyLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKTtcbiAgdmFyIHZhbHVlID0gK3NwbGl0WzFdO1xuICB2YXIgdW5pdCA9IHNwbGl0WzJdO1xuXG4gIC8vIElmIGl0J3Mgbm90IGEgbnVtYmVyIGl0J3MgYW4gb3BlcmF0b3IsIEkgZ3Vlc3NcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cblxuICBpZiAodW5pdC5pbmRleE9mKCclJykgPT09IDApIHtcbiAgICB2YXIgZWxlbWVudCA9IHZvaWQgMDtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJyVwJzpcbiAgICAgICAgZWxlbWVudCA9IHBvcHBlck9mZnNldHM7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnJSc6XG4gICAgICBjYXNlICclcic6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlbGVtZW50ID0gcmVmZXJlbmNlT2Zmc2V0cztcbiAgICB9XG5cbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgcmV0dXJuIHJlY3RbbWVhc3VyZW1lbnRdIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gJ3ZoJyB8fCB1bml0ID09PSAndncnKSB7XG4gICAgLy8gaWYgaXMgYSB2aCBvciB2dywgd2UgY2FsY3VsYXRlIHRoZSBzaXplIGJhc2VkIG9uIHRoZSB2aWV3cG9ydFxuICAgIHZhciBzaXplID0gdm9pZCAwO1xuICAgIGlmICh1bml0ID09PSAndmgnKSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaXplID0gTWF0aC5tYXgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLCB3aW5kb3cuaW5uZXJXaWR0aCB8fCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpemUgLyAxMDAgKiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBpZiBpcyBhbiBleHBsaWNpdCBwaXhlbCB1bml0LCB3ZSBnZXQgcmlkIG9mIHRoZSB1bml0IGFuZCBrZWVwIHRoZSB2YWx1ZVxuICAgIC8vIGlmIGlzIGFuIGltcGxpY2l0IHVuaXQsIGl0J3MgcHgsIGFuZCB3ZSByZXR1cm4ganVzdCB0aGUgdmFsdWVcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJzZSBhbiBgb2Zmc2V0YCBzdHJpbmcgdG8gZXh0cmFwb2xhdGUgYHhgIGFuZCBgeWAgbnVtZXJpYyBvZmZzZXRzLlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2Yge21vZGlmaWVyc35vZmZzZXR9XG4gKiBAcHJpdmF0ZVxuICogQGFyZ3VtZW50IHtTdHJpbmd9IG9mZnNldFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gYmFzZVBsYWNlbWVudFxuICogQHJldHVybnMge0FycmF5fSBhIHR3byBjZWxscyBhcnJheSB3aXRoIHggYW5kIHkgb2Zmc2V0cyBpbiBudW1iZXJzXG4gKi9cbmZ1bmN0aW9uIHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyT2Zmc2V0cywgcmVmZXJlbmNlT2Zmc2V0cywgYmFzZVBsYWNlbWVudCkge1xuICB2YXIgb2Zmc2V0cyA9IFswLCAwXTtcblxuICAvLyBVc2UgaGVpZ2h0IGlmIHBsYWNlbWVudCBpcyBsZWZ0IG9yIHJpZ2h0IGFuZCBpbmRleCBpcyAwIG90aGVyd2lzZSB1c2Ugd2lkdGhcbiAgLy8gaW4gdGhpcyB3YXkgdGhlIGZpcnN0IG9mZnNldCB3aWxsIHVzZSBhbiBheGlzIGFuZCB0aGUgc2Vjb25kIG9uZVxuICAvLyB3aWxsIHVzZSB0aGUgb3RoZXIgb25lXG4gIHZhciB1c2VIZWlnaHQgPSBbJ3JpZ2h0JywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcblxuICAvLyBTcGxpdCB0aGUgb2Zmc2V0IHN0cmluZyB0byBvYnRhaW4gYSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHNcbiAgLy8gVGhlIHJlZ2V4IGFkZHJlc3NlcyB2YWx1ZXMgd2l0aCB0aGUgcGx1cyBvciBtaW51cyBzaWduIGluIGZyb250ICgrMTAsIC0yMCwgZXRjKVxuICB2YXIgZnJhZ21lbnRzID0gb2Zmc2V0LnNwbGl0KC8oXFwrfFxcLSkvKS5tYXAoZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy50cmltKCk7XG4gIH0pO1xuXG4gIC8vIERldGVjdCBpZiB0aGUgb2Zmc2V0IHN0cmluZyBjb250YWlucyBhIHBhaXIgb2YgdmFsdWVzIG9yIGEgc2luZ2xlIG9uZVxuICAvLyB0aGV5IGNvdWxkIGJlIHNlcGFyYXRlZCBieSBjb21tYSBvciBzcGFjZVxuICB2YXIgZGl2aWRlciA9IGZyYWdtZW50cy5pbmRleE9mKGZpbmQoZnJhZ21lbnRzLCBmdW5jdGlvbiAoZnJhZykge1xuICAgIHJldHVybiBmcmFnLnNlYXJjaCgvLHxcXHMvKSAhPT0gLTE7XG4gIH0pKTtcblxuICBpZiAoZnJhZ21lbnRzW2RpdmlkZXJdICYmIGZyYWdtZW50c1tkaXZpZGVyXS5pbmRleE9mKCcsJykgPT09IC0xKSB7XG4gICAgY29uc29sZS53YXJuKCdPZmZzZXRzIHNlcGFyYXRlZCBieSB3aGl0ZSBzcGFjZShzKSBhcmUgZGVwcmVjYXRlZCwgdXNlIGEgY29tbWEgKCwpIGluc3RlYWQuJyk7XG4gIH1cblxuICAvLyBJZiBkaXZpZGVyIGlzIGZvdW5kLCB3ZSBkaXZpZGUgdGhlIGxpc3Qgb2YgdmFsdWVzIGFuZCBvcGVyYW5kcyB0byBkaXZpZGVcbiAgLy8gdGhlbSBieSBvZnNldCBYIGFuZCBZLlxuICB2YXIgc3BsaXRSZWdleCA9IC9cXHMqLFxccyp8XFxzKy87XG4gIHZhciBvcHMgPSBkaXZpZGVyICE9PSAtMSA/IFtmcmFnbWVudHMuc2xpY2UoMCwgZGl2aWRlcikuY29uY2F0KFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMF1dKSwgW2ZyYWdtZW50c1tkaXZpZGVyXS5zcGxpdChzcGxpdFJlZ2V4KVsxXV0uY29uY2F0KGZyYWdtZW50cy5zbGljZShkaXZpZGVyICsgMSkpXSA6IFtmcmFnbWVudHNdO1xuXG4gIC8vIENvbnZlcnQgdGhlIHZhbHVlcyB3aXRoIHVuaXRzIHRvIGFic29sdXRlIHBpeGVscyB0byBhbGxvdyBvdXIgY29tcHV0YXRpb25zXG4gIG9wcyA9IG9wcy5tYXAoZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIC8vIE1vc3Qgb2YgdGhlIHVuaXRzIHJlbHkgb24gdGhlIG9yaWVudGF0aW9uIG9mIHRoZSBwb3BwZXJcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSAoaW5kZXggPT09IDEgPyAhdXNlSGVpZ2h0IDogdXNlSGVpZ2h0KSA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgICB2YXIgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICByZXR1cm4gb3BcbiAgICAvLyBUaGlzIGFnZ3JlZ2F0ZXMgYW55IGArYCBvciBgLWAgc2lnbiB0aGF0IGFyZW4ndCBjb25zaWRlcmVkIG9wZXJhdG9yc1xuICAgIC8vIGUuZy46IDEwICsgKzUgPT4gWzEwLCArLCArNV1cbiAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICBpZiAoYVthLmxlbmd0aCAtIDFdID09PSAnJyAmJiBbJysnLCAnLSddLmluZGV4T2YoYikgIT09IC0xKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSA9IGI7XG4gICAgICAgIG1lcmdlV2l0aFByZXZpb3VzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2UgaWYgKG1lcmdlV2l0aFByZXZpb3VzKSB7XG4gICAgICAgIGFbYS5sZW5ndGggLSAxXSArPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICAgIH1cbiAgICB9LCBbXSlcbiAgICAvLyBIZXJlIHdlIGNvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZXMgaW50byBudW1iZXIgdmFsdWVzIChpbiBweClcbiAgICAubWFwKGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHJldHVybiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpO1xuICAgIH0pO1xuICB9KTtcblxuICAvLyBMb29wIHRyb3VnaCB0aGUgb2Zmc2V0cyBhcnJheXMgYW5kIGV4ZWN1dGUgdGhlIG9wZXJhdGlvbnNcbiAgb3BzLmZvckVhY2goZnVuY3Rpb24gKG9wLCBpbmRleCkge1xuICAgIG9wLmZvckVhY2goZnVuY3Rpb24gKGZyYWcsIGluZGV4Mikge1xuICAgICAgaWYgKGlzTnVtZXJpYyhmcmFnKSkge1xuICAgICAgICBvZmZzZXRzW2luZGV4XSArPSBmcmFnICogKG9wW2luZGV4MiAtIDFdID09PSAnLScgPyAtMSA6IDEpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQGFyZ3VtZW50IHtOdW1iZXJ8U3RyaW5nfSBvcHRpb25zLm9mZnNldD0wXG4gKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gb2Zmc2V0KGRhdGEsIF9yZWYpIHtcbiAgdmFyIG9mZnNldCA9IF9yZWYub2Zmc2V0O1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQsXG4gICAgICBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIHZhciBvZmZzZXRzID0gdm9pZCAwO1xuICBpZiAoaXNOdW1lcmljKCtvZmZzZXQpKSB7XG4gICAgb2Zmc2V0cyA9IFsrb2Zmc2V0LCAwXTtcbiAgfSBlbHNlIHtcbiAgICBvZmZzZXRzID0gcGFyc2VPZmZzZXQob2Zmc2V0LCBwb3BwZXIsIHJlZmVyZW5jZSwgYmFzZVBsYWNlbWVudCk7XG4gIH1cblxuICBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2xlZnQnKSB7XG4gICAgcG9wcGVyLnRvcCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci5sZWZ0IC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ3JpZ2h0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICd0b3AnKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wIC09IG9mZnNldHNbMV07XG4gIH0gZWxzZSBpZiAoYmFzZVBsYWNlbWVudCA9PT0gJ2JvdHRvbScpIHtcbiAgICBwb3BwZXIubGVmdCArPSBvZmZzZXRzWzBdO1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1sxXTtcbiAgfVxuXG4gIGRhdGEucG9wcGVyID0gcG9wcGVyO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIGJvdW5kYXJpZXNFbGVtZW50ID0gb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCB8fCBnZXRPZmZzZXRQYXJlbnQoZGF0YS5pbnN0YW5jZS5wb3BwZXIpO1xuXG4gIC8vIElmIG9mZnNldFBhcmVudCBpcyB0aGUgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIHJlYWxseSB3YW50IHRvXG4gIC8vIGdvIG9uZSBzdGVwIHVwIGFuZCB1c2UgdGhlIG5leHQgb2Zmc2V0UGFyZW50IGFzIHJlZmVyZW5jZSB0b1xuICAvLyBhdm9pZCB0byBtYWtlIHRoaXMgbW9kaWZpZXIgY29tcGxldGVseSB1c2VsZXNzIGFuZCBsb29rIGxpa2UgYnJva2VuXG4gIGlmIChkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSA9PT0gYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICBib3VuZGFyaWVzRWxlbWVudCA9IGdldE9mZnNldFBhcmVudChib3VuZGFyaWVzRWxlbWVudCk7XG4gIH1cblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzZXRzIHRoZSBwb3BwZXIncyBwb3NpdGlvbiBzbyB0aGF0IHRoZSBkb2N1bWVudCBzaXplIGNhbiBiZSBjYWxjdWxhdGVkIGV4Y2x1ZGluZ1xuICAvLyB0aGUgc2l6ZSBvZiB0aGUgcG9wcGVyIGVsZW1lbnQgaXRzZWxmXG4gIHZhciB0cmFuc2Zvcm1Qcm9wID0gZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lKCd0cmFuc2Zvcm0nKTtcbiAgdmFyIHBvcHBlclN0eWxlcyA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnN0eWxlOyAvLyBhc3NpZ25tZW50IHRvIGhlbHAgbWluaWZpY2F0aW9uXG4gIHZhciB0b3AgPSBwb3BwZXJTdHlsZXMudG9wLFxuICAgICAgbGVmdCA9IHBvcHBlclN0eWxlcy5sZWZ0LFxuICAgICAgdHJhbnNmb3JtID0gcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdO1xuXG4gIHBvcHBlclN0eWxlcy50b3AgPSAnJztcbiAgcG9wcGVyU3R5bGVzLmxlZnQgPSAnJztcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gJyc7XG5cbiAgdmFyIGJvdW5kYXJpZXMgPSBnZXRCb3VuZGFyaWVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLmluc3RhbmNlLnJlZmVyZW5jZSwgb3B0aW9ucy5wYWRkaW5nLCBib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICAvLyBOT1RFOiBET00gYWNjZXNzIGhlcmVcbiAgLy8gcmVzdG9yZXMgdGhlIG9yaWdpbmFsIHN0eWxlIHByb3BlcnRpZXMgYWZ0ZXIgdGhlIG9mZnNldHMgaGF2ZSBiZWVuIGNvbXB1dGVkXG4gIHBvcHBlclN0eWxlcy50b3AgPSB0b3A7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gbGVmdDtcbiAgcG9wcGVyU3R5bGVzW3RyYW5zZm9ybVByb3BdID0gdHJhbnNmb3JtO1xuXG4gIG9wdGlvbnMuYm91bmRhcmllcyA9IGJvdW5kYXJpZXM7XG5cbiAgdmFyIG9yZGVyID0gb3B0aW9ucy5wcmlvcml0eTtcbiAgdmFyIHBvcHBlciA9IGRhdGEub2Zmc2V0cy5wb3BwZXI7XG5cbiAgdmFyIGNoZWNrID0ge1xuICAgIHByaW1hcnk6IGZ1bmN0aW9uIHByaW1hcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbcGxhY2VtZW50XTtcbiAgICAgIGlmIChwb3BwZXJbcGxhY2VtZW50XSA8IGJvdW5kYXJpZXNbcGxhY2VtZW50XSAmJiAhb3B0aW9ucy5lc2NhcGVXaXRoUmVmZXJlbmNlKSB7XG4gICAgICAgIHZhbHVlID0gTWF0aC5tYXgocG9wcGVyW3BsYWNlbWVudF0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIHBsYWNlbWVudCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2Vjb25kYXJ5OiBmdW5jdGlvbiBzZWNvbmRhcnkocGxhY2VtZW50KSB7XG4gICAgICB2YXIgbWFpblNpZGUgPSBwbGFjZW1lbnQgPT09ICdyaWdodCcgPyAnbGVmdCcgOiAndG9wJztcbiAgICAgIHZhciB2YWx1ZSA9IHBvcHBlclttYWluU2lkZV07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPiBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWluKHBvcHBlclttYWluU2lkZV0sIGJvdW5kYXJpZXNbcGxhY2VtZW50XSAtIChwbGFjZW1lbnQgPT09ICdyaWdodCcgPyBwb3BwZXIud2lkdGggOiBwb3BwZXIuaGVpZ2h0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmaW5lUHJvcGVydHkoe30sIG1haW5TaWRlLCB2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIG9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHZhciBzaWRlID0gWydsZWZ0JywgJ3RvcCddLmluZGV4T2YocGxhY2VtZW50KSAhPT0gLTEgPyAncHJpbWFyeScgOiAnc2Vjb25kYXJ5JztcbiAgICBwb3BwZXIgPSBfZXh0ZW5kcyh7fSwgcG9wcGVyLCBjaGVja1tzaWRlXShwbGFjZW1lbnQpKTtcbiAgfSk7XG5cbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IHBvcHBlcjtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gc2hpZnQoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBzaGlmdHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIC8vIGlmIHNoaWZ0IHNoaWZ0dmFyaWF0aW9uIGlzIHNwZWNpZmllZCwgcnVuIHRoZSBtb2RpZmllclxuICBpZiAoc2hpZnR2YXJpYXRpb24pIHtcbiAgICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2UsXG4gICAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyO1xuXG4gICAgdmFyIGlzVmVydGljYWwgPSBbJ2JvdHRvbScsICd0b3AnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpICE9PSAtMTtcbiAgICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgICB2YXIgbWVhc3VyZW1lbnQgPSBpc1ZlcnRpY2FsID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuXG4gICAgdmFyIHNoaWZ0T2Zmc2V0cyA9IHtcbiAgICAgIHN0YXJ0OiBkZWZpbmVQcm9wZXJ0eSh7fSwgc2lkZSwgcmVmZXJlbmNlW3NpZGVdKSxcbiAgICAgIGVuZDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSArIHJlZmVyZW5jZVttZWFzdXJlbWVudF0gLSBwb3BwZXJbbWVhc3VyZW1lbnRdKVxuICAgIH07XG5cbiAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgc2hpZnRPZmZzZXRzW3NoaWZ0dmFyaWF0aW9uXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGhpZGUoZGF0YSkge1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2hpZGUnLCAncHJldmVudE92ZXJmbG93JykpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciByZWZSZWN0ID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcbiAgdmFyIGJvdW5kID0gZmluZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuIG1vZGlmaWVyLm5hbWUgPT09ICdwcmV2ZW50T3ZlcmZsb3cnO1xuICB9KS5ib3VuZGFyaWVzO1xuXG4gIGlmIChyZWZSZWN0LmJvdHRvbSA8IGJvdW5kLnRvcCB8fCByZWZSZWN0LmxlZnQgPiBib3VuZC5yaWdodCB8fCByZWZSZWN0LnRvcCA+IGJvdW5kLmJvdHRvbSB8fCByZWZSZWN0LnJpZ2h0IDwgYm91bmQubGVmdCkge1xuICAgIC8vIEF2b2lkIHVubmVjZXNzYXJ5IERPTSBhY2Nlc3MgaWYgdmlzaWJpbGl0eSBoYXNuJ3QgY2hhbmdlZFxuICAgIGlmIChkYXRhLmhpZGUgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IHRydWU7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSAnJztcbiAgfSBlbHNlIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgZGF0YS5oaWRlID0gZmFsc2U7XG4gICAgZGF0YS5hdHRyaWJ1dGVzWyd4LW91dC1vZi1ib3VuZGFyaWVzJ10gPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBpbm5lcihkYXRhKSB7XG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcixcbiAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlO1xuXG4gIHZhciBpc0hvcml6ID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgdmFyIHN1YnRyYWN0TGVuZ3RoID0gWyd0b3AnLCAnbGVmdCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPT09IC0xO1xuXG4gIHBvcHBlcltpc0hvcml6ID8gJ2xlZnQnIDogJ3RvcCddID0gcmVmZXJlbmNlW2Jhc2VQbGFjZW1lbnRdIC0gKHN1YnRyYWN0TGVuZ3RoID8gcG9wcGVyW2lzSG9yaXogPyAnd2lkdGgnIDogJ2hlaWdodCddIDogMCk7XG5cbiAgZGF0YS5wbGFjZW1lbnQgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChwb3BwZXIpO1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG4vKipcbiAqIE1vZGlmaWVyIGZ1bmN0aW9uLCBlYWNoIG1vZGlmaWVyIGNhbiBoYXZlIGEgZnVuY3Rpb24gb2YgdGhpcyB0eXBlIGFzc2lnbmVkXG4gKiB0byBpdHMgYGZuYCBwcm9wZXJ0eS48YnIgLz5cbiAqIFRoZXNlIGZ1bmN0aW9ucyB3aWxsIGJlIGNhbGxlZCBvbiBlYWNoIHVwZGF0ZSwgdGhpcyBtZWFucyB0aGF0IHlvdSBtdXN0XG4gKiBtYWtlIHN1cmUgdGhleSBhcmUgcGVyZm9ybWFudCBlbm91Z2ggdG8gYXZvaWQgcGVyZm9ybWFuY2UgYm90dGxlbmVja3MuXG4gKlxuICogQGZ1bmN0aW9uIE1vZGlmaWVyRm5cbiAqIEBhcmd1bWVudCB7ZGF0YU9iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7ZGF0YU9iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5cbi8qKlxuICogTW9kaWZpZXJzIGFyZSBwbHVnaW5zIHVzZWQgdG8gYWx0ZXIgdGhlIGJlaGF2aW9yIG9mIHlvdXIgcG9wcGVycy48YnIgLz5cbiAqIFBvcHBlci5qcyB1c2VzIGEgc2V0IG9mIDkgbW9kaWZpZXJzIHRvIHByb3ZpZGUgYWxsIHRoZSBiYXNpYyBmdW5jdGlvbmFsaXRpZXNcbiAqIG5lZWRlZCBieSB0aGUgbGlicmFyeS5cbiAqXG4gKiBVc3VhbGx5IHlvdSBkb24ndCB3YW50IHRvIG92ZXJyaWRlIHRoZSBgb3JkZXJgLCBgZm5gIGFuZCBgb25Mb2FkYCBwcm9wcy5cbiAqIEFsbCB0aGUgb3RoZXIgcHJvcGVydGllcyBhcmUgY29uZmlndXJhdGlvbnMgdGhhdCBjb3VsZCBiZSB0d2Vha2VkLlxuICogQG5hbWVzcGFjZSBtb2RpZmllcnNcbiAqL1xudmFyIG1vZGlmaWVycyA9IHtcbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gc2hpZnQgdGhlIHBvcHBlciBvbiB0aGUgc3RhcnQgb3IgZW5kIG9mIGl0cyByZWZlcmVuY2VcbiAgICogZWxlbWVudC48YnIgLz5cbiAgICogSXQgd2lsbCByZWFkIHRoZSB2YXJpYXRpb24gb2YgdGhlIGBwbGFjZW1lbnRgIHByb3BlcnR5LjxiciAvPlxuICAgKiBJdCBjYW4gYmUgb25lIGVpdGhlciBgLWVuZGAgb3IgYC1zdGFydGAuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBzaGlmdDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0xMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHNoaWZ0XG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoZSBgb2Zmc2V0YCBtb2RpZmllciBjYW4gc2hpZnQgeW91ciBwb3BwZXIgb24gYm90aCBpdHMgYXhpcy5cbiAgICpcbiAgICogSXQgYWNjZXB0cyB0aGUgZm9sbG93aW5nIHVuaXRzOlxuICAgKiAtIGBweGAgb3IgdW5pdC1sZXNzLCBpbnRlcnByZXRlZCBhcyBwaXhlbHNcbiAgICogLSBgJWAgb3IgYCVyYCwgcGVyY2VudGFnZSByZWxhdGl2ZSB0byB0aGUgbGVuZ3RoIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudFxuICAgKiAtIGAlcGAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcG9wcGVyIGVsZW1lbnRcbiAgICogLSBgdndgLCBDU1Mgdmlld3BvcnQgd2lkdGggdW5pdFxuICAgKiAtIGB2aGAsIENTUyB2aWV3cG9ydCBoZWlnaHQgdW5pdFxuICAgKlxuICAgKiBGb3IgbGVuZ3RoIGlzIGludGVuZGVkIHRoZSBtYWluIGF4aXMgcmVsYXRpdmUgdG8gdGhlIHBsYWNlbWVudCBvZiB0aGUgcG9wcGVyLjxiciAvPlxuICAgKiBUaGlzIG1lYW5zIHRoYXQgaWYgdGhlIHBsYWNlbWVudCBpcyBgdG9wYCBvciBgYm90dG9tYCwgdGhlIGxlbmd0aCB3aWxsIGJlIHRoZVxuICAgKiBgd2lkdGhgLiBJbiBjYXNlIG9mIGBsZWZ0YCBvciBgcmlnaHRgLCBpdCB3aWxsIGJlIHRoZSBgaGVpZ2h0YC5cbiAgICpcbiAgICogWW91IGNhbiBwcm92aWRlIGEgc2luZ2xlIHZhbHVlIChhcyBgTnVtYmVyYCBvciBgU3RyaW5nYCksIG9yIGEgcGFpciBvZiB2YWx1ZXNcbiAgICogYXMgYFN0cmluZ2AgZGl2aWRlZCBieSBhIGNvbW1hIG9yIG9uZSAob3IgbW9yZSkgd2hpdGUgc3BhY2VzLjxiciAvPlxuICAgKiBUaGUgbGF0dGVyIGlzIGEgZGVwcmVjYXRlZCBtZXRob2QgYmVjYXVzZSBpdCBsZWFkcyB0byBjb25mdXNpb24gYW5kIHdpbGwgYmVcbiAgICogcmVtb3ZlZCBpbiB2Mi48YnIgLz5cbiAgICogQWRkaXRpb25hbGx5LCBpdCBhY2NlcHRzIGFkZGl0aW9ucyBhbmQgc3VidHJhY3Rpb25zIGJldHdlZW4gZGlmZmVyZW50IHVuaXRzLlxuICAgKiBOb3RlIHRoYXQgbXVsdGlwbGljYXRpb25zIGFuZCBkaXZpc2lvbnMgYXJlbid0IHN1cHBvcnRlZC5cbiAgICpcbiAgICogVmFsaWQgZXhhbXBsZXMgYXJlOlxuICAgKiBgYGBcbiAgICogMTBcbiAgICogJzEwJSdcbiAgICogJzEwLCAxMCdcbiAgICogJzEwJSwgMTAnXG4gICAqICcxMCArIDEwJSdcbiAgICogJzEwIC0gNXZoICsgMyUnXG4gICAqICctMTBweCArIDV2aCwgNXB4IC0gNiUnXG4gICAqIGBgYFxuICAgKiA+ICoqTkIqKjogSWYgeW91IGRlc2lyZSB0byBhcHBseSBvZmZzZXRzIHRvIHlvdXIgcG9wcGVycyBpbiBhIHdheSB0aGF0IG1heSBtYWtlIHRoZW0gb3ZlcmxhcFxuICAgKiA+IHdpdGggdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnQsIHVuZm9ydHVuYXRlbHksIHlvdSB3aWxsIGhhdmUgdG8gZGlzYWJsZSB0aGUgYGZsaXBgIG1vZGlmaWVyLlxuICAgKiA+IFlvdSBjYW4gcmVhZCBtb3JlIG9uIHRoaXMgYXQgdGhpcyBbaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL2lzc3Vlcy8zNzMpLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgb2Zmc2V0OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTIwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogb2Zmc2V0LFxuICAgIC8qKiBAcHJvcCB7TnVtYmVyfFN0cmluZ30gb2Zmc2V0PTBcbiAgICAgKiBUaGUgb2Zmc2V0IHZhbHVlIGFzIGRlc2NyaWJlZCBpbiB0aGUgbW9kaWZpZXIgZGVzY3JpcHRpb25cbiAgICAgKi9cbiAgICBvZmZzZXQ6IDBcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBwcmV2ZW50IHRoZSBwb3BwZXIgZnJvbSBiZWluZyBwb3NpdGlvbmVkIG91dHNpZGUgdGhlIGJvdW5kYXJ5LlxuICAgKlxuICAgKiBBIHNjZW5hcmlvIGV4aXN0cyB3aGVyZSB0aGUgcmVmZXJlbmNlIGl0c2VsZiBpcyBub3Qgd2l0aGluIHRoZSBib3VuZGFyaWVzLjxiciAvPlxuICAgKiBXZSBjYW4gc2F5IGl0IGhhcyBcImVzY2FwZWQgdGhlIGJvdW5kYXJpZXNcIiDigJQgb3IganVzdCBcImVzY2FwZWRcIi48YnIgLz5cbiAgICogSW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gZGVjaWRlIHdoZXRoZXIgdGhlIHBvcHBlciBzaG91bGQgZWl0aGVyOlxuICAgKlxuICAgKiAtIGRldGFjaCBmcm9tIHRoZSByZWZlcmVuY2UgYW5kIHJlbWFpbiBcInRyYXBwZWRcIiBpbiB0aGUgYm91bmRhcmllcywgb3JcbiAgICogLSBpZiBpdCBzaG91bGQgaWdub3JlIHRoZSBib3VuZGFyeSBhbmQgXCJlc2NhcGUgd2l0aCBpdHMgcmVmZXJlbmNlXCJcbiAgICpcbiAgICogV2hlbiBgZXNjYXBlV2l0aFJlZmVyZW5jZWAgaXMgc2V0IHRvYHRydWVgIGFuZCByZWZlcmVuY2UgaXMgY29tcGxldGVseVxuICAgKiBvdXRzaWRlIGl0cyBib3VuZGFyaWVzLCB0aGUgcG9wcGVyIHdpbGwgb3ZlcmZsb3cgKG9yIGNvbXBsZXRlbHkgbGVhdmUpXG4gICAqIHRoZSBib3VuZGFyaWVzIGluIG9yZGVyIHRvIHJlbWFpbiBhdHRhY2hlZCB0byB0aGUgZWRnZSBvZiB0aGUgcmVmZXJlbmNlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTMwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogMzAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogcHJldmVudE92ZXJmbG93LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtBcnJheX0gW3ByaW9yaXR5PVsnbGVmdCcsJ3JpZ2h0JywndG9wJywnYm90dG9tJ11dXG4gICAgICogUG9wcGVyIHdpbGwgdHJ5IHRvIHByZXZlbnQgb3ZlcmZsb3cgZm9sbG93aW5nIHRoZXNlIHByaW9yaXRpZXMgYnkgZGVmYXVsdCxcbiAgICAgKiB0aGVuLCBpdCBjb3VsZCBvdmVyZmxvdyBvbiB0aGUgbGVmdCBhbmQgb24gdG9wIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcHJpb3JpdHk6IFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10sXG4gICAgLyoqXG4gICAgICogQHByb3Age251bWJlcn0gcGFkZGluZz01XG4gICAgICogQW1vdW50IG9mIHBpeGVsIHVzZWQgdG8gZGVmaW5lIGEgbWluaW11bSBkaXN0YW5jZSBiZXR3ZWVuIHRoZSBib3VuZGFyaWVzXG4gICAgICogYW5kIHRoZSBwb3BwZXIuIFRoaXMgbWFrZXMgc3VyZSB0aGUgcG9wcGVyIGFsd2F5cyBoYXMgYSBsaXR0bGUgcGFkZGluZ1xuICAgICAqIGJldHdlZW4gdGhlIGVkZ2VzIG9mIGl0cyBjb250YWluZXJcbiAgICAgKi9cbiAgICBwYWRkaW5nOiA1LFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtTdHJpbmd8SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50PSdzY3JvbGxQYXJlbnQnXG4gICAgICogQm91bmRhcmllcyB1c2VkIGJ5IHRoZSBtb2RpZmllci4gQ2FuIGJlIGBzY3JvbGxQYXJlbnRgLCBgd2luZG93YCxcbiAgICAgKiBgdmlld3BvcnRgIG9yIGFueSBET00gZWxlbWVudC5cbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3Njcm9sbFBhcmVudCdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHN1cmUgdGhlIHJlZmVyZW5jZSBhbmQgaXRzIHBvcHBlciBzdGF5IG5lYXIgZWFjaCBvdGhlclxuICAgKiB3aXRob3V0IGxlYXZpbmcgYW55IGdhcCBiZXR3ZWVuIHRoZSB0d28uIEVzcGVjaWFsbHkgdXNlZnVsIHdoZW4gdGhlIGFycm93IGlzXG4gICAqIGVuYWJsZWQgYW5kIHlvdSB3YW50IHRvIGVuc3VyZSB0aGF0IGl0IHBvaW50cyB0byBpdHMgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEl0IGNhcmVzIG9ubHkgYWJvdXQgdGhlIGZpcnN0IGF4aXMuIFlvdSBjYW4gc3RpbGwgaGF2ZSBwb3BwZXJzIHdpdGggbWFyZ2luXG4gICAqIGJldHdlZW4gdGhlIHBvcHBlciBhbmQgaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAga2VlcFRvZ2V0aGVyOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTQwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNDAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjoga2VlcFRvZ2V0aGVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIFRoaXMgbW9kaWZpZXIgaXMgdXNlZCB0byBtb3ZlIHRoZSBgYXJyb3dFbGVtZW50YCBvZiB0aGUgcG9wcGVyIHRvIG1ha2VcbiAgICogc3VyZSBpdCBpcyBwb3NpdGlvbmVkIGJldHdlZW4gdGhlIHJlZmVyZW5jZSBlbGVtZW50IGFuZCBpdHMgcG9wcGVyIGVsZW1lbnQuXG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgb3V0ZXIgc2l6ZSBvZiB0aGUgYGFycm93RWxlbWVudGAgbm9kZSB0byBkZXRlY3QgaG93IG1hbnlcbiAgICogcGl4ZWxzIG9mIGNvbmp1bmN0aW9uIGFyZSBuZWVkZWQuXG4gICAqXG4gICAqIEl0IGhhcyBubyBlZmZlY3QgaWYgbm8gYGFycm93RWxlbWVudGAgaXMgcHJvdmlkZWQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcnJvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj01MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDUwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFycm93LFxuICAgIC8qKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBlbGVtZW50PSdbeC1hcnJvd10nIC0gU2VsZWN0b3Igb3Igbm9kZSB1c2VkIGFzIGFycm93ICovXG4gICAgZWxlbWVudDogJ1t4LWFycm93XSdcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBmbGlwIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQgd2hlbiBpdCBzdGFydHMgdG8gb3ZlcmxhcCBpdHNcbiAgICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICpcbiAgICogKipOT1RFOioqIHRoaXMgbW9kaWZpZXIgd2lsbCBpbnRlcnJ1cHQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlIGFuZCB3aWxsXG4gICAqIHJlc3RhcnQgaXQgaWYgaXQgZGV0ZWN0cyB0aGUgbmVlZCB0byBmbGlwIHRoZSBwbGFjZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBmbGlwOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTYwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogNjAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogZmxpcCxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEFycmF5fSBiZWhhdmlvcj0nZmxpcCdcbiAgICAgKiBUaGUgYmVoYXZpb3IgdXNlZCB0byBjaGFuZ2UgdGhlIHBvcHBlcidzIHBsYWNlbWVudC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAqIGBmbGlwYCwgYGNsb2Nrd2lzZWAsIGBjb3VudGVyY2xvY2t3aXNlYCBvciBhbiBhcnJheSB3aXRoIGEgbGlzdCBvZiB2YWxpZFxuICAgICAqIHBsYWNlbWVudHMgKHdpdGggb3B0aW9uYWwgdmFyaWF0aW9ucylcbiAgICAgKi9cbiAgICBiZWhhdmlvcjogJ2ZsaXAnLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBmbGlwIGlmIGl0IGhpdHMgdGhlIGVkZ2VzIG9mIHRoZSBgYm91bmRhcmllc0VsZW1lbnRgXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0ndmlld3BvcnQnXG4gICAgICogVGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBkZWZpbmUgdGhlIGJvdW5kYXJpZXMgb2YgdGhlIHBvcHBlciBwb3NpdGlvbi5cbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgbmV2ZXIgYmUgcGxhY2VkIG91dHNpZGUgb2YgdGhlIGRlZmluZWQgYm91bmRhcmllc1xuICAgICAqIChleGNlcHQgaWYgYGtlZXBUb2dldGhlcmAgaXMgZW5hYmxlZClcbiAgICAgKi9cbiAgICBib3VuZGFyaWVzRWxlbWVudDogJ3ZpZXdwb3J0JyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZmxpcFZhcmlhdGlvbnM9ZmFsc2VcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgc3dpdGNoIHBsYWNlbWVudCB2YXJpYXRpb24gYmV0d2VlbiBgLXN0YXJ0YCBhbmQgYC1lbmRgIHdoZW5cbiAgICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgb3ZlcmxhcHMgaXRzIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uczogZmFsc2UsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zQnlDb250ZW50PWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHBvcHBlciBlbGVtZW50IG92ZXJsYXBzIGl0cyByZWZlcmVuY2UgYm91bmRhcmllcy5cbiAgICAgKlxuICAgICAqIFRoZSBvcmlnaW5hbCBwbGFjZW1lbnQgc2hvdWxkIGhhdmUgYSBzZXQgdmFyaWF0aW9uLlxuICAgICAqL1xuICAgIGZsaXBWYXJpYXRpb25zQnlDb250ZW50OiBmYWxzZVxuICB9LFxuXG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIG1ha2UgdGhlIHBvcHBlciBmbG93IHRvd2FyZCB0aGUgaW5uZXIgb2YgdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBCeSBkZWZhdWx0LCB3aGVuIHRoaXMgbW9kaWZpZXIgaXMgZGlzYWJsZWQsIHRoZSBwb3BwZXIgd2lsbCBiZSBwbGFjZWQgb3V0c2lkZVxuICAgKiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBpbm5lcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj03MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDcwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9ZmFsc2UgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaW5uZXJcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBoaWRlIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0c2lkZSBvZiB0aGVcbiAgICogcG9wcGVyIGJvdW5kYXJpZXMuIEl0IHdpbGwgc2V0IGEgYHgtb3V0LW9mLWJvdW5kYXJpZXNgIGF0dHJpYnV0ZSB3aGljaCBjYW5cbiAgICogYmUgdXNlZCB0byBoaWRlIHdpdGggYSBDU1Mgc2VsZWN0b3IgdGhlIHBvcHBlciB3aGVuIGl0cyByZWZlcmVuY2UgaXNcbiAgICogb3V0IG9mIGJvdW5kYXJpZXMuXG4gICAqXG4gICAqIFJlcXVpcmVzIHRoZSBgcHJldmVudE92ZXJmbG93YCBtb2RpZmllciBiZWZvcmUgaXQgaW4gb3JkZXIgdG8gd29yay5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGhpZGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBoaWRlXG4gIH0sXG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIHRoZSBzdHlsZSB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGVsZW1lbnQgdG8gZ2V0c1xuICAgKiBwcm9wZXJseSBwb3NpdGlvbmVkLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgdGhpcyBtb2RpZmllciB3aWxsIG5vdCB0b3VjaCB0aGUgRE9NLCBpdCBqdXN0IHByZXBhcmVzIHRoZSBzdHlsZXNcbiAgICogc28gdGhhdCBgYXBwbHlTdHlsZWAgbW9kaWZpZXIgY2FuIGFwcGx5IGl0LiBUaGlzIHNlcGFyYXRpb24gaXMgdXNlZnVsXG4gICAqIGluIGNhc2UgeW91IG5lZWQgdG8gcmVwbGFjZSBgYXBwbHlTdHlsZWAgd2l0aCBhIGN1c3RvbSBpbXBsZW1lbnRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBtb2RpZmllciBoYXMgYDg1MGAgYXMgYG9yZGVyYCB2YWx1ZSB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAqIHdpdGggcHJldmlvdXMgdmVyc2lvbnMgb2YgUG9wcGVyLmpzLiBFeHBlY3QgdGhlIG1vZGlmaWVycyBvcmRlcmluZyBtZXRob2RcbiAgICogdG8gY2hhbmdlIGluIGZ1dHVyZSBtYWpvciB2ZXJzaW9ucyBvZiB0aGUgbGlicmFyeS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGNvbXB1dGVTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj04NTAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDg1MCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGNvbXB1dGVTdHlsZSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7Qm9vbGVhbn0gZ3B1QWNjZWxlcmF0aW9uPXRydWVcbiAgICAgKiBJZiB0cnVlLCBpdCB1c2VzIHRoZSBDU1MgM0QgdHJhbnNmb3JtYXRpb24gdG8gcG9zaXRpb24gdGhlIHBvcHBlci5cbiAgICAgKiBPdGhlcndpc2UsIGl0IHdpbGwgdXNlIHRoZSBgdG9wYCBhbmQgYGxlZnRgIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBncHVBY2NlbGVyYXRpb246IHRydWUsXG4gICAgLyoqXG4gICAgICogQHByb3Age3N0cmluZ30gW3g9J2JvdHRvbSddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBYIGF4aXMgKGBib3R0b21gIG9yIGB0b3BgKS4gQUtBIFggb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgYm90dG9tYFxuICAgICAqL1xuICAgIHg6ICdib3R0b20nLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdsZWZ0J11cbiAgICAgKiBXaGVyZSB0byBhbmNob3IgdGhlIFkgYXhpcyAoYGxlZnRgIG9yIGByaWdodGApLiBBS0EgWSBvZmZzZXQgb3JpZ2luLlxuICAgICAqIENoYW5nZSB0aGlzIGlmIHlvdXIgcG9wcGVyIHNob3VsZCBncm93IGluIGEgZGlyZWN0aW9uIGRpZmZlcmVudCBmcm9tIGByaWdodGBcbiAgICAgKi9cbiAgICB5OiAncmlnaHQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgdGhlIGNvbXB1dGVkIHN0eWxlcyB0byB0aGUgcG9wcGVyIGVsZW1lbnQuXG4gICAqXG4gICAqIEFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgYXJlIGxpbWl0ZWQgdG8gdGhpcyBtb2RpZmllci4gVGhpcyBpcyB1c2VmdWwgaW4gY2FzZVxuICAgKiB5b3Ugd2FudCB0byBpbnRlZ3JhdGUgUG9wcGVyLmpzIGluc2lkZSBhIGZyYW1ld29yayBvciB2aWV3IGxpYnJhcnkgYW5kIHlvdVxuICAgKiB3YW50IHRvIGRlbGVnYXRlIGFsbCB0aGUgRE9NIG1hbmlwdWxhdGlvbnMgdG8gaXQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB5b3UgZGlzYWJsZSB0aGlzIG1vZGlmaWVyLCB5b3UgbXVzdCBtYWtlIHN1cmUgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIGhhcyBpdHMgcG9zaXRpb24gc2V0IHRvIGBhYnNvbHV0ZWAgYmVmb3JlIFBvcHBlci5qcyBjYW4gZG8gaXRzIHdvcmshXG4gICAqXG4gICAqIEp1c3QgZGlzYWJsZSB0aGlzIG1vZGlmaWVyIGFuZCBkZWZpbmUgeW91ciBvd24gdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCBlZmZlY3QuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBhcHBseVN0eWxlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTkwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogOTAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogYXBwbHlTdHlsZSxcbiAgICAvKiogQHByb3Age0Z1bmN0aW9ufSAqL1xuICAgIG9uTG9hZDogYXBwbHlTdHlsZU9uTG9hZCxcbiAgICAvKipcbiAgICAgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDEuMTAuMCwgdGhlIHByb3BlcnR5IG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB1bmRlZmluZWRcbiAgfVxufTtcblxuLyoqXG4gKiBUaGUgYGRhdGFPYmplY3RgIGlzIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCB0aGUgaW5mb3JtYXRpb24gdXNlZCBieSBQb3BwZXIuanMuXG4gKiBUaGlzIG9iamVjdCBpcyBwYXNzZWQgdG8gbW9kaWZpZXJzIGFuZCB0byB0aGUgYG9uQ3JlYXRlYCBhbmQgYG9uVXBkYXRlYCBjYWxsYmFja3MuXG4gKiBAbmFtZSBkYXRhT2JqZWN0XG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5pbnN0YW5jZSBUaGUgUG9wcGVyLmpzIGluc3RhbmNlXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5wbGFjZW1lbnQgUGxhY2VtZW50IGFwcGxpZWQgdG8gcG9wcGVyXG4gKiBAcHJvcGVydHkge1N0cmluZ30gZGF0YS5vcmlnaW5hbFBsYWNlbWVudCBQbGFjZW1lbnQgb3JpZ2luYWxseSBkZWZpbmVkIG9uIGluaXRcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5mbGlwcGVkIFRydWUgaWYgcG9wcGVyIGhhcyBiZWVuIGZsaXBwZWQgYnkgZmxpcCBtb2RpZmllclxuICogQHByb3BlcnR5IHtCb29sZWFufSBkYXRhLmhpZGUgVHJ1ZSBpZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgaXMgb3V0IG9mIGJvdW5kYXJpZXMsIHVzZWZ1bCB0byBrbm93IHdoZW4gdG8gaGlkZSB0aGUgcG9wcGVyXG4gKiBAcHJvcGVydHkge0hUTUxFbGVtZW50fSBkYXRhLmFycm93RWxlbWVudCBOb2RlIHVzZWQgYXMgYXJyb3cgYnkgYXJyb3cgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLnN0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlci4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmFycm93U3R5bGVzIEFueSBDU1MgcHJvcGVydHkgZGVmaW5lZCBoZXJlIHdpbGwgYmUgYXBwbGllZCB0byB0aGUgcG9wcGVyIGFycm93LiBJdCBleHBlY3RzIHRoZSBKYXZhU2NyaXB0IG5vbWVuY2xhdHVyZSAoZWcuIGBtYXJnaW5Cb3R0b21gKVxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuYm91bmRhcmllcyBPZmZzZXRzIG9mIHRoZSBwb3BwZXIgYm91bmRhcmllc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cyBUaGUgbWVhc3VyZW1lbnRzIG9mIHBvcHBlciwgcmVmZXJlbmNlIGFuZCBhcnJvdyBlbGVtZW50c1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5wb3BwZXIgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSBgdG9wYCwgYGxlZnRgLCBgd2lkdGhgLCBgaGVpZ2h0YCB2YWx1ZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMuYXJyb3ddIGB0b3BgIGFuZCBgbGVmdGAgb2Zmc2V0cywgb25seSBvbmUgb2YgdGhlbSB3aWxsIGJlIGRpZmZlcmVudCBmcm9tIDBcbiAqL1xuXG4vKipcbiAqIERlZmF1bHQgb3B0aW9ucyBwcm92aWRlZCB0byBQb3BwZXIuanMgY29uc3RydWN0b3IuPGJyIC8+XG4gKiBUaGVzZSBjYW4gYmUgb3ZlcnJpZGRlbiB1c2luZyB0aGUgYG9wdGlvbnNgIGFyZ3VtZW50IG9mIFBvcHBlci5qcy48YnIgLz5cbiAqIFRvIG92ZXJyaWRlIGFuIG9wdGlvbiwgc2ltcGx5IHBhc3MgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWVcbiAqIHN0cnVjdHVyZSBvZiB0aGUgYG9wdGlvbnNgIG9iamVjdCwgYXMgdGhlIDNyZCBhcmd1bWVudC4gRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqIG5ldyBQb3BwZXIocmVmLCBwb3AsIHtcbiAqICAgbW9kaWZpZXJzOiB7XG4gKiAgICAgcHJldmVudE92ZXJmbG93OiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICogQHR5cGUge09iamVjdH1cbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xudmFyIERlZmF1bHRzID0ge1xuICAvKipcbiAgICogUG9wcGVyJ3MgcGxhY2VtZW50LlxuICAgKiBAcHJvcCB7UG9wcGVyLnBsYWNlbWVudHN9IHBsYWNlbWVudD0nYm90dG9tJ1xuICAgKi9cbiAgcGxhY2VtZW50OiAnYm90dG9tJyxcblxuICAvKipcbiAgICogU2V0IHRoaXMgdG8gdHJ1ZSBpZiB5b3Ugd2FudCBwb3BwZXIgdG8gcG9zaXRpb24gaXQgc2VsZiBpbiAnZml4ZWQnIG1vZGVcbiAgICogQHByb3Age0Jvb2xlYW59IHBvc2l0aW9uRml4ZWQ9ZmFsc2VcbiAgICovXG4gIHBvc2l0aW9uRml4ZWQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIGV2ZW50cyAocmVzaXplLCBzY3JvbGwpIGFyZSBpbml0aWFsbHkgZW5hYmxlZC5cbiAgICogQHByb3Age0Jvb2xlYW59IGV2ZW50c0VuYWJsZWQ9dHJ1ZVxuICAgKi9cbiAgZXZlbnRzRW5hYmxlZDogdHJ1ZSxcblxuICAvKipcbiAgICogU2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIHBvcHBlciB3aGVuXG4gICAqIHlvdSBjYWxsIHRoZSBgZGVzdHJveWAgbWV0aG9kLlxuICAgKiBAcHJvcCB7Qm9vbGVhbn0gcmVtb3ZlT25EZXN0cm95PWZhbHNlXG4gICAqL1xuICByZW1vdmVPbkRlc3Ryb3k6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIGNyZWF0ZWQuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uQ3JlYXRlfVxuICAgKi9cbiAgb25DcmVhdGU6IGZ1bmN0aW9uIG9uQ3JlYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGNhbGxlZCB3aGVuIHRoZSBwb3BwZXIgaXMgdXBkYXRlZC4gVGhpcyBjYWxsYmFjayBpcyBub3QgY2FsbGVkXG4gICAqIG9uIHRoZSBpbml0aWFsaXphdGlvbi9jcmVhdGlvbiBvZiB0aGUgcG9wcGVyLCBidXQgb25seSBvbiBzdWJzZXF1ZW50XG4gICAqIHVwZGF0ZXMuPGJyIC8+XG4gICAqIEJ5IGRlZmF1bHQsIGl0IGlzIHNldCB0byBuby1vcC48YnIgLz5cbiAgICogQWNjZXNzIFBvcHBlci5qcyBpbnN0YW5jZSB3aXRoIGBkYXRhLmluc3RhbmNlYC5cbiAgICogQHByb3Age29uVXBkYXRlfVxuICAgKi9cbiAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKCkge30sXG5cbiAgLyoqXG4gICAqIExpc3Qgb2YgbW9kaWZpZXJzIHVzZWQgdG8gbW9kaWZ5IHRoZSBvZmZzZXRzIGJlZm9yZSB0aGV5IGFyZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuXG4gICAqIFRoZXkgcHJvdmlkZSBtb3N0IG9mIHRoZSBmdW5jdGlvbmFsaXRpZXMgb2YgUG9wcGVyLmpzLlxuICAgKiBAcHJvcCB7bW9kaWZpZXJzfVxuICAgKi9cbiAgbW9kaWZpZXJzOiBtb2RpZmllcnNcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIG9uQ3JlYXRlXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBvblVwZGF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLy8gVXRpbHNcbi8vIE1ldGhvZHNcbnZhciBQb3BwZXIgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFBvcHBlci5qcyBpbnN0YW5jZS5cbiAgICogQGNsYXNzIFBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR8cmVmZXJlbmNlT2JqZWN0fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gVGhlIEhUTUwgLyBYTUwgZWxlbWVudCB1c2VkIGFzIHRoZSBwb3BwZXJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBZb3VyIGN1c3RvbSBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBvbmVzIGRlZmluZWQgaW4gW0RlZmF1bHRzXSgjZGVmYXVsdHMpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIFBvcHBlci5qcyBpbnN0YW5jZVxuICAgKi9cbiAgZnVuY3Rpb24gUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBQb3BwZXIpO1xuXG4gICAgdGhpcy5zY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3RoaXMudXBkYXRlKTtcbiAgICB9O1xuXG4gICAgLy8gbWFrZSB1cGRhdGUoKSBkZWJvdW5jZWQsIHNvIHRoYXQgaXQgb25seSBydW5zIGF0IG1vc3Qgb25jZS1wZXItdGlja1xuICAgIHRoaXMudXBkYXRlID0gZGVib3VuY2UodGhpcy51cGRhdGUuYmluZCh0aGlzKSk7XG5cbiAgICAvLyB3aXRoIHt9IHdlIGNyZWF0ZSBhIG5ldyBvYmplY3Qgd2l0aCB0aGUgb3B0aW9ucyBpbnNpZGUgaXRcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgIC8vIGluaXQgc3RhdGVcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNEZXN0cm95ZWQ6IGZhbHNlLFxuICAgICAgaXNDcmVhdGVkOiBmYWxzZSxcbiAgICAgIHNjcm9sbFBhcmVudHM6IFtdXG4gICAgfTtcblxuICAgIC8vIGdldCByZWZlcmVuY2UgYW5kIHBvcHBlciBlbGVtZW50cyAoYWxsb3cgalF1ZXJ5IHdyYXBwZXJzKVxuICAgIHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5qcXVlcnkgPyByZWZlcmVuY2VbMF0gOiByZWZlcmVuY2U7XG4gICAgdGhpcy5wb3BwZXIgPSBwb3BwZXIgJiYgcG9wcGVyLmpxdWVyeSA/IHBvcHBlclswXSA6IHBvcHBlcjtcblxuICAgIC8vIERlZXAgbWVyZ2UgbW9kaWZpZXJzIG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMubW9kaWZpZXJzID0ge307XG4gICAgT2JqZWN0LmtleXMoX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnMsIG9wdGlvbnMubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gPSBfZXh0ZW5kcyh7fSwgUG9wcGVyLkRlZmF1bHRzLm1vZGlmaWVyc1tuYW1lXSB8fCB7fSwgb3B0aW9ucy5tb2RpZmllcnMgPyBvcHRpb25zLm1vZGlmaWVyc1tuYW1lXSA6IHt9KTtcbiAgICB9KTtcblxuICAgIC8vIFJlZmFjdG9yaW5nIG1vZGlmaWVycycgbGlzdCAoT2JqZWN0ID0+IEFycmF5KVxuICAgIHRoaXMubW9kaWZpZXJzID0gT2JqZWN0LmtleXModGhpcy5vcHRpb25zLm1vZGlmaWVycykubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBuYW1lOiBuYW1lXG4gICAgICB9LCBfdGhpcy5vcHRpb25zLm1vZGlmaWVyc1tuYW1lXSk7XG4gICAgfSlcbiAgICAvLyBzb3J0IHRoZSBtb2RpZmllcnMgYnkgb3JkZXJcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xuXG4gICAgLy8gbW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSB3aGVuIFBvcHBlci5qcyBnZXQgaW5pdGVkXG4gICAgLy8gc3VjaCBjb2RlIGlzIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIG9mIGl0cyBtb2RpZmllclxuICAgIC8vIHRoZXkgY291bGQgYWRkIG5ldyBwcm9wZXJ0aWVzIHRvIHRoZWlyIG9wdGlvbnMgY29uZmlndXJhdGlvblxuICAgIC8vIEJFIEFXQVJFOiBkb24ndCBhZGQgb3B0aW9ucyB0byBgb3B0aW9ucy5tb2RpZmllcnMubmFtZWAgYnV0IHRvIGBtb2RpZmllck9wdGlvbnNgIVxuICAgIHRoaXMubW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyT3B0aW9ucykge1xuICAgICAgaWYgKG1vZGlmaWVyT3B0aW9ucy5lbmFibGVkICYmIGlzRnVuY3Rpb24obW9kaWZpZXJPcHRpb25zLm9uTG9hZCkpIHtcbiAgICAgICAgbW9kaWZpZXJPcHRpb25zLm9uTG9hZChfdGhpcy5yZWZlcmVuY2UsIF90aGlzLnBvcHBlciwgX3RoaXMub3B0aW9ucywgbW9kaWZpZXJPcHRpb25zLCBfdGhpcy5zdGF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBmaXJlIHRoZSBmaXJzdCB1cGRhdGUgdG8gcG9zaXRpb24gdGhlIHBvcHBlciBpbiB0aGUgcmlnaHQgcGxhY2VcbiAgICB0aGlzLnVwZGF0ZSgpO1xuXG4gICAgdmFyIGV2ZW50c0VuYWJsZWQgPSB0aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtcbiAgICBpZiAoZXZlbnRzRW5hYmxlZCkge1xuICAgICAgLy8gc2V0dXAgZXZlbnQgbGlzdGVuZXJzLCB0aGV5IHdpbGwgdGFrZSBjYXJlIG9mIHVwZGF0ZSB0aGUgcG9zaXRpb24gaW4gc3BlY2lmaWMgc2l0dWF0aW9uc1xuICAgICAgdGhpcy5lbmFibGVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZCA9IGV2ZW50c0VuYWJsZWQ7XG4gIH1cblxuICAvLyBXZSBjYW4ndCB1c2UgY2xhc3MgcHJvcGVydGllcyBiZWNhdXNlIHRoZXkgZG9uJ3QgZ2V0IGxpc3RlZCBpbiB0aGVcbiAgLy8gY2xhc3MgcHJvdG90eXBlIGFuZCBicmVhayBzdHVmZiBsaWtlIFNpbm9uIHN0dWJzXG5cblxuICBjcmVhdGVDbGFzcyhQb3BwZXIsIFt7XG4gICAga2V5OiAndXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlJCQxKCkge1xuICAgICAgcmV0dXJuIHVwZGF0ZS5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95JCQxKCkge1xuICAgICAgcmV0dXJuIGRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdlbmFibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGVuYWJsZUV2ZW50TGlzdGVuZXJzLmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGlzYWJsZUV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzJCQxKCkge1xuICAgICAgcmV0dXJuIGRpc2FibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNjaGVkdWxlcyBhbiB1cGRhdGUuIEl0IHdpbGwgcnVuIG9uIHRoZSBuZXh0IFVJIHVwZGF0ZSBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuXG4gICAgLyoqXG4gICAgICogQ29sbGVjdGlvbiBvZiB1dGlsaXRpZXMgdXNlZnVsIHdoZW4gd3JpdGluZyBjdXN0b20gbW9kaWZpZXJzLlxuICAgICAqIFN0YXJ0aW5nIGZyb20gdmVyc2lvbiAxLjcsIHRoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IGlmIHlvdVxuICAgICAqIGluY2x1ZGUgYHBvcHBlci11dGlscy5qc2AgYmVmb3JlIGBwb3BwZXIuanNgLlxuICAgICAqXG4gICAgICogKipERVBSRUNBVElPTioqOiBUaGlzIHdheSB0byBhY2Nlc3MgUG9wcGVyVXRpbHMgaXMgZGVwcmVjYXRlZFxuICAgICAqIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjIhIFVzZSB0aGUgUG9wcGVyVXRpbHMgbW9kdWxlIGRpcmVjdGx5IGluc3RlYWQuXG4gICAgICogRHVlIHRvIHRoZSBoaWdoIGluc3RhYmlsaXR5IG9mIHRoZSBtZXRob2RzIGNvbnRhaW5lZCBpbiBVdGlscywgd2UgY2FuJ3RcbiAgICAgKiBndWFyYW50ZWUgdGhlbSB0byBmb2xsb3cgc2VtdmVyLiBVc2UgdGhlbSBhdCB5b3VyIG93biByaXNrIVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjhcbiAgICAgKiBAbWVtYmVyIFV0aWxzXG4gICAgICogQG1lbWJlcm9mIFBvcHBlclxuICAgICAqL1xuXG4gIH1dKTtcbiAgcmV0dXJuIFBvcHBlcjtcbn0oKTtcblxuLyoqXG4gKiBUaGUgYHJlZmVyZW5jZU9iamVjdGAgaXMgYW4gb2JqZWN0IHRoYXQgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGNvbXBhdGlibGUgd2l0aCBQb3BwZXIuanNcbiAqIGFuZCBsZXRzIHlvdSB1c2UgaXQgYXMgcmVwbGFjZW1lbnQgb2YgYSByZWFsIERPTSBub2RlLjxiciAvPlxuICogWW91IGNhbiB1c2UgdGhpcyBtZXRob2QgdG8gcG9zaXRpb24gYSBwb3BwZXIgcmVsYXRpdmVseSB0byBhIHNldCBvZiBjb29yZGluYXRlc1xuICogaW4gY2FzZSB5b3UgZG9uJ3QgaGF2ZSBhIERPTSBub2RlIHRvIHVzZSBhcyByZWZlcmVuY2UuXG4gKlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZmVyZW5jZU9iamVjdCwgcG9wcGVyTm9kZSk7XG4gKiBgYGBcbiAqXG4gKiBOQjogVGhpcyBmZWF0dXJlIGlzbid0IHN1cHBvcnRlZCBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbiAqIEBuYW1lIHJlZmVyZW5jZU9iamVjdFxuICogQHByb3BlcnR5IHtGdW5jdGlvbn0gZGF0YS5nZXRCb3VuZGluZ0NsaWVudFJlY3RcbiAqIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgc2V0IG9mIGNvb3JkaW5hdGVzIGNvbXBhdGlibGUgd2l0aCB0aGUgbmF0aXZlIGBnZXRCb3VuZGluZ0NsaWVudFJlY3RgIG1ldGhvZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudFdpZHRoXG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIHdpZHRoIG9mIHRoZSB2aXJ0dWFsIHJlZmVyZW5jZSBlbGVtZW50LlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGRhdGEuY2xpZW50SGVpZ2h0XG4gKiBBbiBFUzYgZ2V0dGVyIHRoYXQgd2lsbCByZXR1cm4gdGhlIGhlaWdodCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqL1xuXG5cblBvcHBlci5VdGlscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkuUG9wcGVyVXRpbHM7XG5Qb3BwZXIucGxhY2VtZW50cyA9IHBsYWNlbWVudHM7XG5Qb3BwZXIuRGVmYXVsdHMgPSBEZWZhdWx0cztcblxuZXhwb3J0IGRlZmF1bHQgUG9wcGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9wcGVyLmpzLm1hcFxuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuLyoqXG4gKiBTdGlja3kuanNcbiAqIExpYnJhcnkgZm9yIHN0aWNreSBlbGVtZW50cyB3cml0dGVuIGluIHZhbmlsbGEgamF2YXNjcmlwdC4gV2l0aCB0aGlzIGxpYnJhcnkgeW91IGNhbiBlYXNpbHkgc2V0IHN0aWNreSBlbGVtZW50cyBvbiB5b3VyIHdlYnNpdGUuIEl0J3MgYWxzbyByZXNwb25zaXZlLlxuICpcbiAqIEB2ZXJzaW9uIDEuMi4wXG4gKiBAYXV0aG9yIFJhZmFsIEdhbHVzIDxiaXVyb0ByYWZhbGdhbHVzLnBsPlxuICogQHdlYnNpdGUgaHR0cHM6Ly9yZ2FsdXMuZ2l0aHViLmlvL3N0aWNreS1qcy9cbiAqIEByZXBvIGh0dHBzOi8vZ2l0aHViLmNvbS9yZ2FsdXMvc3RpY2t5LWpzXG4gKiBAbGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vcmdhbHVzL3N0aWNreS1qcy9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cblxudmFyIFN0aWNreSA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFN0aWNreSBpbnN0YW5jZSBjb25zdHJ1Y3RvclxuICAgKiBAY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIC0gU2VsZWN0b3Igd2hpY2ggd2UgY2FuIGZpbmQgZWxlbWVudHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMgLSBHbG9iYWwgb3B0aW9ucyBmb3Igc3RpY2t5IGVsZW1lbnRzIChjb3VsZCBiZSBvdmVyd3JpdHRlbiBieSBkYXRhLXtvcHRpb259PVwiXCIgYXR0cmlidXRlcylcbiAgICovXG4gIGZ1bmN0aW9uIFN0aWNreSgpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGlja3kpO1xuXG4gICAgdGhpcy5zZWxlY3RvciA9IHNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcblxuICAgIHRoaXMudmVyc2lvbiA9ICcxLjIuMCc7XG5cbiAgICB0aGlzLnZwID0gdGhpcy5nZXRWaWV3cG9ydFNpemUoKTtcbiAgICB0aGlzLmJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICB3cmFwOiBvcHRpb25zLndyYXAgfHwgZmFsc2UsXG4gICAgICBtYXJnaW5Ub3A6IG9wdGlvbnMubWFyZ2luVG9wIHx8IDAsXG4gICAgICBzdGlja3lGb3I6IG9wdGlvbnMuc3RpY2t5Rm9yIHx8IDAsXG4gICAgICBzdGlja3lDbGFzczogb3B0aW9ucy5zdGlja3lDbGFzcyB8fCBudWxsLFxuICAgICAgc3RpY2t5Q29udGFpbmVyOiBvcHRpb25zLnN0aWNreUNvbnRhaW5lciB8fCAnYm9keSdcbiAgICB9O1xuXG4gICAgdGhpcy51cGRhdGVTY3JvbGxUb3BQb3NpdGlvbiA9IHRoaXMudXBkYXRlU2Nyb2xsVG9wUG9zaXRpb24uYmluZCh0aGlzKTtcblxuICAgIHRoaXMudXBkYXRlU2Nyb2xsVG9wUG9zaXRpb24oKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMudXBkYXRlU2Nyb2xsVG9wUG9zaXRpb24pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnVwZGF0ZVNjcm9sbFRvcFBvc2l0aW9uKTtcblxuICAgIHRoaXMucnVuKCk7XG4gIH1cblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgcGFnZSB0byBiZSBmdWxseSBsb2FkZWQgYW5kIHRoZW4gcmVuZGVycyAmIGFjdGl2YXRlcyBldmVyeSBzdGlja3kgZWxlbWVudCBmb3VuZCB3aXRoIHNwZWNpZmllZCBzZWxlY3RvclxuICAgKiBAZnVuY3Rpb25cbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1bigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gd2FpdCBmb3IgcGFnZSB0byBiZSBmdWxseSBsb2FkZWRcbiAgICB2YXIgcGFnZUxvYWRlZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwocGFnZUxvYWRlZCk7XG5cbiAgICAgICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChfdGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIF90aGlzLmZvckVhY2goZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzLnJlbmRlckVsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sIDEwKTtcbiAgfTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBhc3NpZ24gbmVlZGVkIHZhcmlhYmxlcyBmb3Igc3RpY2t5IGVsZW1lbnQsIHRoYXQgYXJlIHVzZWQgaW4gZnV0dXJlIGZvciBjYWxjdWxhdGlvbnMgYW5kIG90aGVyXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGJlIHJlbmRlcmVkXG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS5yZW5kZXJFbGVtZW50ID0gZnVuY3Rpb24gcmVuZGVyRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciB2YXJpYWJsZXMgbmVlZGVkIGluIGZ1dHVyZVxuICAgIGVsZW1lbnQuc3RpY2t5ID0ge307XG5cbiAgICAvLyBzZXQgZGVmYXVsdCB2YXJpYWJsZXNcbiAgICBlbGVtZW50LnN0aWNreS5hY3RpdmUgPSBmYWxzZTtcblxuICAgIGVsZW1lbnQuc3RpY2t5Lm1hcmdpblRvcCA9IHBhcnNlSW50KGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW1hcmdpbi10b3AnKSkgfHwgdGhpcy5vcHRpb25zLm1hcmdpblRvcDtcbiAgICBlbGVtZW50LnN0aWNreS5zdGlja3lGb3IgPSBwYXJzZUludChlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGlja3ktZm9yJykpIHx8IHRoaXMub3B0aW9ucy5zdGlja3lGb3I7XG4gICAgZWxlbWVudC5zdGlja3kuc3RpY2t5Q2xhc3MgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGlja3ktY2xhc3MnKSB8fCB0aGlzLm9wdGlvbnMuc3RpY2t5Q2xhc3M7XG4gICAgZWxlbWVudC5zdGlja3kud3JhcCA9IGVsZW1lbnQuaGFzQXR0cmlidXRlKCdkYXRhLXN0aWNreS13cmFwJykgPyB0cnVlIDogdGhpcy5vcHRpb25zLndyYXA7XG4gICAgLy8gQHRvZG8gYXR0cmlidXRlIGZvciBzdGlja3lDb250YWluZXJcbiAgICAvLyBlbGVtZW50LnN0aWNreS5zdGlja3lDb250YWluZXIgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1zdGlja3ktY29udGFpbmVyJykgfHwgdGhpcy5vcHRpb25zLnN0aWNreUNvbnRhaW5lcjtcbiAgICBlbGVtZW50LnN0aWNreS5zdGlja3lDb250YWluZXIgPSB0aGlzLm9wdGlvbnMuc3RpY2t5Q29udGFpbmVyO1xuXG4gICAgZWxlbWVudC5zdGlja3kuY29udGFpbmVyID0gdGhpcy5nZXRTdGlja3lDb250YWluZXIoZWxlbWVudCk7XG4gICAgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QgPSB0aGlzLmdldFJlY3RhbmdsZShlbGVtZW50LnN0aWNreS5jb250YWluZXIpO1xuXG4gICAgZWxlbWVudC5zdGlja3kucmVjdCA9IHRoaXMuZ2V0UmVjdGFuZ2xlKGVsZW1lbnQpO1xuXG4gICAgLy8gZml4IHdoZW4gZWxlbWVudCBpcyBpbWFnZSB0aGF0IGhhcyBub3QgeWV0IGxvYWRlZCBhbmQgd2lkdGgsIGhlaWdodCA9IDBcbiAgICBpZiAoZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbWcnKSB7XG4gICAgICBlbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQuc3RpY2t5LnJlY3QgPSBfdGhpczIuZ2V0UmVjdGFuZ2xlKGVsZW1lbnQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5zdGlja3kud3JhcCkge1xuICAgICAgdGhpcy53cmFwRWxlbWVudChlbGVtZW50KTtcbiAgICB9XG5cbiAgICAvLyBhY3RpdmF0ZSByZW5kZXJlZCBlbGVtZW50XG4gICAgdGhpcy5hY3RpdmF0ZShlbGVtZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogV3JhcHMgZWxlbWVudCBpbnRvIHBsYWNlaG9sZGVyIGVsZW1lbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7bm9kZX0gZWxlbWVudCAtIEVsZW1lbnQgdG8gYmUgd3JhcHBlZFxuICAgKi9cblxuXG4gIFN0aWNreS5wcm90b3R5cGUud3JhcEVsZW1lbnQgPSBmdW5jdGlvbiB3cmFwRWxlbWVudChlbGVtZW50KSB7XG4gICAgZWxlbWVudC5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWJlZ2luJywgJzxzcGFuPjwvc3Bhbj4nKTtcbiAgICBlbGVtZW50LnByZXZpb3VzU2libGluZy5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBhY3RpdmF0ZXMgZWxlbWVudCB3aGVuIHNwZWNpZmllZCBjb25kaXRpb25zIGFyZSBtZXQgYW5kIHRoZW4gaW5pdGFsaXNlIGV2ZW50c1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtub2RlfSBlbGVtZW50IC0gRWxlbWVudCB0byBiZSBhY3RpdmF0ZWRcbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gYWN0aXZhdGUoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50LnN0aWNreS5yZWN0LnRvcCArIGVsZW1lbnQuc3RpY2t5LnJlY3QuaGVpZ2h0IDwgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QudG9wICsgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QuaGVpZ2h0ICYmIGVsZW1lbnQuc3RpY2t5LnN0aWNreUZvciA8IHRoaXMudnAud2lkdGggJiYgIWVsZW1lbnQuc3RpY2t5LmFjdGl2ZSkge1xuICAgICAgZWxlbWVudC5zdGlja3kuYWN0aXZlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lbGVtZW50cy5pbmRleE9mKGVsZW1lbnQpIDwgMCkge1xuICAgICAgdGhpcy5lbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmICghZWxlbWVudC5zdGlja3kucmVzaXplRXZlbnQpIHtcbiAgICAgIHRoaXMuaW5pdFJlc2l6ZUV2ZW50cyhlbGVtZW50KTtcbiAgICAgIGVsZW1lbnQuc3RpY2t5LnJlc2l6ZUV2ZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWVsZW1lbnQuc3RpY2t5LnNjcm9sbEV2ZW50KSB7XG4gICAgICB0aGlzLmluaXRTY3JvbGxFdmVudHMoZWxlbWVudCk7XG4gICAgICBlbGVtZW50LnN0aWNreS5zY3JvbGxFdmVudCA9IHRydWU7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRQb3NpdGlvbihlbGVtZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gd2hpY2ggaXMgYWRkaW5nIG9uUmVzaXplRXZlbnRzIHRvIHdpbmRvdyBsaXN0ZW5lciBhbmQgYXNzaWducyBmdW5jdGlvbiB0byBlbGVtZW50IGFzIHJlc2l6ZUxpc3RlbmVyXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IGZvciB3aGljaCByZXNpemUgZXZlbnRzIGFyZSBpbml0aWFsaXNlZFxuICAgKi9cblxuXG4gIFN0aWNreS5wcm90b3R5cGUuaW5pdFJlc2l6ZUV2ZW50cyA9IGZ1bmN0aW9uIGluaXRSZXNpemVFdmVudHMoZWxlbWVudCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgZWxlbWVudC5zdGlja3kucmVzaXplTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXMzLm9uUmVzaXplRXZlbnRzKGVsZW1lbnQpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGVsZW1lbnQuc3RpY2t5LnJlc2l6ZUxpc3RlbmVyKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBlbGVtZW50IGxpc3RlbmVyIGZyb20gcmVzaXplIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IGZyb20gd2hpY2ggbGlzdGVuZXIgaXMgZGVsZXRlZFxuICAgKi9cblxuXG4gIFN0aWNreS5wcm90b3R5cGUuZGVzdHJveVJlc2l6ZUV2ZW50cyA9IGZ1bmN0aW9uIGRlc3Ryb3lSZXNpemVFdmVudHMoZWxlbWVudCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBlbGVtZW50LnN0aWNreS5yZXNpemVMaXN0ZW5lcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHdoaWNoIGlzIGZpcmVkIHdoZW4gdXNlciByZXNpemUgd2luZG93LiBJdCBjaGVja3MgaWYgZWxlbWVudCBzaG91bGQgYmUgYWN0aXZhdGVkIG9yIGRlYWN0aXZhdGVkIGFuZCB0aGVuIHJ1biBzZXRQb3NpdGlvbiBmdW5jdGlvblxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtub2RlfSBlbGVtZW50IC0gRWxlbWVudCBmb3Igd2hpY2ggZXZlbnQgZnVuY3Rpb24gaXMgZmlyZWRcbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLm9uUmVzaXplRXZlbnRzID0gZnVuY3Rpb24gb25SZXNpemVFdmVudHMoZWxlbWVudCkge1xuICAgIHRoaXMudnAgPSB0aGlzLmdldFZpZXdwb3J0U2l6ZSgpO1xuXG4gICAgZWxlbWVudC5zdGlja3kucmVjdCA9IHRoaXMuZ2V0UmVjdGFuZ2xlKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQuc3RpY2t5LmNvbnRhaW5lci5yZWN0ID0gdGhpcy5nZXRSZWN0YW5nbGUoZWxlbWVudC5zdGlja3kuY29udGFpbmVyKTtcblxuICAgIGlmIChlbGVtZW50LnN0aWNreS5yZWN0LnRvcCArIGVsZW1lbnQuc3RpY2t5LnJlY3QuaGVpZ2h0IDwgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QudG9wICsgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QuaGVpZ2h0ICYmIGVsZW1lbnQuc3RpY2t5LnN0aWNreUZvciA8IHRoaXMudnAud2lkdGggJiYgIWVsZW1lbnQuc3RpY2t5LmFjdGl2ZSkge1xuICAgICAgZWxlbWVudC5zdGlja3kuYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc3RpY2t5LnJlY3QudG9wICsgZWxlbWVudC5zdGlja3kucmVjdC5oZWlnaHQgPj0gZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QudG9wICsgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QuaGVpZ2h0IHx8IGVsZW1lbnQuc3RpY2t5LnN0aWNreUZvciA+PSB0aGlzLnZwLndpZHRoICYmIGVsZW1lbnQuc3RpY2t5LmFjdGl2ZSkge1xuICAgICAgZWxlbWVudC5zdGlja3kuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRQb3NpdGlvbihlbGVtZW50KTtcbiAgfTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gd2hpY2ggaXMgYWRkaW5nIG9uU2Nyb2xsRXZlbnRzIHRvIHdpbmRvdyBsaXN0ZW5lciBhbmQgYXNzaWducyBmdW5jdGlvbiB0byBlbGVtZW50IGFzIHNjcm9sbExpc3RlbmVyXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IGZvciB3aGljaCBzY3JvbGwgZXZlbnRzIGFyZSBpbml0aWFsaXNlZFxuICAgKi9cblxuXG4gIFN0aWNreS5wcm90b3R5cGUuaW5pdFNjcm9sbEV2ZW50cyA9IGZ1bmN0aW9uIGluaXRTY3JvbGxFdmVudHMoZWxlbWVudCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgZWxlbWVudC5zdGlja3kuc2Nyb2xsTGlzdGVuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM0Lm9uU2Nyb2xsRXZlbnRzKGVsZW1lbnQpO1xuICAgIH07XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGVsZW1lbnQuc3RpY2t5LnNjcm9sbExpc3RlbmVyKTtcbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlcyBlbGVtZW50IGxpc3RlbmVyIGZyb20gc2Nyb2xsIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IGZyb20gd2hpY2ggbGlzdGVuZXIgaXMgZGVsZXRlZFxuICAgKi9cblxuXG4gIFN0aWNreS5wcm90b3R5cGUuZGVzdHJveVNjcm9sbEV2ZW50cyA9IGZ1bmN0aW9uIGRlc3Ryb3lTY3JvbGxFdmVudHMoZWxlbWVudCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlbGVtZW50LnN0aWNreS5zY3JvbGxMaXN0ZW5lcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHdoaWNoIGlzIGZpcmVkIHdoZW4gdXNlciBzY3JvbGwgd2luZG93LiBJZiBlbGVtZW50IGlzIGFjdGl2ZSwgZnVuY3Rpb24gaXMgaW52b2tpbmcgc2V0UG9zaXRpb24gZnVuY3Rpb25cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7bm9kZX0gZWxlbWVudCAtIEVsZW1lbnQgZm9yIHdoaWNoIGV2ZW50IGZ1bmN0aW9uIGlzIGZpcmVkXG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS5vblNjcm9sbEV2ZW50cyA9IGZ1bmN0aW9uIG9uU2Nyb2xsRXZlbnRzKGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudC5zdGlja3kuYWN0aXZlKSB7XG4gICAgICB0aGlzLnNldFBvc2l0aW9uKGVsZW1lbnQpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogTWFpbiBmdW5jdGlvbiBmb3IgdGhlIGxpYnJhcnkuIEhlcmUgYXJlIHNvbWUgY29uZGl0aW9uIGNhbGN1bGF0aW9ucyBhbmQgY3NzIGFwcGVuZGluZyBmb3Igc3RpY2t5IGVsZW1lbnQgd2hlbiB1c2VyIHNjcm9sbCB3aW5kb3dcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7bm9kZX0gZWxlbWVudCAtIEVsZW1lbnQgdGhhdCB3aWxsIGJlIHBvc2l0aW9uZWQgaWYgaXQncyBhY3RpdmVcbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLnNldFBvc2l0aW9uID0gZnVuY3Rpb24gc2V0UG9zaXRpb24oZWxlbWVudCkge1xuICAgIHRoaXMuY3NzKGVsZW1lbnQsIHsgcG9zaXRpb246ICcnLCB3aWR0aDogJycsIHRvcDogJycsIGxlZnQ6ICcnIH0pO1xuXG4gICAgaWYgKHRoaXMudnAuaGVpZ2h0IDwgZWxlbWVudC5zdGlja3kucmVjdC5oZWlnaHQgfHwgIWVsZW1lbnQuc3RpY2t5LmFjdGl2ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZWxlbWVudC5zdGlja3kucmVjdC53aWR0aCkge1xuICAgICAgZWxlbWVudC5zdGlja3kucmVjdCA9IHRoaXMuZ2V0UmVjdGFuZ2xlKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50LnN0aWNreS53cmFwKSB7XG4gICAgICB0aGlzLmNzcyhlbGVtZW50LnBhcmVudE5vZGUsIHtcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQuc3RpY2t5LnJlY3Qud2lkdGggKyAncHgnLFxuICAgICAgICBoZWlnaHQ6IGVsZW1lbnQuc3RpY2t5LnJlY3QuaGVpZ2h0ICsgJ3B4J1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuc3RpY2t5LnJlY3QudG9wID09PSAwICYmIGVsZW1lbnQuc3RpY2t5LmNvbnRhaW5lciA9PT0gdGhpcy5ib2R5KSB7XG4gICAgICB0aGlzLmNzcyhlbGVtZW50LCB7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB0b3A6IGVsZW1lbnQuc3RpY2t5LnJlY3QudG9wICsgJ3B4JyxcbiAgICAgICAgbGVmdDogZWxlbWVudC5zdGlja3kucmVjdC5sZWZ0ICsgJ3B4JyxcbiAgICAgICAgd2lkdGg6IGVsZW1lbnQuc3RpY2t5LnJlY3Qud2lkdGggKyAncHgnXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc2Nyb2xsVG9wID4gZWxlbWVudC5zdGlja3kucmVjdC50b3AgLSBlbGVtZW50LnN0aWNreS5tYXJnaW5Ub3ApIHtcbiAgICAgIHRoaXMuY3NzKGVsZW1lbnQsIHtcbiAgICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICAgIHdpZHRoOiBlbGVtZW50LnN0aWNreS5yZWN0LndpZHRoICsgJ3B4JyxcbiAgICAgICAgbGVmdDogZWxlbWVudC5zdGlja3kucmVjdC5sZWZ0ICsgJ3B4J1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnNjcm9sbFRvcCArIGVsZW1lbnQuc3RpY2t5LnJlY3QuaGVpZ2h0ICsgZWxlbWVudC5zdGlja3kubWFyZ2luVG9wID4gZWxlbWVudC5zdGlja3kuY29udGFpbmVyLnJlY3QudG9wICsgZWxlbWVudC5zdGlja3kuY29udGFpbmVyLm9mZnNldEhlaWdodCkge1xuXG4gICAgICAgIGlmIChlbGVtZW50LnN0aWNreS5zdGlja3lDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlbGVtZW50LnN0aWNreS5zdGlja3lDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgdG9wOiBlbGVtZW50LnN0aWNreS5jb250YWluZXIucmVjdC50b3AgKyBlbGVtZW50LnN0aWNreS5jb250YWluZXIub2Zmc2V0SGVpZ2h0IC0gKHRoaXMuc2Nyb2xsVG9wICsgZWxlbWVudC5zdGlja3kucmVjdC5oZWlnaHQpICsgJ3B4JyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnN0aWNreS5zdGlja3lDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChlbGVtZW50LnN0aWNreS5zdGlja3lDbGFzcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNzcyhlbGVtZW50LCB7IHRvcDogZWxlbWVudC5zdGlja3kubWFyZ2luVG9wICsgJ3B4JyB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGVsZW1lbnQuc3RpY2t5LnN0aWNreUNsYXNzKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShlbGVtZW50LnN0aWNreS5zdGlja3lDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY3NzKGVsZW1lbnQsIHsgcG9zaXRpb246ICcnLCB3aWR0aDogJycsIHRvcDogJycsIGxlZnQ6ICcnIH0pO1xuXG4gICAgICBpZiAoZWxlbWVudC5zdGlja3kud3JhcCkge1xuICAgICAgICB0aGlzLmNzcyhlbGVtZW50LnBhcmVudE5vZGUsIHsgZGlzcGxheTogJycsIHdpZHRoOiAnJywgaGVpZ2h0OiAnJyB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgdXBkYXRlcyBlbGVtZW50IHN0aWNreSByZWN0YW5nbGUgKHdpdGggc3RpY2t5IGNvbnRhaW5lciksIHRoZW4gYWN0aXZhdGUgb3IgZGVhY3RpdmF0ZSBlbGVtZW50LCB0aGVuIHVwZGF0ZSBwb3NpdGlvbiBpZiBpdCdzIGFjdGl2ZVxuICAgKiBAZnVuY3Rpb25cbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHRoaXMuZm9yRWFjaCh0aGlzLmVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgZWxlbWVudC5zdGlja3kucmVjdCA9IF90aGlzNS5nZXRSZWN0YW5nbGUoZWxlbWVudCk7XG4gICAgICBlbGVtZW50LnN0aWNreS5jb250YWluZXIucmVjdCA9IF90aGlzNS5nZXRSZWN0YW5nbGUoZWxlbWVudC5zdGlja3kuY29udGFpbmVyKTtcblxuICAgICAgX3RoaXM1LmFjdGl2YXRlKGVsZW1lbnQpO1xuICAgICAgX3RoaXM1LnNldFBvc2l0aW9uKGVsZW1lbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXN0cm95cyBzdGlja3kgZWxlbWVudCwgcmVtb3ZlIGxpc3RlbmVyc1xuICAgKiBAZnVuY3Rpb25cbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdGhpcy5mb3JFYWNoKHRoaXMuZWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBfdGhpczYuZGVzdHJveVJlc2l6ZUV2ZW50cyhlbGVtZW50KTtcbiAgICAgIF90aGlzNi5kZXN0cm95U2Nyb2xsRXZlbnRzKGVsZW1lbnQpO1xuICAgICAgZGVsZXRlIGVsZW1lbnQuc3RpY2t5O1xuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IHJldHVybnMgY29udGFpbmVyIGVsZW1lbnQgaW4gd2hpY2ggc3RpY2t5IGVsZW1lbnQgaXMgc3R1Y2sgKGlmIGlzIG5vdCBzcGVjaWZpZWQsIHRoZW4gaXQncyBzdHVjayB0byBib2R5KVxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtub2RlfSBlbGVtZW50IC0gRWxlbWVudCB3aGljaCBzdGlja3kgY29udGFpbmVyIGFyZSBsb29rZWQgZm9yXG4gICAqIEByZXR1cm4ge25vZGV9IGVsZW1lbnQgLSBTdGlja3kgY29udGFpbmVyXG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS5nZXRTdGlja3lDb250YWluZXIgPSBmdW5jdGlvbiBnZXRTdGlja3lDb250YWluZXIoZWxlbWVudCkge1xuICAgIHZhciBjb250YWluZXIgPSBlbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICB3aGlsZSAoIWNvbnRhaW5lci5oYXNBdHRyaWJ1dGUoJ2RhdGEtc3RpY2t5LWNvbnRhaW5lcicpICYmICFjb250YWluZXIucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKGVsZW1lbnQuc3RpY2t5LnN0aWNreUNvbnRhaW5lcikgJiYgY29udGFpbmVyICE9PSB0aGlzLmJvZHkpIHtcbiAgICAgIGNvbnRhaW5lciA9IGNvbnRhaW5lci5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBjb250YWluZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgcmV0dXJucyBlbGVtZW50IHJlY3RhbmdsZSAmIHBvc2l0aW9uICh3aWR0aCwgaGVpZ2h0LCB0b3AsIGxlZnQpXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBFbGVtZW50IHdoaWNoIHBvc2l0aW9uICYgcmVjdGFuZ2xlIGFyZSByZXR1cm5lZFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS5nZXRSZWN0YW5nbGUgPSBmdW5jdGlvbiBnZXRSZWN0YW5nbGUoZWxlbWVudCkge1xuICAgIHRoaXMuY3NzKGVsZW1lbnQsIHsgcG9zaXRpb246ICcnLCB3aWR0aDogJycsIHRvcDogJycsIGxlZnQ6ICcnIH0pO1xuXG4gICAgdmFyIHdpZHRoID0gTWF0aC5tYXgoZWxlbWVudC5vZmZzZXRXaWR0aCwgZWxlbWVudC5jbGllbnRXaWR0aCwgZWxlbWVudC5zY3JvbGxXaWR0aCk7XG4gICAgdmFyIGhlaWdodCA9IE1hdGgubWF4KGVsZW1lbnQub2Zmc2V0SGVpZ2h0LCBlbGVtZW50LmNsaWVudEhlaWdodCwgZWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuXG4gICAgdmFyIHRvcCA9IDA7XG4gICAgdmFyIGxlZnQgPSAwO1xuXG4gICAgZG8ge1xuICAgICAgdG9wICs9IGVsZW1lbnQub2Zmc2V0VG9wIHx8IDA7XG4gICAgICBsZWZ0ICs9IGVsZW1lbnQub2Zmc2V0TGVmdCB8fCAwO1xuICAgICAgZWxlbWVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50O1xuICAgIH0gd2hpbGUgKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIHsgdG9wOiB0b3AsIGxlZnQ6IGxlZnQsIHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbiAgfTtcblxuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCByZXR1cm5zIHZpZXdwb3J0IGRpbWVuc2lvbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLmdldFZpZXdwb3J0U2l6ZSA9IGZ1bmN0aW9uIGdldFZpZXdwb3J0U2l6ZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd2lkdGg6IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCksXG4gICAgICBoZWlnaHQ6IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKVxuICAgIH07XG4gIH07XG5cbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRoYXQgdXBkYXRlcyB3aW5kb3cgc2Nyb2xsIHBvc2l0aW9uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS51cGRhdGVTY3JvbGxUb3BQb3NpdGlvbiA9IGZ1bmN0aW9uIHVwZGF0ZVNjcm9sbFRvcFBvc2l0aW9uKCkge1xuICAgIHRoaXMuc2Nyb2xsVG9wID0gKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5zY3JvbGxUb3ApIC0gKGRvY3VtZW50LmNsaWVudFRvcCB8fCAwKSB8fCAwO1xuICB9O1xuXG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGxvb3BzXG4gICAqIEBoZWxwZXJcbiAgICogQHBhcmFtIHthcnJheX1cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBDYWxsYmFjayBmdW5jdGlvbiAobm8gbmVlZCBmb3IgZXhwbGFuYXRpb24pXG4gICAqL1xuXG5cbiAgU3RpY2t5LnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChhcnJheSwgY2FsbGJhY2spIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGNhbGxiYWNrKGFycmF5W2ldKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiB0byBhZGQvcmVtb3ZlIGNzcyBwcm9wZXJ0aWVzIGZvciBzcGVjaWZpZWQgZWxlbWVudC5cbiAgICogQGhlbHBlclxuICAgKiBAcGFyYW0ge25vZGV9IGVsZW1lbnQgLSBET00gZWxlbWVudFxuICAgKiBAcGFyYW0ge29iamVjdH0gcHJvcGVydGllcyAtIENTUyBwcm9wZXJ0aWVzIHRoYXQgd2lsbCBiZSBhZGRlZC9yZW1vdmVkIGZyb20gc3BlY2lmaWVkIGVsZW1lbnRcbiAgICovXG5cblxuICBTdGlja3kucHJvdG90eXBlLmNzcyA9IGZ1bmN0aW9uIGNzcyhlbGVtZW50LCBwcm9wZXJ0aWVzKSB7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdGlja3k7XG59KCk7XG5cbi8qKlxuICogRXhwb3J0IGZ1bmN0aW9uIHRoYXQgc3VwcG9ydHMgQU1ELCBDb21tb25KUyBhbmQgUGxhaW4gQnJvd3Nlci5cbiAqL1xuXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5O1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5TdGlja3kgPSBmYWN0b3J5O1xuICB9XG59KSh0aGlzLCBTdGlja3kpOyIsIlxyXG52YXIgU3RpY2t5ID0gcmVxdWlyZSgnLi9kaXN0L3N0aWNreS5jb21waWxlLmpzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFN0aWNreTtcclxuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHBhcmVudCkge1xuICBpZiAocGFyZW50KXtcbiAgICByZXR1cm4gcGFyZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbiAgfVxuICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xufTtcblxudmFyIGdldEVsZW1lbnQgPSAoZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vID0ge307XG5cblx0cmV0dXJuIGZ1bmN0aW9uKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSBcImhlYWRcIiBlbGVtZW50LlxuICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lXG4gICAgICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb29cIikuc2hhZG93Um9vdCB9XG4gICAgICAgICAgICAgICAgLy8gfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQsIHBhcmVudCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlLCB0YXJnZXQpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGlmKG9wdGlvbnMuYXR0cnMubm9uY2UgPT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBub25jZSA9IGdldE5vbmNlKCk7XG5cdFx0aWYgKG5vbmNlKSB7XG5cdFx0XHRvcHRpb25zLmF0dHJzLm5vbmNlID0gbm9uY2U7XG5cdFx0fVxuXHR9XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXHRvcHRpb25zLmF0dHJzLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXG5cdGFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7XG5cblx0cmV0dXJuIGxpbms7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHtcblx0T2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Tm9uY2UoKSB7XG5cdGlmICh0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRyZXR1cm4gX193ZWJwYWNrX25vbmNlX187XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gdHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nXG5cdFx0ID8gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcykgXG5cdFx0IDogb3B0aW9ucy50cmFuc2Zvcm0uZGVmYXVsdChvYmouY3NzKTtcblxuXHQgICAgaWYgKHJlc3VsdCkge1xuXHQgICAgXHQvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy5cblx0ICAgIFx0b2JqLmNzcyA9IHJlc3VsdDtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICBcdC8vIElmIHRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gcmV0dXJucyBhIGZhbHN5IHZhbHVlLCBkb24ndCBhZGQgdGhpcyBjc3MuXG5cdCAgICBcdC8vIFRoaXMgYWxsb3dzIGNvbmRpdGlvbmFsIGxvYWRpbmcgb2YgY3NzXG5cdCAgICBcdHJldHVybiBmdW5jdGlvbigpIHtcblx0ICAgIFx0XHQvLyBub29wXG5cdCAgICBcdH07XG5cdCAgICB9XG5cdH1cblxuXHRpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcblx0XHR2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcblxuXHRcdHN0eWxlID0gc2luZ2xldG9uIHx8IChzaW5nbGV0b24gPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucykpO1xuXG5cdFx0dXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG5cdFx0cmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcblxuXHR9IGVsc2UgaWYgKFxuXHRcdG9iai5zb3VyY2VNYXAgJiZcblx0XHR0eXBlb2YgVVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLmNyZWF0ZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiXG5cdCkge1xuXHRcdHN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXG5cdFx0XHRpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG5cdFx0dXBkYXRlID0gYXBwbHlUb1RhZy5iaW5kKG51bGwsIHN0eWxlKTtcblx0XHRyZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuXHRcdH07XG5cdH1cblxuXHR1cGRhdGUob2JqKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG5ld09iaikge1xuXHRcdGlmIChuZXdPYmopIHtcblx0XHRcdGlmIChcblx0XHRcdFx0bmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJlxuXHRcdFx0XHRuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJlxuXHRcdFx0XHRuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR1cGRhdGUob2JqID0gbmV3T2JqKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVtb3ZlKCk7XG5cdFx0fVxuXHR9O1xufVxuXG52YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkge1xuXHR2YXIgdGV4dFN0b3JlID0gW107XG5cblx0cmV0dXJuIGZ1bmN0aW9uIChpbmRleCwgcmVwbGFjZW1lbnQpIHtcblx0XHR0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG5cblx0XHRyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcblx0fTtcbn0pKCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHtcblx0dmFyIGNzcyA9IHJlbW92ZSA/IFwiXCIgOiBvYmouY3NzO1xuXG5cdGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuXHRcdHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuXHRcdGlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXMubGVuZ3RoKSB7XG5cdFx0XHRzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuXG5cdGlmKG1lZGlhKSB7XG5cdFx0c3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpXG5cdH1cblxuXHRpZihzdHlsZS5zdHlsZVNoZWV0KSB7XG5cdFx0c3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuXHR9IGVsc2Uge1xuXHRcdHdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHtcblx0XHRcdHN0eWxlLnJlbW92ZUNoaWxkKHN0eWxlLmZpcnN0Q2hpbGQpO1xuXHRcdH1cblxuXHRcdHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGxpbmssIG9wdGlvbnMsIG9iaikge1xuXHR2YXIgY3NzID0gb2JqLmNzcztcblx0dmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cblx0Lypcblx0XHRJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWRcblx0XHRhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJsc1xuXHRcdG9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvblxuXHRcdGRpcmVjdGx5XG5cdCovXG5cdHZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwO1xuXG5cdGlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykge1xuXHRcdGNzcyA9IGZpeFVybHMoY3NzKTtcblx0fVxuXG5cdGlmIChzb3VyY2VNYXApIHtcblx0XHQvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXHRcdGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgXCIgKi9cIjtcblx0fVxuXG5cdHZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogXCJ0ZXh0L2Nzc1wiIH0pO1xuXG5cdHZhciBvbGRTcmMgPSBsaW5rLmhyZWY7XG5cblx0bGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcblxuXHRpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTtcbn1cbiIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvfFxccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4zLjNcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgRmVkZXJpY28gWml2b2xvIGFuZCBjb250cmlidXRvcnNcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcbiAqIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgUG9wcGVyIGZyb20gJ3BvcHBlci5qcyc7XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHZhcmlhYmxlIGlzIGEgZnVuY3Rpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7QW55fSBmdW5jdGlvblRvQ2hlY2sgLSB2YXJpYWJsZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IGFuc3dlciB0bzogaXMgYSBmdW5jdGlvbj9cbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jdGlvblRvQ2hlY2spIHtcbiAgdmFyIGdldFR5cGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uVG9DaGVjayAmJiBnZXRUeXBlLnRvU3RyaW5nLmNhbGwoZnVuY3Rpb25Ub0NoZWNrKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxudmFyIGNsYXNzQ2FsbENoZWNrID0gZnVuY3Rpb24gKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn07XG5cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTtcblxuXG5cblxuXG5cblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIGNvbnRhaW5lcjogZmFsc2UsXG4gIGRlbGF5OiAwLFxuICBodG1sOiBmYWxzZSxcbiAgcGxhY2VtZW50OiAndG9wJyxcbiAgdGl0bGU6ICcnLFxuICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgb2Zmc2V0OiAwLFxuICBhcnJvd1NlbGVjdG9yOiAnLnRvb2x0aXAtYXJyb3csIC50b29sdGlwX19hcnJvdycsXG4gIGlubmVyU2VsZWN0b3I6ICcudG9vbHRpcC1pbm5lciwgLnRvb2x0aXBfX2lubmVyJ1xufTtcblxudmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgVG9vbHRpcC5qcyBpbnN0YW5jZVxuICAgKiBAY2xhc3MgVG9vbHRpcFxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgRE9NIG5vZGUgdXNlZCBhcyByZWZlcmVuY2Ugb2YgdGhlIHRvb2x0aXAgKGl0IGNhbiBiZSBhIGpRdWVyeSBlbGVtZW50KS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMucGxhY2VtZW50PSd0b3AnXG4gICAqICAgICAgUGxhY2VtZW50IG9mIHRoZSBwb3BwZXIgYWNjZXB0ZWQgdmFsdWVzOiBgdG9wKC1zdGFydCwgLWVuZCksIHJpZ2h0KC1zdGFydCwgLWVuZCksIGJvdHRvbSgtc3RhcnQsIC1lbmQpLFxuICAgKiAgICAgIGxlZnQoLXN0YXJ0LCAtZW5kKWBcbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLmFycm93U2VsZWN0b3I9Jy50b29sdGlwLWFycm93LCAudG9vbHRpcF9fYXJyb3cnXSAtIGNsYXNzTmFtZSB1c2VkIHRvIGxvY2F0ZSB0aGUgRE9NIGFycm93IGVsZW1lbnQgaW4gdGhlIHRvb2x0aXAuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5pbm5lclNlbGVjdG9yPScudG9vbHRpcC1pbm5lciwgLnRvb2x0aXBfX2lubmVyJ10gLSBjbGFzc05hbWUgdXNlZCB0byBsb2NhdGUgdGhlIERPTSBpbm5lciBlbGVtZW50IGluIHRoZSB0b29sdGlwLlxuICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fFN0cmluZ3xmYWxzZX0gb3B0aW9ucy5jb250YWluZXI9ZmFsc2UgLSBBcHBlbmQgdGhlIHRvb2x0aXAgdG8gYSBzcGVjaWZpYyBlbGVtZW50LlxuICAgKiBAcGFyYW0ge051bWJlcnxPYmplY3R9IG9wdGlvbnMuZGVsYXk9MFxuICAgKiAgICAgIERlbGF5IHNob3dpbmcgYW5kIGhpZGluZyB0aGUgdG9vbHRpcCAobXMpIC0gZG9lcyBub3QgYXBwbHkgdG8gbWFudWFsIHRyaWdnZXIgdHlwZS5cbiAgICogICAgICBJZiBhIG51bWJlciBpcyBzdXBwbGllZCwgZGVsYXkgaXMgYXBwbGllZCB0byBib3RoIGhpZGUvc2hvdy5cbiAgICogICAgICBPYmplY3Qgc3RydWN0dXJlIGlzOiBgeyBzaG93OiA1MDAsIGhpZGU6IDEwMCB9YFxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuaHRtbD1mYWxzZSAtIEluc2VydCBIVE1MIGludG8gdGhlIHRvb2x0aXAuIElmIGZhbHNlLCB0aGUgY29udGVudCB3aWxsIGluc2VydGVkIHdpdGggYHRleHRDb250ZW50YC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRlbXBsYXRlPSc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PiddXG4gICAqICAgICAgQmFzZSBIVE1MIHRvIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgdG9vbHRpcC5cbiAgICogICAgICBUaGUgdG9vbHRpcCdzIGB0aXRsZWAgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBgLnRvb2x0aXAtaW5uZXJgIG9yIGAudG9vbHRpcF9faW5uZXJgLlxuICAgKiAgICAgIGAudG9vbHRpcC1hcnJvd2Agb3IgYC50b29sdGlwX19hcnJvd2Agd2lsbCBiZWNvbWUgdGhlIHRvb2x0aXAncyBhcnJvdy5cbiAgICogICAgICBUaGUgb3V0ZXJtb3N0IHdyYXBwZXIgZWxlbWVudCBzaG91bGQgaGF2ZSB0aGUgYC50b29sdGlwYCBjbGFzcy5cbiAgICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR8VGl0bGVGdW5jdGlvbn0gb3B0aW9ucy50aXRsZT0nJyAtIERlZmF1bHQgdGl0bGUgdmFsdWUgaWYgYHRpdGxlYCBhdHRyaWJ1dGUgaXNuJ3QgcHJlc2VudC5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtvcHRpb25zLnRyaWdnZXI9J2hvdmVyIGZvY3VzJ11cbiAgICogICAgICBIb3cgdG9vbHRpcCBpcyB0cmlnZ2VyZWQgLSBjbGljaywgaG92ZXIsIGZvY3VzLCBtYW51YWwuXG4gICAqICAgICAgWW91IG1heSBwYXNzIG11bHRpcGxlIHRyaWdnZXJzOyBzZXBhcmF0ZSB0aGVtIHdpdGggYSBzcGFjZS4gYG1hbnVhbGAgY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggYW55IG90aGVyIHRyaWdnZXIuXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5jbG9zZU9uQ2xpY2tPdXRzaWRlPWZhbHNlIC0gQ2xvc2UgYSBwb3BwZXIgb24gY2xpY2sgb3V0c2lkZSBvZiB0aGUgcG9wcGVyIGFuZCByZWZlcmVuY2UgZWxlbWVudC4gVGhpcyBoYXMgZWZmZWN0IG9ubHkgd2hlbiBvcHRpb25zLnRyaWdnZXIgaXMgJ2NsaWNrJy5cbiAgICogQHBhcmFtIHtTdHJpbmd8SFRNTEVsZW1lbnR9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnRcbiAgICogICAgICBUaGUgZWxlbWVudCB1c2VkIGFzIGJvdW5kYXJpZXMgZm9yIHRoZSB0b29sdGlwLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiByZWZlciB0byBQb3BwZXIuanMnXG4gICAqICAgICAgW2JvdW5kYXJpZXNFbGVtZW50IGRvY3NdKGh0dHBzOi8vcG9wcGVyLmpzLm9yZy9wb3BwZXItZG9jdW1lbnRhdGlvbi5odG1sKVxuICAgKiBAcGFyYW0ge051bWJlcnxTdHJpbmd9IG9wdGlvbnMub2Zmc2V0PTAgLSBPZmZzZXQgb2YgdGhlIHRvb2x0aXAgcmVsYXRpdmUgdG8gaXRzIHJlZmVyZW5jZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24gcmVmZXIgdG8gUG9wcGVyLmpzJ1xuICAgKiAgICAgIFtvZmZzZXQgZG9jc10oaHR0cHM6Ly9wb3BwZXIuanMub3JnL3BvcHBlci1kb2N1bWVudGF0aW9uLmh0bWwpXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLnBvcHBlck9wdGlvbnM9e30gLSBQb3BwZXIgb3B0aW9ucywgd2lsbCBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gcG9wcGVyIGluc3RhbmNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiByZWZlciB0byBQb3BwZXIuanMnXG4gICAqICAgICAgW29wdGlvbnMgZG9jc10oaHR0cHM6Ly9wb3BwZXIuanMub3JnL3BvcHBlci1kb2N1bWVudGF0aW9uLmh0bWwpXG4gICAqIEByZXR1cm4ge09iamVjdH0gaW5zdGFuY2UgLSBUaGUgZ2VuZXJhdGVkIHRvb2x0aXAgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFRvb2x0aXAocmVmZXJlbmNlLCBvcHRpb25zKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVG9vbHRpcCk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwodGhpcyk7XG5cbiAgICAvLyBhcHBseSB1c2VyIG9wdGlvbnMgb3ZlciBkZWZhdWx0IG9uZXNcbiAgICBvcHRpb25zID0gX2V4dGVuZHMoe30sIERFRkFVTFRfT1BUSU9OUywgb3B0aW9ucyk7XG5cbiAgICByZWZlcmVuY2UuanF1ZXJ5ICYmIChyZWZlcmVuY2UgPSByZWZlcmVuY2VbMF0pO1xuXG4gICAgLy8gY2FjaGUgcmVmZXJlbmNlIGFuZCBvcHRpb25zXG4gICAgdGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIGdldCBldmVudHMgbGlzdFxuICAgIHZhciBldmVudHMgPSB0eXBlb2Ygb3B0aW9ucy50cmlnZ2VyID09PSAnc3RyaW5nJyA/IG9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpLmZpbHRlcihmdW5jdGlvbiAodHJpZ2dlcikge1xuICAgICAgcmV0dXJuIFsnY2xpY2snLCAnaG92ZXInLCAnZm9jdXMnXS5pbmRleE9mKHRyaWdnZXIpICE9PSAtMTtcbiAgICB9KSA6IFtdO1xuXG4gICAgLy8gc2V0IGluaXRpYWwgc3RhdGVcbiAgICB0aGlzLl9pc09wZW4gPSBmYWxzZTtcbiAgICB0aGlzLl9wb3BwZXJPcHRpb25zID0ge307XG5cbiAgICAvLyBzZXQgZXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMocmVmZXJlbmNlLCBldmVudHMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLy9cbiAgLy8gUHVibGljIG1ldGhvZHNcbiAgLy9cblxuICAvKipcbiAgICogUmV2ZWFscyBhbiBlbGVtZW50J3MgdG9vbHRpcC4gVGhpcyBpcyBjb25zaWRlcmVkIGEgXCJtYW51YWxcIiB0cmlnZ2VyaW5nIG9mIHRoZSB0b29sdGlwLlxuICAgKiBUb29sdGlwcyB3aXRoIHplcm8tbGVuZ3RoIHRpdGxlcyBhcmUgbmV2ZXIgZGlzcGxheWVkLlxuICAgKiBAbWV0aG9kIFRvb2x0aXAjc2hvd1xuICAgKiBAbWVtYmVyb2YgVG9vbHRpcFxuICAgKi9cblxuXG4gIC8qKlxuICAgKiBIaWRlcyBhbiBlbGVtZW504oCZcyB0b29sdGlwLiBUaGlzIGlzIGNvbnNpZGVyZWQgYSDigJxtYW51YWzigJ0gdHJpZ2dlcmluZyBvZiB0aGUgdG9vbHRpcC5cbiAgICogQG1ldGhvZCBUb29sdGlwI2hpZGVcbiAgICogQG1lbWJlcm9mIFRvb2x0aXBcbiAgICovXG5cblxuICAvKipcbiAgICogSGlkZXMgYW5kIGRlc3Ryb3lzIGFuIGVsZW1lbnTigJlzIHRvb2x0aXAuXG4gICAqIEBtZXRob2QgVG9vbHRpcCNkaXNwb3NlXG4gICAqIEBtZW1iZXJvZiBUb29sdGlwXG4gICAqL1xuXG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgYW4gZWxlbWVudOKAmXMgdG9vbHRpcC4gVGhpcyBpcyBjb25zaWRlcmVkIGEg4oCcbWFudWFs4oCdIHRyaWdnZXJpbmcgb2YgdGhlIHRvb2x0aXAuXG4gICAqIEBtZXRob2QgVG9vbHRpcCN0b2dnbGVcbiAgICogQG1lbWJlcm9mIFRvb2x0aXBcbiAgICovXG5cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgdG9vbHRpcCdzIHRpdGxlIGNvbnRlbnRcbiAgICogQG1ldGhvZCBUb29sdGlwI3VwZGF0ZVRpdGxlQ29udGVudFxuICAgKiBAbWVtYmVyb2YgVG9vbHRpcFxuICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudH0gdGl0bGUgLSBUaGUgbmV3IGNvbnRlbnQgdG8gdXNlIGZvciB0aGUgdGl0bGVcbiAgICovXG5cblxuICAvL1xuICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgLy9cblxuICBjcmVhdGVDbGFzcyhUb29sdGlwLCBbe1xuICAgIGtleTogJ19jcmVhdGUnLFxuXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHRvb2x0aXAgbm9kZVxuICAgICAqIEBtZW1iZXJvZiBUb29sdGlwXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gdGVtcGxhdGVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ3xIVE1MRWxlbWVudHxUaXRsZUZ1bmN0aW9ufSB0aXRsZVxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gYWxsb3dIdG1sXG4gICAgICogQHJldHVybiB7SFRNTEVsZW1lbnR9IHRvb2x0aXBOb2RlXG4gICAgICovXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGUocmVmZXJlbmNlLCB0ZW1wbGF0ZSwgdGl0bGUsIGFsbG93SHRtbCkge1xuICAgICAgLy8gY3JlYXRlIHRvb2x0aXAgZWxlbWVudFxuICAgICAgdmFyIHRvb2x0aXBHZW5lcmF0b3IgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICB0b29sdGlwR2VuZXJhdG9yLmlubmVySFRNTCA9IHRlbXBsYXRlLnRyaW0oKTtcbiAgICAgIHZhciB0b29sdGlwTm9kZSA9IHRvb2x0aXBHZW5lcmF0b3IuY2hpbGROb2Rlc1swXTtcblxuICAgICAgLy8gYWRkIHVuaXF1ZSBJRCB0byBvdXIgdG9vbHRpcCAobmVlZGVkIGZvciBhY2Nlc3NpYmlsaXR5IHJlYXNvbnMpXG4gICAgICB0b29sdGlwTm9kZS5pZCA9ICd0b29sdGlwXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApO1xuXG4gICAgICAvLyBzZXQgaW5pdGlhbCBgYXJpYS1oaWRkZW5gIHN0YXRlIHRvIGBmYWxzZWAgKGl0J3MgdmlzaWJsZSEpXG4gICAgICB0b29sdGlwTm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgIC8vIGFkZCB0aXRsZSB0byB0b29sdGlwXG4gICAgICB2YXIgdGl0bGVOb2RlID0gdG9vbHRpcEdlbmVyYXRvci5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5pbm5lclNlbGVjdG9yKTtcbiAgICAgIHRoaXMuX2FkZFRpdGxlQ29udGVudChyZWZlcmVuY2UsIHRpdGxlLCBhbGxvd0h0bWwsIHRpdGxlTm9kZSk7XG5cbiAgICAgIC8vIHJldHVybiB0aGUgZ2VuZXJhdGVkIHRvb2x0aXAgbm9kZVxuICAgICAgcmV0dXJuIHRvb2x0aXBOb2RlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19hZGRUaXRsZUNvbnRlbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkVGl0bGVDb250ZW50KHJlZmVyZW5jZSwgdGl0bGUsIGFsbG93SHRtbCwgdGl0bGVOb2RlKSB7XG4gICAgICBpZiAodGl0bGUubm9kZVR5cGUgPT09IDEgfHwgdGl0bGUubm9kZVR5cGUgPT09IDExKSB7XG4gICAgICAgIC8vIGlmIHRpdGxlIGlzIGEgZWxlbWVudCBub2RlIG9yIGRvY3VtZW50IGZyYWdtZW50LCBhcHBlbmQgaXQgb25seSBpZiBhbGxvd0h0bWwgaXMgdHJ1ZVxuICAgICAgICBhbGxvd0h0bWwgJiYgdGl0bGVOb2RlLmFwcGVuZENoaWxkKHRpdGxlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbih0aXRsZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY2FsbCBvdXJzZWxmIHNvIHRoYXQgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gZ2V0cyBoYW5kbGVkIGFwcHJvcHJpYXRlbHkgLSBlaXRoZXJcbiAgICAgICAgLy8gYXMgYSBkb20gbm9kZSwgYSBzdHJpbmcsIG9yIGV2ZW4gYXMgYW5vdGhlciBmdW5jdGlvbi5cbiAgICAgICAgdGhpcy5fYWRkVGl0bGVDb250ZW50KHJlZmVyZW5jZSwgdGl0bGUuY2FsbChyZWZlcmVuY2UpLCBhbGxvd0h0bWwsIHRpdGxlTm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBpdCdzIGp1c3QgYSBzaW1wbGUgdGV4dCwgc2V0IHRleHRDb250ZW50IG9yIGlubmVySHRtbCBkZXBlbmRpbmcgYnkgYGFsbG93SHRtbGAgdmFsdWVcbiAgICAgICAgYWxsb3dIdG1sID8gdGl0bGVOb2RlLmlubmVySFRNTCA9IHRpdGxlIDogdGl0bGVOb2RlLnRleHRDb250ZW50ID0gdGl0bGU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3Nob3cnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2hvdyhyZWZlcmVuY2UsIG9wdGlvbnMpIHtcbiAgICAgIC8vIGRvbid0IHNob3cgaWYgaXQncyBhbHJlYWR5IHZpc2libGVcbiAgICAgIC8vIG9yIGlmIGl0J3Mgbm90IGJlaW5nIHNob3dlZFxuICAgICAgaWYgKHRoaXMuX2lzT3BlbiAmJiAhdGhpcy5faXNPcGVuaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdGhpcy5faXNPcGVuID0gdHJ1ZTtcblxuICAgICAgLy8gaWYgdGhlIHRvb2x0aXBOb2RlIGFscmVhZHkgZXhpc3RzLCBqdXN0IHNob3cgaXRcbiAgICAgIGlmICh0aGlzLl90b29sdGlwTm9kZSkge1xuICAgICAgICB0aGlzLl90b29sdGlwTm9kZS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB0aGlzLl90b29sdGlwTm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG4gICAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBnZXQgdGl0bGVcbiAgICAgIHZhciB0aXRsZSA9IHJlZmVyZW5jZS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgb3B0aW9ucy50aXRsZTtcblxuICAgICAgLy8gZG9uJ3Qgc2hvdyB0b29sdGlwIGlmIG5vIHRpdGxlIGlzIGRlZmluZWRcbiAgICAgIGlmICghdGl0bGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGNyZWF0ZSB0b29sdGlwIG5vZGVcbiAgICAgIHZhciB0b29sdGlwTm9kZSA9IHRoaXMuX2NyZWF0ZShyZWZlcmVuY2UsIG9wdGlvbnMudGVtcGxhdGUsIHRpdGxlLCBvcHRpb25zLmh0bWwpO1xuXG4gICAgICAvLyBBZGQgYGFyaWEtZGVzY3JpYmVkYnlgIHRvIG91ciByZWZlcmVuY2UgZWxlbWVudCBmb3IgYWNjZXNzaWJpbGl0eSByZWFzb25zXG4gICAgICByZWZlcmVuY2Uuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdG9vbHRpcE5vZGUuaWQpO1xuXG4gICAgICAvLyBhcHBlbmQgdG9vbHRpcCB0byBjb250YWluZXJcbiAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLl9maW5kQ29udGFpbmVyKG9wdGlvbnMuY29udGFpbmVyLCByZWZlcmVuY2UpO1xuXG4gICAgICB0aGlzLl9hcHBlbmQodG9vbHRpcE5vZGUsIGNvbnRhaW5lcik7XG5cbiAgICAgIHRoaXMuX3BvcHBlck9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucy5wb3BwZXJPcHRpb25zLCB7XG4gICAgICAgIHBsYWNlbWVudDogb3B0aW9ucy5wbGFjZW1lbnRcbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLl9wb3BwZXJPcHRpb25zLm1vZGlmaWVycyA9IF9leHRlbmRzKHt9LCB0aGlzLl9wb3BwZXJPcHRpb25zLm1vZGlmaWVycywge1xuICAgICAgICBhcnJvdzogX2V4dGVuZHMoe30sIHRoaXMuX3BvcHBlck9wdGlvbnMubW9kaWZpZXJzICYmIHRoaXMuX3BvcHBlck9wdGlvbnMubW9kaWZpZXJzLmFycm93LCB7XG4gICAgICAgICAgZWxlbWVudDogb3B0aW9ucy5hcnJvd1NlbGVjdG9yXG4gICAgICAgIH0pLFxuICAgICAgICBvZmZzZXQ6IF9leHRlbmRzKHt9LCB0aGlzLl9wb3BwZXJPcHRpb25zLm1vZGlmaWVycyAmJiB0aGlzLl9wb3BwZXJPcHRpb25zLm1vZGlmaWVycy5vZmZzZXQsIHtcbiAgICAgICAgICBvZmZzZXQ6IG9wdGlvbnMub2Zmc2V0IHx8IHRoaXMuX3BvcHBlck9wdGlvbnMubW9kaWZpZXJzICYmIHRoaXMuX3BvcHBlck9wdGlvbnMubW9kaWZpZXJzLm9mZnNldCAmJiB0aGlzLl9wb3BwZXJPcHRpb25zLm1vZGlmaWVycy5vZmZzZXQub2Zmc2V0IHx8IG9wdGlvbnMub2Zmc2V0XG4gICAgICAgIH0pXG4gICAgICB9KTtcblxuICAgICAgaWYgKG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyT3B0aW9ucy5tb2RpZmllcnMucHJldmVudE92ZXJmbG93ID0ge1xuICAgICAgICAgIGJvdW5kYXJpZXNFbGVtZW50OiBvcHRpb25zLmJvdW5kYXJpZXNFbGVtZW50XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UgPSBuZXcgUG9wcGVyKHJlZmVyZW5jZSwgdG9vbHRpcE5vZGUsIHRoaXMuX3BvcHBlck9wdGlvbnMpO1xuXG4gICAgICB0aGlzLl90b29sdGlwTm9kZSA9IHRvb2x0aXBOb2RlO1xuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfaGlkZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9oaWRlKCkgLypyZWZlcmVuY2UsIG9wdGlvbnMqL3tcbiAgICAgIC8vIGRvbid0IGhpZGUgaWYgaXQncyBhbHJlYWR5IGhpZGRlblxuICAgICAgaWYgKCF0aGlzLl9pc09wZW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzT3BlbiA9IGZhbHNlO1xuXG4gICAgICAvLyBoaWRlIHRvb2x0aXBOb2RlXG4gICAgICB0aGlzLl90b29sdGlwTm9kZS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICB0aGlzLl90b29sdGlwTm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2Rpc3Bvc2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZGlzcG9zZSgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnMgZmlyc3QgdG8gcHJldmVudCBhbnkgdW5leHBlY3RlZCBiZWhhdmlvdXJcbiAgICAgIHRoaXMuX2V2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgIHZhciBmdW5jID0gX3JlZi5mdW5jLFxuICAgICAgICAgICAgZXZlbnQgPSBfcmVmLmV2ZW50O1xuXG4gICAgICAgIF90aGlzLnJlZmVyZW5jZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fZXZlbnRzID0gW107XG5cbiAgICAgIGlmICh0aGlzLl90b29sdGlwTm9kZSkge1xuICAgICAgICB0aGlzLl9oaWRlKCk7XG5cbiAgICAgICAgLy8gZGVzdHJveSBpbnN0YW5jZVxuICAgICAgICB0aGlzLnBvcHBlckluc3RhbmNlLmRlc3Ryb3koKTtcblxuICAgICAgICAvLyBkZXN0cm95IHRvb2x0aXBOb2RlIGlmIHJlbW92ZU9uRGVzdHJveSBpcyBub3Qgc2V0LCBhcyBwb3BwZXJJbnN0YW5jZS5kZXN0cm95KCkgYWxyZWFkeSByZW1vdmVzIHRoZSBlbGVtZW50XG4gICAgICAgIGlmICghdGhpcy5wb3BwZXJJbnN0YW5jZS5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgICAgICAgIHRoaXMuX3Rvb2x0aXBOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fdG9vbHRpcE5vZGUpO1xuICAgICAgICAgIHRoaXMuX3Rvb2x0aXBOb2RlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2ZpbmRDb250YWluZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZmluZENvbnRhaW5lcihjb250YWluZXIsIHJlZmVyZW5jZSkge1xuICAgICAgLy8gaWYgY29udGFpbmVyIGlzIGEgcXVlcnksIGdldCB0aGUgcmVsYXRpdmUgZWxlbWVudFxuICAgICAgaWYgKHR5cGVvZiBjb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnRhaW5lciA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRhaW5lciA9PT0gZmFsc2UpIHtcbiAgICAgICAgLy8gaWYgY29udGFpbmVyIGlzIGBmYWxzZWAsIHNldCBpdCB0byByZWZlcmVuY2UgcGFyZW50XG4gICAgICAgIGNvbnRhaW5lciA9IHJlZmVyZW5jZS5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBlbmQgdG9vbHRpcCB0byBjb250YWluZXJcbiAgICAgKiBAbWVtYmVyb2YgVG9vbHRpcFxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gdG9vbHRpcE5vZGVcbiAgICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fFN0cmluZ3xmYWxzZX0gY29udGFpbmVyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ19hcHBlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfYXBwZW5kKHRvb2x0aXBOb2RlLCBjb250YWluZXIpIHtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0b29sdGlwTm9kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NldEV2ZW50TGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgZXZlbnRzLCBvcHRpb25zKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGRpcmVjdEV2ZW50cyA9IFtdO1xuICAgICAgdmFyIG9wcG9zaXRlRXZlbnRzID0gW107XG5cbiAgICAgIGV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICAgICAgY2FzZSAnaG92ZXInOlxuICAgICAgICAgICAgZGlyZWN0RXZlbnRzLnB1c2goJ21vdXNlZW50ZXInKTtcbiAgICAgICAgICAgIG9wcG9zaXRlRXZlbnRzLnB1c2goJ21vdXNlbGVhdmUnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvY3VzJzpcbiAgICAgICAgICAgIGRpcmVjdEV2ZW50cy5wdXNoKCdmb2N1cycpO1xuICAgICAgICAgICAgb3Bwb3NpdGVFdmVudHMucHVzaCgnYmx1cicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgZGlyZWN0RXZlbnRzLnB1c2goJ2NsaWNrJyk7XG4gICAgICAgICAgICBvcHBvc2l0ZUV2ZW50cy5wdXNoKCdjbGljaycpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBzY2hlZHVsZSBzaG93IHRvb2x0aXBcbiAgICAgIGRpcmVjdEV2ZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZnVuYyA9IGZ1bmN0aW9uIGZ1bmMoZXZ0KSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5faXNPcGVuaW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2dC51c2VkQnlUb29sdGlwID0gdHJ1ZTtcbiAgICAgICAgICBfdGhpczIuX3NjaGVkdWxlU2hvdyhyZWZlcmVuY2UsIG9wdGlvbnMuZGVsYXksIG9wdGlvbnMsIGV2dCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzMi5fZXZlbnRzLnB1c2goeyBldmVudDogZXZlbnQsIGZ1bmM6IGZ1bmMgfSk7XG4gICAgICAgIHJlZmVyZW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBzY2hlZHVsZSBoaWRlIHRvb2x0aXBcbiAgICAgIG9wcG9zaXRlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBmdW5jID0gZnVuY3Rpb24gZnVuYyhldnQpIHtcbiAgICAgICAgICBpZiAoZXZ0LnVzZWRCeVRvb2x0aXAgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMyLl9zY2hlZHVsZUhpZGUocmVmZXJlbmNlLCBvcHRpb25zLmRlbGF5LCBvcHRpb25zLCBldnQpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpczIuX2V2ZW50cy5wdXNoKHsgZXZlbnQ6IGV2ZW50LCBmdW5jOiBmdW5jIH0pO1xuICAgICAgICByZWZlcmVuY2UuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuYyk7XG4gICAgICAgIGlmIChldmVudCA9PT0gJ2NsaWNrJyAmJiBvcHRpb25zLmNsb3NlT25DbGlja091dHNpZGUpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKCFfdGhpczIuX2lzT3BlbmluZykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcG9wcGVyID0gX3RoaXMyLnBvcHBlckluc3RhbmNlLnBvcHBlcjtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2UuY29udGFpbnMoZS50YXJnZXQpIHx8IHBvcHBlci5jb250YWlucyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuYyhlKTtcbiAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3NjaGVkdWxlU2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zY2hlZHVsZVNob3cocmVmZXJlbmNlLCBkZWxheSwgb3B0aW9ucyAvKiwgZXZ0ICovKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdGhpcy5faXNPcGVuaW5nID0gdHJ1ZTtcbiAgICAgIC8vIGRlZmF1bHRzIHRvIDBcbiAgICAgIHZhciBjb21wdXRlZERlbGF5ID0gZGVsYXkgJiYgZGVsYXkuc2hvdyB8fCBkZWxheSB8fCAwO1xuICAgICAgdGhpcy5fc2hvd1RpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczMuX3Nob3cocmVmZXJlbmNlLCBvcHRpb25zKTtcbiAgICAgIH0sIGNvbXB1dGVkRGVsYXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zY2hlZHVsZUhpZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfc2NoZWR1bGVIaWRlKHJlZmVyZW5jZSwgZGVsYXksIG9wdGlvbnMsIGV2dCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHRoaXMuX2lzT3BlbmluZyA9IGZhbHNlO1xuICAgICAgLy8gZGVmYXVsdHMgdG8gMFxuICAgICAgdmFyIGNvbXB1dGVkRGVsYXkgPSBkZWxheSAmJiBkZWxheS5oaWRlIHx8IGRlbGF5IHx8IDA7XG4gICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuX3Nob3dUaW1lb3V0KTtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKF90aGlzNC5faXNPcGVuID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRvY3VtZW50LmJvZHkuY29udGFpbnMoX3RoaXM0Ll90b29sdGlwTm9kZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiB3ZSBhcmUgaGlkaW5nIGJlY2F1c2Ugb2YgYSBtb3VzZWxlYXZlLCB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlIG5ld1xuICAgICAgICAvLyByZWZlcmVuY2UgaXNuJ3QgdGhlIHRvb2x0aXAsIGJlY2F1c2UgaW4gdGhpcyBjYXNlIHdlIGRvbid0IHdhbnQgdG8gaGlkZSBpdFxuICAgICAgICBpZiAoZXZ0LnR5cGUgPT09ICdtb3VzZWxlYXZlJykge1xuICAgICAgICAgIHZhciBpc1NldCA9IF90aGlzNC5fc2V0VG9vbHRpcE5vZGVFdmVudChldnQsIHJlZmVyZW5jZSwgZGVsYXksIG9wdGlvbnMpO1xuXG4gICAgICAgICAgLy8gaWYgd2Ugc2V0IHRoZSBuZXcgZXZlbnQsIGRvbid0IGhpZGUgdGhlIHRvb2x0aXAgeWV0XG4gICAgICAgICAgLy8gdGhlIG5ldyBldmVudCB3aWxsIHRha2UgY2FyZSB0byBoaWRlIGl0IGlmIG5lY2Vzc2FyeVxuICAgICAgICAgIGlmIChpc1NldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5faGlkZShyZWZlcmVuY2UsIG9wdGlvbnMpO1xuICAgICAgfSwgY29tcHV0ZWREZWxheSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX3VwZGF0ZVRpdGxlQ29udGVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF91cGRhdGVUaXRsZUNvbnRlbnQodGl0bGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fdG9vbHRpcE5vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLnRpdGxlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy50aXRsZSA9IHRpdGxlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB0aXRsZU5vZGUgPSB0aGlzLl90b29sdGlwTm9kZS5xdWVyeVNlbGVjdG9yKHRoaXMub3B0aW9ucy5pbm5lclNlbGVjdG9yKTtcbiAgICAgIHRoaXMuX2NsZWFyVGl0bGVDb250ZW50KHRpdGxlTm9kZSwgdGhpcy5vcHRpb25zLmh0bWwsIHRoaXMucmVmZXJlbmNlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCB0aGlzLm9wdGlvbnMudGl0bGUpO1xuICAgICAgdGhpcy5fYWRkVGl0bGVDb250ZW50KHRoaXMucmVmZXJlbmNlLCB0aXRsZSwgdGhpcy5vcHRpb25zLmh0bWwsIHRpdGxlTm9kZSk7XG4gICAgICB0aGlzLm9wdGlvbnMudGl0bGUgPSB0aXRsZTtcbiAgICAgIHRoaXMucG9wcGVySW5zdGFuY2UudXBkYXRlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnX2NsZWFyVGl0bGVDb250ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX2NsZWFyVGl0bGVDb250ZW50KHRpdGxlTm9kZSwgYWxsb3dIdG1sLCBsYXN0VGl0bGUpIHtcbiAgICAgIGlmIChsYXN0VGl0bGUubm9kZVR5cGUgPT09IDEgfHwgbGFzdFRpdGxlLm5vZGVUeXBlID09PSAxMSkge1xuICAgICAgICBhbGxvd0h0bWwgJiYgdGl0bGVOb2RlLnJlbW92ZUNoaWxkKGxhc3RUaXRsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbGxvd0h0bWwgPyB0aXRsZU5vZGUuaW5uZXJIVE1MID0gJycgOiB0aXRsZU5vZGUudGV4dENvbnRlbnQgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRvb2x0aXA7XG59KCk7XG5cbi8qKlxuICogVGl0bGUgZnVuY3Rpb24sIGl0cyBjb250ZXh0IGlzIHRoZSBUb29sdGlwIGluc3RhbmNlLlxuICogQG1lbWJlcm9mIFRvb2x0aXBcbiAqIEBjYWxsYmFjayBUaXRsZUZ1bmN0aW9uXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHBsYWNlbWVudCAtIFRoZSBkZXNpcmVkIHRpdGxlLlxuICovXG5cblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzNS5fc2hvdyhfdGhpczUucmVmZXJlbmNlLCBfdGhpczUub3B0aW9ucyk7XG4gIH07XG5cbiAgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGhpczUuX2hpZGUoKTtcbiAgfTtcblxuICB0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF90aGlzNS5fZGlzcG9zZSgpO1xuICB9O1xuXG4gIHRoaXMudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChfdGhpczUuX2lzT3Blbikge1xuICAgICAgcmV0dXJuIF90aGlzNS5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBfdGhpczUuc2hvdygpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnVwZGF0ZVRpdGxlQ29udGVudCA9IGZ1bmN0aW9uICh0aXRsZSkge1xuICAgIHJldHVybiBfdGhpczUuX3VwZGF0ZVRpdGxlQ29udGVudCh0aXRsZSk7XG4gIH07XG5cbiAgdGhpcy5fZXZlbnRzID0gW107XG5cbiAgdGhpcy5fc2V0VG9vbHRpcE5vZGVFdmVudCA9IGZ1bmN0aW9uIChldnQsIHJlZmVyZW5jZSwgZGVsYXksIG9wdGlvbnMpIHtcbiAgICB2YXIgcmVsYXRlZHJlZmVyZW5jZSA9IGV2dC5yZWxhdGVkcmVmZXJlbmNlIHx8IGV2dC50b0VsZW1lbnQgfHwgZXZ0LnJlbGF0ZWRUYXJnZXQ7XG5cbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjayhldnQyKSB7XG4gICAgICB2YXIgcmVsYXRlZHJlZmVyZW5jZTIgPSBldnQyLnJlbGF0ZWRyZWZlcmVuY2UgfHwgZXZ0Mi50b0VsZW1lbnQgfHwgZXZ0Mi5yZWxhdGVkVGFyZ2V0O1xuXG4gICAgICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXIgYWZ0ZXIgY2FsbFxuICAgICAgX3RoaXM1Ll90b29sdGlwTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2dC50eXBlLCBjYWxsYmFjayk7XG5cbiAgICAgIC8vIElmIHRoZSBuZXcgcmVmZXJlbmNlIGlzIG5vdCB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICAgIGlmICghcmVmZXJlbmNlLmNvbnRhaW5zKHJlbGF0ZWRyZWZlcmVuY2UyKSkge1xuICAgICAgICAvLyBTY2hlZHVsZSB0byBoaWRlIHRvb2x0aXBcbiAgICAgICAgX3RoaXM1Ll9zY2hlZHVsZUhpZGUocmVmZXJlbmNlLCBvcHRpb25zLmRlbGF5LCBvcHRpb25zLCBldnQyKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKF90aGlzNS5fdG9vbHRpcE5vZGUuY29udGFpbnMocmVsYXRlZHJlZmVyZW5jZSkpIHtcbiAgICAgIC8vIGxpc3RlbiB0byBtb3VzZWxlYXZlIG9uIHRoZSB0b29sdGlwIGVsZW1lbnQgdG8gYmUgYWJsZSB0byBoaWRlIHRoZSB0b29sdGlwXG4gICAgICBfdGhpczUuX3Rvb2x0aXBOb2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZ0LnR5cGUsIGNhbGxiYWNrKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRvb2x0aXA7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b29sdGlwLmpzLm1hcFxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiKGZ1bmN0aW9uKGZhY3RvcnkpIHtcclxuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcclxuICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cclxuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgLy8gTm9kZS9Db21tb25KU1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xyXG4gICAgd2luZG93LndOdW1iID0gZmFjdG9yeSgpO1xyXG4gIH1cclxufSkoZnVuY3Rpb24oKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciBGb3JtYXRPcHRpb25zID0gW1xyXG4gICAgXCJkZWNpbWFsc1wiLFxyXG4gICAgXCJ0aG91c2FuZFwiLFxyXG4gICAgXCJtYXJrXCIsXHJcbiAgICBcInByZWZpeFwiLFxyXG4gICAgXCJzdWZmaXhcIixcclxuICAgIFwiZW5jb2RlclwiLFxyXG4gICAgXCJkZWNvZGVyXCIsXHJcbiAgICBcIm5lZ2F0aXZlQmVmb3JlXCIsXHJcbiAgICBcIm5lZ2F0aXZlXCIsXHJcbiAgICBcImVkaXRcIixcclxuICAgIFwidW5kb1wiXHJcbiAgXTtcclxuXHJcbiAgLy8gR2VuZXJhbFxyXG5cclxuICAvLyBSZXZlcnNlIGEgc3RyaW5nXHJcbiAgZnVuY3Rpb24gc3RyUmV2ZXJzZShhKSB7XHJcbiAgICByZXR1cm4gYVxyXG4gICAgICAuc3BsaXQoXCJcIilcclxuICAgICAgLnJldmVyc2UoKVxyXG4gICAgICAuam9pbihcIlwiKTtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoIGEgc3BlY2lmaWVkIHByZWZpeC5cclxuICBmdW5jdGlvbiBzdHJTdGFydHNXaXRoKGlucHV0LCBtYXRjaCkge1xyXG4gICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygwLCBtYXRjaC5sZW5ndGgpID09PSBtYXRjaDtcclxuICB9XHJcblxyXG4gIC8vIENoZWNrIGlzIGEgc3RyaW5nIGVuZHMgaW4gYSBzcGVjaWZpZWQgc3VmZml4LlxyXG4gIGZ1bmN0aW9uIHN0ckVuZHNXaXRoKGlucHV0LCBtYXRjaCkge1xyXG4gICAgcmV0dXJuIGlucHV0LnNsaWNlKC0xICogbWF0Y2gubGVuZ3RoKSA9PT0gbWF0Y2g7XHJcbiAgfVxyXG5cclxuICAvLyBUaHJvdyBhbiBlcnJvciBpZiBmb3JtYXR0aW5nIG9wdGlvbnMgYXJlIGluY29tcGF0aWJsZS5cclxuICBmdW5jdGlvbiB0aHJvd0VxdWFsRXJyb3IoRiwgYSwgYikge1xyXG4gICAgaWYgKChGW2FdIHx8IEZbYl0pICYmIEZbYV0gPT09IEZbYl0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgaWYgYSBudW1iZXIgaXMgZmluaXRlIGFuZCBub3QgTmFOXHJcbiAgZnVuY3Rpb24gaXNWYWxpZE51bWJlcihpbnB1dCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gXCJudW1iZXJcIiAmJiBpc0Zpbml0ZShpbnB1dCk7XHJcbiAgfVxyXG5cclxuICAvLyBQcm92aWRlIHJvdW5kaW5nLWFjY3VyYXRlIHRvRml4ZWQgbWV0aG9kLlxyXG4gIC8vIEJvcnJvd2VkOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMTMyMzMzMC83NzUyNjVcclxuICBmdW5jdGlvbiB0b0ZpeGVkKHZhbHVlLCBleHApIHtcclxuICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zcGxpdChcImVcIik7XHJcbiAgICB2YWx1ZSA9IE1hdGgucm91bmQoKyh2YWx1ZVswXSArIFwiZVwiICsgKHZhbHVlWzFdID8gK3ZhbHVlWzFdICsgZXhwIDogZXhwKSkpO1xyXG4gICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpLnNwbGl0KFwiZVwiKTtcclxuICAgIHJldHVybiAoKyh2YWx1ZVswXSArIFwiZVwiICsgKHZhbHVlWzFdID8gK3ZhbHVlWzFdIC0gZXhwIDogLWV4cCkpKS50b0ZpeGVkKGV4cCk7XHJcbiAgfVxyXG5cclxuICAvLyBGb3JtYXR0aW5nXHJcblxyXG4gIC8vIEFjY2VwdCBhIG51bWJlciBhcyBpbnB1dCwgb3V0cHV0IGZvcm1hdHRlZCBzdHJpbmcuXHJcbiAgZnVuY3Rpb24gZm9ybWF0VG8oXHJcbiAgICBkZWNpbWFscyxcclxuICAgIHRob3VzYW5kLFxyXG4gICAgbWFyayxcclxuICAgIHByZWZpeCxcclxuICAgIHN1ZmZpeCxcclxuICAgIGVuY29kZXIsXHJcbiAgICBkZWNvZGVyLFxyXG4gICAgbmVnYXRpdmVCZWZvcmUsXHJcbiAgICBuZWdhdGl2ZSxcclxuICAgIGVkaXQsXHJcbiAgICB1bmRvLFxyXG4gICAgaW5wdXRcclxuICApIHtcclxuICAgIHZhciBvcmlnaW5hbElucHV0ID0gaW5wdXQsXHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSxcclxuICAgICAgaW5wdXRQaWVjZXMsXHJcbiAgICAgIGlucHV0QmFzZSxcclxuICAgICAgaW5wdXREZWNpbWFscyA9IFwiXCIsXHJcbiAgICAgIG91dHB1dCA9IFwiXCI7XHJcblxyXG4gICAgLy8gQXBwbHkgdXNlciBlbmNvZGVyIHRvIHRoZSBpbnB1dC5cclxuICAgIC8vIEV4cGVjdGVkIG91dGNvbWU6IG51bWJlci5cclxuICAgIGlmIChlbmNvZGVyKSB7XHJcbiAgICAgIGlucHV0ID0gZW5jb2RlcihpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RvcCBpZiBubyB2YWxpZCBudW1iZXIgd2FzIHByb3ZpZGVkLCB0aGUgbnVtYmVyIGlzIGluZmluaXRlIG9yIE5hTi5cclxuICAgIGlmICghaXNWYWxpZE51bWJlcihpbnB1dCkpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJvdW5kaW5nIGF3YXkgZGVjaW1hbHMgbWlnaHQgY2F1c2UgYSB2YWx1ZSBvZiAtMFxyXG4gICAgLy8gd2hlbiB1c2luZyB2ZXJ5IHNtYWxsIHJhbmdlcy4gUmVtb3ZlIHRob3NlIGNhc2VzLlxyXG4gICAgaWYgKGRlY2ltYWxzICE9PSBmYWxzZSAmJiBwYXJzZUZsb2F0KGlucHV0LnRvRml4ZWQoZGVjaW1hbHMpKSA9PT0gMCkge1xyXG4gICAgICBpbnB1dCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRm9ybWF0dGluZyBpcyBkb25lIG9uIGFic29sdXRlIG51bWJlcnMsXHJcbiAgICAvLyBkZWNvcmF0ZWQgYnkgYW4gb3B0aW9uYWwgbmVnYXRpdmUgc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0IDwgMCkge1xyXG4gICAgICBpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgICBpbnB1dCA9IE1hdGguYWJzKGlucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWR1Y2UgdGhlIG51bWJlciBvZiBkZWNpbWFscyB0byB0aGUgc3BlY2lmaWVkIG9wdGlvbi5cclxuICAgIGlmIChkZWNpbWFscyAhPT0gZmFsc2UpIHtcclxuICAgICAgaW5wdXQgPSB0b0ZpeGVkKGlucHV0LCBkZWNpbWFscyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJhbnNmb3JtIHRoZSBudW1iZXIgaW50byBhIHN0cmluZywgc28gaXQgY2FuIGJlIHNwbGl0LlxyXG4gICAgaW5wdXQgPSBpbnB1dC50b1N0cmluZygpO1xyXG5cclxuICAgIC8vIEJyZWFrIHRoZSBudW1iZXIgb24gdGhlIGRlY2ltYWwgc2VwYXJhdG9yLlxyXG4gICAgaWYgKGlucHV0LmluZGV4T2YoXCIuXCIpICE9PSAtMSkge1xyXG4gICAgICBpbnB1dFBpZWNlcyA9IGlucHV0LnNwbGl0KFwiLlwiKTtcclxuXHJcbiAgICAgIGlucHV0QmFzZSA9IGlucHV0UGllY2VzWzBdO1xyXG5cclxuICAgICAgaWYgKG1hcmspIHtcclxuICAgICAgICBpbnB1dERlY2ltYWxzID0gbWFyayArIGlucHV0UGllY2VzWzFdO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBJZiBpdCBpc24ndCBzcGxpdCwgdGhlIGVudGlyZSBudW1iZXIgd2lsbCBkby5cclxuICAgICAgaW5wdXRCYXNlID0gaW5wdXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR3JvdXAgbnVtYmVycyBpbiBzZXRzIG9mIHRocmVlLlxyXG4gICAgaWYgKHRob3VzYW5kKSB7XHJcbiAgICAgIGlucHV0QmFzZSA9IHN0clJldmVyc2UoaW5wdXRCYXNlKS5tYXRjaCgvLnsxLDN9L2cpO1xyXG4gICAgICBpbnB1dEJhc2UgPSBzdHJSZXZlcnNlKGlucHV0QmFzZS5qb2luKHN0clJldmVyc2UodGhvdXNhbmQpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWYgdGhlIG51bWJlciBpcyBuZWdhdGl2ZSwgcHJlZml4IHdpdGggbmVnYXRpb24gc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0SXNOZWdhdGl2ZSAmJiBuZWdhdGl2ZUJlZm9yZSkge1xyXG4gICAgICBvdXRwdXQgKz0gbmVnYXRpdmVCZWZvcmU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJlZml4IHRoZSBudW1iZXJcclxuICAgIGlmIChwcmVmaXgpIHtcclxuICAgICAgb3V0cHV0ICs9IHByZWZpeDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOb3JtYWwgbmVnYXRpdmUgb3B0aW9uIGNvbWVzIGFmdGVyIHRoZSBwcmVmaXguIERlZmF1bHRzIHRvICctJy5cclxuICAgIGlmIChpbnB1dElzTmVnYXRpdmUgJiYgbmVnYXRpdmUpIHtcclxuICAgICAgb3V0cHV0ICs9IG5lZ2F0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcGVuZCB0aGUgYWN0dWFsIG51bWJlci5cclxuICAgIG91dHB1dCArPSBpbnB1dEJhc2U7XHJcbiAgICBvdXRwdXQgKz0gaW5wdXREZWNpbWFscztcclxuXHJcbiAgICAvLyBBcHBseSB0aGUgc3VmZml4LlxyXG4gICAgaWYgKHN1ZmZpeCkge1xyXG4gICAgICBvdXRwdXQgKz0gc3VmZml4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJ1biB0aGUgb3V0cHV0IHRocm91Z2ggYSB1c2VyLXNwZWNpZmllZCBwb3N0LWZvcm1hdHRlci5cclxuICAgIGlmIChlZGl0KSB7XHJcbiAgICAgIG91dHB1dCA9IGVkaXQob3V0cHV0LCBvcmlnaW5hbElucHV0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbGwgZG9uZS5cclxuICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgfVxyXG5cclxuICAvLyBBY2NlcHQgYSBzdGluZyBhcyBpbnB1dCwgb3V0cHV0IGRlY29kZWQgbnVtYmVyLlxyXG4gIGZ1bmN0aW9uIGZvcm1hdEZyb20oXHJcbiAgICBkZWNpbWFscyxcclxuICAgIHRob3VzYW5kLFxyXG4gICAgbWFyayxcclxuICAgIHByZWZpeCxcclxuICAgIHN1ZmZpeCxcclxuICAgIGVuY29kZXIsXHJcbiAgICBkZWNvZGVyLFxyXG4gICAgbmVnYXRpdmVCZWZvcmUsXHJcbiAgICBuZWdhdGl2ZSxcclxuICAgIGVkaXQsXHJcbiAgICB1bmRvLFxyXG4gICAgaW5wdXRcclxuICApIHtcclxuICAgIHZhciBvcmlnaW5hbElucHV0ID0gaW5wdXQsXHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSxcclxuICAgICAgb3V0cHV0ID0gXCJcIjtcclxuXHJcbiAgICAvLyBVc2VyIGRlZmluZWQgcHJlLWRlY29kZXIuIFJlc3VsdCBtdXN0IGJlIGEgbm9uIGVtcHR5IHN0cmluZy5cclxuICAgIGlmICh1bmRvKSB7XHJcbiAgICAgIGlucHV0ID0gdW5kbyhpbnB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVGVzdCB0aGUgaW5wdXQuIENhbid0IGJlIGVtcHR5LlxyXG4gICAgaWYgKCFpbnB1dCB8fCB0eXBlb2YgaW5wdXQgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElmIHRoZSBzdHJpbmcgc3RhcnRzIHdpdGggdGhlIG5lZ2F0aXZlQmVmb3JlIHZhbHVlOiByZW1vdmUgaXQuXHJcbiAgICAvLyBSZW1lbWJlciBpcyB3YXMgdGhlcmUsIHRoZSBudW1iZXIgaXMgbmVnYXRpdmUuXHJcbiAgICBpZiAobmVnYXRpdmVCZWZvcmUgJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgbmVnYXRpdmVCZWZvcmUpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShuZWdhdGl2ZUJlZm9yZSwgXCJcIik7XHJcbiAgICAgIGlucHV0SXNOZWdhdGl2ZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVwZWF0IHRoZSBzYW1lIHByb2NlZHVyZSBmb3IgdGhlIHByZWZpeC5cclxuICAgIGlmIChwcmVmaXggJiYgc3RyU3RhcnRzV2l0aChpbnB1dCwgcHJlZml4KSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UocHJlZml4LCBcIlwiKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBbmQgYWdhaW4gZm9yIG5lZ2F0aXZlLlxyXG4gICAgaWYgKG5lZ2F0aXZlICYmIHN0clN0YXJ0c1dpdGgoaW5wdXQsIG5lZ2F0aXZlKSkge1xyXG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UobmVnYXRpdmUsIFwiXCIpO1xyXG4gICAgICBpbnB1dElzTmVnYXRpdmUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbW92ZSB0aGUgc3VmZml4LlxyXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvU3RyaW5nL3NsaWNlXHJcbiAgICBpZiAoc3VmZml4ICYmIHN0ckVuZHNXaXRoKGlucHV0LCBzdWZmaXgpKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQuc2xpY2UoMCwgLTEgKiBzdWZmaXgubGVuZ3RoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZW1vdmUgdGhlIHRob3VzYW5kIGdyb3VwaW5nLlxyXG4gICAgaWYgKHRob3VzYW5kKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQuc3BsaXQodGhvdXNhbmQpLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2V0IHRoZSBkZWNpbWFsIHNlcGFyYXRvciBiYWNrIHRvIHBlcmlvZC5cclxuICAgIGlmIChtYXJrKSB7XHJcbiAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShtYXJrLCBcIi5cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUHJlcGVuZCB0aGUgbmVnYXRpdmUgc3ltYm9sLlxyXG4gICAgaWYgKGlucHV0SXNOZWdhdGl2ZSkge1xyXG4gICAgICBvdXRwdXQgKz0gXCItXCI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWRkIHRoZSBudW1iZXJcclxuICAgIG91dHB1dCArPSBpbnB1dDtcclxuXHJcbiAgICAvLyBUcmltIGFsbCBub24tbnVtZXJpYyBjaGFyYWN0ZXJzIChhbGxvdyAnLicgYW5kICctJyk7XHJcbiAgICBvdXRwdXQgPSBvdXRwdXQucmVwbGFjZSgvW14wLTlcXC5cXC0uXS9nLCBcIlwiKTtcclxuXHJcbiAgICAvLyBUaGUgdmFsdWUgY29udGFpbnMgbm8gcGFyc2UtYWJsZSBudW1iZXIuXHJcbiAgICBpZiAob3V0cHV0ID09PSBcIlwiKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb3ZlcnQgdG8gbnVtYmVyLlxyXG4gICAgb3V0cHV0ID0gTnVtYmVyKG91dHB1dCk7XHJcblxyXG4gICAgLy8gUnVuIHRoZSB1c2VyLXNwZWNpZmllZCBwb3N0LWRlY29kZXIuXHJcbiAgICBpZiAoZGVjb2Rlcikge1xyXG4gICAgICBvdXRwdXQgPSBkZWNvZGVyKG91dHB1dCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgaXMgdGhlIG91dHB1dCBpcyB2YWxpZCwgb3RoZXJ3aXNlOiByZXR1cm4gZmFsc2UuXHJcbiAgICBpZiAoIWlzVmFsaWROdW1iZXIob3V0cHV0KSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG91dHB1dDtcclxuICB9XHJcblxyXG4gIC8vIEZyYW1ld29ya1xyXG5cclxuICAvLyBWYWxpZGF0ZSBmb3JtYXR0aW5nIG9wdGlvbnNcclxuICBmdW5jdGlvbiB2YWxpZGF0ZShpbnB1dE9wdGlvbnMpIHtcclxuICAgIHZhciBpLFxyXG4gICAgICBvcHRpb25OYW1lLFxyXG4gICAgICBvcHRpb25WYWx1ZSxcclxuICAgICAgZmlsdGVyZWRPcHRpb25zID0ge307XHJcblxyXG4gICAgaWYgKGlucHV0T3B0aW9uc1tcInN1ZmZpeFwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlucHV0T3B0aW9uc1tcInN1ZmZpeFwiXSA9IGlucHV0T3B0aW9uc1tcInBvc3RmaXhcIl07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgb3B0aW9uTmFtZSA9IEZvcm1hdE9wdGlvbnNbaV07XHJcbiAgICAgIG9wdGlvblZhbHVlID0gaW5wdXRPcHRpb25zW29wdGlvbk5hbWVdO1xyXG5cclxuICAgICAgaWYgKG9wdGlvblZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAvLyBPbmx5IGRlZmF1bHQgaWYgbmVnYXRpdmVCZWZvcmUgaXNuJ3Qgc2V0LlxyXG4gICAgICAgIGlmIChvcHRpb25OYW1lID09PSBcIm5lZ2F0aXZlXCIgJiYgIWZpbHRlcmVkT3B0aW9ucy5uZWdhdGl2ZUJlZm9yZSkge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gXCItXCI7XHJcbiAgICAgICAgICAvLyBEb24ndCBzZXQgYSBkZWZhdWx0IGZvciBtYXJrIHdoZW4gJ3Rob3VzYW5kJyBpcyBzZXQuXHJcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25OYW1lID09PSBcIm1hcmtcIiAmJiBmaWx0ZXJlZE9wdGlvbnMudGhvdXNhbmQgIT09IFwiLlwiKSB7XHJcbiAgICAgICAgICBmaWx0ZXJlZE9wdGlvbnNbb3B0aW9uTmFtZV0gPSBcIi5cIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGbG9hdGluZyBwb2ludHMgaW4gSlMgYXJlIHN0YWJsZSB1cCB0byA3IGRlY2ltYWxzLlxyXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbk5hbWUgPT09IFwiZGVjaW1hbHNcIikge1xyXG4gICAgICAgIGlmIChvcHRpb25WYWx1ZSA+PSAwICYmIG9wdGlvblZhbHVlIDwgOCkge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFRoZXNlIG9wdGlvbnMsIHdoZW4gcHJvdmlkZWQsIG11c3QgYmUgZnVuY3Rpb25zLlxyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwiZW5jb2RlclwiIHx8XHJcbiAgICAgICAgb3B0aW9uTmFtZSA9PT0gXCJkZWNvZGVyXCIgfHxcclxuICAgICAgICBvcHRpb25OYW1lID09PSBcImVkaXRcIiB8fFxyXG4gICAgICAgIG9wdGlvbk5hbWUgPT09IFwidW5kb1wiXHJcbiAgICAgICkge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uVmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE90aGVyIG9wdGlvbnMgYXJlIHN0cmluZ3MuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgZmlsdGVyZWRPcHRpb25zW29wdGlvbk5hbWVdID0gb3B0aW9uVmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25OYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTb21lIHZhbHVlcyBjYW4ndCBiZSBleHRyYWN0ZWQgZnJvbSBhXHJcbiAgICAvLyBzdHJpbmcgaWYgY2VydGFpbiBjb21iaW5hdGlvbnMgYXJlIHByZXNlbnQuXHJcbiAgICB0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCBcIm1hcmtcIiwgXCJ0aG91c2FuZFwiKTtcclxuICAgIHRocm93RXF1YWxFcnJvcihmaWx0ZXJlZE9wdGlvbnMsIFwicHJlZml4XCIsIFwibmVnYXRpdmVcIik7XHJcbiAgICB0aHJvd0VxdWFsRXJyb3IoZmlsdGVyZWRPcHRpb25zLCBcInByZWZpeFwiLCBcIm5lZ2F0aXZlQmVmb3JlXCIpO1xyXG5cclxuICAgIHJldHVybiBmaWx0ZXJlZE9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvLyBQYXNzIGFsbCBvcHRpb25zIGFzIGZ1bmN0aW9uIGFyZ3VtZW50c1xyXG4gIGZ1bmN0aW9uIHBhc3NBbGwob3B0aW9ucywgbWV0aG9kLCBpbnB1dCkge1xyXG4gICAgdmFyIGksXHJcbiAgICAgIGFyZ3MgPSBbXTtcclxuXHJcbiAgICAvLyBBZGQgYWxsIG9wdGlvbnMgaW4gb3JkZXIgb2YgRm9ybWF0T3B0aW9uc1xyXG4gICAgZm9yIChpID0gMDsgaSA8IEZvcm1hdE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcclxuICAgICAgYXJncy5wdXNoKG9wdGlvbnNbRm9ybWF0T3B0aW9uc1tpXV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFwcGVuZCB0aGUgaW5wdXQsIHRoZW4gY2FsbCB0aGUgbWV0aG9kLCBwcmVzZW50aW5nIGFsbFxyXG4gICAgLy8gb3B0aW9ucyBhcyBhcmd1bWVudHMuXHJcbiAgICBhcmdzLnB1c2goaW5wdXQpO1xyXG4gICAgcmV0dXJuIG1ldGhvZC5hcHBseShcIlwiLCBhcmdzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHdOdW1iKG9wdGlvbnMpIHtcclxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiB3TnVtYikpIHtcclxuICAgICAgcmV0dXJuIG5ldyB3TnVtYihvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvbnMgPSB2YWxpZGF0ZShvcHRpb25zKTtcclxuXHJcbiAgICAvLyBDYWxsICdmb3JtYXRUbycgd2l0aCBwcm9wZXIgYXJndW1lbnRzLlxyXG4gICAgdGhpcy50byA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgIHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdFRvLCBpbnB1dCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENhbGwgJ2Zvcm1hdEZyb20nIHdpdGggcHJvcGVyIGFyZ3VtZW50cy5cclxuICAgIHRoaXMuZnJvbSA9IGZ1bmN0aW9uKGlucHV0KSB7XHJcbiAgICAgIHJldHVybiBwYXNzQWxsKG9wdGlvbnMsIGZvcm1hdEZyb20sIGlucHV0KTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gd051bWI7XHJcbn0pO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBAY2xhc3MgS0FwcFxuICovXG5cbnZhciBLVEFwcCA9IGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7b2JqZWN0fSBjb2xvcnMgU3RhdGUgY29sb3JzICoqL1xuICAgIHZhciBjb2xvcnMgPSB7fTtcblxuICAgIHZhciBpbml0VG9vbHRpcCA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciBza2luID0gZWwuZGF0YSgnc2tpbicpID8gJ3Rvb2x0aXAtJyArIGVsLmRhdGEoJ3NraW4nKSA6ICcnO1xuICAgICAgICB2YXIgd2lkdGggPSBlbC5kYXRhKCd3aWR0aCcpID09PSAnYXV0bycgPyAndG9vbHRvcC1hdXRvLXdpZHRoJyA6ICcnO1xuICAgICAgICB2YXIgdHJpZ2dlclZhbHVlID0gZWwuZGF0YSgndHJpZ2dlcicpID8gZWwuZGF0YSgndHJpZ2dlcicpIDogJ2hvdmVyJztcbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IGVsLmRhdGEoJ3BsYWNlbWVudCcpID8gZWwuZGF0YSgncGxhY2VtZW50JykgOiAnbGVmdCc7XG5cbiAgICAgICAgZWwudG9vbHRpcCh7XG4gICAgICAgICAgICB0cmlnZ2VyOiB0cmlnZ2VyVmFsdWUsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwICcgKyBza2luICsgJyAnICsgd2lkdGggKyAnXCIgcm9sZT1cInRvb2x0aXBcIj5cXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj5cXFxuICAgICAgICAgICAgPC9kaXY+J1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFRvb2x0aXBzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGluaXQgYm9vdHN0cmFwIHRvb2x0aXBzXG4gICAgICAgICQoJ1tkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIl0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5pdFRvb2x0aXAoJCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0UG9wb3ZlciA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHZhciBza2luID0gZWwuZGF0YSgnc2tpbicpID8gJ3BvcG92ZXItJyArIGVsLmRhdGEoJ3NraW4nKSA6ICcnO1xuICAgICAgICB2YXIgdHJpZ2dlclZhbHVlID0gZWwuZGF0YSgndHJpZ2dlcicpID8gZWwuZGF0YSgndHJpZ2dlcicpIDogJ2hvdmVyJztcblxuICAgICAgICBlbC5wb3BvdmVyKHtcbiAgICAgICAgICAgIHRyaWdnZXI6IHRyaWdnZXJWYWx1ZSxcbiAgICAgICAgICAgIHRlbXBsYXRlOiAnXFxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyICcgKyBza2luICsgJ1wiIHJvbGU9XCJ0b29sdGlwXCI+XFxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgIDxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz5cXFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj5cXFxuICAgICAgICAgICAgPC9kaXY+J1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFBvcG92ZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGluaXQgYm9vdHN0cmFwIHBvcG92ZXJcbiAgICAgICAgJCgnW2RhdGEtdG9nZ2xlPVwicG9wb3ZlclwiXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbml0UG9wb3ZlcigkKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRGaWxlSW5wdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gaW5pdCBib290c3RyYXAgcG9wb3ZlclxuICAgICAgICAkKCcuY3VzdG9tLWZpbGUtaW5wdXQnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgJCh0aGlzKS5uZXh0KCcuY3VzdG9tLWZpbGUtbGFiZWwnKS5hZGRDbGFzcyhcInNlbGVjdGVkXCIpLmh0bWwoZmlsZU5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFBvcnRsZXQgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgICAgICAvLyBpbml0IHBvcnRsZXQgdG9vbHNcbiAgICAgICAgdmFyIGVsID0gJChlbCk7XG4gICAgICAgIHZhciBwb3J0bGV0ID0gbmV3IEtUUG9ydGxldChlbFswXSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRQb3J0bGV0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBpbml0IHBvcnRsZXQgdG9vbHNcbiAgICAgICAgJCgnW2RhdGEta3Rwb3J0bGV0PVwidHJ1ZVwiXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICBpZiAoZWwuZGF0YSgnZGF0YS1rdHBvcnRsZXQtaW5pdGlhbGl6ZWQnKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIGluaXRQb3J0bGV0KGVsLCB7fSk7XG4gICAgICAgICAgICAgICAgZWwuZGF0YSgnZGF0YS1rdHBvcnRsZXQtaW5pdGlhbGl6ZWQnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRTY3JvbGwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnW2RhdGEtc2Nyb2xsPVwidHJ1ZVwiXScpLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZWwgPSAkKHRoaXMpO1xuICAgICAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQodGhpcywge1xuICAgICAgICAgICAgICAgIG1vYmlsZU5hdGl2ZVNjcm9sbDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVtZW1iZXJQb3NpdGlvbjogKGVsLmRhdGEoJ3JlbWVtYmVyLXBvc2l0aW9uJykgPT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoS1RVdGlsLmlzSW5SZXNwb25zaXZlUmFuZ2UoJ3RhYmxldC1hbmQtbW9iaWxlJykgJiYgZWwuZGF0YSgnbW9iaWxlLWhlaWdodCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwuZGF0YSgnbW9iaWxlLWhlaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLmRhdGEoJ2hlaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0QWxlcnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGluaXQgYm9vdHN0cmFwIHBvcG92ZXJcbiAgICAgICAgJCgnYm9keScpLm9uKCdjbGljaycsICdbZGF0YS1jbG9zZT1hbGVydF0nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQodGhpcykuY2xvc2VzdCgnLmFsZXJ0JykuaGlkZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFN0aWNreSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RpY2t5ID0gbmV3IFN0aWNreSgnW2RhdGEtc3RpY2t5PVwidHJ1ZVwiXScpO1xuICAgIH1cblxuICAgIHZhciBpbml0QWJzb2x1dGVEcm9wZG93biA9IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRyb3Bkb3duTWVudTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICQoJ2JvZHknKS5vbignc2hvdy5icy5kcm9wZG93bicsIGNvbnRleHQsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgXHRkcm9wZG93bk1lbnUgPSAkKGUudGFyZ2V0KS5maW5kKCcuZHJvcGRvd24tbWVudScpO1xuICAgICAgICBcdCQoJ2JvZHknKS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcbiAgICAgICAgXHRkcm9wZG93bk1lbnUuY3NzKCdkaXNwbGF5JywgJ2Jsb2NrJyk7XG4gICAgICAgIFx0ZHJvcGRvd25NZW51LnBvc2l0aW9uKHtcbiAgICAgICAgXHRcdCdteSc6ICdyaWdodCB0b3AnLFxuICAgICAgICBcdFx0J2F0JzogJ3JpZ2h0IGJvdHRvbScsXG4gICAgICAgIFx0XHQnb2YnOiAkKGUucmVsYXRlZFRhcmdldCksXG4gICAgICAgIFx0fSk7XG4gICAgICAgIH0pLm9uKCdoaWRlLmJzLmRyb3Bkb3duJywgY29udGV4dCwgZnVuY3Rpb24oZSkge1xuICAgICAgICBcdCQoZS50YXJnZXQpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xuICAgICAgICBcdGRyb3Bkb3duTWVudS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0QWJzb2x1dGVEcm9wZG93bnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJCgnYm9keScpLm9uKCdzaG93LmJzLmRyb3Bkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgaWYgKCAkKGUudGFyZ2V0KS5maW5kKFwiW2RhdGEtYXR0YWNoPSdib2R5J11cIikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZHJvcGRvd25NZW51ID0gJChlLnRhcmdldCkuZmluZCgnLmRyb3Bkb3duLW1lbnUnKTtcblxuICAgICAgICAgICAgJCgnYm9keScpLmFwcGVuZChkcm9wZG93bk1lbnUuZGV0YWNoKCkpO1xuICAgICAgICAgICAgZHJvcGRvd25NZW51LmNzcygnZGlzcGxheScsICdibG9jaycpO1xuICAgICAgICAgICAgZHJvcGRvd25NZW51LnBvc2l0aW9uKHtcbiAgICAgICAgICAgICAgICAnbXknOiAncmlnaHQgdG9wJyxcbiAgICAgICAgICAgICAgICAnYXQnOiAncmlnaHQgYm90dG9tJyxcbiAgICAgICAgICAgICAgICAnb2YnOiAkKGUucmVsYXRlZFRhcmdldClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCdib2R5Jykub24oJ2hpZGUuYnMuZHJvcGRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoICQoZS50YXJnZXQpLmZpbmQoXCJbZGF0YS1hdHRhY2g9J2JvZHknXVwiKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSAkKGUudGFyZ2V0KS5maW5kKCcuZHJvcGRvd24tbWVudScpO1xuXG4gICAgICAgICAgICAkKGUudGFyZ2V0KS5hcHBlbmQoZHJvcGRvd25NZW51LmRldGFjaCgpKTtcbiAgICAgICAgICAgIGRyb3Bkb3duTWVudS5oaWRlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuY29sb3JzKSB7XG4gICAgICAgICAgICAgICAgY29sb3JzID0gb3B0aW9ucy5jb2xvcnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUQXBwLmluaXRDb21wb25lbnRzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdENvbXBvbmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5pdFNjcm9sbCgpO1xuICAgICAgICAgICAgaW5pdFRvb2x0aXBzKCk7XG4gICAgICAgICAgICBpbml0UG9wb3ZlcnMoKTtcbiAgICAgICAgICAgIGluaXRBbGVydHMoKTtcbiAgICAgICAgICAgIGluaXRQb3J0bGV0cygpO1xuICAgICAgICAgICAgaW5pdEZpbGVJbnB1dCgpO1xuICAgICAgICAgICAgaW5pdFN0aWNreSgpO1xuICAgICAgICAgICAgaW5pdEFic29sdXRlRHJvcGRvd25zKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFRvb2x0aXBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGluaXRUb29sdGlwcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRUb29sdGlwOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaW5pdFRvb2x0aXAoZWwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRQb3BvdmVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbml0UG9wb3ZlcnMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0UG9wb3ZlcjogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGluaXRQb3BvdmVyKGVsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0UG9ydGxldDogZnVuY3Rpb24oZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGluaXRQb3J0bGV0KGVsLCBvcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbml0UG9ydGxldHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5pdFBvcnRsZXRzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdFN0aWNreTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbml0U3RpY2t5KCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5pdEFic29sdXRlRHJvcGRvd246IGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGluaXRBYnNvbHV0ZURyb3Bkb3duKGNvbnRleHQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGJsb2NrOiBmdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBlbCA9ICQodGFyZ2V0KTtcblxuICAgICAgICAgICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjA1LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlDb2xvcjogJyMwMDAwMDAnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxuICAgICAgICAgICAgICAgIHNpemU6ICcnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnYnJhbmQnLFxuICAgICAgICAgICAgICAgIGNlbnRlclg6IHRydWUsXG4gICAgICAgICAgICAgICAgY2VudGVyWTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnJyxcbiAgICAgICAgICAgICAgICBzaGFkb3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6ICdhdXRvJ1xuICAgICAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHZhciBodG1sO1xuICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBvcHRpb25zLnR5cGUgPyAnc3Bpbm5lci0tJyArIG9wdGlvbnMudHlwZSA6ICcnO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gb3B0aW9ucy5zdGF0ZSA/ICdzcGlubmVyLS0nICsgb3B0aW9ucy5zdGF0ZSA6ICcnO1xuICAgICAgICAgICAgdmFyIHNpemUgPSBvcHRpb25zLnNpemUgPyAnc3Bpbm5lci0tJyArIG9wdGlvbnMuc2l6ZSA6ICcnO1xuICAgICAgICAgICAgdmFyIHNwaW5uZXIgPSAnPGRpdiBjbGFzcz1cInNwaW5uZXIgJyArIHZlcnNpb24gKyAnICcgKyBzdGF0ZSArICcgJyArIHNpemUgKyAnXCI+PC9kaXYnO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5tZXNzYWdlICYmIG9wdGlvbnMubWVzc2FnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzZXMgPSAnYmxvY2t1aSAnICsgKG9wdGlvbnMuc2hhZG93ID09PSBmYWxzZSA/ICdibG9ja3VpJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIGh0bWwgPSAnPGRpdiBjbGFzcz1cIicgKyBjbGFzc2VzICsgJ1wiPjxzcGFuPicgKyBvcHRpb25zLm1lc3NhZ2UgKyAnPC9zcGFuPjxzcGFuPicgKyBzcGlubmVyICsgJzwvc3Bhbj48L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmdldCgnYm9keScpLnByZXBlbmQoZWwpO1xuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbCwgY2xhc3Nlcyk7XG4gICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gJzxzcGFuPicgKyBvcHRpb25zLm1lc3NhZ2UgKyAnPC9zcGFuPjxzcGFuPicgKyBzcGlubmVyICsgJzwvc3Bhbj4nO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMud2lkdGggPSBLVFV0aWwuYWN0dWFsV2lkdGgoZWwpICsgMTA7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZShlbCk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgICAgICBodG1sID0gJzxkaXYgY2xhc3M9XCInICsgY2xhc3NlcyArICdcIiBzdHlsZT1cIm1hcmdpbi1sZWZ0Oi0nICsgKG9wdGlvbnMud2lkdGggLyAyKSArICdweDtcIj48c3Bhbj4nICsgb3B0aW9ucy5tZXNzYWdlICsgJzwvc3Bhbj48c3Bhbj4nICsgc3Bpbm5lciArICc8L3NwYW4+PC9kaXY+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGh0bWwgPSBzcGlubmVyO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGh0bWwsXG4gICAgICAgICAgICAgICAgY2VudGVyWTogb3B0aW9ucy5jZW50ZXJZLFxuICAgICAgICAgICAgICAgIGNlbnRlclg6IG9wdGlvbnMuY2VudGVyWCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiAnMzAlJyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJzUwJScsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogJzAnLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnMCcsXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogb3B0aW9ucy53aWR0aFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3ZlcmxheUNTUzoge1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMub3ZlcmxheUNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3dhaXQnLFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6ICcxMCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uVW5ibG9jazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbCAmJiBlbFswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbFswXSwgJ3Bvc2l0aW9uJywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbFswXSwgJ3pvb20nLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09ICdib2R5Jykge1xuICAgICAgICAgICAgICAgIHBhcmFtcy5jc3MudG9wID0gJzUwJSc7XG4gICAgICAgICAgICAgICAgJC5ibG9ja1VJKHBhcmFtcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBlbCA9ICQodGFyZ2V0KTtcbiAgICAgICAgICAgICAgICBlbC5ibG9jayhwYXJhbXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVuYmxvY2s6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT0gJ2JvZHknKSB7XG4gICAgICAgICAgICAgICAgJCh0YXJnZXQpLnVuYmxvY2soKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJC51bmJsb2NrVUkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBibG9ja1BhZ2U6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBLVEFwcC5ibG9jaygnYm9keScsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVuYmxvY2tQYWdlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBLVEFwcC51bmJsb2NrKCdib2R5Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICAgICAgdmFyIHNraW4gPSAob3B0aW9ucyAmJiBvcHRpb25zLnNraW4pID8gb3B0aW9ucy5za2luIDogJ2xpZ2h0JztcbiAgICAgICAgICAgIHZhciBhbGlnbm1lbnQgPSAob3B0aW9ucyAmJiBvcHRpb25zLmFsaWdubWVudCkgPyBvcHRpb25zLmFsaWdubWVudCA6ICdyaWdodCc7XG4gICAgICAgICAgICB2YXIgc2l6ZSA9IChvcHRpb25zICYmIG9wdGlvbnMuc2l6ZSkgPyAnIHNwaW5uZXItLScgKyBvcHRpb25zLnNpemUgOiAnJztcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gJ3NwaW5uZXIgJyArICdzcGlubmVyLS0nICsgc2tpbiArICcgc3Bpbm5lci0tJyArIGFsaWdubWVudCArIHNpemU7XG5cbiAgICAgICAgICAgIEtUQXBwLnVucHJvZ3Jlc3ModGFyZ2V0KTtcbiAgICAgICAgICAgIEtUVXRpbC5hdHRyKHRhcmdldCwgJ2Rpc2FibGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgICAgICQodGFyZ2V0KS5hZGRDbGFzcyhjbGFzc2VzKTtcbiAgICAgICAgICAgICQodGFyZ2V0KS5kYXRhKCdwcm9ncmVzcy1jbGFzc2VzJywgY2xhc3Nlcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdW5wcm9ncmVzczogZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICAgICAgICAkKHRhcmdldCkucmVtb3ZlQ2xhc3MoJCh0YXJnZXQpLmRhdGEoJ3Byb2dyZXNzLWNsYXNzZXMnKSk7XG4gICAgICAgICAgICBLVFV0aWwucmVtb3ZlQXR0cih0YXJnZXQsICdkaXNhYmxlZCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldFN0YXRlQ29sb3I6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcnNbXCJzdGF0ZVwiXVtuYW1lXTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRCYXNlQ29sb3I6IGZ1bmN0aW9uKHR5cGUsIGxldmVsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29sb3JzW1wiYmFzZVwiXVt0eXBlXVtsZXZlbCAtIDFdO1xuICAgICAgICB9XG4gICAgfTtcbn0oKTtcblxuLy8gd2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RBcHA7XG59XG5cbmNvbnN0IEtUQXBwT3B0aW9ucyA9IHtcbiAgXCJjb2xvcnNcIjoge1xuICAgIFwic3RhdGVcIjoge1xuICAgICAgXCJicmFuZFwiOiBcIiMwMDdjYzNcIixcbiAgICAgIFwibWV0YWxcIjogXCIjYzRjNWQ2XCIsXG4gICAgICBcImxpZ2h0XCI6IFwiI2ZmZmZmZlwiLFxuICAgICAgXCJhY2NlbnRcIjogXCIjMDBjNWRjXCIsXG4gICAgICBcInByaW1hcnlcIjogXCIjMDA3Y2MzXCIsXG4gICAgICBcInN1Y2Nlc3NcIjogXCIjMzRiZmEzXCIsXG4gICAgICBcImluZm9cIjogXCIjMzZhM2Y3XCIsXG4gICAgICBcIndhcm5pbmdcIjogXCIjZmZiODIyXCIsXG4gICAgICBcImRhbmdlclwiOiBcIiNmZDM5OTVcIixcbiAgICAgIFwiZm9jdXNcIjogXCIjMWQ0NjcwXCJcbiAgICB9LFxuICAgIFwiYmFzZVwiOiB7XG4gICAgICBcImxhYmVsXCI6IFtcbiAgICAgICAgXCIjYzVjYmUzXCIsXG4gICAgICAgIFwiI2ExYThjM1wiLFxuICAgICAgICBcIiMzZDQ0NjVcIixcbiAgICAgICAgXCIjM2U0NDY2XCJcbiAgICAgIF0sXG4gICAgICBcInNoYXBlXCI6IFtcbiAgICAgICAgXCIjZjBmM2ZmXCIsXG4gICAgICAgIFwiI2Q5ZGZmYVwiLFxuICAgICAgICBcIiNhZmI0ZDRcIixcbiAgICAgICAgXCIjNjQ2YzlhXCJcbiAgICAgIF1cbiAgICB9XG4gIH1cbn07XG5cbi8vIEluaXRpYWxpemUgS1RBcHAgY2xhc3Mgb24gZG9jdW1lbnQgcmVhZHlcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIEtUQXBwLmluaXQoS1RBcHBPcHRpb25zKTtcbn0pO1xuIiwiLy8gcGx1Z2luIHNldHVwXG52YXIgS1RBdmF0YXIgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcbiAgICAvLyBNYWluIG9iamVjdFxuICAgIHZhciB0aGUgPSB0aGlzO1xuICAgIHZhciBpbml0ID0gZmFsc2U7XG5cbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXQoZWxlbWVudElkKTtcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXQoJ2JvZHknKTtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHZhciBQbHVnaW4gPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RcbiAgICAgICAgICovXG5cbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdhdmF0YXInKSkge1xuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnYXZhdGFyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IG1lbnVcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcblxuICAgICAgICAgICAgICAgIC8vIGJ1aWxkIG1lbnVcbiAgICAgICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcblxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgnYXZhdGFyJywgdGhlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdCBhdmF0YXJcbiAgICAgICAgICovXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoZS5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIHRoZS5ldmVudHMgPSBbXTtcblxuICAgICAgICAgICAgdGhlLmlucHV0ID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJ2lucHV0W3R5cGU9XCJmaWxlXCJdJyk7XG4gICAgICAgICAgICB0aGUuaG9sZGVyID0gS1RVdGlsLmZpbmQoZWxlbWVudCwgJy5hdmF0YXJfX2hvbGRlcicpO1xuICAgICAgICAgICAgdGhlLmNhbmNlbCA9IEtUVXRpbC5maW5kKGVsZW1lbnQsICcuYXZhdGFyX19jYW5jZWwnKTtcbiAgICAgICAgICAgIHRoZS5zcmMgPSBLVFV0aWwuY3NzKHRoZS5ob2xkZXIsICdiYWNrZ3JvdW5kSW1hZ2UnKTtcblxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogQnVpbGQgRm9ybSBXaXphcmRcbiAgICAgICAgICovXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBhdmF0YXIgY2hhbmdlXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLmlucHV0LCAnY2hhbmdlJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuXHQgICAgICAgICAgICBpZiAodGhlLmlucHV0ICYmIHRoZS5pbnB1dC5maWxlcyAmJiB0aGUuaW5wdXQuZmlsZXNbMF0pIHtcblx0ICAgICAgICAgICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXHQgICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKGUpIHtcblx0ICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5ob2xkZXIsICdiYWNrZ3JvdW5kLWltYWdlJywgJ3VybCgnK2UudGFyZ2V0LnJlc3VsdCArJyknKTtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKHRoZS5pbnB1dC5maWxlc1swXSk7XG5cblx0ICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0aGUuZWxlbWVudCwgJ2F2YXRhci0tY2hhbmdlZCcpO1xuXHQgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSGFuZGxlIGF2YXRhciBjYW5jZWxcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCh0aGUuY2FuY2VsLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdCAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUuZWxlbWVudCwgJ2F2YXRhci0tY2hhbmdlZCcpO1xuXHQgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5ob2xkZXIsICdiYWNrZ3JvdW5kLWltYWdlJywgdGhlLnNyYyk7XG5cdCAgICAgICAgICAgIHRoZS5pbnB1dC52YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgLy9LVFV0aWwudHJpZ2dlckN1c3RvbUV2ZW50KG5hbWUpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGUuZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhlLmV2ZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5vbmUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICovXG5cbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGV2ZW50XG4gICAgICovXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcbiAgICAgKi9cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXG4gICAgUGx1Z2luLmNvbnN0cnVjdC5hcHBseSh0aGUsIFtvcHRpb25zXSk7XG5cbiAgICByZXR1cm4gdGhlO1xufTtcblxuLy8gd2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RBdmF0YXI7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gcGx1Z2luIHNldHVwXG52YXIgS1REaWFsb2cgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgLy8gTWFpbiBvYmplY3RcbiAgICB2YXIgdGhlID0gdGhpcztcblxuICAgIC8vIEdldCBlbGVtZW50IG9iamVjdFxuICAgIHZhciBlbGVtZW50O1xuICAgIHZhciBib2R5ID0gS1RVdGlsLmdldCgnYm9keScpO1xuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAncGxhY2VtZW50JyA6ICd0b3AgY2VudGVyJyxcbiAgICAgICAgJ3R5cGUnICA6ICdsb2FkZXInLFxuICAgICAgICAnd2lkdGgnIDogMTAwLFxuICAgICAgICAnc3RhdGUnIDogJ2RlZmF1bHQnLFxuICAgICAgICAnbWVzc2FnZScgOiAnTG9hZGluZy4uLidcbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICB2YXIgUGx1Z2luID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0XG4gICAgICAgICAqL1xuXG4gICAgICAgIGNvbnN0cnVjdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgUGx1Z2luLmluaXQob3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3VidG9nZ2xlIGNsaWNrIHRvZ2dsZVxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2hvdyBkaWFsb2dcbiAgICAgICAgICovXG4gICAgICAgIHNob3c6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc2hvdycpO1xuXG4gICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKTtcbiAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKGVsZW1lbnQsIHRoZS5vcHRpb25zLm1lc3NhZ2UpO1xuXG4gICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ2RpYWxvZyBkaWFsb2ctLXNob3duJyk7XG4gICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ2RpYWxvZy0tJyArIHRoZS5vcHRpb25zLnN0YXRlKTtcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLS0nICsgdGhlLm9wdGlvbnMudHlwZSk7XG5cbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5wbGFjZW1lbnQgPT09ICd0b3AgY2VudGVyJykge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCAnZGlhbG9nLS10b3AtY2VudGVyJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHRoZS5zdGF0ZSA9ICdzaG93bic7XG5cbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3Nob3duJyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhpZGUgZGlhbG9nXG4gICAgICAgICAqL1xuICAgICAgICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignaGlkZScpO1xuXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB0aGUuc3RhdGUgPSAnaGlkZGVuJztcblxuICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2hpZGRlbicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgZXZlbnRUcmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS5ldmVudHNbaV0uZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHVibGljIE1ldGhvZHMgKiogLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgLyoqXG4gICAgICogU2V0IGRlZmF1bHQgb3B0aW9uc1xuICAgICAqL1xuXG4gICAgdGhlLnNldERlZmF1bHRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrIHNob3duIHN0YXRlXG4gICAgICovXG4gICAgdGhlLnNob3duID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGUuc3RhdGUgPT0gJ3Nob3duJztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaGlkZGVuIHN0YXRlXG4gICAgICovXG4gICAgdGhlLmhpZGRlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhlLnN0YXRlID09ICdoaWRkZW4nO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaG93IGRpYWxvZ1xuICAgICAqL1xuICAgIHRoZS5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uc2hvdygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIGRpYWxvZ1xuICAgICAqL1xuICAgIHRoZS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uaGlkZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnRcbiAgICAgKiBAcmV0dXJucyB7S1RUb2dnbGV9XG4gICAgICovXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcbiAgICAgKiBAcmV0dXJucyB7S1RUb2dnbGV9XG4gICAgICovXG4gICAgdGhlLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLy8gQ29uc3RydWN0IHBsdWdpblxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xuXG4gICAgcmV0dXJuIHRoZTtcbn07XG5cbi8vIHdlYnBhY2sgc3VwcG9ydFxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtURGlhbG9nO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBLVEhlYWRlciA9IGZ1bmN0aW9uKGVsZW1lbnRJZCwgb3B0aW9ucykge1xyXG4gICAgLy8gTWFpbiBvYmplY3RcclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG4gICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50ID0gS1RVdGlsLmdldChlbGVtZW50SWQpO1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7XHJcblxyXG4gICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcclxuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgICBjbGFzc2ljOiBmYWxzZSxcclxuICAgICAgICBvZmZzZXQ6IHtcclxuICAgICAgICAgICAgbW9iaWxlOiAxNTAsXHJcbiAgICAgICAgICAgIGRlc2t0b3A6IDIwMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWluaW1pemU6IHtcclxuICAgICAgICAgICAgbW9iaWxlOiBmYWxzZSxcclxuICAgICAgICAgICAgZGVza3RvcDogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFJ1biBwbHVnaW5cclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RIZWFkZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ2hlYWRlcicpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ2hlYWRlcicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBoZWFkZXJcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGVsZW1lbnQpLnNldCgnaGVhZGVyJywgdGhlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHN1YmhlYWRlciBjbGljayB0b2dnbGVcclxuICAgICAgICAgKiBAcmV0dXJucyB7S1RIZWFkZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmVzZXQgaGVhZGVyXHJcbiAgICAgICAgICogQHJldHVybnMge0tUSGVhZGVyfVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RTY3JvbGxUb3AgPSAwO1xyXG4gICAgICAgICAgICB2YXIgZXZlbnRUcmlnZ2VyU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXIgdmlld3BvcnRIZWlnaHQgPSBLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQ7XHJcbiAgICAgICAgICAgIHZhciBkb2N1bWVudEhlaWdodCA9IEtUVXRpbC5nZXREb2N1bWVudEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLm1pbmltaXplLm1vYmlsZSA9PT0gZmFsc2UgJiYgdGhlLm9wdGlvbnMubWluaW1pemUuZGVza3RvcCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IDAsIG9uLCBvZmYsIHN0O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgnZGVza3RvcCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhlLm9wdGlvbnMub2Zmc2V0LmRlc2t0b3A7XHJcbiAgICAgICAgICAgICAgICAgICAgb24gPSB0aGUub3B0aW9ucy5taW5pbWl6ZS5kZXNrdG9wLm9uO1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZiA9IHRoZS5vcHRpb25zLm1pbmltaXplLmRlc2t0b3Aub2ZmO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgndGFibGV0LWFuZC1tb2JpbGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoZS5vcHRpb25zLm9mZnNldC5tb2JpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgb24gPSB0aGUub3B0aW9ucy5taW5pbWl6ZS5tb2JpbGUub247XHJcbiAgICAgICAgICAgICAgICAgICAgb2ZmID0gdGhlLm9wdGlvbnMubWluaW1pemUubW9iaWxlLm9mZjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdCA9IEtUVXRpbC5nZXRTY3JvbGxUb3AoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgKEtUVXRpbC5pc0luUmVzcG9uc2l2ZVJhbmdlKCd0YWJsZXQtYW5kLW1vYmlsZScpICYmIHRoZS5vcHRpb25zLmNsYXNzaWMgJiYgdGhlLm9wdGlvbnMuY2xhc3NpYy5tb2JpbGUpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKEtUVXRpbC5pc0luUmVzcG9uc2l2ZVJhbmdlKCdkZXNrdG9wJykgJiYgdGhlLm9wdGlvbnMuY2xhc3NpYyAmJiB0aGUub3B0aW9ucy5jbGFzc2ljLmRlc2t0b3ApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPiBvZmZzZXQpIHsgLy8gZG93biBzY3JvbGwgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoYm9keSwgb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoYm9keSwgb2ZmKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFRyaWdnZXJTdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignbWluaW1pemVPbicsIHRoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFRyaWdnZXJTdGF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gYmFjayBzY3JvbGwgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoYm9keSwgb2ZmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksIG9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFRyaWdnZXJTdGF0ZSA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignbWluaW1pemVPZmYnLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUcmlnZ2VyU3RhdGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPiBvZmZzZXQgJiYgbGFzdFNjcm9sbFRvcCA8IHN0KSB7IC8vIGRvd24gc2Nyb2xsIG1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGJvZHksIG9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksIG9mZik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ21pbmltaXplT24nLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUcmlnZ2VyU3RhdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIGJhY2sgc2Nyb2xsIG1vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGJvZHksIG9mZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhib2R5LCBvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyU3RhdGUgPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ21pbmltaXplT2ZmJywgdGhlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHJpZ2dlclN0YXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFNjcm9sbFRvcCA9IHN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgYXJncykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSwgYXJncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgYWRkRXZlbnQ6IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIsIG9uZSkge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICBvbmU6IG9uZSxcclxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXIgZXZlbnRcclxuICAgICAqL1xyXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFBsdWdpbiBDb25zdHJ1Y3Rpb24gKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAvLyBSdW4gcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICAvLyBJbml0IGRvbmVcclxuICAgIGluaXQgPSB0cnVlO1xyXG5cclxuICAgIC8vIFJldHVybiBwbHVnaW4gaW5zdGFuY2VcclxuICAgIHJldHVybiB0aGU7XHJcbn07XHJcblxyXG4vLyB3ZWJwYWNrIHN1cHBvcnRcclxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIG1vZHVsZS5leHBvcnRzID0gS1RIZWFkZXI7XHJcbn1cclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBLVE1lbnUgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcbiAgICAvLyBNYWluIG9iamVjdFxuICAgIGxldCB0aGUgPSB0aGlzO1xuICAgIGxldCBpbml0ID0gZmFsc2U7XG5cbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcbiAgICBsZXQgZWxlbWVudCA9IEtUVXRpbC5nZXQoZWxlbWVudElkKTtcbiAgICBjb25zdCBib2R5ID0gS1RVdGlsLmdldCgnYm9keScpO1xuXG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcbiAgICBsZXQgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgIC8vIHNjcm9sbGFibGUgYXJlYSB3aXRoIFBlcmZlY3QgU2Nyb2xsXG4gICAgICAgIHNjcm9sbDoge1xuICAgICAgICAgICAgcmVtZW1iZXJQb3NpdGlvbjogZmFsc2VcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBhY2NvcmRpb24gc3VibWVudSBtb2RlXG4gICAgICAgIGFjY29yZGlvbjoge1xuICAgICAgICAgICAgc2xpZGVTcGVlZDogMjAwLCAvLyBhY2NvcmRpb24gdG9nZ2xlIHNsaWRlIHNwZWVkIGluIG1pbGxpc2Vjb25kc1xuICAgICAgICAgICAgYXV0b1Njcm9sbDogZmFsc2UsIC8vIGVuYWJsZSBhdXRvIHNjcm9sbGluZyhmb2N1cykgdG8gdGhlIGNsaWNrZWQgbWVudSBpdGVtXG4gICAgICAgICAgICBhdXRvU2Nyb2xsU3BlZWQ6IDEyMDAsXG4gICAgICAgICAgICBleHBhbmRBbGw6IHRydWUgLy8gYWxsb3cgaGF2aW5nIG11bHRpcGxlIGV4cGFuZGVkIGFjY29yZGlvbnMgaW4gdGhlIG1lbnVcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBkcm9wZG93biBzdWJtZW51IG1vZGVcbiAgICAgICAgZHJvcGRvd246IHtcbiAgICAgICAgICAgIHRpbWVvdXQ6IDUwMCAvLyB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBzaG93IGFuZCBoaWRlIHRoZSBob3ZlcmFibGUgc3VibWVudSBkcm9wZG93blxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQcml2YXRlIE1ldGhvZHMgICoqIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgY29uc3QgUGx1Z2luID0ge1xuICAgICAgICAvKipcbiAgICAgICAgICogUnVuIHBsdWdpblxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdtZW51JykpIHtcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ21lbnUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5yZXNldCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xuXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdtZW51JywgdGhlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBzdWJtZW51IGNsaWNrIHRvZ2dsZVxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICAgICAgdGhlLmV2ZW50cyA9IFtdO1xuXG4gICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVycyA9IHt9O1xuXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xuICAgICAgICAgICAgdGhlLm9wdGlvbnMgPSBLVFV0aWwuZGVlcEV4dGVuZCh7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBwYXVzZSBtZW51XG4gICAgICAgICAgICB0aGUucGF1c2VEcm9wZG93bkhvdmVyVGltZSA9IDA7XG5cbiAgICAgICAgICAgIHRoZS51aWQgPSBLVFV0aWwuZ2V0VW5pcXVlSUQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIHBhdXNlIG1lbnVcbiAgICAgICAgICAgIHRoZS5wYXVzZURyb3Bkb3duSG92ZXJUaW1lID0gMDtcblxuICAgICAgICAgICAgIC8vIHJlc2V0IG1lbnVcbiAgICAgICAgICAgIFBsdWdpbi5yZXNldCgpO1xuXG4gICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVycyA9IHt9O1xuXG4gICAgICAgICAgICAvLyBidWlsZCBtZW51XG4gICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcblxuICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdtZW51JywgdGhlKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgIC8vIHJlc2V0IG1lbnVcbiAgICAgICAgICAgIFBsdWdpbi5yZXNldCgpO1xuXG4gICAgICAgICAgICAvLyBidWlsZCBtZW51XG4gICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcblxuICAgICAgICAgICAgLy8gcmVzZXQgc3VibWVudSBwcm9wc1xuICAgICAgICAgICAgUGx1Z2luLnJlc2V0U3VibWVudVByb3BzKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0IG1lbnVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIEdlbmVyYWwgYWNjb3JkaW9uIHN1Ym1lbnUgdG9nZ2xlXG4gICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfMSddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnLm1lbnVfX3RvZ2dsZScsICdjbGljaycsIFBsdWdpbi5oYW5kbGVTdWJtZW51QWNjb3JkaW9uKTtcblxuICAgICAgICAgICAgLy8gRHJvcGRvd24gbW9kZShob3ZlcmFibGUpXG4gICAgICAgICAgICBpZiAoUGx1Z2luLmdldFN1Ym1lbnVNb2RlKCkgPT09ICdkcm9wZG93bicgfHwgUGx1Z2luLmlzQ29uZGl0aW9uYWxTdWJtZW51RHJvcGRvd24oKSkge1xuICAgICAgICAgICAgICAgIC8vIGRyb3Bkb3duIHN1Ym1lbnUgLSBob3ZlciB0b2dnbGVcbiAgICAgICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfMiddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnW2RhdGEta3RtZW51LXN1Ym1lbnUtdG9nZ2xlPVwiaG92ZXJcIl0nLCAnbW91c2VvdmVyJywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVEcm9kb3duSG92ZXJFbnRlcik7XG4gICAgICAgICAgICAgICAgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzMnXSA9IEtUVXRpbC5vbiggZWxlbWVudCwgJ1tkYXRhLWt0bWVudS1zdWJtZW51LXRvZ2dsZT1cImhvdmVyXCJdJywgJ21vdXNlb3V0JywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVEcm9kb3duSG92ZXJFeGl0KTtcblxuICAgICAgICAgICAgICAgIC8vIGRyb3Bkb3duIHN1Ym1lbnUgLSBjbGljayB0b2dnbGVcbiAgICAgICAgICAgICAgICB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfNCddID0gS1RVdGlsLm9uKCBlbGVtZW50LCAnW2RhdGEta3RtZW51LXN1Ym1lbnUtdG9nZ2xlPVwiY2xpY2tcIl0gPiAubWVudV9fdG9nZ2xlLCBbZGF0YS1rdG1lbnUtc3VibWVudS10b2dnbGU9XCJjbGlja1wiXSA+IC5tZW51X19saW5rIC5tZW51X190b2dnbGUnLCAnY2xpY2snLCBQbHVnaW4uaGFuZGxlU3VibWVudURyb3Bkb3duQ2xpY2spO1xuICAgICAgICAgICAgICAgIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF81J10gPSBLVFV0aWwub24oIGVsZW1lbnQsICdbZGF0YS1rdG1lbnUtc3VibWVudS10b2dnbGU9XCJ0YWJcIl0gPiAubWVudV9fdG9nZ2xlLCBbZGF0YS1rdG1lbnUtc3VibWVudS10b2dnbGU9XCJ0YWJcIl0gPiAubWVudV9fbGluayAubWVudV9fdG9nZ2xlJywgJ2NsaWNrJywgUGx1Z2luLmhhbmRsZVN1Ym1lbnVEcm9wZG93blRhYkNsaWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaGFuZGxlIGxpbmsgY2xpY2tcbiAgICAgICAgICAgIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF82J10gPSBLVFV0aWwub24oZWxlbWVudCwgJy5tZW51X19pdGVtID4gLm1lbnVfX2xpbms6bm90KC5tZW51X190b2dnbGUpOm5vdCgubWVudV9fbGluay0tdG9nZ2xlLXNraXApJywgJ2NsaWNrJywgUGx1Z2luLmhhbmRsZUxpbmtDbGljayk7XG5cbiAgICAgICAgICAgIC8vIEluaXQgc2Nyb2xsYWJsZSBtZW51XG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMuc2Nyb2xsICYmIHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4uc2Nyb2xsSW5pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNldCBtZW51XG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBLVFV0aWwub2ZmKCBlbGVtZW50LCAnY2xpY2snLCB0aGUuZXZlbnRIYW5kbGVyc1snZXZlbnRfMSddKTtcblxuICAgICAgICAgICAgLy8gZHJvcGRvd24gc3VibWVudSAtIGhvdmVyIHRvZ2dsZVxuICAgICAgICAgICAgS1RVdGlsLm9mZiggZWxlbWVudCwgJ21vdXNlb3ZlcicsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF8yJ10pO1xuICAgICAgICAgICAgS1RVdGlsLm9mZiggZWxlbWVudCwgJ21vdXNlb3V0JywgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzMnXSk7XG5cbiAgICAgICAgICAgIC8vIGRyb3Bkb3duIHN1Ym1lbnUgLSBjbGljayB0b2dnbGVcbiAgICAgICAgICAgIEtUVXRpbC5vZmYoIGVsZW1lbnQsICdjbGljaycsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF80J10pO1xuICAgICAgICAgICAgS1RVdGlsLm9mZiggZWxlbWVudCwgJ2NsaWNrJywgdGhlLmV2ZW50SGFuZGxlcnNbJ2V2ZW50XzUnXSk7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBsaW5rIGNsaWNrXG4gICAgICAgICAgICBLVFV0aWwub2ZmKGVsZW1lbnQsICdjbGljaycsIHRoZS5ldmVudEhhbmRsZXJzWydldmVudF82J10pO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbml0IHNjcm9sbCBtZW51XG4gICAgICAgICAqXG4gICAgICAgICovXG4gICAgICAgIHNjcm9sbEluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGUub3B0aW9ucy5zY3JvbGwgJiYgdGhlLm9wdGlvbnMuc2Nyb2xsLmhlaWdodCApIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsRGVzdHJveShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChlbGVtZW50LCB7bW9iaWxlTmF0aXZlU2Nyb2xsOiB0cnVlLCB3aW5kb3dTY3JvbGw6IGZhbHNlLCByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSwgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLCBoZWlnaHQ6IHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQsIHJlbWVtYmVyUG9zaXRpb246IHRoZS5vcHRpb25zLnNjcm9sbC5yZW1lbWJlclBvc2l0aW9ufSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxEZXN0cm95KGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVcGRhdGUgc2Nyb2xsIG1lbnVcbiAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsVXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggdGhlLm9wdGlvbnMuc2Nyb2xsICYmIHRoZS5vcHRpb25zLnNjcm9sbC5oZWlnaHQgKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2Nyb2xsIHRvcFxuICAgICAgICAqL1xuICAgICAgICBzY3JvbGxUb3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCB0aGUub3B0aW9ucy5zY3JvbGwgJiYgdGhlLm9wdGlvbnMuc2Nyb2xsLmhlaWdodCApIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVG9wKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgc3VibWVudSBtb2RlIGZvciBjdXJyZW50IGJyZWFrcG9pbnQgYW5kIG1lbnUgc3RhdGVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGdldFN1Ym1lbnVNb2RlOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaWYgKCBLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgnZGVza3RvcCcpICkge1xuICAgICAgICAgICAgICAgIGlmIChlbCAmJiBLVFV0aWwuaGFzQXR0cihlbCwgJ2RhdGEta3RtZW51LXN1Ym1lbnUtdG9nZ2xlJykgJiYgS1RVdGlsLmF0dHIoZWwsICdkYXRhLWt0bWVudS1zdWJtZW51LXRvZ2dsZScpID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZHJvcGRvd24nO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICdkZXNrdG9wLnN0YXRlLmJvZHknKSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBLVFV0aWwuaGFzQ2xhc3Nlcyhib2R5LCB0aGUub3B0aW9ucy5zdWJtZW51LmRlc2t0b3Auc3RhdGUuYm9keSkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlLm9wdGlvbnMuc3VibWVudS5kZXNrdG9wLnN0YXRlLm1vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhlLm9wdGlvbnMuc3VibWVudS5kZXNrdG9wLmRlZmF1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBLVFV0aWwuaXNzZXQodGhlLm9wdGlvbnMuc3VibWVudSwgJ2Rlc2t0b3AnKSApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoZS5vcHRpb25zLnN1Ym1lbnUuZGVza3RvcDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgndGFibGV0JykgJiYgS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICd0YWJsZXQnKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlLm9wdGlvbnMuc3VibWVudS50YWJsZXQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgnbW9iaWxlJykgJiYgS1RVdGlsLmlzc2V0KHRoZS5vcHRpb25zLnN1Ym1lbnUsICdtb2JpbGUnKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlLm9wdGlvbnMuc3VibWVudS5tb2JpbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IHN1Ym1lbnUgbW9kZSBmb3IgY3VycmVudCBicmVha3BvaW50IGFuZCBtZW51IHN0YXRlXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICBpc0NvbmRpdGlvbmFsU3VibWVudURyb3Bkb3duOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggS1RVdGlsLmlzSW5SZXNwb25zaXZlUmFuZ2UoJ2Rlc2t0b3AnKSAmJiBLVFV0aWwuaXNzZXQodGhlLm9wdGlvbnMuc3VibWVudSwgJ2Rlc2t0b3Auc3RhdGUuYm9keScpICkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogUmVzZXQgc3VibWVudSBhdHRyaWJ1dGVzXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICByZXNldFN1Ym1lbnVQcm9wczogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgY29uc3Qgc3VibWVudXMgPSBLVFV0aWwuZmluZEFsbChlbGVtZW50LCAnLm1lbnVfX3N1Ym1lbnUnKTtcbiAgICAgICAgICAgIGlmICggc3VibWVudXMgKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHN1Ym1lbnVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3Moc3VibWVudXNbMF0sICdkaXNwbGF5JywgJycpO1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHN1Ym1lbnVzWzBdLCAnb3ZlcmZsb3cnLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIHN1Ym1lbnUgaG92ZXIgdG9nZ2xlXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVTdWJtZW51RHJvZG93bkhvdmVyRW50ZXI6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGlmICggUGx1Z2luLmdldFN1Ym1lbnVNb2RlKHRoaXMpID09PSAnYWNjb3JkaW9uJyApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdGhlLnJlc3VtZURyb3Bkb3duSG92ZXIoKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicpID09PSAnMScgKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaG92ZXInKTtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLXRpbWVvdXQnKSApO1xuICAgICAgICAgICAgICAgIGl0ZW0ucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXRpbWVvdXQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgUGx1Z2luLnNob3dTdWJtZW51RHJvcGRvd24oaXRlbSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBob3ZlciB0b2dnbGVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVEcm9kb3duSG92ZXJFeGl0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoIHRoZS5yZXN1bWVEcm9wZG93bkhvdmVyKCkgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBQbHVnaW4uZ2V0U3VibWVudU1vZGUodGhpcykgPT09ICdhY2NvcmRpb24nICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXM7XG4gICAgICAgICAgICBjb25zdCB0aW1lID0gdGhlLm9wdGlvbnMuZHJvcGRvd24udGltZW91dDtcblxuICAgICAgICAgICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicpID09PSAnMScgKSB7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3duKGl0ZW0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHRpbWUpO1xuXG4gICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1ob3ZlcicsICcxJyk7XG4gICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS10aW1lb3V0JywgdGltZW91dCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBjbGljayB0b2dnbGVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVEcm9wZG93bkNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoIFBsdWdpbi5nZXRTdWJtZW51TW9kZSh0aGlzKSA9PT0gJ2FjY29yZGlvbicgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5jbG9zZXN0KCcubWVudV9faXRlbScpO1xuXG4gICAgICAgICAgICBpZiAoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWt0bWVudS1zdWJtZW51LW1vZGUnKSA9PT0gJ2FjY29yZGlvbicgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIEtUVXRpbC5oYXNDbGFzcyhpdGVtLCAnbWVudV9faXRlbS0taG92ZXInKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGl0ZW0sICdtZW51X19pdGVtLS1vcGVuLWRyb3Bkb3duJyk7XG4gICAgICAgICAgICAgICAgUGx1Z2luLnNob3dTdWJtZW51RHJvcGRvd24oaXRlbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhpdGVtLCAnbWVudV9faXRlbS0tb3Blbi1kcm9wZG93bicgKTtcbiAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihpdGVtLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIYW5kbGVzIHRhYiBjbGljayB0b2dnbGVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVEcm9wZG93blRhYkNsaWNrOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoUGx1Z2luLmdldFN1Ym1lbnVNb2RlKHRoaXMpID09PSAnYWNjb3JkaW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuY2xvc2VzdCgnLm1lbnVfX2l0ZW0nKTtcblxuICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWt0bWVudS1zdWJtZW51LW1vZGUnKSA9PT0gJ2FjY29yZGlvbicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoaXRlbSwgJ21lbnVfX2l0ZW0tLWhvdmVyJykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGl0ZW0sICdtZW51X19pdGVtLS1vcGVuLWRyb3Bkb3duJyk7XG4gICAgICAgICAgICAgICAgUGx1Z2luLnNob3dTdWJtZW51RHJvcGRvd24oaXRlbSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBsaW5rIGNsaWNrXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVMaW5rQ2xpY2s6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN1Ym1lbnUgPSB0aGlzLmNsb3Nlc3QoJy5tZW51X19pdGVtLm1lbnVfX2l0ZW0tLXN1Ym1lbnUnKTsgLy9cblxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IFBsdWdpbi5ldmVudFRyaWdnZXIoJ2xpbmtDbGljaycsIHRoaXMsIGUpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggc3VibWVudSAmJiBQbHVnaW4uZ2V0U3VibWVudU1vZGUoc3VibWVudSkgPT09ICdkcm9wZG93bicgKSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLmhpZGVTdWJtZW51RHJvcGRvd25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBkcm9wZG93biBjbG9zZSBvbiBsaW5rIGNsaWNrXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGVTdWJtZW51RHJvcGRvd25DbG9zZTogZnVuY3Rpb24oZSwgZWwpIHtcbiAgICAgICAgICAgIC8vIGV4aXQgaWYgaXRzIG5vdCBzdWJtZW51IGRyb3Bkb3duIG1vZGVcbiAgICAgICAgICAgIGlmIChQbHVnaW4uZ2V0U3VibWVudU1vZGUoZWwpID09PSAnYWNjb3JkaW9uJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2hvd24gPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19pdGVtLm1lbnVfX2l0ZW0tLXN1Ym1lbnUubWVudV9faXRlbS0taG92ZXI6bm90KC5tZW51X19pdGVtLS10YWJzKScpO1xuXG4gICAgICAgICAgICAvLyBjaGVjayBpZiBjdXJyZW50bHkgY2xpY2tlZCBsaW5rJ3MgcGFyZW50IGl0ZW0gaGFcbiAgICAgICAgICAgIGlmIChzaG93bi5sZW5ndGggPiAwICYmIEtUVXRpbC5oYXNDbGFzcyhlbCwgJ21lbnVfX3RvZ2dsZScpID09PSBmYWxzZSAmJiBlbC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudV9fdG9nZ2xlJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xvc2Ugb3BlbmVkIGRyb3Bkb3duIG1lbnVzXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNob3duLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3duKHNob3duWzBdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhlbHBlciBmdW5jdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGhhbmRsZVN1Ym1lbnVBY2NvcmRpb246IGZ1bmN0aW9uKGUsIGVsKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnk7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IGVsID8gZWwgOiB0aGlzO1xuXG4gICAgICAgICAgICBpZiAoIFBsdWdpbi5nZXRTdWJtZW51TW9kZShlbCkgPT09ICdkcm9wZG93bicgJiYgKHF1ZXJ5ID0gaXRlbS5jbG9zZXN0KCcubWVudV9faXRlbScpICkgKSB7XG4gICAgICAgICAgICAgICAgaWYgKHF1ZXJ5LmdldEF0dHJpYnV0ZSgnZGF0YS1rdG1lbnUtc3VibWVudS1tb2RlJykgIT09ICdhY2NvcmRpb24nICkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBsaSA9IGl0ZW0uY2xvc2VzdCgnLm1lbnVfX2l0ZW0nKTtcbiAgICAgICAgICAgIGxldCBzdWJtZW51ID0gS1RVdGlsLmNoaWxkKGxpLCAnLm1lbnVfX3N1Ym1lbnUsIC5tZW51X19pbm5lcicpO1xuXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKGl0ZW0uY2xvc2VzdCgnLm1lbnVfX2l0ZW0nKSwgJ21lbnVfX2l0ZW0tLW9wZW4tYWx3YXlzJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggbGkgJiYgc3VibWVudSApIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgbGV0IHNwZWVkID0gdGhlLm9wdGlvbnMuYWNjb3JkaW9uLnNsaWRlU3BlZWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaGFzQ2xvc2FibGVzID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoIEtUVXRpbC5oYXNDbGFzcyhsaSwgJ21lbnVfX2l0ZW0tLW9wZW4nKSA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZGUgb3RoZXIgYWNjb3JkaW9uc1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoZS5vcHRpb25zLmFjY29yZGlvbi5leHBhbmRBbGwgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Ym5hdiA9IGl0ZW0uY2xvc2VzdCgnLm1lbnVfX25hdiwgLm1lbnVfX3N1Ym5hdicpO1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NhYmxlcyA9IEtUVXRpbC5jaGlsZHJlbihzdWJuYXYsICcubWVudV9faXRlbS5tZW51X19pdGVtLS1vcGVuLm1lbnVfX2l0ZW0tLXN1Ym1lbnU6bm90KC5tZW51X19pdGVtLS1oZXJlKTpub3QoLm1lbnVfX2l0ZW0tLW9wZW4tYWx3YXlzKScpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN1Ym5hdiAmJiBjbG9zYWJsZXMgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNsb3NhYmxlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZWxfID0gY2xvc2FibGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3VibWVudV8gPSBLVFV0aWwuY2hpbGQoZWxfLCAnLm1lbnVfX3N1Ym1lbnUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdWJtZW51XyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zbGlkZVVwKHN1Ym1lbnVfLCBzcGVlZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLnNjcm9sbFVwZGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbF8sICdtZW51X19pdGVtLS1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zbGlkZURvd24oc3VibWVudSwgc3BlZWQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLnNjcm9sbFRvSXRlbShpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5zY3JvbGxVcGRhdGUoKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc3VibWVudVRvZ2dsZScsIHN1Ym1lbnUsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MobGksICdtZW51X19pdGVtLS1vcGVuJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2xpZGVVcChzdWJtZW51LCBzcGVlZCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4uc2Nyb2xsVG9JdGVtKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc3VibWVudVRvZ2dsZScsIHN1Ym1lbnUsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MobGksICdtZW51X19pdGVtLS1vcGVuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzY3JvbGwgdG8gaXRlbSBmdW5jdGlvblxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsVG9JdGVtOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgYXV0byBzY3JvbGwgZm9yIGFjY29yZGlvbiBzdWJtZW51c1xuICAgICAgICAgICAgaWYgKCBLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgnZGVza3RvcCcpICYmIHRoZS5vcHRpb25zLmFjY29yZGlvbi5hdXRvU2Nyb2xsICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLWt0bWVudS1zY3JvbGwnKSAhPT0gJzEnICkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUbyhpdGVtLCB0aGUub3B0aW9ucy5hY2NvcmRpb24uYXV0b1Njcm9sbFNwZWVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGlkZSBzdWJtZW51IGRyb3Bkb3duXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICBoaWRlU3VibWVudURyb3Bkb3duOiBmdW5jdGlvbihpdGVtLCBjbGFzc0Fsc28pIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBzdWJtZW51IGFjdGl2YXRpb24gY2xhc3NcbiAgICAgICAgICAgIGlmICggY2xhc3NBbHNvICkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhpdGVtLCAnbWVudV9faXRlbS0taG92ZXInKTtcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoaXRlbSwgJ21lbnVfX2l0ZW0tLWFjdGl2ZS10YWInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2xlYXIgdGltZW91dFxuICAgICAgICAgICAgaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtaG92ZXInKTtcblxuICAgICAgICAgICAgaWYgKCBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS1rdG1lbnUtZHJvcGRvd24tdG9nZ2xlLWNsYXNzJykgKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWt0bWVudS1kcm9wZG93bi10b2dnbGUtY2xhc3MnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHRpbWVvdXQgPSBpdGVtLmdldEF0dHJpYnV0ZSgnZGF0YS10aW1lb3V0Jyk7XG4gICAgICAgICAgICBpdGVtLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS10aW1lb3V0Jyk7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhpZGUgc3VibWVudSBkcm9wZG93bnNcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIGhpZGVTdWJtZW51RHJvcGRvd25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGxldCBpdGVtcztcbiAgICAgICAgICAgIGlmICggaXRlbXMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19pdGVtLS1zdWJtZW51Lm1lbnVfX2l0ZW0tLWhvdmVyOm5vdCgubWVudV9faXRlbS0tdGFicyk6bm90KFtkYXRhLWt0bWVudS1zdWJtZW51LXRvZ2dsZT1cInRhYlwiXSknKSApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgY250ID0gaXRlbXMubGVuZ3RoOyBqIDwgY250OyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmhpZGVTdWJtZW51RHJvcGRvd24oaXRlbXNbal0sIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogaGVscGVyIGZ1bmN0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1N1Ym1lbnVEcm9wZG93bjogZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgLy8gY2xvc2UgYWN0aXZlIHN1Ym1lbnVzXG4gICAgICAgICAgICBsZXQgbGlzdCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1lbnVfX2l0ZW0tLXN1Ym1lbnUubWVudV9faXRlbS0taG92ZXIsIC5tZW51X19pdGVtLS1zdWJtZW51Lm1lbnVfX2l0ZW0tLWFjdGl2ZS10YWInKTtcblxuICAgICAgICAgICAgaWYgKCBsaXN0ICkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbCA9IGxpc3RbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmICggaXRlbSAhPT0gZWwgJiYgZWwuY29udGFpbnMoaXRlbSkgPT09IGZhbHNlICYmIGl0ZW0uY29udGFpbnMoZWwpID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3duKGVsLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYWRkIHN1Ym1lbnUgYWN0aXZhdGlvbiBjbGFzc1xuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGl0ZW0sICdtZW51X19pdGVtLS1ob3ZlcicpO1xuXG4gICAgICAgICAgICBpZiAoIGl0ZW0uZ2V0QXR0cmlidXRlKCdkYXRhLWt0bWVudS1kcm9wZG93bi10b2dnbGUtY2xhc3MnKSApIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoYm9keSwgaXRlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEta3RtZW51LWRyb3Bkb3duLXRvZ2dsZS1jbGFzcycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBzdWJtZW51IHNsaWRlIHRvZ2dsZVxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlU3VibWVudURyb3Bkb3duQ2xpY2tEcm9wb2ZmOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgbGV0IHF1ZXJ5O1xuICAgICAgICAgICAgbGV0IHpJbmRleCA9IChxdWVyeSA9IEtUVXRpbC5jaGlsZChlbCwgJy5tZW51X19zdWJtZW51JykgPyBLVFV0aWwuY3NzKHF1ZXJ5LCAnei1pbmRleCcpIDogMCkgLSAxO1xuXG4gICAgICAgICAgICBsZXQgZHJvcG9mZiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJzxkaXYgY2xhc3M9XCJtZW51X19kcm9wb2ZmXCIgc3R5bGU9XCJiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgcG9zaXRpb246IGZpeGVkOyB0b3A6IDA7IGJvdHRvbTogMDsgbGVmdDogMDsgcmlnaHQ6IDA7IHotaW5kZXg6ICcgKyB6SW5kZXggKyAnXCI+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZHJvcG9mZik7XG5cbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChkcm9wb2ZmLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihlbCwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBzdWJtZW51IGhvdmVyIHRvZ2dsZVxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgcGF1c2VEcm9wZG93bkhvdmVyOiBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgdGhlLnBhdXNlRHJvcGRvd25Ib3ZlclRpbWUgPSBkYXRlLmdldFRpbWUoKSArIHRpbWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3VibWVudSBob3ZlciB0b2dnbGVcbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIHJlc3VtZURyb3Bkb3duSG92ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiAoZGF0ZS5nZXRUaW1lKCkgPiB0aGUucGF1c2VEcm9wZG93bkhvdmVyVGltZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0IG1lbnUncyBjdXJyZW50IGFjdGl2ZSBpdGVtXG4gICAgICAgICAqIEByZXR1cm5zIHtLVE1lbnV9XG4gICAgICAgICAqL1xuICAgICAgICByZXNldEFjdGl2ZUl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIGxldCBsaXN0O1xuICAgICAgICAgICAgbGV0IHBhcmVudHM7XG5cbiAgICAgICAgICAgIGxpc3QgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19pdGVtLS1hY3RpdmUnKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgZWwgPSBsaXN0WzBdO1xuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbCwgJ21lbnVfX2l0ZW0tLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIEtUVXRpbC5oaWRlKCBLVFV0aWwuY2hpbGQoZWwsICcubWVudV9fc3VibWVudScpICk7XG4gICAgICAgICAgICAgICAgcGFyZW50cyA9IEtUVXRpbC5wYXJlbnRzKGVsLCAnLm1lbnVfX2l0ZW0tLXN1Ym1lbnUnKSB8fCBbXTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGlfID0gMCwgbGVuXyA9IHBhcmVudHMubGVuZ3RoOyBpXyA8IGxlbl87IGlfKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsXyA9IHBhcmVudHNbaV07XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbF8sICdtZW51X19pdGVtLS1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5oaWRlKCBLVFV0aWwuY2hpbGQoZWxfLCAnLm1lbnVfX3N1Ym1lbnUnKSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY2xvc2Ugb3BlbiBzdWJtZW51c1xuICAgICAgICAgICAgaWYgKCB0aGUub3B0aW9ucy5hY2NvcmRpb24uZXhwYW5kQWxsID09PSBmYWxzZSApIHtcbiAgICAgICAgICAgICAgICBpZiAoIGxpc3QgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19pdGVtLS1vcGVuJykgKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MocGFyZW50c1swXSwgJ21lbnVfX2l0ZW0tLW9wZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyBtZW51J3MgYWN0aXZlIGl0ZW1cbiAgICAgICAgICogQHJldHVybnMge0tUTWVudX1cbiAgICAgICAgICovXG4gICAgICAgIHNldEFjdGl2ZUl0ZW06IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIC8vIHJlc2V0IGN1cnJlbnQgYWN0aXZlIGl0ZW1cbiAgICAgICAgICAgIFBsdWdpbi5yZXNldEFjdGl2ZUl0ZW0oKTtcblxuICAgICAgICAgICAgbGV0IHBhcmVudHMgPSBLVFV0aWwucGFyZW50cyhpdGVtLCAnLm1lbnVfX2l0ZW0tLXN1Ym1lbnUnKSB8fCBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJlbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKEtUVXRpbC5nZXQocGFyZW50c1tpXSksICdtZW51X19pdGVtLS1vcGVuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhLVFV0aWwuZ2V0KGl0ZW0pLCAnbWVudV9faXRlbS0tYWN0aXZlJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgcGFnZSBicmVhZGNydW1icyBmb3IgdGhlIG1lbnUncyBhY3RpdmUgaXRlbVxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QnJlYWRjcnVtYnM6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIGxldCBxdWVyeTtcbiAgICAgICAgICAgIGxldCBicmVhZGNydW1icyA9IFtdO1xuICAgICAgICAgICAgbGV0IGxpbmsgPSBLVFV0aWwuY2hpbGQoaXRlbSwgJy5tZW51X19saW5rJyk7XG5cbiAgICAgICAgICAgIGJyZWFkY3J1bWJzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRleHQ6IChxdWVyeSA9IEtUVXRpbC5jaGlsZChsaW5rLCAnLm1lbnVfX2xpbmstdGV4dCcpID8gcXVlcnkuaW5uZXJIVE1MIDogJycpLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBsaW5rLmdldEF0dHJpYnV0ZSgndGl0bGUnKSxcbiAgICAgICAgICAgICAgICBocmVmOiBsaW5rLmdldEF0dHJpYnV0ZSgnaHJlZicpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IHBhcmVudHMgPSBLVFV0aWwucGFyZW50cyhpdGVtLCAnLm1lbnVfX2l0ZW0tLXN1Ym1lbnUnKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYXJlbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IHN1Ym1lbnVMaW5rID0gS1RVdGlsLmNoaWxkKHBhcmVudHNbaV0sICcubWVudV9fbGluaycpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IChxdWVyeSA9IEtUVXRpbC5jaGlsZChzdWJtZW51TGluaywgJy5tZW51X19saW5rLXRleHQnKSA/IHF1ZXJ5LmlubmVySFRNTCA6ICcnKSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHN1Ym1lbnVMaW5rLmdldEF0dHJpYnV0ZSgndGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogc3VibWVudUxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuICBicmVhZGNydW1icy5yZXZlcnNlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgcGFnZSB0aXRsZSBmb3IgdGhlIG1lbnUncyBhY3RpdmUgaXRlbVxuICAgICAgICAgKiBAcmV0dXJucyB7S1RNZW51fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0UGFnZVRpdGxlOiBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICBsZXQgcXVlcnk7XG5cbiAgICAgICAgICAgIHJldHVybiAocXVlcnkgPSBLVFV0aWwuY2hpbGQoaXRlbSwgJy5tZW51X19saW5rLXRleHQnKSA/IHF1ZXJ5LmlubmVySFRNTCA6ICcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogVHJpZ2dlciBldmVudHNcbiAgICAgICAgICovXG4gICAgICAgIGV2ZW50VHJpZ2dlcjogZnVuY3Rpb24obmFtZSwgdGFyZ2V0LCBlKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgbGV0IGV2ZW50ID0gdGhlLmV2ZW50c1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoIGV2ZW50Lm5hbWUgPT09IG5hbWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggZXZlbnQub25lID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5maXJlZCA9PT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0YXJnZXQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0YXJnZXQsIGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlRXZlbnQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGUuZXZlbnRzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoZS5ldmVudHNbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICovXG5cbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHNjcm9sbFxuICAgICAqL1xuICAgIHRoZS5zY3JvbGxVcGRhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5zY3JvbGxVcGRhdGUoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmUtaW5pdCBzY3JvbGxcbiAgICAgKi9cbiAgICB0aGUuc2Nyb2xsUmVJbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uc2Nyb2xsSW5pdCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY3JvbGwgdG9wXG4gICAgICovXG4gICAgdGhlLnNjcm9sbFRvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnNjcm9sbFRvcCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgYWN0aXZlIG1lbnUgaXRlbVxuICAgICAqL1xuICAgIHRoZS5zZXRBY3RpdmVJdGVtID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnNldEFjdGl2ZUl0ZW0oaXRlbSk7XG4gICAgfTtcblxuICAgIHRoZS5yZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZWxvYWQoKTtcbiAgICB9O1xuXG4gICAgdGhlLnVwZGF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi51cGRhdGUob3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCBicmVhZGNydW1iIGZvciBtZW51IGl0ZW1cbiAgICAgKi9cbiAgICB0aGUuZ2V0QnJlYWRjcnVtYnMgPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uZ2V0QnJlYWRjcnVtYnMoaXRlbSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldCBwYWdlIHRpdGxlIGZvciBtZW51IGl0ZW1cbiAgICAgKi9cbiAgICB0aGUuZ2V0UGFnZVRpdGxlID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmdldFBhZ2VUaXRsZShpdGVtKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHN1Ym1lbnUgbW9kZVxuICAgICAqL1xuICAgIHRoZS5nZXRTdWJtZW51TW9kZSA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uZ2V0U3VibWVudU1vZGUoZWwpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBIaWRlIGRyb3Bkb3duXG4gICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAgKi9cbiAgICB0aGUuaGlkZURyb3Bkb3duID0gZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBQbHVnaW4uaGlkZVN1Ym1lbnVEcm9wZG93bihpdGVtLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSGlkZSBkcm9wZG93bnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoZS5oaWRlRHJvcGRvd25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFBsdWdpbi5oaWRlU3VibWVudURyb3Bkb3ducygpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlIG1lbnUgZm9yIGdpdmVuIHRpbWVcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoZS5wYXVzZURyb3Bkb3duSG92ZXIgPSBmdW5jdGlvbih0aW1lKSB7XG4gICAgICAgIFBsdWdpbi5wYXVzZURyb3Bkb3duSG92ZXIodGltZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpc2FibGUgbWVudSBmb3IgZ2l2ZW4gdGltZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhlLnJlc3VtZURyb3Bkb3duSG92ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZXN1bWVEcm9wZG93bkhvdmVyKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGV2ZW50XG4gICAgICovXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICB0aGUub2ZmID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnJlbW92ZUV2ZW50KG5hbWUpO1xuICAgIH07XG5cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUGx1Z2luIENvbnN0cnVjdGlvbiAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFJ1biBwbHVnaW5cbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcblxuICAgIC8vIEhhbmRsZSBwbHVnaW4gb24gd2luZG93IHJlc2l6ZVxuICAgIEtUVXRpbC5hZGRSZXNpemVIYW5kbGVyKGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaW5pdCkge1xuICAgICAgICAgICAgdGhlLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IGRvbmVcbiAgICBpbml0ID0gdHJ1ZTtcblxuICAgIC8vIFJldHVybiBwbHVnaW4gaW5zdGFuY2VcbiAgICByZXR1cm4gdGhlO1xufTtcblxuLy8gd2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RNZW51O1xufVxuXG4vLyBQbHVnaW4gZ2xvYmFsIGxhenkgaW5pdGlhbGl6YXRpb25cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgIGNvbnN0IGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7XG4gICAgbGV0IHF1ZXJ5O1xuICAgIGlmICggcXVlcnkgPSBib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19uYXYgLm1lbnVfX2l0ZW0ubWVudV9faXRlbS0tc3VibWVudS5tZW51X19pdGVtLS1ob3Zlcjpub3QoLm1lbnVfX2l0ZW0tLXRhYnMpW2RhdGEta3RtZW51LXN1Ym1lbnUtdG9nZ2xlPVwiY2xpY2tcIl0nKSApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHF1ZXJ5Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgZWxlbWVudCA9IHF1ZXJ5W2ldLmNsb3Nlc3QoJy5tZW51X19uYXYnKS5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICBpZiAoIGVsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnbWVudScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCAhdGhlICkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoICF0aGUgfHwgdGhlLmdldFN1Ym1lbnVNb2RlKCkgIT09ICdkcm9wZG93bicgKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggZS50YXJnZXQgIT09IGVsZW1lbnQgJiYgZWxlbWVudC5jb250YWlucyhlLnRhcmdldCkgPT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGUuaGlkZURyb3Bkb3ducygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBLVE9mZmNhbnZhcyA9IGZ1bmN0aW9uKGVsZW1lbnRJZCwgb3B0aW9ucykge1xyXG4gICAgLy8gTWFpbiBvYmplY3RcclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG4gICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50ID0gS1RVdGlsLmdldChlbGVtZW50SWQpO1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7XHJcblxyXG4gICAgaWYgKCFlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xyXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge307XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBQbHVnaW4gPSB7XHJcbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbGVtZW50KS5oYXMoJ29mZmNhbnZhcycpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ29mZmNhbnZhcycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgb2ZmY2FudmFzXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgb2ZmY2FudmFzXHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ29mZmNhbnZhcycsIHRoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGUuZXZlbnRzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBtZXJnZSBkZWZhdWx0IGFuZCB1c2VyIGRlZmluZWQgb3B0aW9uc1xyXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoZS5vdmVybGF5O1xyXG5cclxuICAgICAgICAgICAgdGhlLmNsYXNzQmFzZSA9IHRoZS5vcHRpb25zLmJhc2VDbGFzcztcclxuICAgICAgICAgICAgdGhlLmNsYXNzU2hvd24gPSB0aGUuY2xhc3NCYXNlICsgJy0tb24nO1xyXG4gICAgICAgICAgICB0aGUuY2xhc3NPdmVybGF5ID0gdGhlLmNsYXNzQmFzZSArICctb3ZlcmxheSc7XHJcblxyXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSBLVFV0aWwuaGFzQ2xhc3MoZWxlbWVudCwgdGhlLmNsYXNzU2hvd24pID8gJ3Nob3duJyA6ICdoaWRkZW4nO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGJ1aWxkOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgLy8gb2ZmY2FudmFzIHRvZ2dsZVxyXG4gICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMudG9nZ2xlQnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhlLm9wdGlvbnMudG9nZ2xlQnkgPT09ICdzdHJpbmcnKSB7IFxyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCggdGhlLm9wdGlvbnMudG9nZ2xlQnksICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGUub3B0aW9ucy50b2dnbGVCeSAmJiB0aGUub3B0aW9ucy50b2dnbGVCeVswXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50b2dnbGVCeVswXS50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0aGUub3B0aW9ucy50b2dnbGVCeSkgeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudCggdGhlLm9wdGlvbnMudG9nZ2xlQnlbaV0udGFyZ2V0LCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhlLm9wdGlvbnMudG9nZ2xlQnkpIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoIHRoZS5vcHRpb25zLnRvZ2dsZUJ5W2ldLCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhlLm9wdGlvbnMudG9nZ2xlQnkgJiYgdGhlLm9wdGlvbnMudG9nZ2xlQnkudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KCB0aGUub3B0aW9ucy50b2dnbGVCeS50YXJnZXQsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7IFxyXG4gICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gb2ZmY2FudmFzIGNsb3NlXHJcbiAgICAgICAgICAgIHZhciBjbG9zZUJ5ID0gS1RVdGlsLmdldCh0aGUub3B0aW9ucy5jbG9zZUJ5KTtcclxuICAgICAgICAgICAgaWYgKGNsb3NlQnkpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChjbG9zZUJ5LCAnY2xpY2snLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gV2luZG93IHJlc2l6ZVxyXG4gICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdsZWZ0JykpID49IDAgfHwgcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAncmlnaHQnKSA+PSAwKSB8fCBLVFV0aWwuY3NzKGVsZW1lbnQsICdwb3NpdGlvbicpICE9ICdmaXhlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdvcGFjaXR5JywgJzEnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaXNTaG93bjogZnVuY3Rpb24odGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGhlLnN0YXRlID09ICdzaG93bicgPyB0cnVlIDogZmFsc2UpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7O1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCd0b2dnbGUnKTsgXHJcblxyXG4gICAgICAgICAgICBpZiAodGhlLnN0YXRlID09ICdzaG93bicpIHtcclxuICAgICAgICAgICAgICAgIFBsdWdpbi5oaWRlKHRoaXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLnNob3codGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzaG93OiBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS5zdGF0ZSA9PSAnc2hvd24nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZVNob3cnKTtcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi50b2dnbGVyQ2xhc3ModGFyZ2V0LCAnc2hvdycpO1xyXG5cclxuICAgICAgICAgICAgLy8gT2ZmY2FudmFzIHBhbmVsXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhib2R5LCB0aGUuY2xhc3NTaG93bik7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCB0aGUuY2xhc3NTaG93bik7XHJcbiAgICAgICAgICAgIEtUVXRpbC5jc3MoZWxlbWVudCwgJ29wYWNpdHknLCAnMScpO1xyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gJ3Nob3duJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGUub3ZlcmxheSA9IEtUVXRpbC5pbnNlcnRBZnRlcihkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdESVYnKSAsIGVsZW1lbnQgKTtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0aGUub3ZlcmxheSwgdGhlLmNsYXNzT3ZlcmxheSk7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQodGhlLm92ZXJsYXksICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGlkZSh0YXJnZXQpOyAgICAgICBcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlclNob3cnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBoaWRlOiBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICAgICAgaWYgKHRoZS5zdGF0ZSA9PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVIaWRlJyk7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4udG9nZ2xlckNsYXNzKHRhcmdldCwgJ2hpZGUnKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhib2R5LCB0aGUuY2xhc3NTaG93bik7XHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCB0aGUuY2xhc3NTaG93bik7XHJcblxyXG4gICAgICAgICAgICB0aGUuc3RhdGUgPSAnaGlkZGVuJztcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy5vdmVybGF5ICYmIHRoZS5vdmVybGF5KSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlKHRoZS5vdmVybGF5KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgS1RVdGlsLnRyYW5zaXRpb25FbmQoZWxlbWVudCwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdvcGFjaXR5JywgJzAnKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckhpZGUnKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICB0b2dnbGVyQ2xhc3M6IGZ1bmN0aW9uKHRhcmdldCwgbW9kZSkge1xyXG4gICAgICAgICAgICAvLyBUb2dnbGVyXHJcbiAgICAgICAgICAgIHZhciBpZCA9IEtUVXRpbC5hdHRyKHRhcmdldCwgJ2lkJyk7XHJcbiAgICAgICAgICAgIHZhciB0b2dnbGVCeTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50b2dnbGVCeSAmJiB0aGUub3B0aW9ucy50b2dnbGVCeVswXSAmJiB0aGUub3B0aW9ucy50b2dnbGVCeVswXS50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdGhlLm9wdGlvbnMudG9nZ2xlQnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlLm9wdGlvbnMudG9nZ2xlQnlbaV0udGFyZ2V0ID09PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2dnbGVCeSA9IHRoZS5vcHRpb25zLnRvZ2dsZUJ5W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoZS5vcHRpb25zLnRvZ2dsZUJ5ICYmIHRoZS5vcHRpb25zLnRvZ2dsZUJ5LnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnkgPSB0aGUub3B0aW9ucy50b2dnbGVCeTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRvZ2dsZUJ5KSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGVsID0gS1RVdGlsLmdldCh0b2dnbGVCeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ3Nob3cnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsLCB0b2dnbGVCeS5zdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdoaWRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbCwgdG9nZ2xlQnkuc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgZXZlbnRUcmlnZ2VyOiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlLmV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhlLmV2ZW50c1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmZpcmVkID09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24obmFtZSwgaGFuZGxlciwgb25lKSB7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogaGFuZGxlcixcclxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxyXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFB1YmxpYyBNZXRob2RzICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgdGhlLnNldERlZmF1bHRzID0gZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcclxuICAgIH07XHJcblxyXG4gICAgdGhlLmlzU2hvd24gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmlzU2hvd24oKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhlLmhpZGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmhpZGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhlLnNob3cgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnNob3coKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xyXG4gICAgICAgIHJldHVybiBQbHVnaW4uYWRkRXZlbnQobmFtZSwgaGFuZGxlcik7XHJcbiAgICB9O1xyXG5cclxuICAgIHRoZS5vbmUgPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyLCB0cnVlKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gKiogUGx1Z2luIENvbnN0cnVjdGlvbiAqKiAvL1xyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8vIFJ1biBwbHVnaW5cclxuICAgIFBsdWdpbi5jb25zdHJ1Y3QuYXBwbHkodGhlLCBbb3B0aW9uc10pO1xyXG5cclxuICAgIC8vIEluaXQgZG9uZVxyXG4gICAgaW5pdCA9IHRydWU7XHJcblxyXG4gICAgLy8gUmV0dXJuIHBsdWdpbiBpbnN0YW5jZVxyXG4gICAgcmV0dXJuIHRoZTtcclxufTtcclxuXHJcbi8vIHdlYnBhY2sgc3VwcG9ydFxyXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVE9mZmNhbnZhcztcclxufSIsIlwidXNlIHN0cmljdFwiO1xuLy8gcGx1Z2luIHNldHVwXG52YXIgS1RQb3J0bGV0ID0gZnVuY3Rpb24oZWxlbWVudElkLCBvcHRpb25zKSB7XG4gICAgLy8gTWFpbiBvYmplY3RcbiAgICB2YXIgdGhlID0gdGhpcztcbiAgICB2YXIgaW5pdCA9IGZhbHNlO1xuXG4gICAgLy8gR2V0IGVsZW1lbnQgb2JqZWN0XG4gICAgdmFyIGVsZW1lbnQgPSBLVFV0aWwuZ2V0KGVsZW1lbnRJZCk7XG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7XG5cbiAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIERlZmF1bHQgb3B0aW9uc1xuICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgYm9keVRvZ2dsZVNwZWVkOiA0MDAsXG4gICAgICAgIHRvb2x0aXBzOiB0cnVlLFxuICAgICAgICB0b29sczoge1xuICAgICAgICAgICAgdG9nZ2xlOiB7XG4gICAgICAgICAgICAgICAgY29sbGFwc2U6ICdDb2xsYXBzZScsXG4gICAgICAgICAgICAgICAgZXhwYW5kOiAnRXhwYW5kJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbG9hZDogJ1JlbG9hZCcsXG4gICAgICAgICAgICByZW1vdmU6ICdSZW1vdmUnLFxuICAgICAgICAgICAgZnVsbHNjcmVlbjoge1xuICAgICAgICAgICAgICAgIG9uOiAnRnVsbHNjcmVlbicsXG4gICAgICAgICAgICAgICAgb2ZmOiAnRXhpdCBGdWxsc2NyZWVuJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGlja3k6IHtcbiAgICAgICAgICAgIG9mZnNldDogMzAwLFxuICAgICAgICAgICAgekluZGV4OiAxMDFcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHZhciBQbHVnaW4gPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RcbiAgICAgICAgICovXG5cbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdwb3J0bGV0JykpIHtcbiAgICAgICAgICAgICAgICB0aGUgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BvcnRsZXQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gcmVzZXQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgbWVudVxuICAgICAgICAgICAgICAgIFBsdWdpbi5idWlsZCgpO1xuXG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWxlbWVudCkuc2V0KCdwb3J0bGV0JywgdGhlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSW5pdCBwb3J0bGV0XG4gICAgICAgICAqL1xuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGUuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB0aGUuZXZlbnRzID0gW107XG5cbiAgICAgICAgICAgIC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXG4gICAgICAgICAgICB0aGUub3B0aW9ucyA9IEtUVXRpbC5kZWVwRXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGUuaGVhZCA9IEtUVXRpbC5jaGlsZChlbGVtZW50LCAnLnBvcnRsZXRfX2hlYWQnKTtcbiAgICAgICAgICAgIHRoZS5mb290ID0gS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcucG9ydGxldF9fZm9vdCcpO1xuXG4gICAgICAgICAgICBpZiAoS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcucG9ydGxldF9fYm9keScpKSB7XG4gICAgICAgICAgICAgICAgdGhlLmJvZHkgPSBLVFV0aWwuY2hpbGQoZWxlbWVudCwgJy5wb3J0bGV0X19ib2R5Jyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEtUVXRpbC5jaGlsZChlbGVtZW50LCAnLmZvcm0nKSkge1xuICAgICAgICAgICAgICAgIHRoZS5ib2R5ID0gS1RVdGlsLmNoaWxkKGVsZW1lbnQsICcuZm9ybScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBCdWlsZCBGb3JtIFdpemFyZFxuICAgICAgICAgKi9cbiAgICAgICAgYnVpbGQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gUmVtb3ZlXG4gICAgICAgICAgICB2YXIgcmVtb3ZlID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD1yZW1vdmVdJyk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHJlbW92ZSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVsb2FkXG4gICAgICAgICAgICB2YXIgcmVsb2FkID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD1yZWxvYWRdJyk7XG4gICAgICAgICAgICBpZiAocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHJlbG9hZCwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVG9nZ2xlXG4gICAgICAgICAgICB2YXIgdG9nZ2xlID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD10b2dnbGVdJyk7XG4gICAgICAgICAgICBpZiAodG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KHRvZ2dsZSwgJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b2dnbGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy89PSBGdWxsc2NyZWVuXG4gICAgICAgICAgICB2YXIgZnVsbHNjcmVlbiA9IEtUVXRpbC5maW5kKHRoZS5oZWFkLCAnW2RhdGEta3Rwb3J0bGV0LXRvb2w9ZnVsbHNjcmVlbl0nKTtcbiAgICAgICAgICAgIGlmIChmdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmFkZEV2ZW50KGZ1bGxzY3JlZW4sICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uZnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBQbHVnaW4uc2V0dXBUb29sdGlwcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmFibGUgc3RpY2t0IG1vZGVcbiAgICAgICAgICovXG4gICAgICAgIGluaXRTdGlja3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGxhc3RTY3JvbGxUb3AgPSAwO1xuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoZS5vcHRpb25zLnN0aWNreS5vZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmICghdGhlLmhlYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cblx0ICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgUGx1Z2luLm9uU2Nyb2xsU3RpY2t5KTtcbiAgICAgICAgfSxcblxuXHQgICAgLyoqXG5cdCAgICAgKiBXaW5kb3cgc2Nyb2xsIGhhbmRsZSBldmVudCBmb3Igc3RpY2t5IHBvcnRsZXRcblx0ICAgICAqL1xuXHQgICAgb25TY3JvbGxTdGlja3k6IGZ1bmN0aW9uKGUpIHtcblx0XHQgICAgdmFyIG9mZnNldCA9IHRoZS5vcHRpb25zLnN0aWNreS5vZmZzZXQ7XG5cblx0XHQgICAgaWYoaXNOYU4ob2Zmc2V0KSkgcmV0dXJuO1xuXG5cdFx0ICAgIHZhciBzdCA9IEtUVXRpbC5nZXRTY3JvbGxUb3AoKTtcblxuXHRcdCAgICBpZiAoc3QgPj0gb2Zmc2V0ICYmIEtUVXRpbC5oYXNDbGFzcyhib2R5LCAncG9ydGxldC0tc3RpY2t5JykgPT09IGZhbHNlKSB7XG5cdFx0XHQgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignc3RpY2t5T24nKTtcblxuXHRcdFx0ICAgIEtUVXRpbC5hZGRDbGFzcyhib2R5LCAncG9ydGxldC0tc3RpY2t5Jyk7XG5cdFx0XHQgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsICdwb3J0bGV0LS1zdGlja3knKTtcblxuXHRcdFx0ICAgIFBsdWdpbi51cGRhdGVTdGlja3koKTtcblxuXHRcdCAgICB9IGVsc2UgaWYgKChzdCoxLjUpIDw9IG9mZnNldCAmJiBLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ3BvcnRsZXQtLXN0aWNreScpKSB7XG5cdFx0XHQgICAgLy8gYmFjayBzY3JvbGwgbW9kZVxuXHRcdFx0ICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3N0aWNreU9mZicpO1xuXG5cdFx0XHQgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksICdwb3J0bGV0LS1zdGlja3knKTtcblx0XHRcdCAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZWxlbWVudCwgJ3BvcnRsZXQtLXN0aWNreScpO1xuXG5cdFx0XHQgICAgUGx1Z2luLnJlc2V0U3RpY2t5KCk7XG5cdFx0ICAgIH1cblx0ICAgIH0sXG5cbiAgICAgICAgdXBkYXRlU3RpY2t5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghdGhlLmhlYWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0b3A7XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ3BvcnRsZXQtLXN0aWNreScpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi50b3AgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0b3AgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24udG9wLmNhbGwodGhpcywgdGhlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9wID0gcGFyc2VJbnQodGhlLm9wdGlvbnMuc3RpY2t5LnBvc2l0aW9uLnRvcCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxlZnQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHBhcnNlSW50KHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5sZWZ0LmNhbGwodGhpcywgdGhlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdCA9IHBhcnNlSW50KHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5sZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcmlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnN0aWNreS5wb3NpdGlvbi5yaWdodCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0ID0gcGFyc2VJbnQodGhlLm9wdGlvbnMuc3RpY2t5LnBvc2l0aW9uLnJpZ2h0LmNhbGwodGhpcywgdGhlKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSBwYXJzZUludCh0aGUub3B0aW9ucy5zdGlja3kucG9zaXRpb24ucmlnaHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWQsICd6LWluZGV4JywgdGhlLm9wdGlvbnMuc3RpY2t5LnpJbmRleCk7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZCwgJ3RvcCcsIHRvcCArICdweCcpO1xuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWQsICdsZWZ0JywgbGVmdCArICdweCcpO1xuICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmhlYWQsICdyaWdodCcsIHJpZ2h0ICsgJ3B4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXRTdGlja3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCF0aGUuaGVhZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhib2R5LCAncG9ydGxldC0tc3RpY2t5JykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZCwgJ3otaW5kZXgnLCAnJyk7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyh0aGUuaGVhZCwgJ3RvcCcsICcnKTtcbiAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5oZWFkLCAnbGVmdCcsICcnKTtcbiAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5oZWFkLCAncmlnaHQnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBwb3J0bGV0XG4gICAgICAgICAqL1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZVJlbW92ZScpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhib2R5LCAncG9ydGxldC0tZnVsbHNjcmVlbicpICYmIEtUVXRpbC5oYXNDbGFzcyhlbGVtZW50LCAncG9ydGxldC0tZnVsbHNjcmVlbicpKSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLmZ1bGxzY3JlZW4oJ29mZicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBQbHVnaW4ucmVtb3ZlVG9vbHRpcHMoKTtcblxuICAgICAgICAgICAgS1RVdGlsLnJlbW92ZShlbGVtZW50KTtcblxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYWZ0ZXJSZW1vdmUnKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0IGNvbnRlbnRcbiAgICAgICAgICovXG4gICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgICAgICAgdGhlLmJvZHkuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IGJvZHlcbiAgICAgICAgICovXG4gICAgICAgIGdldEJvZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoZS5ib2R5O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXQgc2VsZlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0U2VsZjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0dXAgdG9vbHRpcHNcbiAgICAgICAgICovXG4gICAgICAgIHNldHVwVG9vbHRpcHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoZS5vcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbGxhcHNlZCA9IEtUVXRpbC5oYXNDbGFzcyhlbGVtZW50LCAncG9ydGxldC0tY29sbGFwc2UnKSB8fCBLVFV0aWwuaGFzQ2xhc3MoZWxlbWVudCwgJ3BvcnRsZXQtLWNvbGxhcHNlZCcpO1xuICAgICAgICAgICAgICAgIHZhciBmdWxsc2NyZWVuT24gPSBLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ3BvcnRsZXQtLWZ1bGxzY3JlZW4nKSAmJiBLVFV0aWwuaGFzQ2xhc3MoZWxlbWVudCwgJ3BvcnRsZXQtLWZ1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgIC8vPT0gUmVtb3ZlXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZSA9IEtUVXRpbC5maW5kKHRoZS5oZWFkLCAnW2RhdGEta3Rwb3J0bGV0LXRvb2w9cmVtb3ZlXScpO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYWNlbWVudCA9IChmdWxsc2NyZWVuT24gPyAnYm90dG9tJyA6ICd0b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRpcCA9IG5ldyBUb29sdGlwKHJlbW92ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRoZS5vcHRpb25zLnRvb2xzLnJlbW92ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAoZnVsbHNjcmVlbk9uID8gJzAsMTBweCwwLDAnIDogJzAsNXB4JyksXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAnaG92ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcCB0b29sdGlwLXBvcnRsZXQgdG9vbHRpcCBicy10b29sdGlwLScgKyBwbGFjZW1lbnQgKyAnXCIgcm9sZT1cInRvb2x0aXBcIj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWFycm93IGFycm93XCI+PC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKHJlbW92ZSkuc2V0KCd0b29sdGlwJywgdGlwKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLz09IFJlbG9hZFxuICAgICAgICAgICAgICAgIHZhciByZWxvYWQgPSBLVFV0aWwuZmluZCh0aGUuaGVhZCwgJ1tkYXRhLWt0cG9ydGxldC10b29sPXJlbG9hZF0nKTtcbiAgICAgICAgICAgICAgICBpZiAocmVsb2FkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSAoZnVsbHNjcmVlbk9uID8gJ2JvdHRvbScgOiAndG9wJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXAgPSBuZXcgVG9vbHRpcChyZWxvYWQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aGUub3B0aW9ucy50b29scy5yZWxvYWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKGZ1bGxzY3JlZW5PbiA/ICcwLDEwcHgsMCwwJyA6ICcwLDVweCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogJ2hvdmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXAgdG9vbHRpcC1wb3J0bGV0IHRvb2x0aXAgYnMtdG9vbHRpcC0nICsgcGxhY2VtZW50ICsgJ1wiIHJvbGU9XCJ0b29sdGlwXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvdyBhcnJvd1wiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShyZWxvYWQpLnNldCgndG9vbHRpcCcsIHRpcCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy89PSBUb2dnbGVcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD10b2dnbGVdJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRvZ2dsZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGxhY2VtZW50ID0gKGZ1bGxzY3JlZW5PbiA/ICdib3R0b20nIDogJ3RvcCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGlwID0gbmV3IFRvb2x0aXAodG9nZ2xlLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogKGNvbGxhcHNlZCA/IHRoZS5vcHRpb25zLnRvb2xzLnRvZ2dsZS5leHBhbmQgOiB0aGUub3B0aW9ucy50b29scy50b2dnbGUuY29sbGFwc2UpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IChmdWxsc2NyZWVuT24gPyAnMCwxMHB4LDAsMCcgOiAnMCw1cHgnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICdob3ZlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwIHRvb2x0aXAtcG9ydGxldCB0b29sdGlwIGJzLXRvb2x0aXAtJyArIHBsYWNlbWVudCArICdcIiByb2xlPVwidG9vbHRpcFwiPlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3cgYXJyb3dcIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PidcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEodG9nZ2xlKS5zZXQoJ3Rvb2x0aXAnLCB0aXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vPT0gRnVsbHNjcmVlblxuICAgICAgICAgICAgICAgIHZhciBmdWxsc2NyZWVuID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD1mdWxsc2NyZWVuXScpO1xuICAgICAgICAgICAgICAgIGlmIChmdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwbGFjZW1lbnQgPSAoZnVsbHNjcmVlbk9uID8gJ2JvdHRvbScgOiAndG9wJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aXAgPSBuZXcgVG9vbHRpcChmdWxsc2NyZWVuLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogKGZ1bGxzY3JlZW5PbiA/IHRoZS5vcHRpb25zLnRvb2xzLmZ1bGxzY3JlZW4ub2ZmIDogdGhlLm9wdGlvbnMudG9vbHMuZnVsbHNjcmVlbi5vbiksXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogKGZ1bGxzY3JlZW5PbiA/ICcwLDEwcHgsMCwwJyA6ICcwLDVweCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogJ2hvdmVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInRvb2x0aXAgdG9vbHRpcC1wb3J0bGV0IHRvb2x0aXAgYnMtdG9vbHRpcC0nICsgcGxhY2VtZW50ICsgJ1wiIHJvbGU9XCJ0b29sdGlwXCI+XFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvdyBhcnJvd1wiPjwvZGl2PlxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj5cXFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+J1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShmdWxsc2NyZWVuKS5zZXQoJ3Rvb2x0aXAnLCB0aXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0dXAgdG9vbHRpcHNcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZVRvb2x0aXBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGUub3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgIC8vPT0gUmVtb3ZlXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZSA9IEtUVXRpbC5maW5kKHRoZS5oZWFkLCAnW2RhdGEta3Rwb3J0bGV0LXRvb2w9cmVtb3ZlXScpO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmUgJiYgS1RVdGlsLmRhdGEocmVtb3ZlKS5oYXMoJ3Rvb2x0aXAnKSkge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShyZW1vdmUpLmdldCgndG9vbHRpcCcpLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLz09IFJlbG9hZFxuICAgICAgICAgICAgICAgIHZhciByZWxvYWQgPSBLVFV0aWwuZmluZCh0aGUuaGVhZCwgJ1tkYXRhLWt0cG9ydGxldC10b29sPXJlbG9hZF0nKTtcbiAgICAgICAgICAgICAgICBpZiAocmVsb2FkICYmIEtUVXRpbC5kYXRhKHJlbG9hZCkuaGFzKCd0b29sdGlwJykpIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEocmVsb2FkKS5nZXQoJ3Rvb2x0aXAnKS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy89PSBUb2dnbGVcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD10b2dnbGVdJyk7XG4gICAgICAgICAgICAgICAgaWYgKHRvZ2dsZSAmJiBLVFV0aWwuZGF0YSh0b2dnbGUpLmhhcygndG9vbHRpcCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKHRvZ2dsZSkuZ2V0KCd0b29sdGlwJykuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vPT0gRnVsbHNjcmVlblxuICAgICAgICAgICAgICAgIHZhciBmdWxsc2NyZWVuID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD1mdWxsc2NyZWVuXScpO1xuICAgICAgICAgICAgICAgIGlmIChmdWxsc2NyZWVuICYmIEtUVXRpbC5kYXRhKGZ1bGxzY3JlZW4pLmhhcygndG9vbHRpcCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKGZ1bGxzY3JlZW4pLmdldCgndG9vbHRpcCcpLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgcmVsb2FkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3JlbG9hZCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUb2dnbGVcbiAgICAgICAgICovXG4gICAgICAgIHRvZ2dsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKGVsZW1lbnQsICdwb3J0bGV0LS1jb2xsYXBzZScpIHx8IEtUVXRpbC5oYXNDbGFzcyhlbGVtZW50LCAncG9ydGxldC0tY29sbGFwc2VkJykpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4uZXhwYW5kKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFBsdWdpbi5jb2xsYXBzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb2xsYXBzZVxuICAgICAgICAgKi9cbiAgICAgICAgY29sbGFwc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZUNvbGxhcHNlJykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLVFV0aWwuc2xpZGVVcCh0aGUuYm9keSwgdGhlLm9wdGlvbnMuYm9keVRvZ2dsZVNwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckNvbGxhcHNlJyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsICdwb3J0bGV0LS1jb2xsYXBzZScpO1xuXG4gICAgICAgICAgICB2YXIgdG9nZ2xlID0gS1RVdGlsLmZpbmQodGhlLmhlYWQsICdbZGF0YS1rdHBvcnRsZXQtdG9vbD10b2dnbGVdJyk7XG4gICAgICAgICAgICBpZiAodG9nZ2xlICYmIEtUVXRpbC5kYXRhKHRvZ2dsZSkuaGFzKCd0b29sdGlwJykpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YSh0b2dnbGUpLmdldCgndG9vbHRpcCcpLnVwZGF0ZVRpdGxlQ29udGVudCh0aGUub3B0aW9ucy50b29scy50b2dnbGUuZXhwYW5kKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXhwYW5kXG4gICAgICAgICAqL1xuICAgICAgICBleHBhbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZUV4cGFuZCcpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLnNsaWRlRG93bih0aGUuYm9keSwgdGhlLm9wdGlvbnMuYm9keVRvZ2dsZVNwZWVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckV4cGFuZCcpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCAncG9ydGxldC0tY29sbGFwc2UnKTtcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCAncG9ydGxldC0tY29sbGFwc2VkJyk7XG5cbiAgICAgICAgICAgIHZhciB0b2dnbGUgPSBLVFV0aWwuZmluZCh0aGUuaGVhZCwgJ1tkYXRhLWt0cG9ydGxldC10b29sPXRvZ2dsZV0nKTtcbiAgICAgICAgICAgIGlmICh0b2dnbGUgJiYgS1RVdGlsLmRhdGEodG9nZ2xlKS5oYXMoJ3Rvb2x0aXAnKSkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5kYXRhKHRvZ2dsZSkuZ2V0KCd0b29sdGlwJykudXBkYXRlVGl0bGVDb250ZW50KHRoZS5vcHRpb25zLnRvb2xzLnRvZ2dsZS5jb2xsYXBzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGZ1bGxzY3JlZW5cbiAgICAgICAgICovXG4gICAgICAgIGZ1bGxzY3JlZW46IGZ1bmN0aW9uKG1vZGUpIHtcbiAgICAgICAgICAgIHZhciBkID0ge307XG4gICAgICAgICAgICB2YXIgc3BlZWQgPSAzMDA7XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSAnb2ZmJyB8fCAoS1RVdGlsLmhhc0NsYXNzKGJvZHksICdwb3J0bGV0LS1mdWxsc2NyZWVuJykgJiYgS1RVdGlsLmhhc0NsYXNzKGVsZW1lbnQsICdwb3J0bGV0LS1mdWxsc2NyZWVuJykpKSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlRnVsbHNjcmVlbk9mZicpO1xuXG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGJvZHksICdwb3J0bGV0LS1mdWxsc2NyZWVuJyk7XG4gICAgICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdwb3J0bGV0LS1mdWxsc2NyZWVuJyk7XG5cbiAgICAgICAgICAgICAgICBQbHVnaW4ucmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgICAgICBQbHVnaW4uc2V0dXBUb29sdGlwcygpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoZS5mb290KSB7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmJvZHksICdtYXJnaW4tYm90dG9tJywgJycpO1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5mb290LCAnbWFyZ2luLXRvcCcsICcnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckZ1bGxzY3JlZW5PZmYnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlRnVsbHNjcmVlbk9uJyk7XG5cbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoZWxlbWVudCwgJ3BvcnRsZXQtLWZ1bGxzY3JlZW4nKTtcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoYm9keSwgJ3BvcnRsZXQtLWZ1bGxzY3JlZW4nKTtcblxuICAgICAgICAgICAgICAgIFBsdWdpbi5yZW1vdmVUb29sdGlwcygpO1xuICAgICAgICAgICAgICAgIFBsdWdpbi5zZXR1cFRvb2x0aXBzKCk7XG5cblxuICAgICAgICAgICAgICAgIGlmICh0aGUuZm9vdCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0MSA9IHBhcnNlSW50KEtUVXRpbC5jc3ModGhlLmZvb3QsICdoZWlnaHQnKSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoZWlnaHQyID0gcGFyc2VJbnQoS1RVdGlsLmNzcyh0aGUuZm9vdCwgJ2hlaWdodCcpKSArIHBhcnNlSW50KEtUVXRpbC5jc3ModGhlLmhlYWQsICdoZWlnaHQnKSk7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3ModGhlLmJvZHksICdtYXJnaW4tYm90dG9tJywgaGVpZ2h0MSArICdweCcpO1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKHRoZS5mb290LCAnbWFyZ2luLXRvcCcsICctJyArIGhlaWdodDIgKyAncHgnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlckZ1bGxzY3JlZW5PbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgZXZlbnRUcmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAvL0tUVXRpbC50cmlnZ2VyQ3VzdG9tRXZlbnQobmFtZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoZS5ldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSB0aGUuZXZlbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5uYW1lID09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZmlyZWQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUuZXZlbnRzW2ldLmZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlci5jYWxsKHRoaXMsIHRoZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkRXZlbnQ6IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIsIG9uZSkge1xuICAgICAgICAgICAgdGhlLmV2ZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGhhbmRsZXIsXG4gICAgICAgICAgICAgICAgb25lOiBvbmUsXG4gICAgICAgICAgICAgICAgZmlyZWQ6IGZhbHNlXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vICoqIFB1YmxpYyBNZXRob2RzICoqIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8qKlxuICAgICAqIFNldCBkZWZhdWx0IG9wdGlvbnNcbiAgICAgKi9cblxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgZGVmYXVsdE9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcG9ydGxldFxuICAgICAqIEByZXR1cm5zIHtLVFBvcnRsZXR9XG4gICAgICovXG4gICAgdGhlLnJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnJlbW92ZShodG1sKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHBvcnRsZXRcbiAgICAgKiBAcmV0dXJucyB7S1RQb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS5pbml0U3RpY2t5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uaW5pdFN0aWNreSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcG9ydGxldFxuICAgICAqIEByZXR1cm5zIHtLVFBvcnRsZXR9XG4gICAgICovXG4gICAgdGhlLnVwZGF0ZVN0aWNreSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLnVwZGF0ZVN0aWNreSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgcG9ydGxldFxuICAgICAqIEByZXR1cm5zIHtLVFBvcnRsZXR9XG4gICAgICovXG4gICAgdGhlLnJlc2V0U3RpY2t5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4ucmVzZXRTdGlja3koKTtcbiAgICB9O1xuXG5cdC8qKlxuXHQgKiBEZXN0cm95IHN0aWNreSBwb3J0bGV0XG5cdCAqL1xuXHR0aGUuZGVzdHJveVN0aWNreSA9IGZ1bmN0aW9uKCkge1xuXHRcdFBsdWdpbi5yZXNldFN0aWNreSgpO1xuXHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBQbHVnaW4ub25TY3JvbGxTdGlja3kpO1xuXHR9O1xuXG4gICAgLyoqXG4gICAgICogUmVsb2FkIHBvcnRsZXRcbiAgICAgKiBAcmV0dXJucyB7S1RQb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS5yZWxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5yZWxvYWQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IHBvcnRsZXQgY29udGVudFxuICAgICAqIEByZXR1cm5zIHtLVFBvcnRsZXR9XG4gICAgICovXG4gICAgdGhlLnNldENvbnRlbnQgPSBmdW5jdGlvbihodG1sKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uc2V0Q29udGVudChodG1sKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVG9nZ2xlIHBvcnRsZXRcbiAgICAgKiBAcmV0dXJucyB7S1RQb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS50b2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi50b2dnbGUoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29sbGFwc2UgcG9ydGxldFxuICAgICAqIEByZXR1cm5zIHtLVFBvcnRsZXR9XG4gICAgICovXG4gICAgdGhlLmNvbGxhcHNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uY29sbGFwc2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRXhwYW5kIHBvcnRsZXRcbiAgICAgKiBAcmV0dXJucyB7S1RQb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS5leHBhbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5leHBhbmQoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRnVsbHNjcmVlbiBwb3J0bGV0XG4gICAgICogQHJldHVybnMge01Qb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS5mdWxsc2NyZWVuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBQbHVnaW4uZnVsbHNjcmVlbignb24nKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRnVsbHNjcmVlbiBwb3J0bGV0XG4gICAgICogQHJldHVybnMge01Qb3J0bGV0fVxuICAgICAqL1xuICAgIHRoZS51bkZ1bGxzY3JlZW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5mdWxsc2NyZWVuKCdvZmYnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHBvcnRsZXRib2R5XG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICB0aGUuZ2V0Qm9keSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmdldEJvZHkoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHBvcnRsZXRib2R5XG4gICAgICogQHJldHVybnMge2pRdWVyeX1cbiAgICAgKi9cbiAgICB0aGUuZ2V0U2VsZiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmdldFNlbGYoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXR0YWNoIGV2ZW50XG4gICAgICovXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcbiAgICAgKi9cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXG4gICAgUGx1Z2luLmNvbnN0cnVjdC5hcHBseSh0aGUsIFtvcHRpb25zXSk7XG5cbiAgICByZXR1cm4gdGhlO1xufTtcblxuLy8gd2VicGFjayBzdXBwb3J0XG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gS1RQb3J0bGV0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgS1RTY3JvbGx0b3AgPSBmdW5jdGlvbihlbGVtZW50SWQsIG9wdGlvbnMpIHtcbiAgICAvLyBNYWluIG9iamVjdFxuICAgIHZhciB0aGUgPSB0aGlzO1xuICAgIHZhciBpbml0ID0gZmFsc2U7XG5cbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcbiAgICB2YXIgZWxlbWVudCA9IEtUVXRpbC5nZXQoZWxlbWVudElkKTtcbiAgICB2YXIgYm9keSA9IEtUVXRpbC5nZXQoJ2JvZHknKTtcblxuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICBvZmZzZXQ6IDMwMCxcbiAgICAgICAgc3BlZWQ6IDYwMCxcbiAgICAgICAgdG9nZ2xlQ2xhc3M6ICdzY3JvbGx0b3AtLW9uJ1xuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUHJpdmF0ZSBNZXRob2RzICAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIHZhciBQbHVnaW4gPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSdW4gcGx1Z2luXG4gICAgICAgICAqIEByZXR1cm5zIHttc2Nyb2xsdG9wfVxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoS1RVdGlsLmRhdGEoZWxlbWVudCkuaGFzKCdzY3JvbGx0b3AnKSkge1xuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgnc2Nyb2xsdG9wJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IHNjcm9sbHRvcFxuICAgICAgICAgICAgICAgIFBsdWdpbi5pbml0KG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgLy8gYnVpbGQgc2Nyb2xsdG9wXG4gICAgICAgICAgICAgICAgUGx1Z2luLmJ1aWxkKCk7XG5cbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ3Njcm9sbHRvcCcsIHRoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0aGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc3Vic2Nyb2xsdG9wIGNsaWNrIHRvZ2dsZVxuICAgICAgICAgKiBAcmV0dXJucyB7bXNjcm9sbHRvcH1cbiAgICAgICAgICovXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoZS5ldmVudHMgPSBbXTtcblxuICAgICAgICAgICAgLy8gbWVyZ2UgZGVmYXVsdCBhbmQgdXNlciBkZWZpbmVkIG9wdGlvbnNcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSxcblxuICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBoYW5kbGUgd2luZG93IHNjcm9sbFxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZXxpUGFkfGlQb2QvaSkpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLmhhbmRsZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oYW5kbGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGxlYXZlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi5oYW5kbGUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBQbHVnaW4uaGFuZGxlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBidXR0b24gY2xpY2tcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChlbGVtZW50LCAnY2xpY2snLCBQbHVnaW4uc2Nyb2xsKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlcyBzY3JvbGx0b3AgY2xpY2sgc2Nyb2xsVG9wXG4gICAgICAgICAqL1xuICAgICAgICBoYW5kbGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHBvcyA9IHdpbmRvdy5wYWdlWU9mZnNldDsgLy8gY3VycmVudCB2ZXJ0aWNhbCBwb3NpdGlvblxuICAgICAgICAgICAgaWYgKHBvcyA+IHRoZS5vcHRpb25zLm9mZnNldCkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhib2R5LCB0aGUub3B0aW9ucy50b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhib2R5LCB0aGUub3B0aW9ucy50b2dnbGVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhhbmRsZXMgc2Nyb2xsdG9wIGNsaWNrIHNjcm9sbFRvcFxuICAgICAgICAgKi9cbiAgICAgICAgc2Nyb2xsOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIEtUVXRpbC5zY3JvbGxUb3AoMCwgdGhlLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyaWdnZXIgZXZlbnRzXG4gICAgICAgICAqL1xuICAgICAgICBldmVudFRyaWdnZXI6IGZ1bmN0aW9uKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlLmV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IHRoZS5ldmVudHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm5hbWUgPT0gbmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQub25lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZS5ldmVudHNbaV0uZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudC5oYW5kbGVyLmNhbGwodGhpcywgdGhlLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUsIGFyZ3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcbiAgICAgICAgICAgIHRoZS5ldmVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxuICAgICAgICAgICAgICAgIG9uZTogb25lLFxuICAgICAgICAgICAgICAgIGZpcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyAqKiBQdWJsaWMgTWV0aG9kcyAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAvKipcbiAgICAgKiBTZXQgZGVmYXVsdCBvcHRpb25zXG4gICAgICovXG5cbiAgICB0aGUuc2V0RGVmYXVsdHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGRlZmF1bHRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHN1YnNjcm9sbHRvcCBtb2RlXG4gICAgICovXG4gICAgdGhlLm9uID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXQgc2Nyb2xsdG9wIGNvbnRlbnRcbiAgICAgKiBAcmV0dXJucyB7bXNjcm9sbHRvcH1cbiAgICAgKi9cbiAgICB0aGUub25lID0gZnVuY3Rpb24obmFtZSwgaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gKiogUGx1Z2luIENvbnN0cnVjdGlvbiAqKiAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFJ1biBwbHVnaW5cbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcblxuICAgIC8vIEluaXQgZG9uZVxuICAgIGluaXQgPSB0cnVlO1xuXG4gICAgLy8gUmV0dXJuIHBsdWdpbiBpbnN0YW5jZVxuICAgIHJldHVybiB0aGU7XG59O1xuXG4vLyB3ZWJwYWNrIHN1cHBvcnRcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVFNjcm9sbHRvcDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gcGx1Z2luIHNldHVwXHJcbnZhciBLVFRvZ2dsZSA9IGZ1bmN0aW9uKGVsZW1lbnRJZCwgb3B0aW9ucykge1xyXG4gICAgLy8gTWFpbiBvYmplY3RcclxuICAgIHZhciB0aGUgPSB0aGlzO1xyXG4gICAgdmFyIGluaXQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBHZXQgZWxlbWVudCBvYmplY3RcclxuICAgIHZhciBlbGVtZW50ID0gS1RVdGlsLmdldChlbGVtZW50SWQpO1xyXG4gICAgdmFyIGJvZHkgPSBLVFV0aWwuZ2V0KCdib2R5Jyk7ICBcclxuXHJcbiAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXHJcbiAgICB2YXIgZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgICAgICAgdG9nZ2xlclN0YXRlOiAnJyxcclxuICAgICAgICB0YXJnZXRTdGF0ZTogJydcclxuICAgIH07ICAgIFxyXG5cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFByaXZhdGUgTWV0aG9kcyAgKiogLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICB2YXIgUGx1Z2luID0ge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvbnN0cnVjdFxyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsZW1lbnQpLmhhcygndG9nZ2xlJykpIHtcclxuICAgICAgICAgICAgICAgIHRoZSA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgndG9nZ2xlJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyByZXNldCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uaW5pdChvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBidWlsZCBtZW51XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4uYnVpbGQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ3RvZ2dsZScsIHRoZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGU7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyBzdWJ0b2dnbGUgY2xpY2sgdG9nZ2xlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24ob3B0aW9ucykge1xyXG4gICAgICAgICAgICB0aGUuZWxlbWVudCA9IGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIHRoZS5ldmVudHMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1lcmdlIGRlZmF1bHQgYW5kIHVzZXIgZGVmaW5lZCBvcHRpb25zXHJcbiAgICAgICAgICAgIHRoZS5vcHRpb25zID0gS1RVdGlsLmRlZXBFeHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAgIHRoZS50YXJnZXQgPSBLVFV0aWwuZ2V0KHRoZS5vcHRpb25zLnRhcmdldCk7XHJcbiAgICAgICAgICAgIHRoZS50YXJnZXRTdGF0ZSA9IHRoZS5vcHRpb25zLnRhcmdldFN0YXRlO1xyXG4gICAgICAgICAgICB0aGUudG9nZ2xlclN0YXRlID0gdGhlLm9wdGlvbnMudG9nZ2xlclN0YXRlO1xyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gS1RVdGlsLmhhc0NsYXNzZXModGhlLnRhcmdldCwgdGhlLnRhcmdldFN0YXRlKSA/ICdvbicgOiAnb2ZmJztcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTZXR1cCB0b2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICBidWlsZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChlbGVtZW50LCAnbW91c2V1cCcsIFBsdWdpbi50b2dnbGUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGFuZGxlcyBvZmZjYW52YXMgY2xpY2sgdG9nZ2xlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2JlZm9yZVRvZ2dsZScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS5zdGF0ZSA9PSAnb2ZmJykge1xyXG4gICAgICAgICAgICAgICAgUGx1Z2luLnRvZ2dsZU9uKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBQbHVnaW4udG9nZ2xlT2ZmKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyVG9nZ2xlJyk7XHJcblxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEhhbmRsZXMgdG9nZ2xlIGNsaWNrIHRvZ2dsZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRvZ2dsZU9uOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcignYmVmb3JlT24nKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0aGUudGFyZ2V0LCB0aGUudGFyZ2V0U3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS50b2dnbGVyU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbGVtZW50LCB0aGUudG9nZ2xlclN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gJ29uJztcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ2FmdGVyT24nKTtcclxuXHJcbiAgICAgICAgICAgIFBsdWdpbi5ldmVudFRyaWdnZXIoJ3RvZ2dsZScpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIYW5kbGVzIHRvZ2dsZSBjbGljayB0b2dnbGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0b2dnbGVPZmY6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdiZWZvcmVPZmYnKTtcclxuXHJcbiAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0aGUudGFyZ2V0LCB0aGUudGFyZ2V0U3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoZS50b2dnbGVyU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhlbGVtZW50LCB0aGUudG9nZ2xlclN0YXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhlLnN0YXRlID0gJ29mZic7XHJcblxyXG4gICAgICAgICAgICBQbHVnaW4uZXZlbnRUcmlnZ2VyKCdhZnRlck9mZicpO1xyXG5cclxuICAgICAgICAgICAgUGx1Z2luLmV2ZW50VHJpZ2dlcigndG9nZ2xlJyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRyaWdnZXIgZXZlbnRzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZXZlbnRUcmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlLmV2ZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gdGhlLmV2ZW50c1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQubmFtZSA9PSBuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50Lm9uZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5maXJlZCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlLmV2ZW50c1tpXS5maXJlZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50LmhhbmRsZXIuY2FsbCh0aGlzLCB0aGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFkZEV2ZW50OiBmdW5jdGlvbihuYW1lLCBoYW5kbGVyLCBvbmUpIHtcclxuICAgICAgICAgICAgdGhlLmV2ZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyOiBoYW5kbGVyLFxyXG4gICAgICAgICAgICAgICAgb25lOiBvbmUsXHJcbiAgICAgICAgICAgICAgICBmaXJlZDogZmFsc2VcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICoqIFB1YmxpYyBNZXRob2RzICoqIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IGRlZmF1bHQgb3B0aW9ucyBcclxuICAgICAqL1xyXG5cclxuICAgIHRoZS5zZXREZWZhdWx0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICBkZWZhdWx0T3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHRvZ2dsZSBzdGF0ZSBcclxuICAgICAqL1xyXG4gICAgdGhlLmdldFN0YXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoZS5zdGF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUb2dnbGUgXHJcbiAgICAgKi9cclxuICAgIHRoZS50b2dnbGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnRvZ2dsZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSBvbiBcclxuICAgICAqL1xyXG4gICAgdGhlLnRvZ2dsZU9uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi50b2dnbGVPbigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRvZ2dsZSBvZmYgXHJcbiAgICAgKi9cclxuICAgIHRoZS50b2dnbGVPZmYgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLnRvZ2dsZU9mZigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0dGFjaCBldmVudFxyXG4gICAgICogQHJldHVybnMge0tUVG9nZ2xlfVxyXG4gICAgICovXHJcbiAgICB0aGUub24gPSBmdW5jdGlvbihuYW1lLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIFBsdWdpbi5hZGRFdmVudChuYW1lLCBoYW5kbGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBdHRhY2ggZXZlbnQgdGhhdCB3aWxsIGJlIGZpcmVkIG9uY2VcclxuICAgICAqIEByZXR1cm5zIHtLVFRvZ2dsZX1cclxuICAgICAqL1xyXG4gICAgdGhlLm9uZSA9IGZ1bmN0aW9uKG5hbWUsIGhhbmRsZXIpIHtcclxuICAgICAgICByZXR1cm4gUGx1Z2luLmFkZEV2ZW50KG5hbWUsIGhhbmRsZXIsIHRydWUpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBDb25zdHJ1Y3QgcGx1Z2luXHJcbiAgICBQbHVnaW4uY29uc3RydWN0LmFwcGx5KHRoZSwgW29wdGlvbnNdKTtcclxuXHJcbiAgICByZXR1cm4gdGhlO1xyXG59O1xyXG5cclxuLy8gd2VicGFjayBzdXBwb3J0XHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUVG9nZ2xlO1xyXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBjbGFzcyBLVFV0aWwgIGJhc2UgdXRpbGl6ZSBjbGFzcyB0aGF0IHByaXZpZGVzIGhlbHBlciBmdW5jdGlvbnNcbiAqL1xuXG4vLyBQb2x5ZmlsbHNcbi8qKlxuICogRWxlbWVudC5tYXRjaGVzKCkgcG9seWZpbGwgKHNpbXBsZSB2ZXJzaW9uKVxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvbWF0Y2hlcyNQb2x5ZmlsbFxuICovXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcblx0RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBFbGVtZW50LmNsb3Nlc3QoKSBwb2x5ZmlsbFxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0VsZW1lbnQvY2xvc2VzdCNQb2x5ZmlsbFxuICovXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLmNsb3Nlc3QpIHtcblx0aWYgKCFFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzKSB7XG5cdFx0RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcyA9IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3Rvcjtcblx0fVxuXHRFbGVtZW50LnByb3RvdHlwZS5jbG9zZXN0ID0gZnVuY3Rpb24gKHMpIHtcblx0XHR2YXIgZWwgPSB0aGlzO1xuXHRcdHZhciBhbmNlc3RvciA9IHRoaXM7XG5cdFx0aWYgKCFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZWwpKSByZXR1cm4gbnVsbDtcblx0XHRkbyB7XG5cdFx0XHRpZiAoYW5jZXN0b3IubWF0Y2hlcyhzKSkgcmV0dXJuIGFuY2VzdG9yO1xuXHRcdFx0YW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnRFbGVtZW50O1xuXHRcdH0gd2hpbGUgKGFuY2VzdG9yICE9PSBudWxsKTtcblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcbn1cblxuLyoqXG4gKiBDaGlsZE5vZGUucmVtb3ZlKCkgcG9seWZpbGxcbiAqIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbS9yZW1vdmluZy1hbi1lbGVtZW50LWZyb20tdGhlLWRvbS10aGUtZXM2LXdheS9cbiAqIEBhdXRob3IgQ2hyaXMgRmVyZGluYW5kaVxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbihmdW5jdGlvbiAoZWxlbSkge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IGVsZW0ubGVuZ3RoOyBpKyspIHtcblx0XHRpZiAoIXdpbmRvd1tlbGVtW2ldXSB8fCAncmVtb3ZlJyBpbiB3aW5kb3dbZWxlbVtpXV0ucHJvdG90eXBlKSBjb250aW51ZTtcblx0XHR3aW5kb3dbZWxlbVtpXV0ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTtcblx0XHR9O1xuXHR9XG59KShbJ0VsZW1lbnQnLCAnQ2hhcmFjdGVyRGF0YScsICdEb2N1bWVudFR5cGUnXSk7XG5cbi8vXG4vLyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcG9seWZpbGwgYnkgRXJpayBNw7ZsbGVyLlxuLy8gIFdpdGggZml4ZXMgZnJvbSBQYXVsIElyaXNoIGFuZCBUaW5vIFppamRlbFxuLy9cbi8vICBodHRwOi8vcGF1bGlyaXNoLmNvbS8yMDExL3JlcXVlc3RhbmltYXRpb25mcmFtZS1mb3Itc21hcnQtYW5pbWF0aW5nL1xuLy8gIGh0dHA6Ly9teS5vcGVyYS5jb20vZW1vbGxlci9ibG9nLzIwMTEvMTIvMjAvcmVxdWVzdGFuaW1hdGlvbmZyYW1lLWZvci1zbWFydC1lci1hbmltYXRpbmdcbi8vXG4vLyAgTUlUIGxpY2Vuc2Vcbi8vXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxhc3RUaW1lID0gMDtcbiAgICB2YXIgdmVuZG9ycyA9IFsnd2Via2l0JywgJ21veiddO1xuICAgIGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93W3ZlbmRvcnNbeF0gKyAnUmVxdWVzdEFuaW1hdGlvbkZyYW1lJ107XG4gICAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSA9XG4gICAgICAgICAgICB3aW5kb3dbdmVuZG9yc1t4XSArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddO1xuICAgIH1cblxuICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSlcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgY3VyclRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpO1xuICAgICAgICAgICAgdmFyIGlkID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTtcbiAgICAgICAgICAgIH0sIHRpbWVUb0NhbGwpO1xuICAgICAgICAgICAgbGFzdFRpbWUgPSBjdXJyVGltZSArIHRpbWVUb0NhbGw7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH07XG5cbiAgICBpZiAoIXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSlcbiAgICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgICAgIH07XG59KCkpO1xuXG4vLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9qc2Vyei9qc19waWVjZS9ibG9iL21hc3Rlci9ET00vUGFyZW50Tm9kZS9wcmVwZW5kKCkvcHJlcGVuZCgpLm1kXG4oZnVuY3Rpb24oYXJyKSB7XG4gICAgYXJyLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgncHJlcGVuZCcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0ZW0sICdwcmVwZW5kJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFyZ0FyciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyksXG4gICAgICAgICAgICAgICAgICAgIGRvY0ZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAgICAgICAgICAgICBhcmdBcnIuZm9yRWFjaChmdW5jdGlvbihhcmdJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpc05vZGUgPSBhcmdJdGVtIGluc3RhbmNlb2YgTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgZG9jRnJhZy5hcHBlbmRDaGlsZChpc05vZGUgPyBhcmdJdGVtIDogZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGFyZ0l0ZW0pKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEJlZm9yZShkb2NGcmFnLCB0aGlzLmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pKFtFbGVtZW50LnByb3RvdHlwZSwgRG9jdW1lbnQucHJvdG90eXBlLCBEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZV0pO1xuXG4vLyBHbG9iYWwgdmFyaWFibGVzXG53aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZSA9IHt9O1xud2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCA9IDA7XG53aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVycyA9IHt9O1xuXG52YXIgS1RVdGlsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc2l6ZUhhbmRsZXJzID0gW107XG5cbiAgICAvKiogQHR5cGUge29iamVjdH0gYnJlYWtwb2ludHMgVGhlIGRldmljZSB3aWR0aCBicmVha3BvaW50cyAqKi9cbiAgICB2YXIgYnJlYWtwb2ludHMgPSB7XG4gICAgICAgIHNtOiA1NDQsIC8vIFNtYWxsIHNjcmVlbiAvIHBob25lXG4gICAgICAgIG1kOiA3NjgsIC8vIE1lZGl1bSBzY3JlZW4gLyB0YWJsZXRcbiAgICAgICAgbGc6IDEwMjQsIC8vIExhcmdlIHNjcmVlbiAvIGRlc2t0b3BcbiAgICAgICAgeGw6IDEyMDAgLy8gRXh0cmEgbGFyZ2Ugc2NyZWVuIC8gd2lkZSBkZXNrdG9wXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSB3aW5kb3cgcmVzaXplIGV2ZW50IHdpdGggc29tZVxuICAgICAqIGRlbGF5IHRvIGF0dGFjaCBldmVudCBoYW5kbGVycyB1cG9uIHJlc2l6ZSBjb21wbGV0ZVxuICAgICAqL1xuICAgIHZhciBfd2luZG93UmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgX3J1blJlc2l6ZUhhbmRsZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyByZWluaXRpYWxpemUgb3RoZXIgc3Vic2NyaWJlZCBlbGVtZW50c1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNpemVIYW5kbGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBlYWNoID0gcmVzaXplSGFuZGxlcnNbaV07XG4gICAgICAgICAgICAgICAgZWFjaC5jYWxsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRpbWVvdXQgPSBmYWxzZTsgLy8gaG9sZGVyIGZvciB0aW1lb3V0IGlkXG4gICAgICAgIHZhciBkZWxheSA9IDI1MDsgLy8gZGVsYXkgYWZ0ZXIgZXZlbnQgaXMgXCJjb21wbGV0ZVwiIHRvIHJ1biBjYWxsYmFja1xuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF9ydW5SZXNpemVIYW5kbGVycygpO1xuICAgICAgICAgICAgfSwgZGVsYXkpOyAvLyB3YWl0IDUwbXMgdW50aWwgd2luZG93IHJlc2l6ZSBmaW5pc2hlcy5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGFzcyBtYWluIGluaXRpYWxpemVyLlxuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucy5cbiAgICAgICAgICogQHJldHVybnMgbnVsbFxuICAgICAgICAgKi9cbiAgICAgICAgLy9tYWluIGZ1bmN0aW9uIHRvIGluaXRpYXRlIHRoZSB0aGVtZVxuICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgYnJlYWtwb2ludHMgPSBvcHRpb25zLmJyZWFrcG9pbnRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfd2luZG93UmVzaXplSGFuZGxlcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRzIHdpbmRvdyByZXNpemUgZXZlbnQgaGFuZGxlci5cbiAgICAgICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgICAqL1xuICAgICAgICBhZGRSZXNpemVIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgcmVzaXplSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZXMgd2luZG93IHJlc2l6ZSBldmVudCBoYW5kbGVyLlxuICAgICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZVJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc2l6ZUhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrID09PSByZXNpemVIYW5kbGVyc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzaXplSGFuZGxlcnNbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUcmlnZ2VyIHdpbmRvdyByZXNpemUgaGFuZGxlcnMuXG4gICAgICAgICAqL1xuICAgICAgICBydW5SZXNpemVIYW5kbGVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBfcnVuUmVzaXplSGFuZGxlcnMoKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXNpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZihFdmVudCkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoJ3Jlc2l6ZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gZm9yIElFIGFuZCBvdGhlciBvbGQgYnJvd3NlcnNcbiAgICAgICAgICAgICAgICAvLyBjYXVzZXMgZGVwcmVjYXRpb24gd2FybmluZyBvbiBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgICAgICAgICB2YXIgZXZ0ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KCdVSUV2ZW50cycpO1xuICAgICAgICAgICAgICAgIGV2dC5pbml0VUlFdmVudCgncmVzaXplJywgdHJ1ZSwgZmFsc2UsIHdpbmRvdywgMCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0IEdFVCBwYXJhbWV0ZXIgdmFsdWUgZnJvbSBVUkwuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXJhbU5hbWUgUGFyYW1ldGVyIG5hbWUuXG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICBnZXRVUkxQYXJhbTogZnVuY3Rpb24ocGFyYW1OYW1lKSB7XG4gICAgICAgICAgICB2YXIgc2VhcmNoU3RyaW5nID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgICAgICAgICAgICAgaSwgdmFsLCBwYXJhbXMgPSBzZWFyY2hTdHJpbmcuc3BsaXQoXCImXCIpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gcGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsWzBdID09IHBhcmFtTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5lc2NhcGUodmFsWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBjdXJyZW50IGRldmljZSBpcyBtb2JpbGUgdG91Y2guXG4gICAgICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAgICAgKi9cbiAgICAgICAgaXNNb2JpbGVEZXZpY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmdldFZpZXdQb3J0KCkud2lkdGggPCB0aGlzLmdldEJyZWFrcG9pbnQoJ2xnJykgPyB0cnVlIDogZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBjdXJyZW50IGRldmljZSBpcyBkZXNrdG9wLlxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGlzRGVza3RvcERldmljZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkgPyBmYWxzZSA6IHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgYnJvd3NlciB3aW5kb3cgdmlld3BvcnQgc2l6ZS4gUmVmOlxuICAgICAgICAgKiBodHRwOi8vYW5keWxhbmd0b24uY28udWsvYXJ0aWNsZXMvamF2YXNjcmlwdC9nZXQtdmlld3BvcnQtc2l6ZS1qYXZhc2NyaXB0L1xuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0Vmlld1BvcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGUgPSB3aW5kb3csXG4gICAgICAgICAgICAgICAgYSA9ICdpbm5lcic7XG4gICAgICAgICAgICBpZiAoISgnaW5uZXJXaWR0aCcgaW4gd2luZG93KSkge1xuICAgICAgICAgICAgICAgIGEgPSAnY2xpZW50JztcbiAgICAgICAgICAgICAgICBlID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGVbYSArICdXaWR0aCddLFxuICAgICAgICAgICAgICAgIGhlaWdodDogZVthICsgJ0hlaWdodCddXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBnaXZlbiBkZXZpY2UgbW9kZSBpcyBjdXJyZW50bHkgYWN0aXZhdGVkLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBSZXNwb25zaXZlIG1vZGUgbmFtZShlLmc6IGRlc2t0b3AsXG4gICAgICAgICAqICAgICBkZXNrdG9wLWFuZC10YWJsZXQsIHRhYmxldCwgdGFibGV0LWFuZC1tb2JpbGUsIG1vYmlsZSlcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc0luUmVzcG9uc2l2ZVJhbmdlOiBmdW5jdGlvbihtb2RlKSB7XG4gICAgICAgICAgICB2YXIgYnJlYWtwb2ludCA9IHRoaXMuZ2V0Vmlld1BvcnQoKS53aWR0aDtcblxuICAgICAgICAgICAgaWYgKG1vZGUgPT0gJ2dlbmVyYWwnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gJ2Rlc2t0b3AnICYmIGJyZWFrcG9pbnQgPj0gKHRoaXMuZ2V0QnJlYWtwb2ludCgnbGcnKSArIDEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gJ3RhYmxldCcgJiYgKGJyZWFrcG9pbnQgPj0gKHRoaXMuZ2V0QnJlYWtwb2ludCgnbWQnKSArIDEpICYmIGJyZWFrcG9pbnQgPCB0aGlzLmdldEJyZWFrcG9pbnQoJ2xnJykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT0gJ21vYmlsZScgJiYgYnJlYWtwb2ludCA8PSB0aGlzLmdldEJyZWFrcG9pbnQoJ21kJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PSAnZGVza3RvcC1hbmQtdGFibGV0JyAmJiBicmVha3BvaW50ID49ICh0aGlzLmdldEJyZWFrcG9pbnQoJ21kJykgKyAxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09ICd0YWJsZXQtYW5kLW1vYmlsZScgJiYgYnJlYWtwb2ludCA8PSB0aGlzLmdldEJyZWFrcG9pbnQoJ2xnJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZSA9PSAnbWluaW1hbC1kZXNrdG9wLWFuZC1iZWxvdycgJiYgYnJlYWtwb2ludCA8PSB0aGlzLmdldEJyZWFrcG9pbnQoJ3hsJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZXMgdW5pcXVlIElEIGZvciBnaXZlIHByZWZpeC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCBQcmVmaXggZm9yIGdlbmVyYXRlZCBJRFxuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGdldFVuaXF1ZUlEOiBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobmV3IERhdGUoKSkuZ2V0VGltZSgpKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB3aW5kb3cgd2lkdGggZm9yIGdpdmUgYnJlYWtwb2ludCBtb2RlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSBSZXNwb25zaXZlIG1vZGUgbmFtZShlLmc6IHhsLCBsZywgbWQsIHNtKVxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0QnJlYWtwb2ludDogZnVuY3Rpb24obW9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJyZWFrcG9pbnRzW21vZGVdO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBvYmplY3QgaGFzIHByb3BlcnR5IG1hdGNocyBnaXZlbiBrZXkgcGF0aC5cbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IG9iaiBPYmplY3QgY29udGFpbnMgdmFsdWVzIHBhaXJlZCB3aXRoIGdpdmVuIGtleSBwYXRoXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlzIEtleXMgcGF0aCBzZXBlcmF0ZWQgd2l0aCBkb3RzXG4gICAgICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICBpc3NldDogZnVuY3Rpb24ob2JqLCBrZXlzKSB7XG4gICAgICAgICAgICB2YXIgc3RvbmU7XG5cbiAgICAgICAgICAgIGtleXMgPSBrZXlzIHx8ICcnO1xuXG4gICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKCdbJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBvYmplY3QgcGF0aCBub3RhdGlvbi4nKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAga2V5cyA9IGtleXMuc3BsaXQoJy4nKTtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc3RvbmUgPSBrZXlzLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShzdG9uZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIG9iaiA9IG9ialtzdG9uZV07XG5cbiAgICAgICAgICAgIH0gd2hpbGUgKGtleXMubGVuZ3RoKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgaGlnaGVzdCB6LWluZGV4IG9mIHRoZSBnaXZlbiBlbGVtZW50IHBhcmVudHNcbiAgICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVsIGpRdWVyeSBlbGVtZW50IG9iamVjdFxuICAgICAgICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0SGlnaGVzdFppbmRleDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHZhciBlbGVtID0gS1RVdGlsLmdldChlbCksXG4gICAgICAgICAgICAgICAgcG9zaXRpb24sIHZhbHVlO1xuXG4gICAgICAgICAgICB3aGlsZSAoZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSB6LWluZGV4IGlmIHBvc2l0aW9uIGlzIHNldCB0byBhIHZhbHVlIHdoZXJlIHotaW5kZXggaXMgaWdub3JlZCBieSB0aGUgYnJvd3NlclxuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWFrZXMgYmVoYXZpb3Igb2YgdGhpcyBmdW5jdGlvbiBjb25zaXN0ZW50IGFjcm9zcyBicm93c2Vyc1xuICAgICAgICAgICAgICAgIC8vIFdlYktpdCBhbHdheXMgcmV0dXJucyBhdXRvIGlmIHRoZSBlbGVtZW50IGlzIHBvc2l0aW9uZWRcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IEtUVXRpbC5jc3MoZWxlbSwgJ3Bvc2l0aW9uJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJyZWxhdGl2ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSUUgcmV0dXJucyAwIHdoZW4gekluZGV4IGlzIG5vdCBzcGVjaWZpZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXIgYnJvd3NlcnMgcmV0dXJuIGEgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlIGlnbm9yZSB0aGUgY2FzZSBvZiBuZXN0ZWQgZWxlbWVudHMgd2l0aCBhbiBleHBsaWNpdCB2YWx1ZSBvZiAwXG4gICAgICAgICAgICAgICAgICAgIC8vIDxkaXYgc3R5bGU9XCJ6LWluZGV4OiAtMTA7XCI+PGRpdiBzdHlsZT1cInotaW5kZXg6IDA7XCI+PC9kaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtLCAnei1pbmRleCcpKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBlbGVtZW50IGhhcyBhbnkgcGFyZW50IHdpdGggZml4ZWQgcG9zaXRpb25mcmVnXG4gICAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBlbCBqUXVlcnkgZWxlbWVudCBvYmplY3RcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBoYXNGaXhlZFBvc2l0aW9uZWRQYXJlbnQ6IGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb247XG5cbiAgICAgICAgICAgIHdoaWxlIChlbCAmJiBlbCAhPT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IEtUVXRpbC5jc3MoZWwsICdwb3NpdGlvbicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBcImZpeGVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNpbXVsYXRlcyBkZWxheVxuICAgICAgICAgKi9cbiAgICAgICAgc2xlZXA6IGZ1bmN0aW9uKG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDFlNzsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHN0YXJ0KSA+IG1pbGxpc2Vjb25kcykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldHMgcmFuZG9tbHkgZ2VuZXJhdGVkIGludGVnZXIgdmFsdWUgd2l0aGluIGdpdmVuIG1pbiBhbmQgbWF4IHJhbmdlXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW4gUmFuZ2Ugc3RhcnQgdmFsdWVcbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCBSYW5nZSBlbmQgdmFsdWVcbiAgICAgICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIGdldFJhbmRvbUludDogZnVuY3Rpb24obWluLCBtYXgpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciBBbmd1bGFyIGxpYnJhcnkgaXMgaW5jbHVkZWRcbiAgICAgICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBpc0FuZ3VsYXJWZXJzaW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuWm9uZSAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGpRdWVyeSBXb3JrYXJvdW5kc1xuXG4gICAgICAgIC8vIERlZXAgZXh0ZW5kOiAgJC5leHRlbmQodHJ1ZSwge30sIG9iakEsIG9iakIpO1xuICAgICAgICBkZWVwRXh0ZW5kOiBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgICAgIG91dCA9IG91dCB8fCB7fTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFvYmopXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygb2JqW2tleV0gPT09ICdvYmplY3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gS1RVdGlsLmRlZXBFeHRlbmQob3V0W2tleV0sIG9ialtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRba2V5XSA9IG9ialtrZXldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIGV4dGVuZDogICQuZXh0ZW5kKHt9LCBvYmpBLCBvYmpCKTtcbiAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbihvdXQpIHtcbiAgICAgICAgICAgIG91dCA9IG91dCB8fCB7fTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFyZ3VtZW50c1tpXSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gYXJndW1lbnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dFtrZXldID0gYXJndW1lbnRzW2ldW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3V0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldDogZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgICAgIHZhciBlbDtcblxuICAgICAgICAgICAgaWYgKHF1ZXJ5ID09PSBkb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEhKHF1ZXJ5ICYmIHF1ZXJ5Lm5vZGVUeXBlID09PSAxKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBxdWVyeTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocXVlcnkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbFswXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKHF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0QnlJRDogZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgICAgIGlmICghIShxdWVyeSAmJiBxdWVyeS5ub2RlVHlwZSA9PT0gMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChxdWVyeSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0QnlUYWc6IGZ1bmN0aW9uKHF1ZXJ5KSB7XG4gICAgICAgICAgICB2YXIgZWw7XG5cbiAgICAgICAgICAgIGlmIChlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0QnlDbGFzczogZnVuY3Rpb24ocXVlcnkpIHtcbiAgICAgICAgICAgIHZhciBlbDtcblxuICAgICAgICAgICAgaWYgKGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShxdWVyeSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZWxlbWVudCBoYXMgZ2l2ZW4gY2xhc3Nlc1xuICAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZWwgalF1ZXJ5IGVsZW1lbnQgb2JqZWN0XG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBDbGFzc2VzIHN0cmluZ1xuICAgICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIGhhc0NsYXNzZXM6IGZ1bmN0aW9uKGVsLCBjbGFzc2VzKSB7XG4gICAgICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2xhc3Nlc0FyciA9IGNsYXNzZXMuc3BsaXQoXCIgXCIpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXNBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoS1RVdGlsLmhhc0NsYXNzKGVsLCBLVFV0aWwudHJpbShjbGFzc2VzQXJyW2ldKSkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIGlmICghZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSA6IG5ldyBSZWdFeHAoJ1xcXFxiJyArIGNsYXNzTmFtZSArICdcXFxcYicpLnRlc3QoZWwuY2xhc3NOYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24oZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgaWYgKCFlbCB8fCB0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhc3NOYW1lc1tpXSAmJiBjbGFzc05hbWVzW2ldLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1tpXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghS1RVdGlsLmhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjbGFzc05hbWVzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSArPSAnICcgKyBLVFV0aWwudHJpbShjbGFzc05hbWVzW3hdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoIWVsIHx8IHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY2xhc3NOYW1lcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXG4gICAgICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc05hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoS1RVdGlsLnRyaW0oY2xhc3NOYW1lc1tpXSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoS1RVdGlsLmhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjbGFzc05hbWVzLmxlbmd0aDsgeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFxiJyArIEtUVXRpbC50cmltKGNsYXNzTmFtZXNbeF0pICsgJ1xcXFxiJywgJ2cnKSwgJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cmlnZ2VyQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uKGVsLCBldmVudE5hbWUsIGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBldmVudDtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuQ3VzdG9tRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBldmVudCA9IG5ldyBDdXN0b21FdmVudChldmVudE5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgZGV0YWlsOiBkYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gICAgICAgICAgICAgICAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24obm9kZSwgZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgd2UgdXNlIHRoZSBvd25lckRvY3VtZW50IGZyb20gdGhlIHByb3ZpZGVkIG5vZGUgdG8gYXZvaWQgY3Jvc3Mtd2luZG93IHByb2JsZW1zXG4gICAgICAgICAgICB2YXIgZG9jO1xuICAgICAgICAgICAgaWYgKG5vZGUub3duZXJEb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSA5KSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG5vZGUgbWF5IGJlIHRoZSBkb2N1bWVudCBpdHNlbGYsIG5vZGVUeXBlIDkgPSBET0NVTUVOVF9OT0RFXG4gICAgICAgICAgICAgICAgZG9jID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBub2RlIHBhc3NlZCB0byBmaXJlRXZlbnQ6IFwiICsgbm9kZS5pZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChub2RlLmRpc3BhdGNoRXZlbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBHZWNrby1zdHlsZSBhcHByb2FjaCAobm93IHRoZSBzdGFuZGFyZCkgdGFrZXMgbW9yZSB3b3JrXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50Q2xhc3MgPSBcIlwiO1xuXG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGV2ZW50cyBoYXZlIGRpZmZlcmVudCBldmVudCBjbGFzc2VzLlxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgc3dpdGNoIHN0YXRlbWVudCBjYW4ndCBtYXAgYW4gZXZlbnROYW1lIHRvIGFuIGV2ZW50Q2xhc3MsXG4gICAgICAgICAgICAgICAgLy8gdGhlIGV2ZW50IGZpcmluZyBpcyBnb2luZyB0byBmYWlsLlxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcImNsaWNrXCI6IC8vIERpc3BhdGNoaW5nIG9mICdjbGljaycgYXBwZWFycyB0byBub3Qgd29yayBjb3JyZWN0bHkgaW4gU2FmYXJpLiBVc2UgJ21vdXNlZG93bicgb3IgJ21vdXNldXAnIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgY2FzZSBcIm1vdXNlZW50ZXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW91c2VsZWF2ZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxuICAgICAgICAgICAgICAgICAgICBldmVudENsYXNzID0gXCJNb3VzZUV2ZW50c1wiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJmb2N1c1wiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJjaGFuZ2VcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiYmx1clwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbGFzcyA9IFwiSFRNTEV2ZW50c1wiO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IFwiZmlyZUV2ZW50OiBDb3VsZG4ndCBmaW5kIGFuIGV2ZW50IGNsYXNzIGZvciBldmVudCAnXCIgKyBldmVudE5hbWUgKyBcIicuXCI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnQoZXZlbnRDbGFzcyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgYnViYmxlcyA9IGV2ZW50TmFtZSA9PSBcImNoYW5nZVwiID8gZmFsc2UgOiB0cnVlO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGJ1YmJsZXMsIHRydWUpOyAvLyBBbGwgZXZlbnRzIGNyZWF0ZWQgYXMgYnViYmxpbmcgYW5kIGNhbmNlbGFibGUuXG5cbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xuICAgICAgICAgICAgICAgIC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyIHNheXMgZ28gYWhlYWQgd2l0aCB0aGUgZGVmYXVsdCBhY3Rpb25cbiAgICAgICAgICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmZpcmVFdmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElFLW9sZCBzY2hvb2wgc3R5bGVcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2MuY3JlYXRlRXZlbnRPYmplY3QoKTtcbiAgICAgICAgICAgICAgICBldmVudC5zeW50aGV0aWMgPSB0cnVlOyAvLyBhbGxvdyBkZXRlY3Rpb24gb2Ygc3ludGhldGljIGV2ZW50c1xuICAgICAgICAgICAgICAgIG5vZGUuZmlyZUV2ZW50KFwib25cIiArIGV2ZW50TmFtZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGluZGV4OiBmdW5jdGlvbiggZWxtICl7XG4gICAgICAgICAgICBlbG0gPSBLVFV0aWwuZ2V0KGVsbSk7XG4gICAgICAgICAgICB2YXIgYyA9IGVsbS5wYXJlbnROb2RlLmNoaWxkcmVuLCBpID0gMDtcbiAgICAgICAgICAgIGZvcig7IGkgPCBjLmxlbmd0aDsgaSsrIClcbiAgICAgICAgICAgICAgICBpZiggY1tpXSA9PSBlbG0gKSByZXR1cm4gaTtcbiAgICAgICAgfSxcblxuICAgICAgICB0cmltOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcudHJpbSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkOiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBpZiAoZS5jdXJyZW50VGFyZ2V0LmRhdGFzZXQudHJpZ2dlcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnRyaWdnZXJlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmaW5kOiBmdW5jdGlvbihwYXJlbnQsIHF1ZXJ5KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBLVFV0aWwuZ2V0KHBhcmVudCk7XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmaW5kQWxsOiBmdW5jdGlvbihwYXJlbnQsIHF1ZXJ5KSB7XG4gICAgICAgICAgICBwYXJlbnQgPSBLVFV0aWwuZ2V0KHBhcmVudCk7XG4gICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpbnNlcnRBZnRlcjogZnVuY3Rpb24oZWwsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiByZWZlcmVuY2VOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGVsLCByZWZlcmVuY2VOb2RlLm5leHRTaWJsaW5nKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwYXJlbnRzOiBmdW5jdGlvbihlbGVtLCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgLy8gRWxlbWVudC5tYXRjaGVzKCkgcG9seWZpbGxcbiAgICAgICAgICAgIGlmICghRWxlbWVudC5wcm90b3R5cGUubWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPVxuICAgICAgICAgICAgICAgICAgICBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHxcbiAgICAgICAgICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gKHRoaXMuZG9jdW1lbnQgfHwgdGhpcy5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBtYXRjaGVzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA+IC0xO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXQgdXAgYSBwYXJlbnQgYXJyYXlcbiAgICAgICAgICAgIHZhciBwYXJlbnRzID0gW107XG5cbiAgICAgICAgICAgIC8vIFB1c2ggZWFjaCBwYXJlbnQgZWxlbWVudCB0byB0aGUgYXJyYXlcbiAgICAgICAgICAgIGZvciAoIDsgZWxlbSAmJiBlbGVtICE9PSBkb2N1bWVudDsgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0ubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChlbGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKGVsZW0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gb3VyIHBhcmVudCBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudHM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uKGVsLCBzZWxlY3RvciwgbG9nKSB7XG4gICAgICAgICAgICBpZiAoIWVsIHx8ICFlbC5jaGlsZE5vZGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgbCA9IGVsLmNoaWxkTm9kZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbaV0ubm9kZVR5cGUgPT0gMSAmJiBLVFV0aWwubWF0Y2hlcyhlbC5jaGlsZE5vZGVzW2ldLCBzZWxlY3RvciwgbG9nKSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChlbC5jaGlsZE5vZGVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2hpbGQ6IGZ1bmN0aW9uKGVsLCBzZWxlY3RvciwgbG9nKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSBLVFV0aWwuY2hpbGRyZW4oZWwsIHNlbGVjdG9yLCBsb2cpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4gPyBjaGlsZHJlblswXSA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWF0Y2hlczogZnVuY3Rpb24oZWwsIHNlbGVjdG9yLCBsb2cpIHtcbiAgICAgICAgICAgIHZhciBwID0gRWxlbWVudC5wcm90b3R5cGU7XG4gICAgICAgICAgICB2YXIgZiA9IHAubWF0Y2hlcyB8fCBwLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBwLm1vek1hdGNoZXNTZWxlY3RvciB8fCBwLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW10uaW5kZXhPZi5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocyksIHRoaXMpICE9PSAtMTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChlbCAmJiBlbC50YWdOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYuY2FsbChlbCwgc2VsZWN0b3IpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF0YTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudCA9IEtUVXRpbC5nZXQoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihuYW1lLCBkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmN1c3RvbURhdGFUYWcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jdXN0b21EYXRhVGFnID0gd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVJRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuS1RVdGlsRWxlbWVudERhdGFTdG9yZVtlbGVtZW50LmN1c3RvbURhdGFUYWddID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsZW1lbnQuY3VzdG9tRGF0YVRhZ10gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsZW1lbnQuY3VzdG9tRGF0YVRhZ11bbmFtZV0gPSBkYXRhO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY3VzdG9tRGF0YVRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsZW1lbnQuY3VzdG9tRGF0YVRhZ11bbmFtZV0gOiBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY3VzdG9tRGF0YVRhZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsZW1lbnQuY3VzdG9tRGF0YVRhZ10gJiYgd2luZG93LktUVXRpbEVsZW1lbnREYXRhU3RvcmVbZWxlbWVudC5jdXN0b21EYXRhVGFnXVtuYW1lXSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAmJiB0aGlzLmhhcyhuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHdpbmRvdy5LVFV0aWxFbGVtZW50RGF0YVN0b3JlW2VsZW1lbnQuY3VzdG9tRGF0YVRhZ11bbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIG91dGVyV2lkdGg6IGZ1bmN0aW9uKGVsLCBtYXJnaW4pIHtcbiAgICAgICAgICAgIHZhciB3aWR0aDtcblxuICAgICAgICAgICAgaWYgKG1hcmdpbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VGbG9hdChlbC5vZmZzZXRXaWR0aCk7XG4gICAgICAgICAgICAgICAgd2lkdGggKz0gcGFyc2VGbG9hdChLVFV0aWwuY3NzKGVsLCAnbWFyZ2luLWxlZnQnKSkgKyBwYXJzZUZsb2F0KEtUVXRpbC5jc3MoZWwsICdtYXJnaW4tcmlnaHQnKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh3aWR0aCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHdpZHRoID0gcGFyc2VGbG9hdChlbC5vZmZzZXRXaWR0aCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgb2Zmc2V0OiBmdW5jdGlvbihlbGVtKSB7XG4gICAgICAgICAgICB2YXIgcmVjdCwgd2luO1xuICAgICAgICAgICAgZWxlbSA9IEtUVXRpbC5nZXQoZWxlbSk7XG5cbiAgICAgICAgICAgIGlmICggIWVsZW0gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcbiAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuICAgICAgICAgICAgLy8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuICAgICAgICAgICAgLy8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cbiAgICAgICAgICAgIGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1JcbiAgICAgICAgICAgIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgd2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG4gICAgICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGhlaWdodDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHJldHVybiBLVFV0aWwuY3NzKGVsLCAnaGVpZ2h0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmlzaWJsZTogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIHJldHVybiAhKGVsLm9mZnNldFdpZHRoID09PSAwICYmIGVsLm9mZnNldEhlaWdodCA9PT0gMCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXR0cjogZnVuY3Rpb24oZWwsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgICAgICBlbCA9IEtUVXRpbC5nZXQoZWwpO1xuXG4gICAgICAgICAgICBpZiAoZWwgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzQXR0cjogZnVuY3Rpb24oZWwsIG5hbWUpIHtcbiAgICAgICAgICAgIGVsID0gS1RVdGlsLmdldChlbCk7XG5cbiAgICAgICAgICAgIGlmIChlbCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgPyB0cnVlIDogZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24oZWwsIG5hbWUpIHtcbiAgICAgICAgICAgIGVsID0gS1RVdGlsLmdldChlbCk7XG5cbiAgICAgICAgICAgIGlmIChlbCA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbmltYXRlOiBmdW5jdGlvbihmcm9tLCB0bywgZHVyYXRpb24sIHVwZGF0ZSwgZWFzaW5nLCBkb25lKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRpbnlBbmltYXRlLmVhc2luZ3NcbiAgICAgICAgICAgICAqICBBZGFwdGVkIGZyb20galF1ZXJ5IEVhc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgZWFzaW5ncyA9IHt9O1xuICAgICAgICAgICAgdmFyIGVhc2luZztcblxuICAgICAgICAgICAgZWFzaW5ncy5saW5lYXIgPSBmdW5jdGlvbih0LCBiLCBjLCBkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGMgKiB0IC8gZCArIGI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlYXNpbmcgPSBlYXNpbmdzLmxpbmVhcjtcblxuICAgICAgICAgICAgLy8gRWFybHkgYmFpbCBvdXQgaWYgY2FsbGVkIGluY29ycmVjdGx5XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZyb20gIT09ICdudW1iZXInIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHRvICE9PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBkdXJhdGlvbiAhPT0gJ251bWJlcicgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgdXBkYXRlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgbW9jayBkb25lKCkgZnVuY3Rpb24gaWYgbmVjZXNzYXJ5XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvbmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUGljayBpbXBsZW1lbnRhdGlvbiAocmVxdWVzdEFuaW1hdGlvbkZyYW1lIHwgc2V0VGltZW91dClcbiAgICAgICAgICAgIHZhciByQUYgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA1MCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gbG9vcFxuICAgICAgICAgICAgdmFyIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgY2hhbmdlID0gdG8gLSBmcm9tO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBsb29wKHRpbWVzdGFtcCkge1xuICAgICAgICAgICAgICAgIHZhciB0aW1lID0gKHRpbWVzdGFtcCB8fCArbmV3IERhdGUoKSkgLSBzdGFydDtcblxuICAgICAgICAgICAgICAgIGlmICh0aW1lID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlKGVhc2luZyh0aW1lLCBmcm9tLCBjaGFuZ2UsIGR1cmF0aW9uKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aW1lID49IDAgJiYgdGltZSA+PSBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGUodG8pO1xuICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgckFGKGxvb3ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdXBkYXRlKGZyb20pO1xuXG4gICAgICAgICAgICAvLyBTdGFydCBhbmltYXRpb24gbG9vcFxuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gd2luZG93LnBlcmZvcm1hbmNlICYmIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cgPyB3aW5kb3cucGVyZm9ybWFuY2Uubm93KCkgOiArbmV3IERhdGUoKTtcblxuICAgICAgICAgICAgckFGKGxvb3ApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFjdHVhbENzczogZnVuY3Rpb24oZWwsIHByb3AsIGNhY2hlKSB7XG4gICAgICAgICAgICBlbCA9IEtUVXRpbC5nZXQoZWwpO1xuICAgICAgICAgICAgdmFyIGNzcyA9ICcnO1xuXG4gICAgICAgICAgICBpZiAoZWwgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZWwuZ2V0QXR0cmlidXRlKCdoaWRkZW4tJyArIHByb3ApIHx8IGNhY2hlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIC8vIHRoZSBlbGVtZW50IGlzIGhpZGRlbiBzbzpcbiAgICAgICAgICAgICAgICAvLyBtYWtpbmcgdGhlIGVsIGJsb2NrIHNvIHdlIGNhbiBtZWFzc3VyZSBpdHMgaGVpZ2h0IGJ1dCBzdGlsbCBiZSBoaWRkZW5cbiAgICAgICAgICAgICAgICBjc3MgPSBlbC5zdHlsZS5jc3NUZXh0O1xuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246IGFic29sdXRlOyB2aXNpYmlsaXR5OiBoaWRkZW47IGRpc3BsYXk6IGJsb2NrOyc7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcCA9PSAnd2lkdGgnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZWwub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wID09ICdoZWlnaHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gZWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBjc3M7XG5cbiAgICAgICAgICAgICAgICAvLyBzdG9yZSBpdCBpbiBjYWNoZVxuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnaGlkZGVuLScgKyBwcm9wLCB2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHN0b3JlIGl0IGluIGNhY2hlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoZWwuZ2V0QXR0cmlidXRlKCdoaWRkZW4tJyArIHByb3ApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhY3R1YWxIZWlnaHQ6IGZ1bmN0aW9uKGVsLCBjYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5hY3R1YWxDc3MoZWwsICdoZWlnaHQnLCBjYWNoZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWN0dWFsV2lkdGg6IGZ1bmN0aW9uKGVsLCBjYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuIEtUVXRpbC5hY3R1YWxDc3MoZWwsICd3aWR0aCcsIGNhY2hlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXRTY3JvbGw6IGZ1bmN0aW9uKGVsZW1lbnQsIG1ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIHBhc3NlZCBpbiBgbWV0aG9kYCB2YWx1ZSBzaG91bGQgYmUgJ1RvcCcgb3IgJ0xlZnQnXG4gICAgICAgICAgICBtZXRob2QgPSAnc2Nyb2xsJyArIG1ldGhvZDtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbWVudCA9PSB3aW5kb3cgfHwgZWxlbWVudCA9PSBkb2N1bWVudCkgPyAoXG4gICAgICAgICAgICAgICAgc2VsZlsobWV0aG9kID09ICdzY3JvbGxUb3AnKSA/ICdwYWdlWU9mZnNldCcgOiAncGFnZVhPZmZzZXQnXSB8fFxuICAgICAgICAgICAgICAgIChicm93c2VyU3VwcG9ydHNCb3hNb2RlbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbbWV0aG9kXSkgfHxcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5W21ldGhvZF1cbiAgICAgICAgICAgICkgOiBlbGVtZW50W21ldGhvZF07XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3NzOiBmdW5jdGlvbihlbCwgc3R5bGVQcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgZWwgPSBLVFV0aWwuZ2V0KGVsKTtcblxuICAgICAgICAgICAgaWYgKCFlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZVtzdHlsZVByb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBkZWZhdWx0VmlldyA9IChlbC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50KS5kZWZhdWx0VmlldztcbiAgICAgICAgICAgICAgICAvLyBXM0Mgc3RhbmRhcmQgd2F5OlxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0VmlldyAmJiBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHNhbml0aXplIHByb3BlcnR5IG5hbWUgdG8gY3NzIG5vdGF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIChoeXBoZW4gc2VwYXJhdGVkIHdvcmRzIGVnLiBmb250LVNpemUpXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlUHJvcCA9IHN0eWxlUHJvcC5yZXBsYWNlKC8oW0EtWl0pL2csIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlbC5jdXJyZW50U3R5bGUpIHsgLy8gSUVcbiAgICAgICAgICAgICAgICAgICAgLy8gc2FuaXRpemUgcHJvcGVydHkgbmFtZSB0byBjYW1lbENhc2VcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVQcm9wID0gc3R5bGVQcm9wLnJlcGxhY2UoL1xcLShcXHcpL2csIGZ1bmN0aW9uKHN0ciwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLmN1cnJlbnRTdHlsZVtzdHlsZVByb3BdO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IG90aGVyIHVuaXRzIHRvIHBpeGVscyBvbiBJRVxuICAgICAgICAgICAgICAgICAgICBpZiAoL15cXGQrKGVtfHB0fCV8ZXgpPyQvaS50ZXN0KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbGRMZWZ0ID0gZWwuc3R5bGUubGVmdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkUnNMZWZ0ID0gZWwucnVudGltZVN0eWxlLmxlZnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwucnVudGltZVN0eWxlLmxlZnQgPSBlbC5jdXJyZW50U3R5bGUubGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gdmFsdWUgfHwgMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGVsLnN0eWxlLnBpeGVsTGVmdCArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5zdHlsZS5sZWZ0ID0gb2xkTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbC5ydW50aW1lU3R5bGUubGVmdCA9IG9sZFJzTGVmdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZTogZnVuY3Rpb24oZWwsIGRpciwgc3BlZWQsIGNhbGxiYWNrLCByZWNhbGNNYXhIZWlnaHQpIHtcbiAgICAgICAgICAgIGlmICghZWwgfHwgKGRpciA9PSAndXAnICYmIEtUVXRpbC52aXNpYmxlKGVsKSA9PT0gZmFsc2UpIHx8IChkaXIgPT0gJ2Rvd24nICYmIEtUVXRpbC52aXNpYmxlKGVsKSA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNwZWVkID0gKHNwZWVkID8gc3BlZWQgOiA2MDApO1xuICAgICAgICAgICAgdmFyIGNhbGNIZWlnaHQgPSBLVFV0aWwuYWN0dWFsSGVpZ2h0KGVsKTtcbiAgICAgICAgICAgIHZhciBjYWxjUGFkZGluZ1RvcCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNhbGNQYWRkaW5nQm90dG9tID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsLCAncGFkZGluZy10b3AnKSAmJiBLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLXRvcCcpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWwpLnNldCgnc2xpZGUtcGFkZGluZy10b3AnLCBLVFV0aWwuY3NzKGVsLCAncGFkZGluZy10b3AnKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuY3NzKGVsLCAncGFkZGluZy1ib3R0b20nKSAmJiBLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLWJvdHRvbScpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmRhdGEoZWwpLnNldCgnc2xpZGUtcGFkZGluZy1ib3R0b20nLCBLVFV0aWwuY3NzKGVsLCAncGFkZGluZy1ib3R0b20nKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuZGF0YShlbCkuaGFzKCdzbGlkZS1wYWRkaW5nLXRvcCcpKSB7XG4gICAgICAgICAgICAgICAgY2FsY1BhZGRpbmdUb3AgPSBwYXJzZUludChLVFV0aWwuZGF0YShlbCkuZ2V0KCdzbGlkZS1wYWRkaW5nLXRvcCcpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEtUVXRpbC5kYXRhKGVsKS5oYXMoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykpIHtcbiAgICAgICAgICAgICAgICBjYWxjUGFkZGluZ0JvdHRvbSA9IHBhcnNlSW50KEtUVXRpbC5kYXRhKGVsKS5nZXQoJ3NsaWRlLXBhZGRpbmctYm90dG9tJykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGlyID09ICd1cCcpIHsgLy8gdXBcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdUb3AsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1RvcCA9IChjYWxjUGFkZGluZ1RvcCAtIHZhbHVlKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH0sICdsaW5lYXInKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdCb3R0b20sIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9IChjYWxjUGFkZGluZ0JvdHRvbSAtIHZhbHVlKSArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH0sICdsaW5lYXInKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjSGVpZ2h0LCBzcGVlZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gKGNhbGNIZWlnaHQgLSB2YWx1ZSkgKyAncHgnO1xuICAgICAgICAgICAgICAgIH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgfSBlbHNlIGlmIChkaXIgPT0gJ2Rvd24nKSB7IC8vIGRvd25cbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyc7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdUb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdUb3AsIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1RvcCA9IHZhbHVlICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ1RvcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsY1BhZGRpbmdCb3R0b20pIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFuaW1hdGUoMCwgY2FsY1BhZGRpbmdCb3R0b20sIHNwZWVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9IHZhbHVlICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfSwgJ2xpbmVhcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBLVFV0aWwuYW5pbWF0ZSgwLCBjYWxjSGVpZ2h0LCBzcGVlZCwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gdmFsdWUgKyAncHgnO1xuICAgICAgICAgICAgICAgIH0sICdsaW5lYXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzbGlkZVVwOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBLVFV0aWwuc2xpZGUoZWwsICd1cCcsIHNwZWVkLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2xpZGVEb3duOiBmdW5jdGlvbihlbCwgc3BlZWQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBLVFV0aWwuc2xpZGUoZWwsICdkb3duJywgc3BlZWQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaG93OiBmdW5jdGlvbihlbCwgZGlzcGxheSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBlbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gKGRpc3BsYXkgPyBkaXNwbGF5IDogJ2Jsb2NrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGlkZTogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFdmVudDogZnVuY3Rpb24oZWwsIHR5cGUsIGhhbmRsZXIsIG9uZSkge1xuICAgICAgICAgICAgZWwgPSBLVFV0aWwuZ2V0KGVsKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVFdmVudDogZnVuY3Rpb24oZWwsIHR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGVsID0gS1RVdGlsLmdldChlbCk7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICAgICAgICB9LFxuXG4gICAgICAgIG9uOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgZXZlbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBldmVudElkID0gS1RVdGlsLmdldFVuaXF1ZUlEKCdldmVudCcpO1xuXG4gICAgICAgICAgICB3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRhcmdldCAmJiB0YXJnZXQgIT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSB0YXJnZXRzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdGFyZ2V0c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuY2FsbCh0YXJnZXQsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoZWxlbWVudCwgZXZlbnQsIHdpbmRvdy5LVFV0aWxEZWxlZ2F0ZWRFdmVudEhhbmRsZXJzW2V2ZW50SWRdKTtcblxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50SWQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb2ZmOiBmdW5jdGlvbihlbGVtZW50LCBldmVudCwgZXZlbnRJZCkge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50IHx8ICF3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLnJlbW92ZUV2ZW50KGVsZW1lbnQsIGV2ZW50LCB3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSB3aW5kb3cuS1RVdGlsRGVsZWdhdGVkRXZlbnRIYW5kbGVyc1tldmVudElkXTtcbiAgICAgICAgfSxcblxuICAgICAgICBvbmU6IGZ1bmN0aW9uIG9uZXRpbWUoZWwsIHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBlbCA9IEtUVXRpbC5nZXQoZWwpO1xuXG4gICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGZ1bmN0aW9uIGNhbGxlZShlKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGV2ZW50XG4gICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLnR5cGUsIGNhbGxlZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gY2FsbCBoYW5kbGVyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaGFzaDogZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgICAgICB2YXIgaGFzaCA9IDAsXG4gICAgICAgICAgICAgICAgaSwgY2hyO1xuXG4gICAgICAgICAgICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGhhc2g7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY2hyID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgY2hyO1xuICAgICAgICAgICAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFuaW1hdGVDbGFzczogZnVuY3Rpb24oZWwsIGFuaW1hdGlvbk5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uO1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICAgICAgICAgICBPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgTW96QW5pbWF0aW9uOiAnbW96QW5pbWF0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBXZWJraXRBbmltYXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIG1zQW5pbWF0aW9uOiAnbXNBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBhbmltYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gYW5pbWF0aW9uc1t0XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyhlbCwgJ2FuaW1hdGVkICcgKyBhbmltYXRpb25OYW1lKTtcblxuICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgYW5pbWF0aW9uLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwucmVtb3ZlQ2xhc3MoZWwsICdhbmltYXRlZCAnICsgYW5pbWF0aW9uTmFtZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgYW5pbWF0aW9uLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24oZWwsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvbjtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICAgICAgICAgICAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgTW96VHJhbnNpdGlvbjogJ21velRyYW5zaXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIFdlYmtpdFRyYW5zaXRpb246ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBtc1RyYW5zaXRpb246ICdtc1RyYW5zaXRpb25FbmQnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciB0IGluIHRyYW5zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVsLnN0eWxlW3RdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHRyYW5zaXRpb25zW3RdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgdHJhbnNpdGlvbiwgY2FsbGJhY2spO1xuICAgICAgICB9LFxuXG4gICAgICAgIGFuaW1hdGlvbkVuZDogZnVuY3Rpb24oZWwsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uO1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICAgICAgICAgICBPQW5pbWF0aW9uOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgICAgICAgICAgICAgTW96QW5pbWF0aW9uOiAnbW96QW5pbWF0aW9uRW5kJyxcbiAgICAgICAgICAgICAgICBXZWJraXRBbmltYXRpb246ICd3ZWJraXRBbmltYXRpb25FbmQnLFxuICAgICAgICAgICAgICAgIG1zQW5pbWF0aW9uOiAnbXNBbmltYXRpb25FbmQnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciB0IGluIGFuaW1hdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZWwuc3R5bGVbdF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBhbmltYXRpb25zW3RdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgS1RVdGlsLm9uZShlbCwgYW5pbWF0aW9uLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW5pbWF0ZURlbGF5OiBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQtJywgJ21vei0nLCAnbXMtJywgJ28tJywgJyddO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbCwgdmVuZG9yc1tpXSArICdhbmltYXRpb24tZGVsYXknLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW5pbWF0ZUR1cmF0aW9uOiBmdW5jdGlvbihlbCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciB2ZW5kb3JzID0gWyd3ZWJraXQtJywgJ21vei0nLCAnbXMtJywgJ28tJywgJyddO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbCwgdmVuZG9yc1tpXSArICdhbmltYXRpb24tZHVyYXRpb24nLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uKHRhcmdldCwgb2Zmc2V0LCBkdXJhdGlvbikge1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gZHVyYXRpb24gPyBkdXJhdGlvbiA6IDUwMDtcbiAgICAgICAgICAgIHZhciB0YXJnZXQgPSBLVFV0aWwuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0UG9zID0gdGFyZ2V0ID8gS1RVdGlsLm9mZnNldCh0YXJnZXQpLnRvcCA6IDA7XG4gICAgICAgICAgICB2YXIgc2Nyb2xsUG9zID0gd2luZG93LnBhZ2VZT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgMDtcbiAgICAgICAgICAgIHZhciBmcm9tLCB0bztcblxuICAgICAgICAgICAgaWYgKHRhcmdldFBvcyA+IHNjcm9sbFBvcykge1xuICAgICAgICAgICAgICAgIGZyb20gPSB0YXJnZXRQb3M7XG4gICAgICAgICAgICAgICAgdG8gPSBzY3JvbGxQb3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZyb20gPSBzY3JvbGxQb3M7XG4gICAgICAgICAgICAgICAgdG8gPSB0YXJnZXRQb3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICB0byArPSBvZmZzZXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5hbmltYXRlKGZyb20sIHRvLCBkdXJhdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLnNjcm9sbFRvcCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wID0gdmFsdWU7XG4gICAgICAgICAgICB9KTsgLy8sIGVhc2luZywgZG9uZVxuICAgICAgICB9LFxuXG4gICAgICAgIHNjcm9sbFRvcDogZnVuY3Rpb24ob2Zmc2V0LCBkdXJhdGlvbikge1xuICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFRvKG51bGwsIG9mZnNldCwgZHVyYXRpb24pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzQXJyYXk6IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBBcnJheS5pc0FycmF5KG9iaik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZHk6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQgPyBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgOiBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNFbXB0eTogZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbnVtYmVyU3RyaW5nOiBmdW5jdGlvbihuU3RyKSB7XG4gICAgICAgICAgICBuU3RyICs9ICcnO1xuICAgICAgICAgICAgdmFyIHggPSBuU3RyLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICB2YXIgeDEgPSB4WzBdO1xuICAgICAgICAgICAgdmFyIHgyID0geC5sZW5ndGggPiAxID8gJy4nICsgeFsxXSA6ICcnO1xuICAgICAgICAgICAgdmFyIHJneCA9IC8oXFxkKykoXFxkezN9KS87XG4gICAgICAgICAgICB3aGlsZSAocmd4LnRlc3QoeDEpKSB7XG4gICAgICAgICAgICAgICAgeDEgPSB4MS5yZXBsYWNlKHJneCwgJyQxJyArICcsJyArICckMicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHgxICsgeDI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGV0ZWN0SUU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgICAgICAgICAgIC8vIFRlc3QgdmFsdWVzOyBVbmNvbW1lbnQgdG8gY2hlY2sgcmVzdWx0IOKAplxuXG4gICAgICAgICAgICAvLyBJRSAxMFxuICAgICAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgMTAuMDsgV2luZG93cyBOVCA2LjI7IFRyaWRlbnQvNi4wKSc7XG5cbiAgICAgICAgICAgIC8vIElFIDExXG4gICAgICAgICAgICAvLyB1YSA9ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjM7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztcblxuICAgICAgICAgICAgLy8gRWRnZSAxMiAoU3BhcnRhbilcbiAgICAgICAgICAgIC8vIHVhID0gJ01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdPVzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMzkuMC4yMTcxLjcxIFNhZmFyaS81MzcuMzYgRWRnZS8xMi4wJztcblxuICAgICAgICAgICAgLy8gRWRnZSAxM1xuICAgICAgICAgICAgLy8gdWEgPSAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzQ2LjAuMjQ4Ni4wIFNhZmFyaS81MzcuMzYgRWRnZS8xMy4xMDU4Nic7XG5cbiAgICAgICAgICAgIHZhciBtc2llID0gdWEuaW5kZXhPZignTVNJRSAnKTtcbiAgICAgICAgICAgIGlmIChtc2llID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIElFIDEwIG9yIG9sZGVyID0+IHJldHVybiB2ZXJzaW9uIG51bWJlclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh1YS5zdWJzdHJpbmcobXNpZSArIDUsIHVhLmluZGV4T2YoJy4nLCBtc2llKSksIDEwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRyaWRlbnQgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpO1xuICAgICAgICAgICAgaWYgKHRyaWRlbnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSUUgMTEgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgICAgICAgdmFyIHJ2ID0gdWEuaW5kZXhPZigncnY6Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhydiArIDMsIHVhLmluZGV4T2YoJy4nLCBydikpLCAxMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBlZGdlID0gdWEuaW5kZXhPZignRWRnZS8nKTtcbiAgICAgICAgICAgIGlmIChlZGdlID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIEVkZ2UgKElFIDEyKykgPT4gcmV0dXJuIHZlcnNpb24gbnVtYmVyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHVhLnN1YnN0cmluZyhlZGdlICsgNSwgdWEuaW5kZXhPZignLicsIGVkZ2UpKSwgMTApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvdGhlciBicm93c2VyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNSVEw6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChLVFV0aWwuYXR0cihLVFV0aWwuZ2V0KCdodG1sJyksICdkaXJlY3Rpb24nKSA9PSAncnRsJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy9cblxuICAgICAgICAvLyBTY3JvbGxlclxuICAgICAgICBzY3JvbGxJbml0OiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZighZWxlbWVudCkgcmV0dXJuO1xuICAgICAgICAgICAgLy8gRGVmaW5lIGluaXQgZnVuY3Rpb25cbiAgICAgICAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBzO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBwYXJzZUludChvcHRpb25zLmhlaWdodC5jYWxsKCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IHBhcnNlSW50KG9wdGlvbnMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZXN0cm95IHNjcm9sbCBvbiB0YWJsZSBhbmQgbW9iaWxlIG1vZGVzXG4gICAgICAgICAgICAgICAgaWYgKChvcHRpb25zLm1vYmlsZU5hdGl2ZVNjcm9sbCB8fCBvcHRpb25zLmRpc2FibGVGb3JNb2JpbGUpICYmIEtUVXRpbC5pc0luUmVzcG9uc2l2ZVJhbmdlKCd0YWJsZXQtYW5kLW1vYmlsZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHBzID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdwcycpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnJlc2V0SGVpZ2h0T25EZXN0cm95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnYXV0bycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoZWlnaHQgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWxlbWVudCwgJ2hlaWdodCcsIGhlaWdodCArICdweCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgcHMuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5yZW1vdmUoJ3BzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVpZ2h0ID4gMCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdvdmVyZmxvdycsICdhdXRvJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnLCBoZWlnaHQgKyAncHgnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZXNrdG9wTmF0aXZlU2Nyb2xsKSB7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5jc3MoZWxlbWVudCwgJ292ZXJmbG93JywgJ2F1dG8nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEluaXQgc2Nyb2xsXG4gICAgICAgICAgICAgICAgS1RVdGlsLmNzcyhlbGVtZW50LCAnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICBwcyA9IEtUVXRpbC5kYXRhKGVsZW1lbnQpLmdldCgncHMnKTtcbiAgICAgICAgICAgICAgICBpZiAocHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcHMudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKGVsZW1lbnQsICdzY3JvbGwnKTtcbiAgICAgICAgICAgICAgICAgICAgcHMgPSBuZXcgUGVyZmVjdFNjcm9sbGJhcihlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVlbFNwZWVkOiAwLjUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2lwZUVhc2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZWVsUHJvcGFnYXRpb246IChvcHRpb25zLndpbmRvd1Njcm9sbCA9PT0gZmFsc2UgPyBmYWxzZSA6IHRydWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluU2Nyb2xsYmFyTGVuZ3RoOiA0MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFNjcm9sbGJhckxlbmd0aDogMzAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3VwcHJlc3NTY3JvbGxYOiBLVFV0aWwuYXR0cihlbGVtZW50LCAnZGF0YS1zY3JvbGwteCcpICE9ICd0cnVlJyA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuZGF0YShlbGVtZW50KS5zZXQoJ3BzJywgcHMpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFJlbWVtYmVyIHNjcm9sbCBwb3NpdGlvbiBpbiBjb29raWVcbiAgICAgICAgICAgICAgICB2YXIgdWlkID0gS1RVdGlsLmF0dHIoZWxlbWVudCwgJ2lkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZW1lbWJlclBvc2l0aW9uID09PSB0cnVlICYmIENvb2tpZXMgJiYgdWlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChDb29raWVzLmdldCh1aWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gcGFyc2VJbnQoQ29va2llcy5nZXQodWlkKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3BzLXNjcm9sbC15JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBDb29raWVzLnNldCh1aWQsIGVsZW1lbnQuc2Nyb2xsVG9wKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbml0XG4gICAgICAgICAgICBpbml0KCk7XG5cbiAgICAgICAgICAgIC8vIEhhbmRsZSB3aW5kb3cgcmVzaXplXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oYW5kbGVXaW5kb3dSZXNpemUpIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuYWRkUmVzaXplSGFuZGxlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNjcm9sbFVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHBzID0gS1RVdGlsLmRhdGEoZWxlbWVudCkuZ2V0KCdwcycpO1xuICAgICAgICAgICAgaWYgKHBzKSB7XG4gICAgICAgICAgICAgICAgcHMudXBkYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2Nyb2xsVXBkYXRlQWxsOiBmdW5jdGlvbihwYXJlbnQpIHtcbiAgICAgICAgICAgIHZhciBzY3JvbGxlcnMgPSBLVFV0aWwuZmluZEFsbChwYXJlbnQsICcucHMnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzY3JvbGxlcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsZXJVcGRhdGUoc2Nyb2xsZXJzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzY3JvbGxEZXN0cm95OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5nZXQoJ3BzJyk7XG4gICAgICAgICAgICBpZiAocHMpIHtcbiAgICAgICAgICAgICAgICBwcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgcHMgPSBLVFV0aWwuZGF0YShlbGVtZW50KS5yZW1vdmUoJ3BzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0SFRNTDogZnVuY3Rpb24oZWwsIGh0bWwpIHtcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZ2V0KGVsKSkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5nZXQoZWwpLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0SFRNTDogZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGlmIChLVFV0aWwuZ2V0KGVsKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBLVFV0aWwuZ2V0KGVsKS5pbm5lckhUTUw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RG9jdW1lbnRIZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICAgICAgICAgICAgdmFyIGh0bWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCggYm9keS5zY3JvbGxIZWlnaHQsIGJvZHkub2Zmc2V0SGVpZ2h0LCBodG1sLmNsaWVudEhlaWdodCwgaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwub2Zmc2V0SGVpZ2h0ICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0U2Nyb2xsVG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAgKGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5zY3JvbGxUb3A7XG4gICAgICAgIH1cbiAgICB9XG59KCk7XG5cbi8vIHdlYnBhY2sgc3VwcG9ydFxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEtUVXRpbDtcbn1cblxuLy8gSW5pdGlhbGl6ZSBLVFV0aWwgY2xhc3Mgb24gZG9jdW1lbnQgcmVhZHlcbktUVXRpbC5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBLVFV0aWwuaW5pdCgpO1xufSk7XG5cbi8vIENTUzMgVHJhbnNpdGlvbnMgb25seSBhZnRlciBwYWdlIGxvYWQoLnBhZ2UtbG9hZGluZyBjbGFzcyBhZGRlZCB0byBib2R5IHRhZyBhbmQgcmVtb3ZlIHdpdGggSlMgb24gcGFnZSBsb2FkKVxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIEtUVXRpbC5yZW1vdmVDbGFzcyhLVFV0aWwuZ2V0KCdib2R5JyksICdwYWdlLS1sb2FkaW5nJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxubGV0IEtUTGF5b3V0ID0gZnVuY3Rpb24oKSB7XG4gIGxldCBib2R5O1xuXG4gIGxldCBhc2lkZTtcbiAgbGV0IGFzaWRlTWVudTtcbiAgbGV0IGFzaWRlTWVudU9mZmNhbnZhcztcblxuICBsZXQgc2Nyb2xsVG9wO1xuXG4gIGxldCBwYWdlU3RpY2t5UG9ydGxldDtcblxuICAvLyBBc2lkZVxuICBsZXQgaW5pdEFzaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgYXNpZGUgPSBLVFV0aWwuZ2V0KCdhc2lkZScpO1xuXG4gICAgLy8gSW5pdCBvZmZjYW52YXMgbGF5b3V0IGZvciBtb2JpbGVcbiAgICBhc2lkZU1lbnVPZmZjYW52YXMgPSBuZXcgS1RPZmZjYW52YXMoJ2FzaWRlJywge1xuICAgICAgYmFzZUNsYXNzOiAnYXNpZGUnLFxuICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgIGNsb3NlQnk6ICdhc2lkZV9jbG9zZV9idG4nLFxuICAgICAgdG9nZ2xlQnk6IHtcbiAgICAgICAgdGFyZ2V0OiAnYXNpZGVfbW9iaWxlX3RvZ2dsZXInLFxuICAgICAgICBzdGF0ZTogJ2hlYWRlci1tb2JpbGVfX3Rvb2xiYXItdG9nZ2xlci0tYWN0aXZlJ1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSW5pdCBhc2lkZSBtZW51XG4gICAgbGV0IG1lbnUgPSBLVFV0aWwuZ2V0QnlJRCgnYXNpZGVfbWVudScpO1xuICAgIGxldCBtZW51RGVza3RvcE1vZGUgPSAoS1RVdGlsLmF0dHIobWVudSwgJ2RhdGEta3RtZW51LWRyb3Bkb3duJykgPT09ICcxJyA/ICdkcm9wZG93bicgOiAnYWNjb3JkaW9uJyk7XG5cbiAgICAvLyBJbml0IHNjcm9sbGFibGUgbWVudSBjb250YWluZXJcbiAgICBsZXQgc2Nyb2xsO1xuICAgIGlmIChLVFV0aWwuYXR0cihtZW51LCAnZGF0YS1rdG1lbnUtc2Nyb2xsJykgPT09ICcxJykge1xuICAgICAgc2Nyb2xsID0ge1xuICAgICAgICByZW1lbWJlclBvc2l0aW9uOiB0cnVlLCAvLyByZW1lbWJlciBwb3NpdGlvbiBvbiBwYWdlIHJlbG9hZFxuICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkgeyAgLy8gY2FsY3VsYXRlIGF2YWlsYWJsZSBzY3JvbGxhYmxlIGFyZWEgaGVpZ2h0XG4gICAgICAgICAgLy8gY2FsY3VsYXRlZCBoZWlnaHRcbiAgICAgICAgICBsZXQgaGVpZ2h0O1xuXG4gICAgICAgICAgLy8gd2luZG93IGhlaWdodFxuICAgICAgICAgIGxldCB3aW5kb3dIZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xuXG4gICAgICAgICAgLy8gc2Vjb25kYXJ5XG4gICAgICAgICAgbGV0IHNlY29uZGFyeSA9IEtUVXRpbC5maW5kKGFzaWRlLCAnLmFzaWRlX19zZWNvbmRhcnknKTtcbiAgICAgICAgICBsZXQgc2Vjb25kYXJ5UGFkZGluZ1RvcCA9IHBhcnNlSW50KEtUVXRpbC5jc3Moc2Vjb25kYXJ5LCAncGFkZGluZy10b3AnKSk7XG4gICAgICAgICAgbGV0IHNlY29uZGFyeVBhZGRpbmdCb3R0b20gPSBwYXJzZUludChLVFV0aWwuY3NzKHNlY29uZGFyeSwgJ3BhZGRpbmctYm90dG9tJykpO1xuXG4gICAgICAgICAgLy8gdG9wIGhlaWdodFxuICAgICAgICAgIGxldCB0b3AgPSBLVFV0aWwuZmluZChhc2lkZSwgJy5hc2lkZV9fc2Vjb25kYXJ5LXRvcCcpO1xuICAgICAgICAgIGxldCB0b3BIZWlnaHQgPSBwYXJzZUludChLVFV0aWwuaGVpZ2h0KHRvcCkpO1xuXG4gICAgICAgICAgLy8gYm90dG9tXG4gICAgICAgICAgbGV0IGJvdHRvbSA9IEtUVXRpbC5maW5kKGFzaWRlLCAnLmFzaWRlX19zZWNvbmRhcnktYm90dG9tJyk7XG4gICAgICAgICAgbGV0IGJvdHRvbVBhZGRpbmdUb3AgPSBwYXJzZUludChLVFV0aWwuY3NzKGJvdHRvbSwgJ3BhZGRpbmctdG9wJykpO1xuICAgICAgICAgIGxldCBib3R0b21QYWRkaW5nQm90dG9uID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhib3R0b20sICdwYWRkaW5nLWJvdHRvbScpKTtcblxuICAgICAgICAgIC8vIGNhbGN1bGF0ZSBoZWlnaHRcbiAgICAgICAgICBoZWlnaHQgPSB3aW5kb3dIZWlnaHQgLSB0b3BIZWlnaHQgLSBib3R0b21QYWRkaW5nVG9wIC0gYm90dG9tUGFkZGluZ0JvdHRvbiAtIHNlY29uZGFyeVBhZGRpbmdUb3AgLSBzZWNvbmRhcnlQYWRkaW5nQm90dG9tO1xuXG4gICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJbml0IGFzaWRlIG1lbnVcbiAgICBhc2lkZU1lbnUgPSBuZXcgS1RNZW51KCdhc2lkZV9tZW51Jywge1xuICAgICAgLy8gdmVydGljYWwgc2Nyb2xsXG4gICAgICBzY3JvbGw6IHNjcm9sbCxcblxuICAgICAgLy8gc3VibWVudSBzZXR1cFxuICAgICAgc3VibWVudToge1xuICAgICAgICBkZXNrdG9wOiB7XG4gICAgICAgICAgLy8gYnkgZGVmYXVsdCB0aGUgbWVudSBtb2RlIHNldCB0byBhY2NvcmRpb24gaW4gZGVza3RvcCBtb2RlXG4gICAgICAgICAgZGVmYXVsdDogbWVudURlc2t0b3BNb2RlLFxuICAgICAgICAgIC8vIHdoZW5ldmVyIGJvZHkgaGFzIHRoaXMgY2xhc3Mgc3dpdGNoIHRoZSBtZW51IG1vZGUgdG8gZHJvcGRvd25cbiAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgYm9keTogJ2FzaWRlLS1taW5pbWl6ZScsXG4gICAgICAgICAgICBtb2RlOiAnZHJvcGRvd24nXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0YWJsZXQ6ICdhY2NvcmRpb24nLCAvLyBtZW51IHNldCB0byBhY2NvcmRpb24gaW4gdGFibGV0IG1vZGVcbiAgICAgICAgbW9iaWxlOiAnYWNjb3JkaW9uJyAvLyBtZW51IHNldCB0byBhY2NvcmRpb24gaW4gbW9iaWxlIG1vZGVcbiAgICAgIH0sXG5cbiAgICAgIC8vYWNjb3JkaW9uIHNldHVwXG4gICAgICBhY2NvcmRpb246IHtcbiAgICAgICAgZXhwYW5kQWxsOiBmYWxzZSAvLyBhbGxvdyBoYXZpbmcgbXVsdGlwbGUgZXhwYW5kZWQgYWNjb3JkaW9ucyBpbiB0aGUgbWVudVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLy8gU2Nyb2xsdG9wXG4gIGNvbnN0IGluaXRTY3JvbGx0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzY3JvbGx0b3AgPSBuZXcgS1RTY3JvbGx0b3AoJ3Njcm9sbHRvcCcsIHtcbiAgICAgIG9mZnNldDogMzAwLFxuICAgICAgc3BlZWQ6IDYwMFxuICAgIH0pO1xuICB9XG5cbiAgLy8gSW5pdCBwYWdlIHN0aWNreSBwb3J0bGV0XG4gIGNvbnN0IGluaXRQYWdlU3RpY2t5UG9ydGxldCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGFzaWRlUHJpbWFyeVdpZHRoID0gNzA7XG4gICAgY29uc3QgYXNpZGVTZWNvbmRhcnlXaWR0aCA9IDI1MDtcblxuICAgIHJldHVybiBuZXcgS1RQb3J0bGV0KCdwYWdlX3BvcnRsZXQnLCB7XG4gICAgICBzdGlja3k6IHtcbiAgICAgICAgb2Zmc2V0OiA4MCxcbiAgICAgICAgekluZGV4OiA5MCxcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICB0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IHBvcyA9IDA7XG5cbiAgICAgICAgICAgIGlmIChLVFV0aWwuaXNJblJlc3BvbnNpdmVSYW5nZSgnZGVza3RvcCcpKSB7XG4gICAgICAgICAgICAgIGlmIChLVFV0aWwuaGFzQ2xhc3MoYm9keSwgJ3N1YmhlYWRlci0tZml4ZWQnKSkge1xuICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIHBhcnNlSW50KEtUVXRpbC5jc3MoIEtUVXRpbC5nZXQoJ3N1YmhlYWRlcicpLCAnaGVpZ2h0JykgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKEtUVXRpbC5oYXNDbGFzcyhib2R5LCAnaGVhZGVyLW1vYmlsZS0tZml4ZWQnKSkge1xuICAgICAgICAgICAgICAgIHBvcyA9IHBvcyArIHBhcnNlSW50KEtUVXRpbC5jc3MoIEtUVXRpbC5nZXQoJ2hlYWRlcl9tb2JpbGUnKSwgJ2hlaWdodCcpICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICB9LFxuICAgICAgICAgIGxlZnQ6IGZ1bmN0aW9uKHBvcnRsZXQpIHtcbiAgICAgICAgICAgIGxldCBwb3JsZXRFbCA9IHBvcnRsZXQuZ2V0U2VsZigpO1xuXG4gICAgICAgICAgICByZXR1cm4gS1RVdGlsLm9mZnNldChwb3JsZXRFbCkubGVmdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJpZ2h0OiBmdW5jdGlvbihwb3J0bGV0KSB7XG4gICAgICAgICAgICBsZXQgcG9ybGV0RWwgPSBwb3J0bGV0LmdldFNlbGYoKTtcblxuICAgICAgICAgICAgbGV0IHBvcnRsZXRXaWR0aCA9IHBhcnNlSW50KEtUVXRpbC5jc3MocG9ybGV0RWwsICd3aWR0aCcpKTtcbiAgICAgICAgICAgIGxldCBib2R5V2lkdGggPSBwYXJzZUludChLVFV0aWwuY3NzKEtUVXRpbC5nZXQoJ2JvZHknKSwgJ3dpZHRoJykpO1xuICAgICAgICAgICAgbGV0IHBvcnRsZXRPZmZzZXRMZWZ0ID0gS1RVdGlsLm9mZnNldChwb3JsZXRFbCkubGVmdDtcblxuICAgICAgICAgICAgcmV0dXJuIGJvZHlXaWR0aCAtIHBvcnRsZXRXaWR0aCAtIHBvcnRsZXRPZmZzZXRMZWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgIGJvZHkgPSBLVFV0aWwuZ2V0QnlUYWcoJ2JvZHknKTtcblxuICAgICAgdGhpcy5pbml0QXNpZGUoKTtcbiAgICAgIHRoaXMuaW5pdFNjcm9sbHRvcCgpO1xuICAgICAgdGhpcy5pbml0UGFnZVN0aWNreVBvcnRsZXQoKTtcblxuICAgICAgLy8gTm9uIGZ1bmN0aW9uYWwgbGlua3Mgbm90aWNlKGNhbiBiZSByZW1vdmVkIGluIHByb2R1Y3Rpb24pXG4gICAgICAkKCcjYXNpZGVfbWVudSwgI2hlYWRlcl9tZW51Jykub24oJ2NsaWNrJywgJy5tZW51X19saW5rW2hyZWY9XCIjXCJdOm5vdCgubWVudV9fdG9nZ2xlKScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgTm90aWZsaXguTm90aWZ5LkZhaWx1cmUoXCJZb3UgaGF2ZSBjbGlja2VkIG9uIGEgbm9uLWZ1bmN0aW9uYWwgZHVtbXkgbGluayFcIik7XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIGluaXRBc2lkZTogZnVuY3Rpb24oKSB7XG4gICAgICBpbml0QXNpZGUoKTtcbiAgICB9LFxuXG4gICAgaW5pdFNjcm9sbHRvcDogZnVuY3Rpb24oKSB7XG4gICAgICBpbml0U2Nyb2xsdG9wKCk7XG4gICAgfSxcblxuICAgIGluaXRQYWdlU3RpY2t5UG9ydGxldDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIUtUVXRpbC5nZXQoJ3BhZ2VfcG9ydGxldCcpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGFnZVN0aWNreVBvcnRsZXQgPSBpbml0UGFnZVN0aWNreVBvcnRsZXQoKTtcbiAgICAgIHBhZ2VTdGlja3lQb3J0bGV0LmluaXRTdGlja3koKTtcblxuICAgICAgS1RVdGlsLmFkZFJlc2l6ZUhhbmRsZXIoZnVuY3Rpb24oKXtcbiAgICAgICAgcGFnZVN0aWNreVBvcnRsZXQudXBkYXRlU3RpY2t5KCk7XG4gICAgICB9KTtcblxuICAgICAgaW5pdFBhZ2VTdGlja3lQb3J0bGV0KCk7XG4gICAgfSxcblxuICAgIGdldEFzaWRlTWVudTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXNpZGVNZW51O1xuICAgIH0sXG5cbiAgICBjbG9zZU1vYmlsZUFzaWRlTWVudU9mZmNhbnZhczogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoS1RVdGlsLmlzTW9iaWxlRGV2aWNlKCkpIHtcbiAgICAgICAgYXNpZGVNZW51T2ZmY2FudmFzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY2xvc2VNb2JpbGVIZWFkZXJNZW51T2ZmY2FudmFzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChLVFV0aWwuaXNNb2JpbGVEZXZpY2UoKSkge1xuICAgICAgICBoZWFkZXJNZW51T2ZmY2FudmFzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59KCk7XG5cbi8vIHdlYnBhY2sgc3VwcG9ydFxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gS1RMYXlvdXQ7XG59XG5cbi8vIEluaXQgb24gcGFnZSBsb2FkIGNvbXBsZXRlZFxuS1RVdGlsLnJlYWR5KGZ1bmN0aW9uKCkge1xuICBLVExheW91dC5pbml0KCk7XG59KTtcbiIsIi8vIENsYXNzIGRlZmluaXRpb25cbnZhciBLVExpYiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdE1pbmlDaGFydDogZnVuY3Rpb24oc3JjLCBkYXRhLCBjb2xvciwgYm9yZGVyLCBmaWxsLCB0b29sdGlwKSB7XG4gICAgICAgICAgICBpZiAoc3JjLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gc2V0IGRlZmF1bHQgdmFsdWVzXG4gICAgICAgICAgICBmaWxsID0gKHR5cGVvZiBmaWxsICE9PSAndW5kZWZpbmVkJykgPyBmaWxsIDogZmFsc2U7XG4gICAgICAgICAgICB0b29sdGlwID0gKHR5cGVvZiB0b29sdGlwICE9PSAndW5kZWZpbmVkJykgPyB0b29sdGlwIDogZmFsc2U7XG5cbiAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCJdLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGJvcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50SG92ZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludEhvdmVyQm9yZGVyV2lkdGg6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludEJhY2tncm91bmRDb2xvcjogQ2hhcnQuaGVscGVycy5jb2xvcignIzAwMDAwMCcpLmFscGhhKDApLnJnYlN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCb3JkZXJDb2xvcjogQ2hhcnQuaGVscGVycy5jb2xvcignIzAwMDAwMCcpLmFscGhhKDApLnJnYlN0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRIb3ZlckJhY2tncm91bmRDb2xvcjogS1RBcHAuZ2V0U3RhdGVDb2xvcignYnJhbmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50SG92ZXJCb3JkZXJDb2xvcjogQ2hhcnQuaGVscGVycy5jb2xvcignIzAwMDAwMCcpLmFscGhhKDAuMSkucmdiU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsOiBmaWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcHM6ICh0b29sdGlwID8ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGludGVyc2VjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlOiAnbmVhcmVzdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5U3BhY2luZzogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlQYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHhQYWRkaW5nOiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlDb2xvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBLVEFwcC5nZXRTdGF0ZUNvbG9yKCdicmFuZCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVGb250Q29sb3I6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcm5lclJhZGl1czogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvb3RlclNwYWNpbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZVNwYWNpbmc6IDBcbiAgICAgICAgICAgICAgICAgICAgfSA6IGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZVBvaW50U3R5bGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogJ2luZGV4J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVMYWJlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICdNb250aCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHlBeGVzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyaWRMaW5lczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVMYWJlbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICdNb250aCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogMC41XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDRcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogNixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQ2hhcnQoc3JjLCBjb25maWcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRNZWRpdW1DaGFydDogZnVuY3Rpb24oc3JjLCBkYXRhLCBtYXgsIGNvbG9yLCBib3JkZXIpIHtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3JjKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGJvcmRlciA9IGJvcmRlciA/IGJvcmRlciA6IDI7XG5cbiAgICAgICAgICAgIC8vIE1haW4gY2hhcnRcbiAgICAgICAgICAgIHZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzcmMpLmdldENvbnRleHQoXCIyZFwiKTtcblxuICAgICAgICAgICAgdmFyIGdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsIDAsIDAsIDEwMCk7XG4gICAgICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMCwgQ2hhcnQuaGVscGVycy5jb2xvcihjb2xvcikuYWxwaGEoMC4zKS5yZ2JTdHJpbmcoKSk7XG4gICAgICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMSwgQ2hhcnQuaGVscGVycy5jb2xvcihjb2xvcikuYWxwaGEoMCkucmdiU3RyaW5nKCkpO1xuXG4gICAgICAgICAgICB2YXIgbWFpbkNvbmZpZyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZScsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlciddLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnT3JkZXJzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBib3JkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGdyYWRpZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRCYWNrZ3JvdW5kQ29sb3I6IEtUQXBwLmdldFN0YXRlQ29sb3IoJ2JyYW5kJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogJ1N0YWNrZWQgQXJlYSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdG9vbHRpcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogJ25lYXJlc3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keVNwYWNpbmc6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICB5UGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICB4UGFkZGluZzogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5Q29sb3JzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogS1RBcHAuZ2V0U3RhdGVDb2xvcignYnJhbmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlRm9udENvbG9yOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JuZXJSYWRpdXM6IDQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb290ZXJTcGFjaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGVTcGFjaW5nOiAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VQb2ludFN0eWxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogJ2luZGV4J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHhBeGVzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjYWxlTGFiZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnTW9udGgnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB5QXhlczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZUxhYmVsOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFN0cmluZzogJ1ZhbHVlJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2VlZjJmOScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdCb3JkZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRHcmlkTGluZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYXdUaWNrczogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJSYWRpdXM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJCb3JkZXJXaWR0aDogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBjaGFydCA9IG5ldyBDaGFydChjdHgsIG1haW5Db25maWcpO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgY2hhcnQgb24gd2luZG93IHJlc2l6ZVxuICAgICAgICAgICAgS1RVdGlsLmFkZFJlc2l6ZUhhbmRsZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KCk7XG5cbi8vIHdlYnBhY2sgc3VwcG9ydFxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBLVExpYjtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgS1RPZmZjYW52YXNQYW5lbCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBub3RpZmljYXRpb25QYW5lbCA9IEtUVXRpbC5nZXQoJ29mZmNhbnZhc190b29sYmFyX25vdGlmaWNhdGlvbnMnKTtcbiAgICB2YXIgcXVpY2tBY3Rpb25zUGFuZWwgPSBLVFV0aWwuZ2V0KCdvZmZjYW52YXNfdG9vbGJhcl9xdWlja19hY3Rpb25zJyk7XG4gICAgdmFyIHByb2ZpbGVQYW5lbCA9IEtUVXRpbC5nZXQoJ29mZmNhbnZhc190b29sYmFyX3Byb2ZpbGUnKTtcbiAgICB2YXIgc2VhcmNoUGFuZWwgPSBLVFV0aWwuZ2V0KCdvZmZjYW52YXNfdG9vbGJhcl9zZWFyY2gnKTtcblxuICAgIHZhciBpbml0Tm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGVhZCA9IEtUVXRpbC5maW5kKG5vdGlmaWNhdGlvblBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKG5vdGlmaWNhdGlvblBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9fYm9keScpO1xuXG4gICAgICAgIHZhciBvZmZjYW52YXMgPSBuZXcgS1RPZmZjYW52YXMobm90aWZpY2F0aW9uUGFuZWwsIHtcbiAgICAgICAgICAgIG92ZXJsYXk6IHRydWUsXG4gICAgICAgICAgICBiYXNlQ2xhc3M6ICdvZmZjYW52YXMtcGFuZWwnLFxuICAgICAgICAgICAgY2xvc2VCeTogJ29mZmNhbnZhc190b29sYmFyX25vdGlmaWNhdGlvbnNfY2xvc2UnLFxuICAgICAgICAgICAgdG9nZ2xlQnk6ICdvZmZjYW52YXNfdG9vbGJhcl9ub3RpZmljYXRpb25zX3RvZ2dsZXJfYnRuJ1xuICAgICAgICB9KTtcblxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChib2R5LCB7XG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZCwgJ21hcmdpbkJvdHRvbScpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKG5vdGlmaWNhdGlvblBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKG5vdGlmaWNhdGlvblBhbmVsLCAncGFkZGluZ0JvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0UXVjaWtBY3Rpb25zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWFkID0gS1RVdGlsLmZpbmQocXVpY2tBY3Rpb25zUGFuZWwsICcub2ZmY2FudmFzLXBhbmVsX19oZWFkJyk7XG4gICAgICAgIHZhciBib2R5ID0gS1RVdGlsLmZpbmQocXVpY2tBY3Rpb25zUGFuZWwsICcub2ZmY2FudmFzLXBhbmVsX19ib2R5Jyk7XG5cbiAgICAgICAgdmFyIG9mZmNhbnZhcyA9IG5ldyBLVE9mZmNhbnZhcyhxdWlja0FjdGlvbnNQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAnb2ZmY2FudmFzX3Rvb2xiYXJfcXVpY2tfYWN0aW9uc19jbG9zZScsXG4gICAgICAgICAgICB0b2dnbGVCeTogJ29mZmNhbnZhc190b29sYmFyX3F1aWNrX2FjdGlvbnNfdG9nZ2xlcl9idG4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGJvZHksIHtcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWQpKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkLCAnbWFyZ2luQm90dG9tJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocXVpY2tBY3Rpb25zUGFuZWwsICdwYWRkaW5nVG9wJykpO1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocXVpY2tBY3Rpb25zUGFuZWwsICdwYWRkaW5nQm90dG9tJykpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRQcm9maWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWFkID0gS1RVdGlsLmZpbmQocHJvZmlsZVBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKHByb2ZpbGVQYW5lbCwgJy5vZmZjYW52YXMtcGFuZWxfX2JvZHknKTtcblxuICAgICAgICB2YXIgb2ZmY2FudmFzID0gbmV3IEtUT2ZmY2FudmFzKHByb2ZpbGVQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAnb2ZmY2FudmFzX3Rvb2xiYXJfcHJvZmlsZV9jbG9zZScsXG4gICAgICAgICAgICB0b2dnbGVCeTogJ29mZmNhbnZhc190b29sYmFyX3Byb2ZpbGVfdG9nZ2xlcl9idG4nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIEtUVXRpbC5zY3JvbGxJbml0KGJvZHksIHtcbiAgICAgICAgICAgIGRpc2FibGVGb3JNb2JpbGU6IHRydWUsXG4gICAgICAgICAgICByZXNldEhlaWdodE9uRGVzdHJveTogdHJ1ZSxcbiAgICAgICAgICAgIGhhbmRsZVdpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGhlaWdodDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaGVhZCkge1xuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KGhlYWQpKTtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhoZWFkLCAnbWFyZ2luQm90dG9tJykpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MocHJvZmlsZVBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHByb2ZpbGVQYW5lbCwgJ3BhZGRpbmdCb3R0b20nKSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaGVhZCA9IEtUVXRpbC5maW5kKHNlYXJjaFBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9faGVhZCcpO1xuICAgICAgICB2YXIgYm9keSA9IEtUVXRpbC5maW5kKHNlYXJjaFBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9fYm9keScpO1xuICAgICAgICB2YXIgc2VhcmNoID0gS1RVdGlsLmdldCgncXVpY2tfc2VhcmNoX29mZmNhbnZhcycpO1xuICAgICAgICB2YXIgZm9ybSA9IEtUVXRpbC5maW5kKHNlYXJjaCwgJy5xdWljay1zZWFyY2hfX2Zvcm0nKTtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBLVFV0aWwuZmluZChzZWFyY2gsICcucXVpY2stc2VhcmNoX193cmFwcGVyJyk7XG5cbiAgICAgICAgdmFyIG9mZmNhbnZhcyA9IG5ldyBLVE9mZmNhbnZhcyhzZWFyY2hQYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAnb2ZmY2FudmFzX3Rvb2xiYXJfc2VhcmNoX2Nsb3NlJyxcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAnb2ZmY2FudmFzX3Rvb2xiYXJfc2VhcmNoX3RvZ2dsZXJfYnRuJ1xuICAgICAgICB9KTtcblxuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdCh3cmFwcGVyLCB7XG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuZ2V0Vmlld1BvcnQoKS5oZWlnaHQpO1xuXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChmb3JtKSk7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmNzcyhmb3JtLCAnbWFyZ2luQm90dG9tJykpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGhlYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gaGVpZ2h0IC0gcGFyc2VJbnQoS1RVdGlsLmFjdHVhbEhlaWdodChoZWFkKSk7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KEtUVXRpbC5jc3MoaGVhZCwgJ21hcmdpbkJvdHRvbScpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHNlYXJjaFBhbmVsLCAncGFkZGluZ1RvcCcpKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChLVFV0aWwuY3NzKHNlYXJjaFBhbmVsLCAncGFkZGluZ0JvdHRvbScpKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5pdE5vdGlmaWNhdGlvbnMoKTtcbiAgICAgICAgICAgIGluaXRRdWNpa0FjdGlvbnMoKTtcbiAgICAgICAgICAgIGluaXRQcm9maWxlKCk7XG4gICAgICAgICAgICBpbml0U2VhcmNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xufSgpO1xuXG4vLyBJbml0IG9uIHBhZ2UgbG9hZCBjb21wbGV0ZWRcbktUVXRpbC5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBLVE9mZmNhbnZhc1BhbmVsLmluaXQoKTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBLVFF1aWNrUGFuZWwgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFuZWwgPSBLVFV0aWwuZ2V0KCdxdWlja19wYW5lbCcpO1xuICAgIHZhciBub3RpZmljYXRpb25QYW5lbCA9IEtUVXRpbC5nZXQoJ3F1aWNrX3BhbmVsX3RhYl9ub3RpZmljYXRpb25zJyk7XG4gICAgdmFyIGFjdGlvbnNQYW5lbCA9IEtUVXRpbC5nZXQoJ3F1aWNrX3BhbmVsX3RhYl9hY3Rpb25zJyk7XG4gICAgdmFyIHNldHRpbmdzUGFuZWwgPSBLVFV0aWwuZ2V0KCdxdWlja19wYW5lbF90YWJfc2V0dGluZ3MnKTtcblxuICAgIHZhciBnZXRDb250ZW50SGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBoZWlnaHQ7XG4gICAgICAgIHZhciBuYXYgPSBLVFV0aWwuZmluZChwYW5lbCwgJy5vZmZjYW52YXMtcGFuZWxfX25hdicpO1xuICAgICAgICB2YXIgY29udGVudCA9IEtUVXRpbC5maW5kKHBhbmVsLCAnLm9mZmNhbnZhcy1wYW5lbF9fYm9keScpO1xuXG4gICAgICAgIGhlaWdodCA9IHBhcnNlSW50KEtUVXRpbC5nZXRWaWV3UG9ydCgpLmhlaWdodCkgLVxuICAgICAgICAgICAgICAgICBwYXJzZUludChLVFV0aWwuYWN0dWFsSGVpZ2h0KG5hdikpIC1cbiAgICAgICAgICAgICAgICAgcGFyc2VJbnQoS1RVdGlsLmNzcyhuYXYsICdtYXJnaW4tYm90dG9tJykpIC1cbiAgICAgICAgICAgICAgICAgKDIgKiBwYXJzZUludChLVFV0aWwuY3NzKG5hdiwgJ3BhZGRpbmctdG9wJykpKSAtXG4gICAgICAgICAgICAgICAgIDEwO1xuXG4gICAgICAgIHJldHVybiBoZWlnaHQ7XG4gICAgfVxuXG4gICAgdmFyIGluaXRPZmZjYW52YXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG9mZmNhbnZhcyA9IG5ldyBLVE9mZmNhbnZhcyhwYW5lbCwge1xuICAgICAgICAgICAgb3ZlcmxheTogdHJ1ZSxcbiAgICAgICAgICAgIGJhc2VDbGFzczogJ29mZmNhbnZhcy1wYW5lbCcsXG4gICAgICAgICAgICBjbG9zZUJ5OiAncXVpY2tfcGFuZWxfY2xvc2VfYnRuJyxcbiAgICAgICAgICAgIHRvZ2dsZUJ5OiAncXVpY2tfcGFuZWxfdG9nZ2xlcl9idG4nXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0Tm90aWZpY2F0aW9ucyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBLVFV0aWwuc2Nyb2xsSW5pdChub3RpZmljYXRpb25QYW5lbCwge1xuICAgICAgICAgICAgZGlzYWJsZUZvck1vYmlsZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29udGVudEhlaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdEFjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoYWN0aW9uc1BhbmVsLCB7XG4gICAgICAgICAgICBkaXNhYmxlRm9yTW9iaWxlOiB0cnVlLFxuICAgICAgICAgICAgcmVzZXRIZWlnaHRPbkRlc3Ryb3k6IHRydWUsXG4gICAgICAgICAgICBoYW5kbGVXaW5kb3dSZXNpemU6IHRydWUsXG4gICAgICAgICAgICBoZWlnaHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRDb250ZW50SGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBpbml0U2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgS1RVdGlsLnNjcm9sbEluaXQoc2V0dGluZ3NQYW5lbCwge1xuICAgICAgICAgICAgZGlzYWJsZUZvck1vYmlsZTogdHJ1ZSxcbiAgICAgICAgICAgIHJlc2V0SGVpZ2h0T25EZXN0cm95OiB0cnVlLFxuICAgICAgICAgICAgaGFuZGxlV2luZG93UmVzaXplOiB0cnVlLFxuICAgICAgICAgICAgaGVpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0Q29udGVudEhlaWdodCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlUGVyZmVjdFNjcm9sbGJhcnMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgJChwYW5lbCkuZmluZCgnYVtkYXRhLXRvZ2dsZT1cInRhYlwiXScpLm9uKCdzaG93bi5icy50YWInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShub3RpZmljYXRpb25QYW5lbCk7XG4gICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKGFjdGlvbnNQYW5lbCk7XG4gICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKHNldHRpbmdzUGFuZWwpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGluaXRPZmZjYW52YXMoKTtcbiAgICAgICAgICAgIGluaXROb3RpZmljYXRpb25zKCk7XG4gICAgICAgICAgICBpbml0QWN0aW9ucygpO1xuICAgICAgICAgICAgaW5pdFNldHRpbmdzKCk7XG4gICAgICAgICAgICB1cGRhdGVQZXJmZWN0U2Nyb2xsYmFycygpO1xuICAgICAgICB9XG4gICAgfTtcbn0oKTtcblxuLy8gSW5pdCBvbiBwYWdlIGxvYWQgY29tcGxldGVkXG5LVFV0aWwucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgS1RRdWlja1BhbmVsLmluaXQoKTtcbn0pO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBLVFF1aWNrU2VhcmNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRhcmdldDtcbiAgICB2YXIgZm9ybTtcbiAgICB2YXIgaW5wdXQ7XG4gICAgdmFyIGNsb3NlSWNvbjtcbiAgICB2YXIgcmVzdWx0V3JhcHBlcjtcbiAgICB2YXIgcmVzdWx0RHJvcGRvd247XG4gICAgdmFyIHJlc3VsdERyb3Bkb3duVG9nZ2xlO1xuICAgIHZhciBpbnB1dEdyb3VwO1xuICAgIHZhciBxdWVyeSA9ICcnO1xuXG4gICAgdmFyIGhhc1Jlc3VsdCA9IGZhbHNlO1xuICAgIHZhciB0aW1lb3V0ID0gZmFsc2U7XG4gICAgdmFyIGlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgIHZhciByZXF1ZXN0VGltZW91dCA9IDIwMDsgLy8gYWpheCByZXF1ZXN0IGZpcmUgdGltZW91dCBpbiBtaWxsaXNlY29uZHNcbiAgICB2YXIgc3Bpbm5lckNsYXNzID0gJ3NwaW5uZXIgc3Bpbm5lci0taW5wdXQgc3Bpbm5lci0tc20gc3Bpbm5lci0tYnJhbmQgc3Bpbm5lci0tcmlnaHQnO1xuICAgIHZhciByZXN1bHRDbGFzcyA9ICdxdWljay1zZWFyY2gtLWhhcy1yZXN1bHQnO1xuICAgIHZhciBtaW5MZW5ndGggPSAyO1xuXG4gICAgdmFyIHNob3dQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICBLVFV0aWwuYWRkQ2xhc3MoaW5wdXRHcm91cCwgc3Bpbm5lckNsYXNzKTtcblxuICAgICAgICBpZiAoY2xvc2VJY29uKSB7XG4gICAgICAgICAgICBLVFV0aWwuaGlkZShjbG9zZUljb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGhpZGVQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgS1RVdGlsLnJlbW92ZUNsYXNzKGlucHV0R3JvdXAsIHNwaW5uZXJDbGFzcyk7XG5cbiAgICAgICAgaWYgKGNsb3NlSWNvbikge1xuICAgICAgICAgICAgaWYgKGlucHV0LnZhbHVlLmxlbmd0aCA8IG1pbkxlbmd0aCkge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5oaWRlKGNsb3NlSWNvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIEtUVXRpbC5zaG93KGNsb3NlSWNvbiwgJ2ZsZXgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaG93RHJvcGRvd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlc3VsdERyb3Bkb3duVG9nZ2xlICYmICFLVFV0aWwuaGFzQ2xhc3MocmVzdWx0RHJvcGRvd24sICdzaG93JykpIHtcbiAgICAgICAgICAgICQocmVzdWx0RHJvcGRvd25Ub2dnbGUpLmRyb3Bkb3duKCd0b2dnbGUnKTtcbiAgICAgICAgICAgICQocmVzdWx0RHJvcGRvd25Ub2dnbGUpLmRyb3Bkb3duKCd1cGRhdGUnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoaWRlRHJvcGRvd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHJlc3VsdERyb3Bkb3duVG9nZ2xlICYmIEtUVXRpbC5oYXNDbGFzcyhyZXN1bHREcm9wZG93biwgJ3Nob3cnKSkge1xuICAgICAgICAgICAgJChyZXN1bHREcm9wZG93blRvZ2dsZSkuZHJvcGRvd24oJ3RvZ2dsZScpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb2Nlc3NTZWFyY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGhhc1Jlc3VsdCAmJiBxdWVyeSA9PT0gaW5wdXQudmFsdWUpIHtcbiAgICAgICAgICAgIGhpZGVQcm9ncmVzcygpO1xuICAgICAgICAgICAgS1RVdGlsLmFkZENsYXNzKHRhcmdldCwgcmVzdWx0Q2xhc3MpO1xuICAgICAgICAgICAgc2hvd0Ryb3Bkb3duKCk7XG4gICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKHJlc3VsdFdyYXBwZXIpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBxdWVyeSA9IGlucHV0LnZhbHVlO1xuXG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0YXJnZXQsIHJlc3VsdENsYXNzKTtcbiAgICAgICAgc2hvd1Byb2dyZXNzKCk7XG4gICAgICAgIGhpZGVEcm9wZG93bigpO1xuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8va2VlbnRoZW1lcy5jb20va2Vlbi90b29scy9wcmV2aWV3L2luYy9hcGkvcXVpY2tfc2VhcmNoLnBocCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAnaHRtbCcsXG4gICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhc1Jlc3VsdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVQcm9ncmVzcygpO1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuYWRkQ2xhc3ModGFyZ2V0LCByZXN1bHRDbGFzcyk7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5zZXRIVE1MKHJlc3VsdFdyYXBwZXIsIHJlcyk7XG4gICAgICAgICAgICAgICAgICAgIHNob3dEcm9wZG93bigpO1xuICAgICAgICAgICAgICAgICAgICBLVFV0aWwuc2Nyb2xsVXBkYXRlKHJlc3VsdFdyYXBwZXIpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKHJlcykge1xuICAgICAgICAgICAgICAgICAgICBoYXNSZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGlkZVByb2dyZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIEtUVXRpbC5hZGRDbGFzcyh0YXJnZXQsIHJlc3VsdENsYXNzKTtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNldEhUTUwocmVzdWx0V3JhcHBlciwgJzxzcGFuIGNsYXNzPVwicXVpY2stc2VhcmNoX19tZXNzYWdlXCI+Q29ubmVjdGlvbiBlcnJvci4gUGxlYWUgdHJ5IGFnYWluIGxhdGVyLjwvZGl2PicpO1xuICAgICAgICAgICAgICAgICAgICBzaG93RHJvcGRvd24oKTtcbiAgICAgICAgICAgICAgICAgICAgS1RVdGlsLnNjcm9sbFVwZGF0ZShyZXN1bHRXcmFwcGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZUNhbmNlbCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaW5wdXQudmFsdWUgPSAnJztcbiAgICAgICAgcXVlcnkgPSAnJztcbiAgICAgICAgaGFzUmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIEtUVXRpbC5oaWRlKGNsb3NlSWNvbik7XG4gICAgICAgIEtUVXRpbC5yZW1vdmVDbGFzcyh0YXJnZXQsIHJlc3VsdENsYXNzKTtcbiAgICAgICAgaGlkZURyb3Bkb3duKCk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVNlYXJjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaW5wdXQudmFsdWUubGVuZ3RoIDwgbWluTGVuZ3RoKSB7XG4gICAgICAgICAgICBoaWRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgICAgIGhpZGVEcm9wZG93bigpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNQcm9jZXNzaW5nID09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHByb2Nlc3NTZWFyY2goKTtcbiAgICAgICAgfSwgcmVxdWVzdFRpbWVvdXQpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEluaXRcbiAgICAgICAgICAgIHRhcmdldCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICBmb3JtID0gS1RVdGlsLmZpbmQodGFyZ2V0LCAnLnF1aWNrLXNlYXJjaF9fZm9ybScpO1xuICAgICAgICAgICAgaW5wdXQgPSBLVFV0aWwuZmluZCh0YXJnZXQsICcucXVpY2stc2VhcmNoX19pbnB1dCcpO1xuICAgICAgICAgICAgY2xvc2VJY29uID0gS1RVdGlsLmZpbmQodGFyZ2V0LCAnLnF1aWNrLXNlYXJjaF9fY2xvc2UnKTtcbiAgICAgICAgICAgIHJlc3VsdFdyYXBwZXIgPSBLVFV0aWwuZmluZCh0YXJnZXQsICcucXVpY2stc2VhcmNoX193cmFwcGVyJyk7XG4gICAgICAgICAgICByZXN1bHREcm9wZG93biA9IEtUVXRpbC5maW5kKHRhcmdldCwgJy5kcm9wZG93bi1tZW51Jyk7XG4gICAgICAgICAgICByZXN1bHREcm9wZG93blRvZ2dsZSA9IEtUVXRpbC5maW5kKHRhcmdldCwgJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyk7XG4gICAgICAgICAgICBpbnB1dEdyb3VwID0gS1RVdGlsLmZpbmQodGFyZ2V0LCAnLmlucHV0LWdyb3VwJyk7XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCBpbnB1dCBrZXl1cCBoYW5kbGVyXG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoaW5wdXQsICdrZXl1cCcsIGhhbmRsZVNlYXJjaCk7XG4gICAgICAgICAgICBLVFV0aWwuYWRkRXZlbnQoaW5wdXQsICdmb2N1cycsIGhhbmRsZVNlYXJjaCk7XG5cbiAgICAgICAgICAgIC8vIFByZXZlbnQgZW50ZXIgY2xpY2tcbiAgICAgICAgICAgIGZvcm0ub25rZXlwcmVzcyA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS5jaGFyQ29kZSB8fCBlLmtleUNvZGUgfHwgMDtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09IDEzKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEtUVXRpbC5hZGRFdmVudChjbG9zZUljb24sICdjbGljaycsIGhhbmRsZUNhbmNlbCk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxudmFyIEtUUXVpY2tTZWFyY2hNb2JpbGUgPSBLVFF1aWNrU2VhcmNoO1xuXG4vLyBJbml0IG9uIHBhZ2UgbG9hZCBjb21wbGV0ZWRcbktUVXRpbC5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBpZiAoS1RVdGlsLmdldCgncXVpY2tfc2VhcmNoX2Ryb3Bkb3duJykpIHtcbiAgICAgICAgS1RRdWlja1NlYXJjaCgpLmluaXQoS1RVdGlsLmdldCgncXVpY2tfc2VhcmNoX2Ryb3Bkb3duJykpO1xuICAgIH1cblxuICAgIGlmIChLVFV0aWwuZ2V0KCdxdWlja19zZWFyY2hfaW5saW5lJykpIHtcbiAgICAgICAgS1RRdWlja1NlYXJjaE1vYmlsZSgpLmluaXQoS1RVdGlsLmdldCgncXVpY2tfc2VhcmNoX2lubGluZScpKTtcbiAgICB9XG5cbiAgICBpZiAoS1RVdGlsLmdldCgncXVpY2tfc2VhcmNoX29mZmNhbnZhcycpKSB7XG4gICAgICAgIEtUUXVpY2tTZWFyY2hNb2JpbGUoKS5pbml0KEtUVXRpbC5nZXQoJ3F1aWNrX3NlYXJjaF9vZmZjYW52YXMnKSk7XG4gICAgfVxufSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IFRvb2x0aXAgZnJvbSBcInRvb2x0aXAuanNcIjtcbmltcG9ydCBOb3RpZmxpeCBmcm9tIFwibm90aWZsaXgtcmVhY3RcIjtcblxuLyoqXG4gKiBEZWZpbmUgdGhlIG91dHB1dCBvZiB0aGlzIGZpbGUuIFRoZSBvdXRwdXQgb2YgQ1NTIGFuZCBKUyBmaWxlIHdpbGwgYmUgYXV0byBkZXRlY3RlZC5cbiAqXG4gKiBAb3V0cHV0IGpzL3RlbXBsYXRlXG4gKi9cblxuLy8gR2xvYmFsIExpYnJhaXJlXG5yZXF1aXJlKFwicGVyZmVjdC1zY3JvbGxiYXIvY3NzL3BlcmZlY3Qtc2Nyb2xsYmFyLmNzc1wiKTtcblxud2luZG93LndOdW1iID0gcmVxdWlyZShcIndudW1iXCIpO1xud2luZG93LlN0aWNreSA9IHJlcXVpcmUoXCJzdGlja3ktanNcIik7XG53aW5kb3cuUGVyZmVjdFNjcm9sbGJhciA9IHJlcXVpcmUoXCJwZXJmZWN0LXNjcm9sbGJhci9kaXN0L3BlcmZlY3Qtc2Nyb2xsYmFyXCIpO1xud2luZG93LkNvb2tpZXMgPSByZXF1aXJlKFwianMtY29va2llXCIpO1xud2luZG93LlRvb2x0aXAgPSBUb29sdGlwO1xud2luZG93Lk5vdGlmbGl4ID0gTm90aWZsaXg7XG5cbk5vdGlmbGl4Lk5vdGlmeS5Jbml0KHtcbiAgdGltZW91dDogNTAwMFxufSk7XG5cbi8vIFNob3BwZXJcInMgcGx1Z2luc1xud2luZG93LktUVXRpbCA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYmFzZS91dGlsXCIpO1xud2luZG93LktUQXBwID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9iYXNlL2FwcFwiKTtcbndpbmRvdy5LVEF2YXRhciA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYmFzZS9hdmF0YXJcIik7XG53aW5kb3cuS1REaWFsb2cgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2Jhc2UvZGlhbG9nXCIpO1xud2luZG93LktUSGVhZGVyID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9iYXNlL2hlYWRlclwiKTtcbndpbmRvdy5LVE1lbnUgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2Jhc2UvbWVudVwiKTtcbndpbmRvdy5LVE9mZmNhbnZhcyA9IHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvYmFzZS9vZmZjYW52YXNcIik7XG53aW5kb3cuS1RQb3J0bGV0ID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9iYXNlL3BvcnRsZXRcIik7XG53aW5kb3cuS1RTY3JvbGx0b3AgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL2Jhc2Uvc2Nyb2xsdG9wXCIpO1xud2luZG93LktUVG9nZ2xlID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9iYXNlL3RvZ2dsZVwiKTtcblxuLy8gTGF5b3V0IHNjcmlwdHNcbndpbmRvdy5LVExheW91dCA9IHJlcXVpcmUoXCIuL2xheW91dC9sYXlvdXRcIik7XG53aW5kb3cuS1RMaWIgPSByZXF1aXJlKFwiLi9sYXlvdXQvbGliXCIpO1xucmVxdWlyZShcIi4vbGF5b3V0L29mZmNhbnZhcy1wYW5lbFwiKTtcbnJlcXVpcmUoXCIuL2xheW91dC9xdWljay1wYW5lbFwiKTtcbnJlcXVpcmUoXCIuL2xheW91dC9xdWljay1zZWFyY2hcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9